-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Context_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v52_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v52_ce0 : OUT STD_LOGIC;
    v52_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v53_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v53_ce0 : OUT STD_LOGIC;
    v53_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v54_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v54_ce0 : OUT STD_LOGIC;
    v54_we0 : OUT STD_LOGIC;
    v54_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v54_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Context_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v55_fu_166_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v55_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln115_fu_180_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln115_reg_346 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln114_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v56_fu_190_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i6_fu_216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i6_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln122_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln122_reg_367 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln119_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln120_fu_260_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln120_reg_372 : STD_LOGIC_VECTOR (10 downto 0);
    signal j6_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j6_reg_380 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln125_fu_276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln125_reg_385 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln120_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v54_addr_1_reg_390 : STD_LOGIC_VECTOR (9 downto 0);
    signal k2_fu_296_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k2_reg_398 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln121_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v60_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal v61_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v62_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal v63_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal v55_0_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln115_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v56_0_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal i6_0_reg_119 : STD_LOGIC_VECTOR (3 downto 0);
    signal j6_0_reg_130 : STD_LOGIC_VECTOR (6 downto 0);
    signal k2_0_reg_141 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln116_1_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_1_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln122_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_1_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_56_fu_172_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln116_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln116_fu_200_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_fu_222_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_234_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln122_fu_230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_1_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_252_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln125_fu_280_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln122_2_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln122_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln123_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln123_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component Bert_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Bert_layer_fadd_3bkb_U22 : component Bert_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v63_reg_428,
        din1 => v62_reg_423,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    Bert_layer_fmul_3cud_U23 : component Bert_layer_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v60_reg_413,
        din1 => v61_reg_418,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i6_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i6_0_reg_119 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln120_fu_264_p2 = ap_const_lv1_1))) then 
                i6_0_reg_119 <= i6_reg_362;
            end if; 
        end if;
    end process;

    j6_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln121_fu_290_p2 = ap_const_lv1_1))) then 
                j6_0_reg_130 <= j6_reg_380;
            elsif (((icmp_ln119_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j6_0_reg_130 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k2_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k2_0_reg_141 <= k2_reg_398;
            elsif (((icmp_ln120_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k2_0_reg_141 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v55_0_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln115_fu_184_p2 = ap_const_lv1_1))) then 
                v55_0_reg_97 <= v55_reg_341;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v55_0_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v56_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v56_0_reg_108 <= ap_const_lv7_0;
            elsif (((icmp_ln115_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v56_0_reg_108 <= v56_fu_190_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i6_reg_362 <= i6_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j6_reg_380 <= j6_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k2_reg_398 <= k2_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln122_reg_367(8 downto 2) <= sub_ln122_fu_246_p2(8 downto 2);
                    zext_ln120_reg_372(9 downto 6) <= zext_ln120_fu_260_p1(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln120_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                v54_addr_1_reg_390 <= zext_ln125_1_fu_285_p1(10 - 1 downto 0);
                    zext_ln125_reg_385(6 downto 0) <= zext_ln125_fu_276_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v55_reg_341 <= v55_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v60_reg_413 <= v52_q0;
                v61_reg_418 <= v53_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                v62_reg_423 <= grp_fu_156_p2;
                v63_reg_428 <= v54_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                v64_reg_433 <= grp_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln115_reg_346(9 downto 6) <= zext_ln115_fu_180_p1(9 downto 6);
            end if;
        end if;
    end process;
    zext_ln115_reg_346(5 downto 0) <= "000000";
    zext_ln115_reg_346(10) <= '0';
    sub_ln122_reg_367(1 downto 0) <= "00";
    zext_ln120_reg_372(5 downto 0) <= "000000";
    zext_ln120_reg_372(10) <= '0';
    zext_ln125_reg_385(10 downto 7) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln114_fu_160_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln119_fu_210_p2, ap_CS_fsm_state5, icmp_ln120_fu_264_p2, ap_CS_fsm_state6, icmp_ln121_fu_290_p2, icmp_ln115_fu_184_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln114_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln115_fu_184_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln119_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln120_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln121_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln116_fu_200_p2 <= std_logic_vector(unsigned(zext_ln115_reg_346) + unsigned(zext_ln116_fu_196_p1));
    add_ln122_fu_306_p2 <= std_logic_vector(unsigned(zext_ln122_2_fu_302_p1) + unsigned(sub_ln122_reg_367));
    add_ln123_fu_328_p2 <= std_logic_vector(unsigned(zext_ln125_reg_385) + unsigned(zext_ln123_fu_324_p1));
    add_ln125_fu_280_p2 <= std_logic_vector(unsigned(zext_ln120_reg_372) + unsigned(zext_ln125_fu_276_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln119_fu_210_p2)
    begin
        if ((((icmp_ln119_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln119_fu_210_p2)
    begin
        if (((icmp_ln119_fu_210_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i6_fu_216_p2 <= std_logic_vector(unsigned(i6_0_reg_119) + unsigned(ap_const_lv4_1));
    icmp_ln114_fu_160_p2 <= "1" when (v55_0_reg_97 = ap_const_lv4_C) else "0";
    icmp_ln115_fu_184_p2 <= "1" when (v56_0_reg_108 = ap_const_lv7_40) else "0";
    icmp_ln119_fu_210_p2 <= "1" when (i6_0_reg_119 = ap_const_lv4_C) else "0";
    icmp_ln120_fu_264_p2 <= "1" when (j6_0_reg_130 = ap_const_lv7_40) else "0";
    icmp_ln121_fu_290_p2 <= "1" when (k2_0_reg_141 = ap_const_lv4_C) else "0";
    j6_fu_270_p2 <= std_logic_vector(unsigned(j6_0_reg_130) + unsigned(ap_const_lv7_1));
    k2_fu_296_p2 <= std_logic_vector(unsigned(k2_0_reg_141) + unsigned(ap_const_lv4_1));
        sext_ln122_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln122_fu_306_p2),64));

    sub_ln122_fu_246_p2 <= std_logic_vector(unsigned(zext_ln122_fu_230_p1) - unsigned(zext_ln122_1_fu_242_p1));
    tmp_56_fu_172_p3 <= (v55_0_reg_97 & ap_const_lv6_0);
    tmp_57_fu_222_p3 <= (i6_0_reg_119 & ap_const_lv4_0);
    tmp_58_fu_234_p3 <= (i6_0_reg_119 & ap_const_lv2_0);
    tmp_59_fu_252_p3 <= (i6_0_reg_119 & ap_const_lv6_0);
    tmp_60_fu_316_p3 <= (k2_0_reg_141 & ap_const_lv6_0);
    v52_address0 <= sext_ln122_fu_311_p1(8 - 1 downto 0);

    v52_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v52_ce0 <= ap_const_logic_1;
        else 
            v52_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v53_address0 <= zext_ln123_1_fu_333_p1(10 - 1 downto 0);

    v53_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v53_ce0 <= ap_const_logic_1;
        else 
            v53_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v54_address0_assign_proc : process(ap_CS_fsm_state3, v54_addr_1_reg_390, ap_CS_fsm_state17, zext_ln116_1_fu_205_p1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            v54_address0 <= v54_addr_1_reg_390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v54_address0 <= zext_ln116_1_fu_205_p1(10 - 1 downto 0);
        else 
            v54_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v54_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            v54_ce0 <= ap_const_logic_1;
        else 
            v54_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v54_d0_assign_proc : process(ap_CS_fsm_state3, v64_reg_433, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            v54_d0 <= v64_reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v54_d0 <= ap_const_lv32_0;
        else 
            v54_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v54_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln115_fu_184_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((icmp_ln115_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            v54_we0 <= ap_const_logic_1;
        else 
            v54_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v55_fu_166_p2 <= std_logic_vector(unsigned(v55_0_reg_97) + unsigned(ap_const_lv4_1));
    v56_fu_190_p2 <= std_logic_vector(unsigned(v56_0_reg_108) + unsigned(ap_const_lv7_1));
    zext_ln115_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_172_p3),11));
    zext_ln116_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_200_p2),64));
    zext_ln116_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v56_0_reg_108),11));
    zext_ln120_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_252_p3),11));
    zext_ln122_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_234_p3),9));
    zext_ln122_2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k2_0_reg_141),9));
    zext_ln122_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_222_p3),9));
    zext_ln123_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_328_p2),64));
    zext_ln123_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_316_p3),11));
    zext_ln125_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_fu_280_p2),64));
    zext_ln125_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_130),11));
end behav;
