// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Attention_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v19_address0,
        v19_ce0,
        v19_q0,
        v20_address0,
        v20_ce0,
        v20_q0,
        v21_address0,
        v21_ce0,
        v21_we0,
        v21_d0,
        v21_q0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v19_address0;
output   v19_ce0;
input  [31:0] v19_q0;
output  [9:0] v20_address0;
output   v20_ce0;
input  [31:0] v20_q0;
output  [7:0] v21_address0;
output   v21_ce0;
output   v21_we0;
output  [31:0] v21_d0;
input  [31:0] v21_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v19_ce0;
reg v20_ce0;
reg[7:0] v21_address0;
reg v21_ce0;
reg v21_we0;
reg[31:0] v21_d0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_192_p2;
reg   [31:0] reg_197;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
reg   [31:0] reg_203;
wire    ap_CS_fsm_state20;
wire   [3:0] v22_fu_215_p2;
reg   [3:0] v22_reg_476;
wire    ap_CS_fsm_state2;
wire   [8:0] sub_ln56_fu_245_p2;
reg   [8:0] sub_ln56_reg_481;
wire   [0:0] icmp_ln54_fu_209_p2;
wire   [3:0] v23_fu_257_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i2_fu_283_p2;
reg   [3:0] i2_reg_497;
wire    ap_CS_fsm_state4;
wire   [10:0] zext_ln65_fu_297_p1;
reg   [10:0] zext_ln65_reg_502;
wire   [0:0] icmp_ln59_fu_277_p2;
wire   [8:0] sub_ln65_fu_325_p2;
reg   [8:0] sub_ln65_reg_507;
wire   [3:0] j2_fu_337_p2;
reg   [3:0] j2_reg_515;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln65_3_fu_355_p1;
reg   [10:0] zext_ln65_3_reg_520;
wire   [0:0] icmp_ln60_fu_331_p2;
reg   [7:0] v21_addr_1_reg_525;
wire   [6:0] k1_fu_375_p2;
reg   [6:0] k1_reg_533;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln61_fu_369_p2;
reg   [31:0] v27_reg_548;
wire    ap_CS_fsm_state7;
reg   [31:0] v28_reg_553;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] v31_reg_558;
wire    ap_CS_fsm_state16;
wire   [3:0] i3_fu_411_p2;
reg   [3:0] i3_reg_566;
wire    ap_CS_fsm_state18;
wire   [8:0] sub_ln73_fu_441_p2;
reg   [8:0] sub_ln73_reg_571;
wire   [0:0] icmp_ln71_fu_405_p2;
wire   [3:0] j3_fu_453_p2;
reg   [3:0] j3_reg_579;
wire    ap_CS_fsm_state19;
reg   [7:0] v21_addr_2_reg_584;
wire   [0:0] icmp_ln72_fu_447_p2;
reg   [3:0] v22_0_reg_111;
wire   [0:0] icmp_ln55_fu_251_p2;
reg   [3:0] v23_0_reg_122;
reg   [3:0] i2_0_reg_133;
reg   [3:0] j2_0_reg_144;
reg   [6:0] k1_0_reg_155;
wire    ap_CS_fsm_state17;
reg   [3:0] i3_0_reg_166;
reg   [3:0] j3_0_reg_177;
wire    ap_CS_fsm_state25;
wire  signed [63:0] sext_ln56_fu_272_p1;
wire  signed [63:0] sext_ln65_fu_364_p1;
wire   [63:0] zext_ln62_1_fu_390_p1;
wire   [63:0] zext_ln63_1_fu_400_p1;
wire  signed [63:0] sext_ln73_fu_468_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
reg   [31:0] grp_fu_192_p0;
reg   [31:0] grp_fu_192_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_61_fu_221_p3;
wire   [5:0] tmp_62_fu_233_p3;
wire   [8:0] zext_ln56_fu_229_p1;
wire   [8:0] zext_ln56_1_fu_241_p1;
wire   [8:0] zext_ln56_2_fu_263_p1;
wire   [8:0] add_ln56_fu_267_p2;
wire   [9:0] tmp_63_fu_289_p3;
wire   [7:0] tmp_64_fu_301_p3;
wire   [5:0] tmp_65_fu_313_p3;
wire   [8:0] zext_ln65_1_fu_309_p1;
wire   [8:0] zext_ln65_2_fu_321_p1;
wire   [9:0] tmp_68_fu_347_p3;
wire   [8:0] zext_ln63_fu_343_p1;
wire   [8:0] add_ln65_fu_359_p2;
wire   [10:0] zext_ln62_fu_381_p1;
wire   [10:0] add_ln62_fu_385_p2;
wire   [10:0] add_ln63_fu_395_p2;
wire   [7:0] tmp_66_fu_417_p3;
wire   [5:0] tmp_67_fu_429_p3;
wire   [8:0] zext_ln73_fu_425_p1;
wire   [8:0] zext_ln73_1_fu_437_p1;
wire   [8:0] zext_ln73_2_fu_459_p1;
wire   [8:0] add_ln73_fu_463_p2;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_203),
    .din1(reg_197),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .din1(grp_fu_192_p1),
    .ce(1'b1),
    .dout(grp_fu_192_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_0_reg_133 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln60_fu_331_p2 == 1'd1))) begin
        i2_0_reg_133 <= i2_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln59_fu_277_p2 == 1'd1))) begin
        i3_0_reg_166 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln72_fu_447_p2 == 1'd1))) begin
        i3_0_reg_166 <= i3_reg_566;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln61_fu_369_p2 == 1'd1))) begin
        j2_0_reg_144 <= j2_reg_515;
    end else if (((icmp_ln59_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j2_0_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j3_0_reg_177 <= j3_reg_579;
    end else if (((icmp_ln71_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        j3_0_reg_177 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k1_0_reg_155 <= k1_reg_533;
    end else if (((icmp_ln60_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k1_0_reg_155 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln55_fu_251_p2 == 1'd1))) begin
        v22_0_reg_111 <= v22_reg_476;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v22_0_reg_111 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v23_0_reg_122 <= 4'd0;
    end else if (((icmp_ln55_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v23_0_reg_122 <= v23_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i2_reg_497 <= i2_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i3_reg_566 <= i3_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j2_reg_515 <= j2_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j3_reg_579 <= j3_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k1_reg_533 <= k1_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_197 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_203 <= v21_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln56_reg_481[8 : 2] <= sub_ln56_fu_245_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln65_reg_507[8 : 2] <= sub_ln65_fu_325_p2[8 : 2];
        zext_ln65_reg_502[9 : 6] <= zext_ln65_fu_297_p1[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        sub_ln73_reg_571[8 : 2] <= sub_ln73_fu_441_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v21_addr_1_reg_525 <= sext_ln65_fu_364_p1;
        zext_ln65_3_reg_520[9 : 6] <= zext_ln65_3_fu_355_p1[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_447_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        v21_addr_2_reg_584 <= sext_ln73_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v22_reg_476 <= v22_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v27_reg_548 <= v19_q0;
        v28_reg_553 <= v20_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v31_reg_558 <= grp_fu_188_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state18) & (icmp_ln71_fu_405_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln71_fu_405_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_192_p0 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_192_p0 = v27_reg_548;
    end else begin
        grp_fu_192_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_192_p1 = 32'd1040187392;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_192_p1 = v28_reg_553;
    end else begin
        grp_fu_192_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v19_ce0 = 1'b1;
    end else begin
        v19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v20_ce0 = 1'b1;
    end else begin
        v20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        v21_address0 = v21_addr_2_reg_584;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        v21_address0 = sext_ln73_fu_468_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        v21_address0 = v21_addr_1_reg_525;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v21_address0 = sext_ln56_fu_272_p1;
    end else begin
        v21_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state3))) begin
        v21_ce0 = 1'b1;
    end else begin
        v21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        v21_d0 = reg_197;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        v21_d0 = v31_reg_558;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v21_d0 = 32'd0;
    end else begin
        v21_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | ((icmp_ln55_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v21_we0 = 1'b1;
    end else begin
        v21_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln54_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln55_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln59_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln60_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln61_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln71_fu_405_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln72_fu_447_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_fu_267_p2 = (sub_ln56_reg_481 + zext_ln56_2_fu_263_p1);

assign add_ln62_fu_385_p2 = (zext_ln65_reg_502 + zext_ln62_fu_381_p1);

assign add_ln63_fu_395_p2 = (zext_ln65_3_reg_520 + zext_ln62_fu_381_p1);

assign add_ln65_fu_359_p2 = (zext_ln63_fu_343_p1 + sub_ln65_reg_507);

assign add_ln73_fu_463_p2 = (sub_ln73_reg_571 + zext_ln73_2_fu_459_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i2_fu_283_p2 = (i2_0_reg_133 + 4'd1);

assign i3_fu_411_p2 = (i3_0_reg_166 + 4'd1);

assign icmp_ln54_fu_209_p2 = ((v22_0_reg_111 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_251_p2 = ((v23_0_reg_122 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_277_p2 = ((i2_0_reg_133 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_331_p2 = ((j2_0_reg_144 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_369_p2 = ((k1_0_reg_155 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_405_p2 = ((i3_0_reg_166 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_447_p2 = ((j3_0_reg_177 == 4'd12) ? 1'b1 : 1'b0);

assign j2_fu_337_p2 = (j2_0_reg_144 + 4'd1);

assign j3_fu_453_p2 = (j3_0_reg_177 + 4'd1);

assign k1_fu_375_p2 = (k1_0_reg_155 + 7'd1);

assign sext_ln56_fu_272_p1 = $signed(add_ln56_fu_267_p2);

assign sext_ln65_fu_364_p1 = $signed(add_ln65_fu_359_p2);

assign sext_ln73_fu_468_p1 = $signed(add_ln73_fu_463_p2);

assign sub_ln56_fu_245_p2 = (zext_ln56_fu_229_p1 - zext_ln56_1_fu_241_p1);

assign sub_ln65_fu_325_p2 = (zext_ln65_1_fu_309_p1 - zext_ln65_2_fu_321_p1);

assign sub_ln73_fu_441_p2 = (zext_ln73_fu_425_p1 - zext_ln73_1_fu_437_p1);

assign tmp_61_fu_221_p3 = {{v22_0_reg_111}, {4'd0}};

assign tmp_62_fu_233_p3 = {{v22_0_reg_111}, {2'd0}};

assign tmp_63_fu_289_p3 = {{i2_0_reg_133}, {6'd0}};

assign tmp_64_fu_301_p3 = {{i2_0_reg_133}, {4'd0}};

assign tmp_65_fu_313_p3 = {{i2_0_reg_133}, {2'd0}};

assign tmp_66_fu_417_p3 = {{i3_0_reg_166}, {4'd0}};

assign tmp_67_fu_429_p3 = {{i3_0_reg_166}, {2'd0}};

assign tmp_68_fu_347_p3 = {{j2_0_reg_144}, {6'd0}};

assign v19_address0 = zext_ln62_1_fu_390_p1;

assign v20_address0 = zext_ln63_1_fu_400_p1;

assign v22_fu_215_p2 = (v22_0_reg_111 + 4'd1);

assign v23_fu_257_p2 = (v23_0_reg_122 + 4'd1);

assign zext_ln56_1_fu_241_p1 = tmp_62_fu_233_p3;

assign zext_ln56_2_fu_263_p1 = v23_0_reg_122;

assign zext_ln56_fu_229_p1 = tmp_61_fu_221_p3;

assign zext_ln62_1_fu_390_p1 = add_ln62_fu_385_p2;

assign zext_ln62_fu_381_p1 = k1_0_reg_155;

assign zext_ln63_1_fu_400_p1 = add_ln63_fu_395_p2;

assign zext_ln63_fu_343_p1 = j2_0_reg_144;

assign zext_ln65_1_fu_309_p1 = tmp_64_fu_301_p3;

assign zext_ln65_2_fu_321_p1 = tmp_65_fu_313_p3;

assign zext_ln65_3_fu_355_p1 = tmp_68_fu_347_p3;

assign zext_ln65_fu_297_p1 = tmp_63_fu_289_p3;

assign zext_ln73_1_fu_437_p1 = tmp_67_fu_429_p3;

assign zext_ln73_2_fu_459_p1 = j3_0_reg_177;

assign zext_ln73_fu_425_p1 = tmp_66_fu_417_p3;

always @ (posedge ap_clk) begin
    sub_ln56_reg_481[1:0] <= 2'b00;
    zext_ln65_reg_502[5:0] <= 6'b000000;
    zext_ln65_reg_502[10] <= 1'b0;
    sub_ln65_reg_507[1:0] <= 2'b00;
    zext_ln65_3_reg_520[5:0] <= 6'b000000;
    zext_ln65_3_reg_520[10] <= 1'b0;
    sub_ln73_reg_571[1:0] <= 2'b00;
end

endmodule //Attention_layer
