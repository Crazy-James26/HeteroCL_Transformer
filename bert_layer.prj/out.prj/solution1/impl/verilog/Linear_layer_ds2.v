// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Linear_layer_ds2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v171_address0,
        v171_ce0,
        v171_q0,
        v172_address0,
        v172_ce0,
        v172_q0,
        v173_address0,
        v173_ce0,
        v173_q0,
        v174_address0,
        v174_ce0,
        v174_we0,
        v174_d0,
        v174_q0
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] v171_address0;
output   v171_ce0;
input  [31:0] v171_q0;
output  [21:0] v172_address0;
output   v172_ce0;
input  [31:0] v172_q0;
output  [9:0] v173_address0;
output   v173_ce0;
input  [31:0] v173_q0;
output  [13:0] v174_address0;
output   v174_ce0;
output   v174_we0;
output  [31:0] v174_d0;
input  [31:0] v174_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v171_ce0;
reg v172_ce0;
reg v173_ce0;
reg[13:0] v174_address0;
reg v174_ce0;
reg v174_we0;
reg[31:0] v174_d0;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_219;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] reg_224;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state27;
wire   [3:0] v175_fu_235_p2;
reg   [3:0] v175_reg_532;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln313_fu_265_p2;
reg   [14:0] sub_ln313_reg_537;
wire   [0:0] icmp_ln311_fu_229_p2;
wire   [9:0] v176_fu_277_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i16_fu_303_p2;
reg   [3:0] i16_reg_553;
wire    ap_CS_fsm_state4;
wire   [16:0] sub_ln319_fu_337_p2;
reg   [16:0] sub_ln319_reg_558;
wire   [0:0] icmp_ln316_fu_297_p2;
wire   [14:0] sub_ln322_fu_355_p2;
reg   [14:0] sub_ln322_reg_563;
wire   [9:0] j15_fu_367_p2;
reg   [9:0] j15_reg_571;
wire    ap_CS_fsm_state5;
wire   [22:0] sub_ln320_fu_401_p2;
reg   [22:0] sub_ln320_reg_576;
wire   [0:0] icmp_ln317_fu_361_p2;
reg   [13:0] v174_addr_1_reg_581;
wire   [11:0] k4_fu_423_p2;
reg   [11:0] k4_reg_589;
wire    ap_CS_fsm_state6;
wire   [16:0] add_ln319_fu_437_p2;
reg   [16:0] add_ln319_reg_594;
wire   [0:0] icmp_ln318_fu_417_p2;
wire    ap_CS_fsm_state8;
reg   [31:0] v180_reg_609;
wire    ap_CS_fsm_state9;
reg   [31:0] v181_reg_614;
wire   [31:0] grp_fu_215_p2;
reg   [31:0] v182_reg_619;
wire   [3:0] i17_fu_462_p2;
reg   [3:0] i17_reg_627;
wire    ap_CS_fsm_state20;
wire   [14:0] sub_ln331_fu_492_p2;
reg   [14:0] sub_ln331_reg_632;
wire   [0:0] icmp_ln328_fu_456_p2;
wire   [9:0] j16_fu_504_p2;
reg   [9:0] j16_reg_640;
wire    ap_CS_fsm_state21;
reg   [13:0] v174_addr_2_reg_645;
wire   [0:0] icmp_ln329_fu_498_p2;
reg   [31:0] v187_reg_655;
reg   [3:0] v175_0_reg_134;
wire   [0:0] icmp_ln312_fu_271_p2;
reg   [9:0] v176_0_reg_145;
reg   [3:0] i16_0_reg_156;
reg   [9:0] j15_0_reg_167;
reg   [11:0] k4_0_reg_178;
wire    ap_CS_fsm_state19;
reg   [3:0] i17_0_reg_189;
reg   [9:0] j16_0_reg_200;
wire    ap_CS_fsm_state28;
wire  signed [63:0] sext_ln313_fu_292_p1;
wire  signed [63:0] sext_ln322_fu_412_p1;
wire  signed [63:0] sext_ln320_fu_447_p1;
wire  signed [63:0] sext_ln319_fu_452_p1;
wire  signed [63:0] sext_ln331_fu_524_p1;
wire   [63:0] zext_ln330_fu_510_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_211_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state10;
wire   [13:0] tmp_34_fu_241_p3;
wire   [11:0] tmp_35_fu_253_p3;
wire   [14:0] zext_ln313_fu_249_p1;
wire   [14:0] zext_ln313_1_fu_261_p1;
wire   [14:0] zext_ln313_2_fu_283_p1;
wire   [14:0] add_ln313_fu_287_p2;
wire   [15:0] tmp_36_fu_309_p3;
wire   [13:0] tmp_37_fu_321_p3;
wire   [16:0] zext_ln319_fu_317_p1;
wire   [16:0] zext_ln319_2_fu_333_p1;
wire   [11:0] tmp_38_fu_343_p3;
wire   [14:0] zext_ln319_1_fu_329_p1;
wire   [14:0] zext_ln322_fu_351_p1;
wire   [21:0] tmp_41_fu_377_p3;
wire   [19:0] tmp_42_fu_389_p3;
wire   [22:0] zext_ln320_1_fu_385_p1;
wire   [22:0] zext_ln320_2_fu_397_p1;
wire   [14:0] zext_ln320_fu_373_p1;
wire   [14:0] add_ln322_fu_407_p2;
wire   [16:0] zext_ln319_4_fu_433_p1;
wire   [22:0] zext_ln319_3_fu_429_p1;
wire   [22:0] add_ln320_fu_442_p2;
wire   [13:0] tmp_39_fu_468_p3;
wire   [11:0] tmp_40_fu_480_p3;
wire   [14:0] zext_ln331_fu_476_p1;
wire   [14:0] zext_ln331_1_fu_488_p1;
wire   [14:0] zext_ln331_2_fu_515_p1;
wire   [14:0] add_ln331_fu_519_p2;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_219),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v180_reg_609),
    .din1(v181_reg_614),
    .ce(1'b1),
    .dout(grp_fu_215_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln311_fu_229_p2 == 1'd1))) begin
        i16_0_reg_156 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln317_fu_361_p2 == 1'd1))) begin
        i16_0_reg_156 <= i16_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln316_fu_297_p2 == 1'd1))) begin
        i17_0_reg_189 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln329_fu_498_p2 == 1'd1))) begin
        i17_0_reg_189 <= i17_reg_627;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln318_fu_417_p2 == 1'd1))) begin
        j15_0_reg_167 <= j15_reg_571;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln316_fu_297_p2 == 1'd0))) begin
        j15_0_reg_167 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j16_0_reg_200 <= j16_reg_640;
    end else if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln328_fu_456_p2 == 1'd0))) begin
        j16_0_reg_200 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        k4_0_reg_178 <= k4_reg_589;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln317_fu_361_p2 == 1'd0))) begin
        k4_0_reg_178 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln312_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v175_0_reg_134 <= v175_reg_532;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v175_0_reg_134 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln311_fu_229_p2 == 1'd0))) begin
        v176_0_reg_145 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln312_fu_271_p2 == 1'd0))) begin
        v176_0_reg_145 <= v176_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln318_fu_417_p2 == 1'd0))) begin
        add_ln319_reg_594 <= add_ln319_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i16_reg_553 <= i16_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i17_reg_627 <= i17_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j15_reg_571 <= j15_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        j16_reg_640 <= j16_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k4_reg_589 <= k4_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_219 <= v174_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_224 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln311_fu_229_p2 == 1'd0))) begin
        sub_ln313_reg_537[14 : 8] <= sub_ln313_fu_265_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln316_fu_297_p2 == 1'd0))) begin
        sub_ln319_reg_558[16 : 10] <= sub_ln319_fu_337_p2[16 : 10];
        sub_ln322_reg_563[14 : 8] <= sub_ln322_fu_355_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln317_fu_361_p2 == 1'd0))) begin
        sub_ln320_reg_576[22 : 10] <= sub_ln320_fu_401_p2[22 : 10];
        v174_addr_1_reg_581 <= sext_ln322_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln328_fu_456_p2 == 1'd0))) begin
        sub_ln331_reg_632[14 : 8] <= sub_ln331_fu_492_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln329_fu_498_p2 == 1'd0))) begin
        v174_addr_2_reg_645 <= sext_ln331_fu_524_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v175_reg_532 <= v175_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v180_reg_609 <= v171_q0;
        v181_reg_614 <= v172_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        v182_reg_619 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v187_reg_655 <= v173_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state20) & (icmp_ln328_fu_456_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln328_fu_456_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_211_p1 = v187_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_211_p1 = v182_reg_619;
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v171_ce0 = 1'b1;
    end else begin
        v171_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        v172_ce0 = 1'b1;
    end else begin
        v172_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        v173_ce0 = 1'b1;
    end else begin
        v173_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        v174_address0 = v174_addr_2_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        v174_address0 = sext_ln331_fu_524_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state19))) begin
        v174_address0 = v174_addr_1_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v174_address0 = sext_ln313_fu_292_p1;
    end else begin
        v174_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3))) begin
        v174_ce0 = 1'b1;
    end else begin
        v174_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state19))) begin
        v174_d0 = reg_224;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v174_d0 = 32'd0;
    end else begin
        v174_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln312_fu_271_p2 == 1'd0)))) begin
        v174_we0 = 1'b1;
    end else begin
        v174_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln311_fu_229_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln312_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln316_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln317_fu_361_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln318_fu_417_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln328_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln329_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln313_fu_287_p2 = (sub_ln313_reg_537 + zext_ln313_2_fu_283_p1);

assign add_ln319_fu_437_p2 = (sub_ln319_reg_558 + zext_ln319_4_fu_433_p1);

assign add_ln320_fu_442_p2 = (sub_ln320_reg_576 + zext_ln319_3_fu_429_p1);

assign add_ln322_fu_407_p2 = (sub_ln322_reg_563 + zext_ln320_fu_373_p1);

assign add_ln331_fu_519_p2 = (sub_ln331_reg_632 + zext_ln331_2_fu_515_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i16_fu_303_p2 = (i16_0_reg_156 + 4'd1);

assign i17_fu_462_p2 = (i17_0_reg_189 + 4'd1);

assign icmp_ln311_fu_229_p2 = ((v175_0_reg_134 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln312_fu_271_p2 = ((v176_0_reg_145 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln316_fu_297_p2 = ((i16_0_reg_156 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln317_fu_361_p2 = ((j15_0_reg_167 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_417_p2 = ((k4_0_reg_178 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln328_fu_456_p2 = ((i17_0_reg_189 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_498_p2 = ((j16_0_reg_200 == 10'd768) ? 1'b1 : 1'b0);

assign j15_fu_367_p2 = (j15_0_reg_167 + 10'd1);

assign j16_fu_504_p2 = (j16_0_reg_200 + 10'd1);

assign k4_fu_423_p2 = (k4_0_reg_178 + 12'd1);

assign sext_ln313_fu_292_p1 = $signed(add_ln313_fu_287_p2);

assign sext_ln319_fu_452_p1 = $signed(add_ln319_reg_594);

assign sext_ln320_fu_447_p1 = $signed(add_ln320_fu_442_p2);

assign sext_ln322_fu_412_p1 = $signed(add_ln322_fu_407_p2);

assign sext_ln331_fu_524_p1 = $signed(add_ln331_fu_519_p2);

assign sub_ln313_fu_265_p2 = (zext_ln313_fu_249_p1 - zext_ln313_1_fu_261_p1);

assign sub_ln319_fu_337_p2 = (zext_ln319_fu_317_p1 - zext_ln319_2_fu_333_p1);

assign sub_ln320_fu_401_p2 = (zext_ln320_1_fu_385_p1 - zext_ln320_2_fu_397_p1);

assign sub_ln322_fu_355_p2 = (zext_ln319_1_fu_329_p1 - zext_ln322_fu_351_p1);

assign sub_ln331_fu_492_p2 = (zext_ln331_fu_476_p1 - zext_ln331_1_fu_488_p1);

assign tmp_34_fu_241_p3 = {{v175_0_reg_134}, {10'd0}};

assign tmp_35_fu_253_p3 = {{v175_0_reg_134}, {8'd0}};

assign tmp_36_fu_309_p3 = {{i16_0_reg_156}, {12'd0}};

assign tmp_37_fu_321_p3 = {{i16_0_reg_156}, {10'd0}};

assign tmp_38_fu_343_p3 = {{i16_0_reg_156}, {8'd0}};

assign tmp_39_fu_468_p3 = {{i17_0_reg_189}, {10'd0}};

assign tmp_40_fu_480_p3 = {{i17_0_reg_189}, {8'd0}};

assign tmp_41_fu_377_p3 = {{j15_0_reg_167}, {12'd0}};

assign tmp_42_fu_389_p3 = {{j15_0_reg_167}, {10'd0}};

assign v171_address0 = sext_ln319_fu_452_p1;

assign v172_address0 = sext_ln320_fu_447_p1;

assign v173_address0 = zext_ln330_fu_510_p1;

assign v175_fu_235_p2 = (v175_0_reg_134 + 4'd1);

assign v176_fu_277_p2 = (v176_0_reg_145 + 10'd1);

assign zext_ln313_1_fu_261_p1 = tmp_35_fu_253_p3;

assign zext_ln313_2_fu_283_p1 = v176_0_reg_145;

assign zext_ln313_fu_249_p1 = tmp_34_fu_241_p3;

assign zext_ln319_1_fu_329_p1 = tmp_37_fu_321_p3;

assign zext_ln319_2_fu_333_p1 = tmp_37_fu_321_p3;

assign zext_ln319_3_fu_429_p1 = k4_0_reg_178;

assign zext_ln319_4_fu_433_p1 = k4_0_reg_178;

assign zext_ln319_fu_317_p1 = tmp_36_fu_309_p3;

assign zext_ln320_1_fu_385_p1 = tmp_41_fu_377_p3;

assign zext_ln320_2_fu_397_p1 = tmp_42_fu_389_p3;

assign zext_ln320_fu_373_p1 = j15_0_reg_167;

assign zext_ln322_fu_351_p1 = tmp_38_fu_343_p3;

assign zext_ln330_fu_510_p1 = j16_0_reg_200;

assign zext_ln331_1_fu_488_p1 = tmp_40_fu_480_p3;

assign zext_ln331_2_fu_515_p1 = j16_0_reg_200;

assign zext_ln331_fu_476_p1 = tmp_39_fu_468_p3;

always @ (posedge ap_clk) begin
    sub_ln313_reg_537[7:0] <= 8'b00000000;
    sub_ln319_reg_558[9:0] <= 10'b0000000000;
    sub_ln322_reg_563[7:0] <= 8'b00000000;
    sub_ln320_reg_576[9:0] <= 10'b0000000000;
    sub_ln331_reg_632[7:0] <= 8'b00000000;
end

endmodule //Linear_layer_ds2
