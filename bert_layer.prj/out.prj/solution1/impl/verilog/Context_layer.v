// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Context_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v52_address0,
        v52_ce0,
        v52_q0,
        v53_address0,
        v53_ce0,
        v53_q0,
        v54_address0,
        v54_ce0,
        v54_we0,
        v54_d0,
        v54_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v52_address0;
output   v52_ce0;
input  [31:0] v52_q0;
output  [9:0] v53_address0;
output   v53_ce0;
input  [31:0] v53_q0;
output  [9:0] v54_address0;
output   v54_ce0;
output   v54_we0;
output  [31:0] v54_d0;
input  [31:0] v54_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v52_ce0;
reg v53_ce0;
reg[9:0] v54_address0;
reg v54_ce0;
reg v54_we0;
reg[31:0] v54_d0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] v55_fu_166_p2;
reg   [3:0] v55_reg_341;
wire    ap_CS_fsm_state2;
wire   [10:0] zext_ln115_fu_180_p1;
reg   [10:0] zext_ln115_reg_346;
wire   [0:0] icmp_ln114_fu_160_p2;
wire   [6:0] v56_fu_190_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i6_fu_216_p2;
reg   [3:0] i6_reg_362;
wire    ap_CS_fsm_state4;
wire   [8:0] sub_ln122_fu_246_p2;
reg   [8:0] sub_ln122_reg_367;
wire   [0:0] icmp_ln119_fu_210_p2;
wire   [10:0] zext_ln120_fu_260_p1;
reg   [10:0] zext_ln120_reg_372;
wire   [6:0] j6_fu_270_p2;
reg   [6:0] j6_reg_380;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln125_fu_276_p1;
reg   [10:0] zext_ln125_reg_385;
wire   [0:0] icmp_ln120_fu_264_p2;
reg   [9:0] v54_addr_1_reg_390;
wire   [3:0] k2_fu_296_p2;
reg   [3:0] k2_reg_398;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln121_fu_290_p2;
reg   [31:0] v60_reg_413;
wire    ap_CS_fsm_state7;
reg   [31:0] v61_reg_418;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] v62_reg_423;
wire    ap_CS_fsm_state11;
reg   [31:0] v63_reg_428;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] v64_reg_433;
wire    ap_CS_fsm_state16;
reg   [3:0] v55_0_reg_97;
wire   [0:0] icmp_ln115_fu_184_p2;
reg   [6:0] v56_0_reg_108;
reg   [3:0] i6_0_reg_119;
reg   [6:0] j6_0_reg_130;
reg   [3:0] k2_0_reg_141;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln116_1_fu_205_p1;
wire   [63:0] zext_ln125_1_fu_285_p1;
wire  signed [63:0] sext_ln122_fu_311_p1;
wire   [63:0] zext_ln123_1_fu_333_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state8;
wire   [9:0] tmp_56_fu_172_p3;
wire   [10:0] zext_ln116_fu_196_p1;
wire   [10:0] add_ln116_fu_200_p2;
wire   [7:0] tmp_57_fu_222_p3;
wire   [5:0] tmp_58_fu_234_p3;
wire   [8:0] zext_ln122_fu_230_p1;
wire   [8:0] zext_ln122_1_fu_242_p1;
wire   [9:0] tmp_59_fu_252_p3;
wire   [10:0] add_ln125_fu_280_p2;
wire   [8:0] zext_ln122_2_fu_302_p1;
wire   [8:0] add_ln122_fu_306_p2;
wire   [9:0] tmp_60_fu_316_p3;
wire   [10:0] zext_ln123_fu_324_p1;
wire   [10:0] add_ln123_fu_328_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v63_reg_428),
    .din1(v62_reg_423),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v60_reg_413),
    .din1(v61_reg_418),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i6_0_reg_119 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln120_fu_264_p2 == 1'd1))) begin
        i6_0_reg_119 <= i6_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln121_fu_290_p2 == 1'd1))) begin
        j6_0_reg_130 <= j6_reg_380;
    end else if (((icmp_ln119_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j6_0_reg_130 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k2_0_reg_141 <= k2_reg_398;
    end else if (((icmp_ln120_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k2_0_reg_141 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln115_fu_184_p2 == 1'd1))) begin
        v55_0_reg_97 <= v55_reg_341;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v55_0_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v56_0_reg_108 <= 7'd0;
    end else if (((icmp_ln115_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v56_0_reg_108 <= v56_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i6_reg_362 <= i6_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j6_reg_380 <= j6_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k2_reg_398 <= k2_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln122_reg_367[8 : 2] <= sub_ln122_fu_246_p2[8 : 2];
        zext_ln120_reg_372[9 : 6] <= zext_ln120_fu_260_p1[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v54_addr_1_reg_390 <= zext_ln125_1_fu_285_p1;
        zext_ln125_reg_385[6 : 0] <= zext_ln125_fu_276_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v55_reg_341 <= v55_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v60_reg_413 <= v52_q0;
        v61_reg_418 <= v53_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v62_reg_423 <= grp_fu_156_p2;
        v63_reg_428 <= v54_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v64_reg_433 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln115_reg_346[9 : 6] <= zext_ln115_fu_180_p1[9 : 6];
    end
end

always @ (*) begin
    if ((((icmp_ln119_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v52_ce0 = 1'b1;
    end else begin
        v52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v53_ce0 = 1'b1;
    end else begin
        v53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        v54_address0 = v54_addr_1_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v54_address0 = zext_ln116_1_fu_205_p1;
    end else begin
        v54_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        v54_ce0 = 1'b1;
    end else begin
        v54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        v54_d0 = v64_reg_433;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v54_d0 = 32'd0;
    end else begin
        v54_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((icmp_ln115_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v54_we0 = 1'b1;
    end else begin
        v54_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln114_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln115_fu_184_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln119_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln120_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln121_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln116_fu_200_p2 = (zext_ln115_reg_346 + zext_ln116_fu_196_p1);

assign add_ln122_fu_306_p2 = (zext_ln122_2_fu_302_p1 + sub_ln122_reg_367);

assign add_ln123_fu_328_p2 = (zext_ln125_reg_385 + zext_ln123_fu_324_p1);

assign add_ln125_fu_280_p2 = (zext_ln120_reg_372 + zext_ln125_fu_276_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i6_fu_216_p2 = (i6_0_reg_119 + 4'd1);

assign icmp_ln114_fu_160_p2 = ((v55_0_reg_97 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_184_p2 = ((v56_0_reg_108 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_210_p2 = ((i6_0_reg_119 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_264_p2 = ((j6_0_reg_130 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_290_p2 = ((k2_0_reg_141 == 4'd12) ? 1'b1 : 1'b0);

assign j6_fu_270_p2 = (j6_0_reg_130 + 7'd1);

assign k2_fu_296_p2 = (k2_0_reg_141 + 4'd1);

assign sext_ln122_fu_311_p1 = $signed(add_ln122_fu_306_p2);

assign sub_ln122_fu_246_p2 = (zext_ln122_fu_230_p1 - zext_ln122_1_fu_242_p1);

assign tmp_56_fu_172_p3 = {{v55_0_reg_97}, {6'd0}};

assign tmp_57_fu_222_p3 = {{i6_0_reg_119}, {4'd0}};

assign tmp_58_fu_234_p3 = {{i6_0_reg_119}, {2'd0}};

assign tmp_59_fu_252_p3 = {{i6_0_reg_119}, {6'd0}};

assign tmp_60_fu_316_p3 = {{k2_0_reg_141}, {6'd0}};

assign v52_address0 = sext_ln122_fu_311_p1;

assign v53_address0 = zext_ln123_1_fu_333_p1;

assign v55_fu_166_p2 = (v55_0_reg_97 + 4'd1);

assign v56_fu_190_p2 = (v56_0_reg_108 + 7'd1);

assign zext_ln115_fu_180_p1 = tmp_56_fu_172_p3;

assign zext_ln116_1_fu_205_p1 = add_ln116_fu_200_p2;

assign zext_ln116_fu_196_p1 = v56_0_reg_108;

assign zext_ln120_fu_260_p1 = tmp_59_fu_252_p3;

assign zext_ln122_1_fu_242_p1 = tmp_58_fu_234_p3;

assign zext_ln122_2_fu_302_p1 = k2_0_reg_141;

assign zext_ln122_fu_230_p1 = tmp_57_fu_222_p3;

assign zext_ln123_1_fu_333_p1 = add_ln123_fu_328_p2;

assign zext_ln123_fu_324_p1 = tmp_60_fu_316_p3;

assign zext_ln125_1_fu_285_p1 = add_ln125_fu_280_p2;

assign zext_ln125_fu_276_p1 = j6_0_reg_130;

always @ (posedge ap_clk) begin
    zext_ln115_reg_346[5:0] <= 6'b000000;
    zext_ln115_reg_346[10] <= 1'b0;
    sub_ln122_reg_367[1:0] <= 2'b00;
    zext_ln120_reg_372[5:0] <= 6'b000000;
    zext_ln120_reg_372[10] <= 1'b0;
    zext_ln125_reg_385[10:7] <= 4'b0000;
end

endmodule //Context_layer
