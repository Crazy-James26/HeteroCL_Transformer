-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity systolic_array is
port (
    v0_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v0_0_ce0 : OUT STD_LOGIC;
    v0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_0_we0 : OUT STD_LOGIC;
    v0_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v0_0_ce1 : OUT STD_LOGIC;
    v0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_0_we1 : OUT STD_LOGIC;
    v0_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v0_1_ce0 : OUT STD_LOGIC;
    v0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_1_we0 : OUT STD_LOGIC;
    v0_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v0_1_ce1 : OUT STD_LOGIC;
    v0_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_1_we1 : OUT STD_LOGIC;
    v1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v1_0_ce0 : OUT STD_LOGIC;
    v1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_0_we0 : OUT STD_LOGIC;
    v1_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v1_0_ce1 : OUT STD_LOGIC;
    v1_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_0_we1 : OUT STD_LOGIC;
    v1_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v1_1_ce0 : OUT STD_LOGIC;
    v1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_1_we0 : OUT STD_LOGIC;
    v1_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v1_1_ce1 : OUT STD_LOGIC;
    v1_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_1_we1 : OUT STD_LOGIC;
    v2_0_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_0_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    v2_0_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_0_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    v2_1_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_1_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    v2_1_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_1_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    v2_0_0_o_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    v2_0_1_o_ap_vld : OUT STD_LOGIC;
    v2_1_0_o_ap_vld : OUT STD_LOGIC;
    v2_1_1_o_ap_vld : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of systolic_array is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "systolic_array,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.336000,HLS_SYN_LAT=91,HLS_SYN_TPT=86,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=1964,HLS_SYN_LUT=4439,HLS_VERSION=2019_2_1}";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Loop_l_data_load_k_p_U0_ap_start : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_ap_done : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_ap_continue : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_ap_idle : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_ap_ready : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_v0_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_l_data_load_k_p_U0_v0_0_ce0 : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_A_fifo_0_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_data_load_k_p_U0_A_fifo_0_0_V_write : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_v0_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_l_data_load_k_p_U0_v0_1_ce0 : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_A_fifo_1_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_data_load_k_p_U0_A_fifo_1_0_V_write : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_v1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_l_data_load_k_p_U0_v1_0_ce0 : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_B_fifo_0_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_data_load_k_p_U0_B_fifo_0_0_V_write : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_v1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_l_data_load_k_p_U0_v1_1_ce0 : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_B_fifo_1_0_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_data_load_k_p_U0_B_fifo_1_0_V_write : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_start : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_done : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_0_V_read : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_0_V_read : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o_ap_vld : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_write : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_start : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_done : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_start_out : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_start_write : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_1_V_read : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_0_V_read : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o_ap_vld : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_write : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_write : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_start : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_done : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_0_V_read : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_1_V_read : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o_ap_vld : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_write : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_write : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_start : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_done : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_continue : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_idle : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_1_V_read : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_1_V_read : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o_ap_vld : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_write : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_write : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_ap_start : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_ap_done : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_ap_continue : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_ap_idle : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_ap_ready : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_A_fifo_0_2_V_read : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_A_fifo_1_2_V_read : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_B_fifo_0_2_V_read : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_B_fifo_1_2_V_read : STD_LOGIC;
    signal A_fifo_0_0_V_full_n : STD_LOGIC;
    signal A_fifo_0_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_0_0_V_empty_n : STD_LOGIC;
    signal A_fifo_1_0_V_full_n : STD_LOGIC;
    signal A_fifo_1_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_1_0_V_empty_n : STD_LOGIC;
    signal B_fifo_0_0_V_full_n : STD_LOGIC;
    signal B_fifo_0_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_0_0_V_empty_n : STD_LOGIC;
    signal B_fifo_1_0_V_full_n : STD_LOGIC;
    signal B_fifo_1_0_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_1_0_V_empty_n : STD_LOGIC;
    signal A_fifo_0_1_V_full_n : STD_LOGIC;
    signal A_fifo_0_1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_0_1_V_empty_n : STD_LOGIC;
    signal B_fifo_0_1_V_full_n : STD_LOGIC;
    signal B_fifo_0_1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_0_1_V_empty_n : STD_LOGIC;
    signal A_fifo_0_2_V_full_n : STD_LOGIC;
    signal A_fifo_0_2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_0_2_V_empty_n : STD_LOGIC;
    signal B_fifo_1_1_V_full_n : STD_LOGIC;
    signal B_fifo_1_1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_1_1_V_empty_n : STD_LOGIC;
    signal A_fifo_1_1_V_full_n : STD_LOGIC;
    signal A_fifo_1_1_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_1_1_V_empty_n : STD_LOGIC;
    signal B_fifo_0_2_V_full_n : STD_LOGIC;
    signal B_fifo_0_2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_0_2_V_empty_n : STD_LOGIC;
    signal A_fifo_1_2_V_full_n : STD_LOGIC;
    signal A_fifo_1_2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_fifo_1_2_V_empty_n : STD_LOGIC;
    signal B_fifo_1_2_V_full_n : STD_LOGIC;
    signal B_fifo_1_2_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fifo_1_2_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_l_data_load_k_p_U0_ap_ready : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_0_1_k2_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Loop_l_data_load_k_p_U0_start_full_n : STD_LOGIC;
    signal Loop_l_data_load_k_p_U0_start_write : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_start_full_n : STD_LOGIC;
    signal Loop_l_PE_0_0_k1_pro_U0_start_write : STD_LOGIC;
    signal start_for_Loop_l_data_drain_k5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_l_data_drain_k5_U0_full_n : STD_LOGIC;
    signal start_for_Loop_l_data_drain_k5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_l_data_drain_k5_U0_empty_n : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_start_full_n : STD_LOGIC;
    signal Loop_l_PE_1_0_k3_pro_U0_start_write : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_start_full_n : STD_LOGIC;
    signal Loop_l_PE_1_1_k4_pro_U0_start_write : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_start_full_n : STD_LOGIC;
    signal Loop_l_data_drain_k5_U0_start_write : STD_LOGIC;

    component Loop_l_data_load_k_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v0_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        v0_0_ce0 : OUT STD_LOGIC;
        v0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_0_V_full_n : IN STD_LOGIC;
        A_fifo_0_0_V_write : OUT STD_LOGIC;
        v0_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        v0_1_ce0 : OUT STD_LOGIC;
        v0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_0_V_full_n : IN STD_LOGIC;
        A_fifo_1_0_V_write : OUT STD_LOGIC;
        v1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        v1_0_ce0 : OUT STD_LOGIC;
        v1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_0_V_full_n : IN STD_LOGIC;
        B_fifo_0_0_V_write : OUT STD_LOGIC;
        v1_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        v1_1_ce0 : OUT STD_LOGIC;
        v1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_0_V_full_n : IN STD_LOGIC;
        B_fifo_1_0_V_write : OUT STD_LOGIC );
    end component;


    component Loop_l_PE_0_0_k1_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_fifo_0_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_0_V_empty_n : IN STD_LOGIC;
        A_fifo_0_0_V_read : OUT STD_LOGIC;
        B_fifo_0_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_0_V_empty_n : IN STD_LOGIC;
        B_fifo_0_0_V_read : OUT STD_LOGIC;
        v2_0_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        v2_0_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_0_0_o_ap_vld : OUT STD_LOGIC;
        A_fifo_0_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_1_V_full_n : IN STD_LOGIC;
        A_fifo_0_1_V_write : OUT STD_LOGIC;
        B_fifo_0_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_1_V_full_n : IN STD_LOGIC;
        B_fifo_0_1_V_write : OUT STD_LOGIC );
    end component;


    component Loop_l_PE_0_1_k2_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        A_fifo_0_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_1_V_empty_n : IN STD_LOGIC;
        A_fifo_0_1_V_read : OUT STD_LOGIC;
        B_fifo_1_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_0_V_empty_n : IN STD_LOGIC;
        B_fifo_1_0_V_read : OUT STD_LOGIC;
        v2_0_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        v2_0_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_0_1_o_ap_vld : OUT STD_LOGIC;
        A_fifo_0_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_2_V_full_n : IN STD_LOGIC;
        A_fifo_0_2_V_write : OUT STD_LOGIC;
        B_fifo_1_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_1_V_full_n : IN STD_LOGIC;
        B_fifo_1_1_V_write : OUT STD_LOGIC );
    end component;


    component Loop_l_PE_1_0_k3_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_fifo_1_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_0_V_empty_n : IN STD_LOGIC;
        A_fifo_1_0_V_read : OUT STD_LOGIC;
        B_fifo_0_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_1_V_empty_n : IN STD_LOGIC;
        B_fifo_0_1_V_read : OUT STD_LOGIC;
        v2_1_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        v2_1_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_1_0_o_ap_vld : OUT STD_LOGIC;
        A_fifo_1_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_1_V_full_n : IN STD_LOGIC;
        A_fifo_1_1_V_write : OUT STD_LOGIC;
        B_fifo_0_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_2_V_full_n : IN STD_LOGIC;
        B_fifo_0_2_V_write : OUT STD_LOGIC );
    end component;


    component Loop_l_PE_1_1_k4_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_fifo_1_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_1_V_empty_n : IN STD_LOGIC;
        A_fifo_1_1_V_read : OUT STD_LOGIC;
        B_fifo_1_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_1_V_empty_n : IN STD_LOGIC;
        B_fifo_1_1_V_read : OUT STD_LOGIC;
        v2_1_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        v2_1_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_1_1_o_ap_vld : OUT STD_LOGIC;
        A_fifo_1_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_2_V_full_n : IN STD_LOGIC;
        A_fifo_1_2_V_write : OUT STD_LOGIC;
        B_fifo_1_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_2_V_full_n : IN STD_LOGIC;
        B_fifo_1_2_V_write : OUT STD_LOGIC );
    end component;


    component Loop_l_data_drain_k5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_fifo_0_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_0_2_V_empty_n : IN STD_LOGIC;
        A_fifo_0_2_V_read : OUT STD_LOGIC;
        A_fifo_1_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_fifo_1_2_V_empty_n : IN STD_LOGIC;
        A_fifo_1_2_V_read : OUT STD_LOGIC;
        B_fifo_0_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_0_2_V_empty_n : IN STD_LOGIC;
        B_fifo_0_2_V_read : OUT STD_LOGIC;
        B_fifo_1_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_fifo_1_2_V_empty_n : IN STD_LOGIC;
        B_fifo_1_2_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_l_dEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_l_data_load_k_p_U0 : component Loop_l_data_load_k_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_data_load_k_p_U0_ap_start,
        ap_done => Loop_l_data_load_k_p_U0_ap_done,
        ap_continue => Loop_l_data_load_k_p_U0_ap_continue,
        ap_idle => Loop_l_data_load_k_p_U0_ap_idle,
        ap_ready => Loop_l_data_load_k_p_U0_ap_ready,
        v0_0_address0 => Loop_l_data_load_k_p_U0_v0_0_address0,
        v0_0_ce0 => Loop_l_data_load_k_p_U0_v0_0_ce0,
        v0_0_q0 => v0_0_q0,
        A_fifo_0_0_V_din => Loop_l_data_load_k_p_U0_A_fifo_0_0_V_din,
        A_fifo_0_0_V_full_n => A_fifo_0_0_V_full_n,
        A_fifo_0_0_V_write => Loop_l_data_load_k_p_U0_A_fifo_0_0_V_write,
        v0_1_address0 => Loop_l_data_load_k_p_U0_v0_1_address0,
        v0_1_ce0 => Loop_l_data_load_k_p_U0_v0_1_ce0,
        v0_1_q0 => v0_1_q0,
        A_fifo_1_0_V_din => Loop_l_data_load_k_p_U0_A_fifo_1_0_V_din,
        A_fifo_1_0_V_full_n => A_fifo_1_0_V_full_n,
        A_fifo_1_0_V_write => Loop_l_data_load_k_p_U0_A_fifo_1_0_V_write,
        v1_0_address0 => Loop_l_data_load_k_p_U0_v1_0_address0,
        v1_0_ce0 => Loop_l_data_load_k_p_U0_v1_0_ce0,
        v1_0_q0 => v1_0_q0,
        B_fifo_0_0_V_din => Loop_l_data_load_k_p_U0_B_fifo_0_0_V_din,
        B_fifo_0_0_V_full_n => B_fifo_0_0_V_full_n,
        B_fifo_0_0_V_write => Loop_l_data_load_k_p_U0_B_fifo_0_0_V_write,
        v1_1_address0 => Loop_l_data_load_k_p_U0_v1_1_address0,
        v1_1_ce0 => Loop_l_data_load_k_p_U0_v1_1_ce0,
        v1_1_q0 => v1_1_q0,
        B_fifo_1_0_V_din => Loop_l_data_load_k_p_U0_B_fifo_1_0_V_din,
        B_fifo_1_0_V_full_n => B_fifo_1_0_V_full_n,
        B_fifo_1_0_V_write => Loop_l_data_load_k_p_U0_B_fifo_1_0_V_write);

    Loop_l_PE_0_0_k1_pro_U0 : component Loop_l_PE_0_0_k1_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_PE_0_0_k1_pro_U0_ap_start,
        ap_done => Loop_l_PE_0_0_k1_pro_U0_ap_done,
        ap_continue => Loop_l_PE_0_0_k1_pro_U0_ap_continue,
        ap_idle => Loop_l_PE_0_0_k1_pro_U0_ap_idle,
        ap_ready => Loop_l_PE_0_0_k1_pro_U0_ap_ready,
        A_fifo_0_0_V_dout => A_fifo_0_0_V_dout,
        A_fifo_0_0_V_empty_n => A_fifo_0_0_V_empty_n,
        A_fifo_0_0_V_read => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_0_V_read,
        B_fifo_0_0_V_dout => B_fifo_0_0_V_dout,
        B_fifo_0_0_V_empty_n => B_fifo_0_0_V_empty_n,
        B_fifo_0_0_V_read => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_0_V_read,
        v2_0_0_i => v2_0_0_i,
        v2_0_0_o => Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o,
        v2_0_0_o_ap_vld => Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o_ap_vld,
        A_fifo_0_1_V_din => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_din,
        A_fifo_0_1_V_full_n => A_fifo_0_1_V_full_n,
        A_fifo_0_1_V_write => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_write,
        B_fifo_0_1_V_din => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_din,
        B_fifo_0_1_V_full_n => B_fifo_0_1_V_full_n,
        B_fifo_0_1_V_write => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_write);

    Loop_l_PE_0_1_k2_pro_U0 : component Loop_l_PE_0_1_k2_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_PE_0_1_k2_pro_U0_ap_start,
        start_full_n => start_for_Loop_l_data_drain_k5_U0_full_n,
        ap_done => Loop_l_PE_0_1_k2_pro_U0_ap_done,
        ap_continue => Loop_l_PE_0_1_k2_pro_U0_ap_continue,
        ap_idle => Loop_l_PE_0_1_k2_pro_U0_ap_idle,
        ap_ready => Loop_l_PE_0_1_k2_pro_U0_ap_ready,
        start_out => Loop_l_PE_0_1_k2_pro_U0_start_out,
        start_write => Loop_l_PE_0_1_k2_pro_U0_start_write,
        A_fifo_0_1_V_dout => A_fifo_0_1_V_dout,
        A_fifo_0_1_V_empty_n => A_fifo_0_1_V_empty_n,
        A_fifo_0_1_V_read => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_1_V_read,
        B_fifo_1_0_V_dout => B_fifo_1_0_V_dout,
        B_fifo_1_0_V_empty_n => B_fifo_1_0_V_empty_n,
        B_fifo_1_0_V_read => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_0_V_read,
        v2_0_1_i => v2_0_1_i,
        v2_0_1_o => Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o,
        v2_0_1_o_ap_vld => Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o_ap_vld,
        A_fifo_0_2_V_din => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_din,
        A_fifo_0_2_V_full_n => A_fifo_0_2_V_full_n,
        A_fifo_0_2_V_write => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_write,
        B_fifo_1_1_V_din => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_din,
        B_fifo_1_1_V_full_n => B_fifo_1_1_V_full_n,
        B_fifo_1_1_V_write => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_write);

    Loop_l_PE_1_0_k3_pro_U0 : component Loop_l_PE_1_0_k3_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_PE_1_0_k3_pro_U0_ap_start,
        ap_done => Loop_l_PE_1_0_k3_pro_U0_ap_done,
        ap_continue => Loop_l_PE_1_0_k3_pro_U0_ap_continue,
        ap_idle => Loop_l_PE_1_0_k3_pro_U0_ap_idle,
        ap_ready => Loop_l_PE_1_0_k3_pro_U0_ap_ready,
        A_fifo_1_0_V_dout => A_fifo_1_0_V_dout,
        A_fifo_1_0_V_empty_n => A_fifo_1_0_V_empty_n,
        A_fifo_1_0_V_read => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_0_V_read,
        B_fifo_0_1_V_dout => B_fifo_0_1_V_dout,
        B_fifo_0_1_V_empty_n => B_fifo_0_1_V_empty_n,
        B_fifo_0_1_V_read => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_1_V_read,
        v2_1_0_i => v2_1_0_i,
        v2_1_0_o => Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o,
        v2_1_0_o_ap_vld => Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o_ap_vld,
        A_fifo_1_1_V_din => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_din,
        A_fifo_1_1_V_full_n => A_fifo_1_1_V_full_n,
        A_fifo_1_1_V_write => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_write,
        B_fifo_0_2_V_din => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_din,
        B_fifo_0_2_V_full_n => B_fifo_0_2_V_full_n,
        B_fifo_0_2_V_write => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_write);

    Loop_l_PE_1_1_k4_pro_U0 : component Loop_l_PE_1_1_k4_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_PE_1_1_k4_pro_U0_ap_start,
        ap_done => Loop_l_PE_1_1_k4_pro_U0_ap_done,
        ap_continue => Loop_l_PE_1_1_k4_pro_U0_ap_continue,
        ap_idle => Loop_l_PE_1_1_k4_pro_U0_ap_idle,
        ap_ready => Loop_l_PE_1_1_k4_pro_U0_ap_ready,
        A_fifo_1_1_V_dout => A_fifo_1_1_V_dout,
        A_fifo_1_1_V_empty_n => A_fifo_1_1_V_empty_n,
        A_fifo_1_1_V_read => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_1_V_read,
        B_fifo_1_1_V_dout => B_fifo_1_1_V_dout,
        B_fifo_1_1_V_empty_n => B_fifo_1_1_V_empty_n,
        B_fifo_1_1_V_read => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_1_V_read,
        v2_1_1_i => v2_1_1_i,
        v2_1_1_o => Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o,
        v2_1_1_o_ap_vld => Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o_ap_vld,
        A_fifo_1_2_V_din => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_din,
        A_fifo_1_2_V_full_n => A_fifo_1_2_V_full_n,
        A_fifo_1_2_V_write => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_write,
        B_fifo_1_2_V_din => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_din,
        B_fifo_1_2_V_full_n => B_fifo_1_2_V_full_n,
        B_fifo_1_2_V_write => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_write);

    Loop_l_data_drain_k5_U0 : component Loop_l_data_drain_k5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_l_data_drain_k5_U0_ap_start,
        ap_done => Loop_l_data_drain_k5_U0_ap_done,
        ap_continue => Loop_l_data_drain_k5_U0_ap_continue,
        ap_idle => Loop_l_data_drain_k5_U0_ap_idle,
        ap_ready => Loop_l_data_drain_k5_U0_ap_ready,
        A_fifo_0_2_V_dout => A_fifo_0_2_V_dout,
        A_fifo_0_2_V_empty_n => A_fifo_0_2_V_empty_n,
        A_fifo_0_2_V_read => Loop_l_data_drain_k5_U0_A_fifo_0_2_V_read,
        A_fifo_1_2_V_dout => A_fifo_1_2_V_dout,
        A_fifo_1_2_V_empty_n => A_fifo_1_2_V_empty_n,
        A_fifo_1_2_V_read => Loop_l_data_drain_k5_U0_A_fifo_1_2_V_read,
        B_fifo_0_2_V_dout => B_fifo_0_2_V_dout,
        B_fifo_0_2_V_empty_n => B_fifo_0_2_V_empty_n,
        B_fifo_0_2_V_read => Loop_l_data_drain_k5_U0_B_fifo_0_2_V_read,
        B_fifo_1_2_V_dout => B_fifo_1_2_V_dout,
        B_fifo_1_2_V_empty_n => B_fifo_1_2_V_empty_n,
        B_fifo_1_2_V_read => Loop_l_data_drain_k5_U0_B_fifo_1_2_V_read);

    A_fifo_0_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_data_load_k_p_U0_A_fifo_0_0_V_din,
        if_full_n => A_fifo_0_0_V_full_n,
        if_write => Loop_l_data_load_k_p_U0_A_fifo_0_0_V_write,
        if_dout => A_fifo_0_0_V_dout,
        if_empty_n => A_fifo_0_0_V_empty_n,
        if_read => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_0_V_read);

    A_fifo_1_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_data_load_k_p_U0_A_fifo_1_0_V_din,
        if_full_n => A_fifo_1_0_V_full_n,
        if_write => Loop_l_data_load_k_p_U0_A_fifo_1_0_V_write,
        if_dout => A_fifo_1_0_V_dout,
        if_empty_n => A_fifo_1_0_V_empty_n,
        if_read => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_0_V_read);

    B_fifo_0_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_data_load_k_p_U0_B_fifo_0_0_V_din,
        if_full_n => B_fifo_0_0_V_full_n,
        if_write => Loop_l_data_load_k_p_U0_B_fifo_0_0_V_write,
        if_dout => B_fifo_0_0_V_dout,
        if_empty_n => B_fifo_0_0_V_empty_n,
        if_read => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_0_V_read);

    B_fifo_1_0_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_data_load_k_p_U0_B_fifo_1_0_V_din,
        if_full_n => B_fifo_1_0_V_full_n,
        if_write => Loop_l_data_load_k_p_U0_B_fifo_1_0_V_write,
        if_dout => B_fifo_1_0_V_dout,
        if_empty_n => B_fifo_1_0_V_empty_n,
        if_read => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_0_V_read);

    A_fifo_0_1_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_din,
        if_full_n => A_fifo_0_1_V_full_n,
        if_write => Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_write,
        if_dout => A_fifo_0_1_V_dout,
        if_empty_n => A_fifo_0_1_V_empty_n,
        if_read => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_1_V_read);

    B_fifo_0_1_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_din,
        if_full_n => B_fifo_0_1_V_full_n,
        if_write => Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_write,
        if_dout => B_fifo_0_1_V_dout,
        if_empty_n => B_fifo_0_1_V_empty_n,
        if_read => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_1_V_read);

    A_fifo_0_2_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_din,
        if_full_n => A_fifo_0_2_V_full_n,
        if_write => Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_write,
        if_dout => A_fifo_0_2_V_dout,
        if_empty_n => A_fifo_0_2_V_empty_n,
        if_read => Loop_l_data_drain_k5_U0_A_fifo_0_2_V_read);

    B_fifo_1_1_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_din,
        if_full_n => B_fifo_1_1_V_full_n,
        if_write => Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_write,
        if_dout => B_fifo_1_1_V_dout,
        if_empty_n => B_fifo_1_1_V_empty_n,
        if_read => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_1_V_read);

    A_fifo_1_1_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_din,
        if_full_n => A_fifo_1_1_V_full_n,
        if_write => Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_write,
        if_dout => A_fifo_1_1_V_dout,
        if_empty_n => A_fifo_1_1_V_empty_n,
        if_read => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_1_V_read);

    B_fifo_0_2_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_din,
        if_full_n => B_fifo_0_2_V_full_n,
        if_write => Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_write,
        if_dout => B_fifo_0_2_V_dout,
        if_empty_n => B_fifo_0_2_V_empty_n,
        if_read => Loop_l_data_drain_k5_U0_B_fifo_0_2_V_read);

    A_fifo_1_2_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_din,
        if_full_n => A_fifo_1_2_V_full_n,
        if_write => Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_write,
        if_dout => A_fifo_1_2_V_dout,
        if_empty_n => A_fifo_1_2_V_empty_n,
        if_read => Loop_l_data_drain_k5_U0_A_fifo_1_2_V_read);

    B_fifo_1_2_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_din,
        if_full_n => B_fifo_1_2_V_full_n,
        if_write => Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_write,
        if_dout => B_fifo_1_2_V_dout,
        if_empty_n => B_fifo_1_2_V_empty_n,
        if_read => Loop_l_data_drain_k5_U0_B_fifo_1_2_V_read);

    start_for_Loop_l_dEe_U : component start_for_Loop_l_dEe
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_l_data_drain_k5_U0_din,
        if_full_n => start_for_Loop_l_data_drain_k5_U0_full_n,
        if_write => Loop_l_PE_0_1_k2_pro_U0_start_write,
        if_dout => start_for_Loop_l_data_drain_k5_U0_dout,
        if_empty_n => start_for_Loop_l_data_drain_k5_U0_empty_n,
        if_read => Loop_l_data_drain_k5_U0_ap_ready);





    ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready <= ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready <= ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready <= ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready <= ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready <= ap_sync_Loop_l_data_load_k_p_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Loop_l_PE_0_0_k1_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_l_PE_0_0_k1_pro_U0_ap_ready))) then 
                Loop_l_PE_0_0_k1_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_0_0_k1_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_l_PE_0_0_k1_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_l_PE_0_0_k1_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_0_0_k1_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_l_PE_0_1_k2_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_l_PE_0_1_k2_pro_U0_ap_ready))) then 
                Loop_l_PE_0_1_k2_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_0_1_k2_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_l_PE_0_1_k2_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_l_PE_0_1_k2_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_0_1_k2_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_l_PE_1_0_k3_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_l_PE_1_0_k3_pro_U0_ap_ready))) then 
                Loop_l_PE_1_0_k3_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_1_0_k3_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_l_PE_1_0_k3_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_l_PE_1_0_k3_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_1_0_k3_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_l_PE_1_1_k4_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_l_PE_1_1_k4_pro_U0_ap_ready))) then 
                Loop_l_PE_1_1_k4_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_1_1_k4_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_l_PE_1_1_k4_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_l_PE_1_1_k4_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_PE_1_1_k4_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_l_data_load_k_p_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_l_data_load_k_p_U0_ap_ready))) then 
                Loop_l_data_load_k_p_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_data_load_k_p_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_l_data_load_k_p_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_l_data_load_k_p_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_l_data_load_k_p_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Loop_l_PE_0_0_k1_pro_U0_ap_continue <= ap_sync_done;
    Loop_l_PE_0_0_k1_pro_U0_ap_start <= ((ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_l_PE_0_0_k1_pro_U0_start_full_n <= ap_const_logic_1;
    Loop_l_PE_0_0_k1_pro_U0_start_write <= ap_const_logic_0;
    Loop_l_PE_0_1_k2_pro_U0_ap_continue <= ap_sync_done;
    Loop_l_PE_0_1_k2_pro_U0_ap_start <= ((ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_l_PE_1_0_k3_pro_U0_ap_continue <= ap_sync_done;
    Loop_l_PE_1_0_k3_pro_U0_ap_start <= ((ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_l_PE_1_0_k3_pro_U0_start_full_n <= ap_const_logic_1;
    Loop_l_PE_1_0_k3_pro_U0_start_write <= ap_const_logic_0;
    Loop_l_PE_1_1_k4_pro_U0_ap_continue <= ap_sync_done;
    Loop_l_PE_1_1_k4_pro_U0_ap_start <= ((ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_l_PE_1_1_k4_pro_U0_start_full_n <= ap_const_logic_1;
    Loop_l_PE_1_1_k4_pro_U0_start_write <= ap_const_logic_0;
    Loop_l_data_drain_k5_U0_ap_continue <= ap_sync_done;
    Loop_l_data_drain_k5_U0_ap_start <= start_for_Loop_l_data_drain_k5_U0_empty_n;
    Loop_l_data_drain_k5_U0_start_full_n <= ap_const_logic_1;
    Loop_l_data_drain_k5_U0_start_write <= ap_const_logic_0;
    Loop_l_data_load_k_p_U0_ap_continue <= ap_const_logic_1;
    Loop_l_data_load_k_p_U0_ap_start <= ((ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_l_data_load_k_p_U0_start_full_n <= ap_const_logic_1;
    Loop_l_data_load_k_p_U0_start_write <= ap_const_logic_0;
    ap_done <= ap_sync_done;
    ap_idle <= (Loop_l_data_load_k_p_U0_ap_idle and Loop_l_data_drain_k5_U0_ap_idle and Loop_l_PE_1_1_k4_pro_U0_ap_idle and Loop_l_PE_1_0_k3_pro_U0_ap_idle and Loop_l_PE_0_1_k2_pro_U0_ap_idle and Loop_l_PE_0_0_k1_pro_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready <= (ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready or Loop_l_PE_0_0_k1_pro_U0_ap_ready);
    ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready <= (ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready or Loop_l_PE_0_1_k2_pro_U0_ap_ready);
    ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready <= (ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready or Loop_l_PE_1_0_k3_pro_U0_ap_ready);
    ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready <= (ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready or Loop_l_PE_1_1_k4_pro_U0_ap_ready);
    ap_sync_Loop_l_data_load_k_p_U0_ap_ready <= (ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready or Loop_l_data_load_k_p_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (Loop_l_data_drain_k5_U0_ap_done and Loop_l_PE_1_1_k4_pro_U0_ap_done and Loop_l_PE_1_0_k3_pro_U0_ap_done and Loop_l_PE_0_1_k2_pro_U0_ap_done and Loop_l_PE_0_0_k1_pro_U0_ap_done);
    ap_sync_ready <= (ap_sync_Loop_l_data_load_k_p_U0_ap_ready and ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready and ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready and ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready and ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready);
    start_for_Loop_l_data_drain_k5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    v0_0_address0 <= Loop_l_data_load_k_p_U0_v0_0_address0;
    v0_0_address1 <= ap_const_lv4_0;
    v0_0_ce0 <= Loop_l_data_load_k_p_U0_v0_0_ce0;
    v0_0_ce1 <= ap_const_logic_0;
    v0_0_d0 <= ap_const_lv32_0;
    v0_0_d1 <= ap_const_lv32_0;
    v0_0_we0 <= ap_const_logic_0;
    v0_0_we1 <= ap_const_logic_0;
    v0_1_address0 <= Loop_l_data_load_k_p_U0_v0_1_address0;
    v0_1_address1 <= ap_const_lv4_0;
    v0_1_ce0 <= Loop_l_data_load_k_p_U0_v0_1_ce0;
    v0_1_ce1 <= ap_const_logic_0;
    v0_1_d0 <= ap_const_lv32_0;
    v0_1_d1 <= ap_const_lv32_0;
    v0_1_we0 <= ap_const_logic_0;
    v0_1_we1 <= ap_const_logic_0;
    v1_0_address0 <= Loop_l_data_load_k_p_U0_v1_0_address0;
    v1_0_address1 <= ap_const_lv4_0;
    v1_0_ce0 <= Loop_l_data_load_k_p_U0_v1_0_ce0;
    v1_0_ce1 <= ap_const_logic_0;
    v1_0_d0 <= ap_const_lv32_0;
    v1_0_d1 <= ap_const_lv32_0;
    v1_0_we0 <= ap_const_logic_0;
    v1_0_we1 <= ap_const_logic_0;
    v1_1_address0 <= Loop_l_data_load_k_p_U0_v1_1_address0;
    v1_1_address1 <= ap_const_lv4_0;
    v1_1_ce0 <= Loop_l_data_load_k_p_U0_v1_1_ce0;
    v1_1_ce1 <= ap_const_logic_0;
    v1_1_d0 <= ap_const_lv32_0;
    v1_1_d1 <= ap_const_lv32_0;
    v1_1_we0 <= ap_const_logic_0;
    v1_1_we1 <= ap_const_logic_0;
    v2_0_0_o <= Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o;
    v2_0_0_o_ap_vld <= Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o_ap_vld;
    v2_0_1_o <= Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o;
    v2_0_1_o_ap_vld <= Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o_ap_vld;
    v2_1_0_o <= Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o;
    v2_1_0_o_ap_vld <= Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o_ap_vld;
    v2_1_1_o <= Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o;
    v2_1_1_o_ap_vld <= Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o_ap_vld;
end behav;
