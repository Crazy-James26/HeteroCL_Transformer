// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _systolic_array_HH_
#define _systolic_array_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_l_data_load_k_p.h"
#include "Loop_l_PE_0_0_k1_pro.h"
#include "Loop_l_PE_0_1_k2_pro.h"
#include "Loop_l_PE_1_0_k3_pro.h"
#include "Loop_l_PE_1_1_k4_pro.h"
#include "Loop_l_data_drain_k5.h"
#include "fifo_w32_d2_A.h"
#include "start_for_Loop_l_dEe.h"

namespace ap_rtl {

struct systolic_array : public sc_module {
    // Port declarations 58
    sc_out< sc_lv<4> > v0_0_address0;
    sc_out< sc_logic > v0_0_ce0;
    sc_out< sc_lv<32> > v0_0_d0;
    sc_in< sc_lv<32> > v0_0_q0;
    sc_out< sc_logic > v0_0_we0;
    sc_out< sc_lv<4> > v0_0_address1;
    sc_out< sc_logic > v0_0_ce1;
    sc_out< sc_lv<32> > v0_0_d1;
    sc_in< sc_lv<32> > v0_0_q1;
    sc_out< sc_logic > v0_0_we1;
    sc_out< sc_lv<4> > v0_1_address0;
    sc_out< sc_logic > v0_1_ce0;
    sc_out< sc_lv<32> > v0_1_d0;
    sc_in< sc_lv<32> > v0_1_q0;
    sc_out< sc_logic > v0_1_we0;
    sc_out< sc_lv<4> > v0_1_address1;
    sc_out< sc_logic > v0_1_ce1;
    sc_out< sc_lv<32> > v0_1_d1;
    sc_in< sc_lv<32> > v0_1_q1;
    sc_out< sc_logic > v0_1_we1;
    sc_out< sc_lv<4> > v1_0_address0;
    sc_out< sc_logic > v1_0_ce0;
    sc_out< sc_lv<32> > v1_0_d0;
    sc_in< sc_lv<32> > v1_0_q0;
    sc_out< sc_logic > v1_0_we0;
    sc_out< sc_lv<4> > v1_0_address1;
    sc_out< sc_logic > v1_0_ce1;
    sc_out< sc_lv<32> > v1_0_d1;
    sc_in< sc_lv<32> > v1_0_q1;
    sc_out< sc_logic > v1_0_we1;
    sc_out< sc_lv<4> > v1_1_address0;
    sc_out< sc_logic > v1_1_ce0;
    sc_out< sc_lv<32> > v1_1_d0;
    sc_in< sc_lv<32> > v1_1_q0;
    sc_out< sc_logic > v1_1_we0;
    sc_out< sc_lv<4> > v1_1_address1;
    sc_out< sc_logic > v1_1_ce1;
    sc_out< sc_lv<32> > v1_1_d1;
    sc_in< sc_lv<32> > v1_1_q1;
    sc_out< sc_logic > v1_1_we1;
    sc_in< sc_lv<32> > v2_0_0_i;
    sc_out< sc_lv<32> > v2_0_0_o;
    sc_in< sc_lv<32> > v2_0_1_i;
    sc_out< sc_lv<32> > v2_0_1_o;
    sc_in< sc_lv<32> > v2_1_0_i;
    sc_out< sc_lv<32> > v2_1_0_o;
    sc_in< sc_lv<32> > v2_1_1_i;
    sc_out< sc_lv<32> > v2_1_1_o;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > v2_0_0_o_ap_vld;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > v2_0_1_o_ap_vld;
    sc_out< sc_logic > v2_1_0_o_ap_vld;
    sc_out< sc_logic > v2_1_1_o_ap_vld;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    systolic_array(sc_module_name name);
    SC_HAS_PROCESS(systolic_array);

    ~systolic_array();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Loop_l_data_load_k_p* Loop_l_data_load_k_p_U0;
    Loop_l_PE_0_0_k1_pro* Loop_l_PE_0_0_k1_pro_U0;
    Loop_l_PE_0_1_k2_pro* Loop_l_PE_0_1_k2_pro_U0;
    Loop_l_PE_1_0_k3_pro* Loop_l_PE_1_0_k3_pro_U0;
    Loop_l_PE_1_1_k4_pro* Loop_l_PE_1_1_k4_pro_U0;
    Loop_l_data_drain_k5* Loop_l_data_drain_k5_U0;
    fifo_w32_d2_A* A_fifo_0_0_V_U;
    fifo_w32_d2_A* A_fifo_1_0_V_U;
    fifo_w32_d2_A* B_fifo_0_0_V_U;
    fifo_w32_d2_A* B_fifo_1_0_V_U;
    fifo_w32_d2_A* A_fifo_0_1_V_U;
    fifo_w32_d2_A* B_fifo_0_1_V_U;
    fifo_w32_d2_A* A_fifo_0_2_V_U;
    fifo_w32_d2_A* B_fifo_1_1_V_U;
    fifo_w32_d2_A* A_fifo_1_1_V_U;
    fifo_w32_d2_A* B_fifo_0_2_V_U;
    fifo_w32_d2_A* A_fifo_1_2_V_U;
    fifo_w32_d2_A* B_fifo_1_2_V_U;
    start_for_Loop_l_dEe* start_for_Loop_l_dEe_U;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_ap_start;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_ap_done;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_ap_ready;
    sc_signal< sc_lv<4> > Loop_l_data_load_k_p_U0_v0_0_address0;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_v0_0_ce0;
    sc_signal< sc_lv<32> > Loop_l_data_load_k_p_U0_A_fifo_0_0_V_din;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_A_fifo_0_0_V_write;
    sc_signal< sc_lv<4> > Loop_l_data_load_k_p_U0_v0_1_address0;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_v0_1_ce0;
    sc_signal< sc_lv<32> > Loop_l_data_load_k_p_U0_A_fifo_1_0_V_din;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_A_fifo_1_0_V_write;
    sc_signal< sc_lv<4> > Loop_l_data_load_k_p_U0_v1_0_address0;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_v1_0_ce0;
    sc_signal< sc_lv<32> > Loop_l_data_load_k_p_U0_B_fifo_0_0_V_din;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_B_fifo_0_0_V_write;
    sc_signal< sc_lv<4> > Loop_l_data_load_k_p_U0_v1_1_address0;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_v1_1_ce0;
    sc_signal< sc_lv<32> > Loop_l_data_load_k_p_U0_B_fifo_1_0_V_din;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_B_fifo_1_0_V_write;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_ap_start;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_ap_done;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_ap_ready;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_0_V_read;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_0_V_read;
    sc_signal< sc_lv<32> > Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_v2_0_0_o_ap_vld;
    sc_signal< sc_lv<32> > Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_din;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_A_fifo_0_1_V_write;
    sc_signal< sc_lv<32> > Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_din;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_B_fifo_0_1_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_ap_start;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_ap_done;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_ap_ready;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_start_out;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_start_write;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_1_V_read;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_0_V_read;
    sc_signal< sc_lv<32> > Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_v2_0_1_o_ap_vld;
    sc_signal< sc_lv<32> > Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_din;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_A_fifo_0_2_V_write;
    sc_signal< sc_lv<32> > Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_din;
    sc_signal< sc_logic > Loop_l_PE_0_1_k2_pro_U0_B_fifo_1_1_V_write;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_ap_start;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_ap_done;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_ap_ready;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_0_V_read;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_1_V_read;
    sc_signal< sc_lv<32> > Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_v2_1_0_o_ap_vld;
    sc_signal< sc_lv<32> > Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_din;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_A_fifo_1_1_V_write;
    sc_signal< sc_lv<32> > Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_din;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_B_fifo_0_2_V_write;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_ap_start;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_ap_done;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_ap_ready;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_1_V_read;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_1_V_read;
    sc_signal< sc_lv<32> > Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_v2_1_1_o_ap_vld;
    sc_signal< sc_lv<32> > Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_din;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_A_fifo_1_2_V_write;
    sc_signal< sc_lv<32> > Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_din;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_B_fifo_1_2_V_write;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_ap_start;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_ap_done;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_ap_continue;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_ap_idle;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_ap_ready;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_A_fifo_0_2_V_read;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_A_fifo_1_2_V_read;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_B_fifo_0_2_V_read;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_B_fifo_1_2_V_read;
    sc_signal< sc_logic > A_fifo_0_0_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_0_0_V_dout;
    sc_signal< sc_logic > A_fifo_0_0_V_empty_n;
    sc_signal< sc_logic > A_fifo_1_0_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_1_0_V_dout;
    sc_signal< sc_logic > A_fifo_1_0_V_empty_n;
    sc_signal< sc_logic > B_fifo_0_0_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_0_0_V_dout;
    sc_signal< sc_logic > B_fifo_0_0_V_empty_n;
    sc_signal< sc_logic > B_fifo_1_0_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_1_0_V_dout;
    sc_signal< sc_logic > B_fifo_1_0_V_empty_n;
    sc_signal< sc_logic > A_fifo_0_1_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_0_1_V_dout;
    sc_signal< sc_logic > A_fifo_0_1_V_empty_n;
    sc_signal< sc_logic > B_fifo_0_1_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_0_1_V_dout;
    sc_signal< sc_logic > B_fifo_0_1_V_empty_n;
    sc_signal< sc_logic > A_fifo_0_2_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_0_2_V_dout;
    sc_signal< sc_logic > A_fifo_0_2_V_empty_n;
    sc_signal< sc_logic > B_fifo_1_1_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_1_1_V_dout;
    sc_signal< sc_logic > B_fifo_1_1_V_empty_n;
    sc_signal< sc_logic > A_fifo_1_1_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_1_1_V_dout;
    sc_signal< sc_logic > A_fifo_1_1_V_empty_n;
    sc_signal< sc_logic > B_fifo_0_2_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_0_2_V_dout;
    sc_signal< sc_logic > B_fifo_0_2_V_empty_n;
    sc_signal< sc_logic > A_fifo_1_2_V_full_n;
    sc_signal< sc_lv<32> > A_fifo_1_2_V_dout;
    sc_signal< sc_logic > A_fifo_1_2_V_empty_n;
    sc_signal< sc_logic > B_fifo_1_2_V_full_n;
    sc_signal< sc_lv<32> > B_fifo_1_2_V_dout;
    sc_signal< sc_logic > B_fifo_1_2_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Loop_l_data_load_k_p_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_l_data_load_k_p_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_l_data_load_k_p_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Loop_l_PE_0_0_k1_pro_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_l_PE_0_0_k1_pro_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Loop_l_PE_0_1_k2_pro_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_l_PE_0_1_k2_pro_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Loop_l_PE_1_0_k3_pro_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_l_PE_1_0_k3_pro_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Loop_l_PE_1_1_k4_pro_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_l_PE_1_1_k4_pro_U0_ap_ready_count;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_start_full_n;
    sc_signal< sc_logic > Loop_l_data_load_k_p_U0_start_write;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_start_full_n;
    sc_signal< sc_logic > Loop_l_PE_0_0_k1_pro_U0_start_write;
    sc_signal< sc_lv<1> > start_for_Loop_l_data_drain_k5_U0_din;
    sc_signal< sc_logic > start_for_Loop_l_data_drain_k5_U0_full_n;
    sc_signal< sc_lv<1> > start_for_Loop_l_data_drain_k5_U0_dout;
    sc_signal< sc_logic > start_for_Loop_l_data_drain_k5_U0_empty_n;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_start_full_n;
    sc_signal< sc_logic > Loop_l_PE_1_0_k3_pro_U0_start_write;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_start_full_n;
    sc_signal< sc_logic > Loop_l_PE_1_1_k4_pro_U0_start_write;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_start_full_n;
    sc_signal< sc_logic > Loop_l_data_drain_k5_U0_start_write;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Loop_l_PE_0_0_k1_pro_U0_ap_continue();
    void thread_Loop_l_PE_0_0_k1_pro_U0_ap_start();
    void thread_Loop_l_PE_0_0_k1_pro_U0_start_full_n();
    void thread_Loop_l_PE_0_0_k1_pro_U0_start_write();
    void thread_Loop_l_PE_0_1_k2_pro_U0_ap_continue();
    void thread_Loop_l_PE_0_1_k2_pro_U0_ap_start();
    void thread_Loop_l_PE_1_0_k3_pro_U0_ap_continue();
    void thread_Loop_l_PE_1_0_k3_pro_U0_ap_start();
    void thread_Loop_l_PE_1_0_k3_pro_U0_start_full_n();
    void thread_Loop_l_PE_1_0_k3_pro_U0_start_write();
    void thread_Loop_l_PE_1_1_k4_pro_U0_ap_continue();
    void thread_Loop_l_PE_1_1_k4_pro_U0_ap_start();
    void thread_Loop_l_PE_1_1_k4_pro_U0_start_full_n();
    void thread_Loop_l_PE_1_1_k4_pro_U0_start_write();
    void thread_Loop_l_data_drain_k5_U0_ap_continue();
    void thread_Loop_l_data_drain_k5_U0_ap_start();
    void thread_Loop_l_data_drain_k5_U0_start_full_n();
    void thread_Loop_l_data_drain_k5_U0_start_write();
    void thread_Loop_l_data_load_k_p_U0_ap_continue();
    void thread_Loop_l_data_load_k_p_U0_ap_start();
    void thread_Loop_l_data_load_k_p_U0_start_full_n();
    void thread_Loop_l_data_load_k_p_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_Loop_l_PE_0_0_k1_pro_U0_ap_ready();
    void thread_ap_sync_Loop_l_PE_0_1_k2_pro_U0_ap_ready();
    void thread_ap_sync_Loop_l_PE_1_0_k3_pro_U0_ap_ready();
    void thread_ap_sync_Loop_l_PE_1_1_k4_pro_U0_ap_ready();
    void thread_ap_sync_Loop_l_data_load_k_p_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_start_for_Loop_l_data_drain_k5_U0_din();
    void thread_v0_0_address0();
    void thread_v0_0_address1();
    void thread_v0_0_ce0();
    void thread_v0_0_ce1();
    void thread_v0_0_d0();
    void thread_v0_0_d1();
    void thread_v0_0_we0();
    void thread_v0_0_we1();
    void thread_v0_1_address0();
    void thread_v0_1_address1();
    void thread_v0_1_ce0();
    void thread_v0_1_ce1();
    void thread_v0_1_d0();
    void thread_v0_1_d1();
    void thread_v0_1_we0();
    void thread_v0_1_we1();
    void thread_v1_0_address0();
    void thread_v1_0_address1();
    void thread_v1_0_ce0();
    void thread_v1_0_ce1();
    void thread_v1_0_d0();
    void thread_v1_0_d1();
    void thread_v1_0_we0();
    void thread_v1_0_we1();
    void thread_v1_1_address0();
    void thread_v1_1_address1();
    void thread_v1_1_ce0();
    void thread_v1_1_ce1();
    void thread_v1_1_d0();
    void thread_v1_1_d1();
    void thread_v1_1_we0();
    void thread_v1_1_we1();
    void thread_v2_0_0_o();
    void thread_v2_0_0_o_ap_vld();
    void thread_v2_0_1_o();
    void thread_v2_0_1_o_ap_vld();
    void thread_v2_1_0_o();
    void thread_v2_1_0_o_ap_vld();
    void thread_v2_1_1_o();
    void thread_v2_1_1_o_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
