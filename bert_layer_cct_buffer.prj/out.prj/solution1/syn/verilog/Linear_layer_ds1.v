// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Linear_layer_ds1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v163_address0,
        v163_ce0,
        v163_q0,
        v164_address0,
        v164_ce0,
        v164_q0,
        v165_address0,
        v165_ce0,
        v165_q0,
        v166_address0,
        v166_ce0,
        v166_we0,
        v166_d0,
        v166_q0,
        v166_address1,
        v166_ce1,
        v166_we1,
        v166_d1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_pp1_stage0 = 12'd64;
parameter    ap_ST_fsm_state22 = 12'd128;
parameter    ap_ST_fsm_pp2_stage0 = 12'd256;
parameter    ap_ST_fsm_state25 = 12'd512;
parameter    ap_ST_fsm_pp3_stage0 = 12'd1024;
parameter    ap_ST_fsm_state34 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v163_address0;
output   v163_ce0;
input  [31:0] v163_q0;
output  [21:0] v164_address0;
output   v164_ce0;
input  [31:0] v164_q0;
output  [11:0] v165_address0;
output   v165_ce0;
input  [31:0] v165_q0;
output  [15:0] v166_address0;
output   v166_ce0;
output   v166_we0;
output  [31:0] v166_d0;
input  [31:0] v166_q0;
output  [15:0] v166_address1;
output   v166_ce1;
output   v166_we1;
output  [31:0] v166_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v163_ce0;
reg v164_ce0;
reg v165_ce0;
reg[15:0] v166_address0;
reg v166_ce0;
reg v166_we0;
reg[31:0] v166_d0;
reg v166_ce1;
reg v166_we1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [21:0] indvar_flatten_reg_236;
reg   [9:0] k4_0_reg_247;
reg   [11:0] j12_0_reg_258;
reg   [11:0] j_back4_0_reg_269;
reg   [11:0] j13_0_reg_280;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] reg_299;
reg    ap_enable_reg_pp1_iter13;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_state15_pp1_stage0_iter8;
wire    ap_block_state16_pp1_stage0_iter9;
wire    ap_block_state17_pp1_stage0_iter10;
wire    ap_block_state18_pp1_stage0_iter11;
wire    ap_block_state19_pp1_stage0_iter12;
wire    ap_block_state20_pp1_stage0_iter13;
wire    ap_block_state21_pp1_stage0_iter14;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln338_reg_669;
reg   [0:0] icmp_ln338_reg_669_pp1_iter12_reg;
reg    ap_enable_reg_pp3_iter6;
wire    ap_block_state26_pp3_stage0_iter0;
wire    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
wire    ap_block_state29_pp3_stage0_iter3;
wire    ap_block_state30_pp3_stage0_iter4;
wire    ap_block_state31_pp3_stage0_iter5;
wire    ap_block_state32_pp3_stage0_iter6;
wire    ap_block_state33_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln354_reg_752;
reg   [0:0] icmp_ln354_reg_752_pp3_iter5_reg;
wire   [3:0] v167_fu_311_p2;
reg   [3:0] v167_reg_623;
wire    ap_CS_fsm_state2;
wire   [16:0] sub_ln329_fu_341_p2;
reg   [16:0] sub_ln329_reg_628;
wire   [0:0] icmp_ln327_fu_305_p2;
wire   [11:0] v168_fu_353_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln332_fu_373_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] i9_fu_379_p2;
reg   [3:0] i9_reg_645;
wire   [11:0] j_init4_fu_391_p2;
wire    ap_CS_fsm_state5;
wire   [14:0] sub_ln341_fu_430_p2;
reg   [14:0] sub_ln341_reg_658;
wire    ap_CS_fsm_state6;
wire   [16:0] sub_ln352_fu_448_p2;
reg   [16:0] sub_ln352_reg_663;
wire   [0:0] icmp_ln338_fu_454_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln338_reg_669_pp1_iter1_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter2_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter3_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter4_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter5_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter6_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter7_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter8_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter9_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter10_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter11_reg;
reg   [0:0] icmp_ln338_reg_669_pp1_iter13_reg;
wire   [21:0] add_ln338_fu_460_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [11:0] select_ln341_fu_478_p3;
reg   [11:0] select_ln341_reg_678;
reg   [11:0] select_ln341_reg_678_pp1_iter1_reg;
reg   [11:0] select_ln341_reg_678_pp1_iter2_reg;
reg   [11:0] select_ln341_reg_678_pp1_iter3_reg;
reg   [11:0] select_ln341_reg_678_pp1_iter4_reg;
reg   [11:0] select_ln341_reg_678_pp1_iter5_reg;
reg   [11:0] select_ln341_reg_678_pp1_iter6_reg;
wire   [9:0] select_ln341_1_fu_486_p3;
reg   [9:0] select_ln341_1_reg_685;
reg   [9:0] select_ln341_1_reg_685_pp1_iter1_reg;
reg   [9:0] select_ln341_1_reg_685_pp1_iter2_reg;
wire   [11:0] j12_fu_494_p2;
reg   [31:0] v163_load_reg_707;
reg   [31:0] v175_reg_712;
reg   [11:0] v170_addr_2_reg_717;
reg   [11:0] v170_addr_2_reg_717_pp1_iter8_reg;
reg   [11:0] v170_addr_2_reg_717_pp1_iter9_reg;
reg   [11:0] v170_addr_2_reg_717_pp1_iter10_reg;
reg   [11:0] v170_addr_2_reg_717_pp1_iter11_reg;
reg   [11:0] v170_addr_2_reg_717_pp1_iter12_reg;
reg   [11:0] v170_addr_2_reg_717_pp1_iter13_reg;
wire   [31:0] grp_fu_295_p2;
reg   [31:0] v176_reg_723;
wire   [31:0] v170_q0;
reg   [31:0] v177_reg_728;
reg    ap_enable_reg_pp1_iter8;
wire   [0:0] icmp_ln349_fu_559_p2;
reg   [0:0] icmp_ln349_reg_733;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [11:0] j_back4_fu_565_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [16:0] add_ln352_fu_580_p2;
reg   [16:0] add_ln352_reg_742;
wire   [0:0] icmp_ln354_fu_589_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln354_reg_752_pp3_iter1_reg;
reg   [0:0] icmp_ln354_reg_752_pp3_iter2_reg;
reg   [0:0] icmp_ln354_reg_752_pp3_iter3_reg;
reg   [0:0] icmp_ln354_reg_752_pp3_iter4_reg;
reg   [0:0] icmp_ln354_reg_752_pp3_iter6_reg;
wire   [11:0] j13_fu_595_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [15:0] v166_addr_2_reg_761;
reg   [15:0] v166_addr_2_reg_761_pp3_iter1_reg;
reg   [15:0] v166_addr_2_reg_761_pp3_iter2_reg;
reg   [15:0] v166_addr_2_reg_761_pp3_iter3_reg;
reg   [15:0] v166_addr_2_reg_761_pp3_iter4_reg;
reg   [15:0] v166_addr_2_reg_761_pp3_iter5_reg;
reg   [15:0] v166_addr_2_reg_761_pp3_iter6_reg;
reg   [31:0] v182_reg_772;
reg   [31:0] v183_reg_777;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter14;
wire    ap_CS_fsm_state22;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state25;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter7;
reg   [11:0] v170_address0;
reg    v170_ce0;
reg    v170_we0;
reg   [11:0] v170_address1;
reg    v170_ce1;
reg    v170_we1;
wire   [31:0] v170_q1;
reg   [3:0] v167_0_reg_191;
wire   [0:0] icmp_ln328_fu_347_p2;
reg   [11:0] v168_0_reg_202;
reg   [3:0] i9_0_reg_213;
wire    ap_CS_fsm_state34;
reg   [11:0] j_init4_0_reg_225;
wire   [0:0] icmp_ln334_fu_385_p2;
reg   [9:0] ap_phi_mux_k4_0_phi_fu_251_p4;
wire    ap_block_pp1_stage0;
wire  signed [63:0] sext_ln329_fu_368_p1;
wire   [63:0] zext_ln336_fu_397_p1;
wire  signed [63:0] sext_ln342_fu_537_p1;
wire  signed [63:0] sext_ln341_fu_550_p1;
wire   [63:0] zext_ln342_fu_555_p1;
wire   [63:0] zext_ln351_fu_571_p1;
wire    ap_block_pp2_stage0;
wire  signed [63:0] sext_ln352_fu_585_p1;
wire  signed [63:0] sext_ln357_fu_615_p1;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln356_fu_601_p1;
reg   [31:0] grp_fu_291_p0;
reg   [31:0] grp_fu_291_p1;
wire   [15:0] tmp_34_fu_317_p3;
wire   [13:0] tmp_35_fu_329_p3;
wire   [16:0] zext_ln329_fu_325_p1;
wire   [16:0] zext_ln329_1_fu_337_p1;
wire   [16:0] zext_ln329_2_fu_359_p1;
wire   [16:0] add_ln329_fu_363_p2;
wire   [13:0] tmp_36_fu_402_p3;
wire   [11:0] tmp_37_fu_418_p3;
wire   [14:0] zext_ln341_1_fu_414_p1;
wire   [14:0] zext_ln341_2_fu_426_p1;
wire   [15:0] tmp_38_fu_436_p3;
wire   [16:0] zext_ln352_fu_444_p1;
wire   [16:0] zext_ln341_fu_410_p1;
wire   [0:0] icmp_ln339_fu_472_p2;
wire   [9:0] k4_fu_466_p2;
wire   [21:0] tmp_39_fu_503_p3;
wire   [19:0] tmp_40_fu_514_p3;
wire   [22:0] zext_ln342_1_fu_510_p1;
wire   [22:0] zext_ln342_2_fu_521_p1;
wire   [22:0] sub_ln342_fu_525_p2;
wire   [22:0] zext_ln341_4_fu_500_p1;
wire   [22:0] add_ln342_fu_531_p2;
wire   [14:0] zext_ln341_3_fu_542_p1;
wire   [14:0] add_ln341_fu_545_p2;
wire   [16:0] zext_ln352_1_fu_576_p1;
wire   [16:0] zext_ln357_fu_606_p1;
wire   [16:0] add_ln357_fu_610_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
end

Linear_layer_ds1_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 3072 ),
    .AddressWidth( 12 ))
v170_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v170_address0),
    .ce0(v170_ce0),
    .we0(v170_we0),
    .d0(32'd0),
    .q0(v170_q0),
    .address1(v170_address1),
    .ce1(v170_ce1),
    .we1(v170_we1),
    .d1(reg_299),
    .q1(v170_q1)
);

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_291_p0),
    .din1(grp_fu_291_p1),
    .ce(1'b1),
    .dout(grp_fu_291_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v163_load_reg_707),
    .din1(v175_reg_712),
    .ce(1'b1),
    .dout(grp_fu_295_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln327_fu_305_p2 == 1'd1))) begin
        i9_0_reg_213 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i9_0_reg_213 <= i9_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_236 <= add_ln338_fu_460_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_236 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j12_0_reg_258 <= j12_fu_494_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j12_0_reg_258 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j13_0_reg_280 <= 12'd0;
    end else if (((icmp_ln354_fu_589_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j13_0_reg_280 <= j13_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_back4_0_reg_269 <= 12'd0;
    end else if (((icmp_ln349_fu_559_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_back4_0_reg_269 <= j_back4_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln334_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_init4_0_reg_225 <= j_init4_fu_391_p2;
    end else if (((icmp_ln332_fu_373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_init4_0_reg_225 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_reg_669 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k4_0_reg_247 <= select_ln341_1_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k4_0_reg_247 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln328_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v167_0_reg_191 <= v167_reg_623;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v167_0_reg_191 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln327_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v168_0_reg_202 <= 12'd0;
    end else if (((icmp_ln328_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v168_0_reg_202 <= v168_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln349_fu_559_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln352_reg_742 <= add_ln352_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i9_reg_645 <= i9_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln338_reg_669 <= icmp_ln338_fu_454_p2;
        icmp_ln338_reg_669_pp1_iter1_reg <= icmp_ln338_reg_669;
        select_ln341_1_reg_685_pp1_iter1_reg <= select_ln341_1_reg_685;
        select_ln341_reg_678_pp1_iter1_reg <= select_ln341_reg_678;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln338_reg_669_pp1_iter10_reg <= icmp_ln338_reg_669_pp1_iter9_reg;
        icmp_ln338_reg_669_pp1_iter11_reg <= icmp_ln338_reg_669_pp1_iter10_reg;
        icmp_ln338_reg_669_pp1_iter12_reg <= icmp_ln338_reg_669_pp1_iter11_reg;
        icmp_ln338_reg_669_pp1_iter13_reg <= icmp_ln338_reg_669_pp1_iter12_reg;
        icmp_ln338_reg_669_pp1_iter2_reg <= icmp_ln338_reg_669_pp1_iter1_reg;
        icmp_ln338_reg_669_pp1_iter3_reg <= icmp_ln338_reg_669_pp1_iter2_reg;
        icmp_ln338_reg_669_pp1_iter4_reg <= icmp_ln338_reg_669_pp1_iter3_reg;
        icmp_ln338_reg_669_pp1_iter5_reg <= icmp_ln338_reg_669_pp1_iter4_reg;
        icmp_ln338_reg_669_pp1_iter6_reg <= icmp_ln338_reg_669_pp1_iter5_reg;
        icmp_ln338_reg_669_pp1_iter7_reg <= icmp_ln338_reg_669_pp1_iter6_reg;
        icmp_ln338_reg_669_pp1_iter8_reg <= icmp_ln338_reg_669_pp1_iter7_reg;
        icmp_ln338_reg_669_pp1_iter9_reg <= icmp_ln338_reg_669_pp1_iter8_reg;
        select_ln341_1_reg_685_pp1_iter2_reg <= select_ln341_1_reg_685_pp1_iter1_reg;
        select_ln341_reg_678_pp1_iter2_reg <= select_ln341_reg_678_pp1_iter1_reg;
        select_ln341_reg_678_pp1_iter3_reg <= select_ln341_reg_678_pp1_iter2_reg;
        select_ln341_reg_678_pp1_iter4_reg <= select_ln341_reg_678_pp1_iter3_reg;
        select_ln341_reg_678_pp1_iter5_reg <= select_ln341_reg_678_pp1_iter4_reg;
        select_ln341_reg_678_pp1_iter6_reg <= select_ln341_reg_678_pp1_iter5_reg;
        v170_addr_2_reg_717_pp1_iter10_reg <= v170_addr_2_reg_717_pp1_iter9_reg;
        v170_addr_2_reg_717_pp1_iter11_reg <= v170_addr_2_reg_717_pp1_iter10_reg;
        v170_addr_2_reg_717_pp1_iter12_reg <= v170_addr_2_reg_717_pp1_iter11_reg;
        v170_addr_2_reg_717_pp1_iter13_reg <= v170_addr_2_reg_717_pp1_iter12_reg;
        v170_addr_2_reg_717_pp1_iter8_reg <= v170_addr_2_reg_717;
        v170_addr_2_reg_717_pp1_iter9_reg <= v170_addr_2_reg_717_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln349_reg_733 <= icmp_ln349_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln354_reg_752 <= icmp_ln354_fu_589_p2;
        icmp_ln354_reg_752_pp3_iter1_reg <= icmp_ln354_reg_752;
        v166_addr_2_reg_761_pp3_iter1_reg <= v166_addr_2_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln354_reg_752_pp3_iter2_reg <= icmp_ln354_reg_752_pp3_iter1_reg;
        icmp_ln354_reg_752_pp3_iter3_reg <= icmp_ln354_reg_752_pp3_iter2_reg;
        icmp_ln354_reg_752_pp3_iter4_reg <= icmp_ln354_reg_752_pp3_iter3_reg;
        icmp_ln354_reg_752_pp3_iter5_reg <= icmp_ln354_reg_752_pp3_iter4_reg;
        icmp_ln354_reg_752_pp3_iter6_reg <= icmp_ln354_reg_752_pp3_iter5_reg;
        v166_addr_2_reg_761_pp3_iter2_reg <= v166_addr_2_reg_761_pp3_iter1_reg;
        v166_addr_2_reg_761_pp3_iter3_reg <= v166_addr_2_reg_761_pp3_iter2_reg;
        v166_addr_2_reg_761_pp3_iter4_reg <= v166_addr_2_reg_761_pp3_iter3_reg;
        v166_addr_2_reg_761_pp3_iter5_reg <= v166_addr_2_reg_761_pp3_iter4_reg;
        v166_addr_2_reg_761_pp3_iter6_reg <= v166_addr_2_reg_761_pp3_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln338_reg_669_pp1_iter12_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter13 == 1'b1)) | ((icmp_ln354_reg_752_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_299 <= grp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln341_1_reg_685 <= select_ln341_1_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln341_reg_678 <= select_ln341_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln327_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln329_reg_628[16 : 10] <= sub_ln329_fu_341_p2[16 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln341_reg_658[14 : 8] <= sub_ln341_fu_430_p2[14 : 8];
        sub_ln352_reg_663[16 : 10] <= sub_ln352_fu_448_p2[16 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_reg_669_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v163_load_reg_707 <= v163_q0;
        v175_reg_712 <= v164_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln354_fu_589_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v166_addr_2_reg_761 <= sext_ln357_fu_615_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v167_reg_623 <= v167_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_reg_669_pp1_iter6_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v170_addr_2_reg_717 <= zext_ln342_fu_555_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_reg_669_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v176_reg_723 <= grp_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln338_reg_669_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        v177_reg_728 <= v170_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln354_reg_752 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v182_reg_772 <= v165_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln354_reg_752 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v183_reg_777 <= v166_q0;
    end
end

always @ (*) begin
    if ((icmp_ln338_fu_454_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln349_fu_559_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln354_fu_589_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_373_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln338_reg_669 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_k4_0_phi_fu_251_p4 = select_ln341_1_reg_685;
    end else begin
        ap_phi_mux_k4_0_phi_fu_251_p4 = k4_0_reg_247;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_373_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_291_p0 = v183_reg_777;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        grp_fu_291_p0 = v177_reg_728;
    end else begin
        grp_fu_291_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_291_p1 = v182_reg_772;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        grp_fu_291_p1 = v176_reg_723;
    end else begin
        grp_fu_291_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        v163_ce0 = 1'b1;
    end else begin
        v163_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        v164_ce0 = 1'b1;
    end else begin
        v164_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v165_ce0 = 1'b1;
    end else begin
        v165_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        v166_address0 = sext_ln357_fu_615_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v166_address0 = sext_ln352_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v166_address0 = sext_ln329_fu_368_p1;
    end else begin
        v166_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        v166_ce0 = 1'b1;
    end else begin
        v166_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v166_ce1 = 1'b1;
    end else begin
        v166_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v166_d0 = v170_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v166_d0 = 32'd0;
    end else begin
        v166_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln349_reg_733 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln328_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v166_we0 = 1'b1;
    end else begin
        v166_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln354_reg_752_pp3_iter6_reg == 1'd0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v166_we1 = 1'b1;
    end else begin
        v166_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        v170_address0 = zext_ln342_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v170_address0 = zext_ln336_fu_397_p1;
    end else begin
        v170_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v170_address1 = zext_ln351_fu_571_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        v170_address1 = v170_addr_2_reg_717_pp1_iter13_reg;
    end else begin
        v170_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
        v170_ce0 = 1'b1;
    end else begin
        v170_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        v170_ce1 = 1'b1;
    end else begin
        v170_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln334_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v170_we0 = 1'b1;
    end else begin
        v170_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln338_reg_669_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        v170_we1 = 1'b1;
    end else begin
        v170_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln327_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln328_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln332_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln334_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln338_fu_454_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln338_fu_454_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln349_fu_559_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln349_fu_559_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln354_fu_589_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln354_fu_589_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln329_fu_363_p2 = (sub_ln329_reg_628 + zext_ln329_2_fu_359_p1);

assign add_ln338_fu_460_p2 = (indvar_flatten_reg_236 + 22'd1);

assign add_ln341_fu_545_p2 = (sub_ln341_reg_658 + zext_ln341_3_fu_542_p1);

assign add_ln342_fu_531_p2 = (sub_ln342_fu_525_p2 + zext_ln341_4_fu_500_p1);

assign add_ln352_fu_580_p2 = (sub_ln352_reg_663 + zext_ln352_1_fu_576_p1);

assign add_ln357_fu_610_p2 = (sub_ln352_reg_663 + zext_ln357_fu_606_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign i9_fu_379_p2 = (i9_0_reg_213 + 4'd1);

assign icmp_ln327_fu_305_p2 = ((v167_0_reg_191 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln328_fu_347_p2 = ((v168_0_reg_202 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln332_fu_373_p2 = ((i9_0_reg_213 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln334_fu_385_p2 = ((j_init4_0_reg_225 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_454_p2 = ((indvar_flatten_reg_236 == 22'd2359296) ? 1'b1 : 1'b0);

assign icmp_ln339_fu_472_p2 = ((j12_0_reg_258 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln349_fu_559_p2 = ((j_back4_0_reg_269 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln354_fu_589_p2 = ((j13_0_reg_280 == 12'd3072) ? 1'b1 : 1'b0);

assign j12_fu_494_p2 = (select_ln341_fu_478_p3 + 12'd1);

assign j13_fu_595_p2 = (j13_0_reg_280 + 12'd1);

assign j_back4_fu_565_p2 = (j_back4_0_reg_269 + 12'd1);

assign j_init4_fu_391_p2 = (j_init4_0_reg_225 + 12'd1);

assign k4_fu_466_p2 = (ap_phi_mux_k4_0_phi_fu_251_p4 + 10'd1);

assign select_ln341_1_fu_486_p3 = ((icmp_ln339_fu_472_p2[0:0] === 1'b1) ? k4_fu_466_p2 : ap_phi_mux_k4_0_phi_fu_251_p4);

assign select_ln341_fu_478_p3 = ((icmp_ln339_fu_472_p2[0:0] === 1'b1) ? 12'd0 : j12_0_reg_258);

assign sext_ln329_fu_368_p1 = $signed(add_ln329_fu_363_p2);

assign sext_ln341_fu_550_p1 = $signed(add_ln341_fu_545_p2);

assign sext_ln342_fu_537_p1 = $signed(add_ln342_fu_531_p2);

assign sext_ln352_fu_585_p1 = $signed(add_ln352_reg_742);

assign sext_ln357_fu_615_p1 = $signed(add_ln357_fu_610_p2);

assign sub_ln329_fu_341_p2 = (zext_ln329_fu_325_p1 - zext_ln329_1_fu_337_p1);

assign sub_ln341_fu_430_p2 = (zext_ln341_1_fu_414_p1 - zext_ln341_2_fu_426_p1);

assign sub_ln342_fu_525_p2 = (zext_ln342_1_fu_510_p1 - zext_ln342_2_fu_521_p1);

assign sub_ln352_fu_448_p2 = (zext_ln352_fu_444_p1 - zext_ln341_fu_410_p1);

assign tmp_34_fu_317_p3 = {{v167_0_reg_191}, {12'd0}};

assign tmp_35_fu_329_p3 = {{v167_0_reg_191}, {10'd0}};

assign tmp_36_fu_402_p3 = {{i9_0_reg_213}, {10'd0}};

assign tmp_37_fu_418_p3 = {{i9_0_reg_213}, {8'd0}};

assign tmp_38_fu_436_p3 = {{i9_0_reg_213}, {12'd0}};

assign tmp_39_fu_503_p3 = {{select_ln341_reg_678}, {10'd0}};

assign tmp_40_fu_514_p3 = {{select_ln341_reg_678}, {8'd0}};

assign v163_address0 = sext_ln341_fu_550_p1;

assign v164_address0 = sext_ln342_fu_537_p1;

assign v165_address0 = zext_ln356_fu_601_p1;

assign v166_address1 = v166_addr_2_reg_761_pp3_iter6_reg;

assign v166_d1 = reg_299;

assign v167_fu_311_p2 = (v167_0_reg_191 + 4'd1);

assign v168_fu_353_p2 = (v168_0_reg_202 + 12'd1);

assign zext_ln329_1_fu_337_p1 = tmp_35_fu_329_p3;

assign zext_ln329_2_fu_359_p1 = v168_0_reg_202;

assign zext_ln329_fu_325_p1 = tmp_34_fu_317_p3;

assign zext_ln336_fu_397_p1 = j_init4_0_reg_225;

assign zext_ln341_1_fu_414_p1 = tmp_36_fu_402_p3;

assign zext_ln341_2_fu_426_p1 = tmp_37_fu_418_p3;

assign zext_ln341_3_fu_542_p1 = select_ln341_1_reg_685_pp1_iter2_reg;

assign zext_ln341_4_fu_500_p1 = select_ln341_1_reg_685;

assign zext_ln341_fu_410_p1 = tmp_36_fu_402_p3;

assign zext_ln342_1_fu_510_p1 = tmp_39_fu_503_p3;

assign zext_ln342_2_fu_521_p1 = tmp_40_fu_514_p3;

assign zext_ln342_fu_555_p1 = select_ln341_reg_678_pp1_iter6_reg;

assign zext_ln351_fu_571_p1 = j_back4_0_reg_269;

assign zext_ln352_1_fu_576_p1 = j_back4_0_reg_269;

assign zext_ln352_fu_444_p1 = tmp_38_fu_436_p3;

assign zext_ln356_fu_601_p1 = j13_0_reg_280;

assign zext_ln357_fu_606_p1 = j13_0_reg_280;

always @ (posedge ap_clk) begin
    sub_ln329_reg_628[9:0] <= 10'b0000000000;
    sub_ln341_reg_658[7:0] <= 8'b00000000;
    sub_ln352_reg_663[9:0] <= 10'b0000000000;
end

endmodule //Linear_layer_ds1
