// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Res_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v116_address0,
        v116_ce0,
        v116_q0,
        v117_address0,
        v117_ce0,
        v117_q0,
        v118_address0,
        v118_ce0,
        v118_we0,
        v118_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v116_address0;
output   v116_ce0;
input  [31:0] v116_q0;
output  [13:0] v117_address0;
output   v117_ce0;
input  [31:0] v117_q0;
output  [13:0] v118_address0;
output   v118_ce0;
output   v118_we0;
output  [31:0] v118_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v116_ce0;
reg v117_ce0;
reg v118_ce0;
reg v118_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] indvar_flatten_reg_91;
reg   [3:0] i6_0_reg_102;
reg   [9:0] j9_0_reg_113;
wire   [0:0] icmp_ln251_fu_128_p2;
reg   [0:0] icmp_ln251_reg_217;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln251_reg_217_pp0_iter1_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter2_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter3_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter4_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter5_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter6_reg;
reg   [0:0] icmp_ln251_reg_217_pp0_iter7_reg;
wire   [13:0] add_ln251_fu_134_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] select_ln254_fu_152_p3;
reg   [9:0] select_ln254_reg_226;
wire   [3:0] select_ln254_1_fu_160_p3;
reg   [3:0] select_ln254_1_reg_231;
wire   [9:0] j9_fu_168_p2;
wire  signed [63:0] sext_ln254_fu_211_p1;
reg  signed [63:0] sext_ln254_reg_243;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter2_reg;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter3_reg;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter4_reg;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter5_reg;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter6_reg;
reg  signed [63:0] sext_ln254_reg_243_pp0_iter7_reg;
reg   [31:0] v121_reg_258;
reg   [31:0] v122_reg_263;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] v123_reg_268;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [3:0] ap_phi_mux_i6_0_phi_fu_106_p4;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln252_fu_146_p2;
wire   [3:0] i6_fu_140_p2;
wire   [13:0] tmp_fu_174_p3;
wire   [11:0] tmp_20_fu_185_p3;
wire   [14:0] zext_ln254_fu_181_p1;
wire   [14:0] zext_ln254_1_fu_192_p1;
wire   [14:0] sub_ln254_fu_196_p2;
wire   [14:0] zext_ln254_2_fu_202_p1;
wire   [14:0] add_ln254_fu_205_p2;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v121_reg_258),
    .din1(v122_reg_263),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i6_0_reg_102 <= select_ln254_1_reg_231;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i6_0_reg_102 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_91 <= add_ln251_fu_134_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_91 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j9_0_reg_113 <= j9_fu_168_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j9_0_reg_113 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln251_reg_217 <= icmp_ln251_fu_128_p2;
        icmp_ln251_reg_217_pp0_iter1_reg <= icmp_ln251_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln251_reg_217_pp0_iter2_reg <= icmp_ln251_reg_217_pp0_iter1_reg;
        icmp_ln251_reg_217_pp0_iter3_reg <= icmp_ln251_reg_217_pp0_iter2_reg;
        icmp_ln251_reg_217_pp0_iter4_reg <= icmp_ln251_reg_217_pp0_iter3_reg;
        icmp_ln251_reg_217_pp0_iter5_reg <= icmp_ln251_reg_217_pp0_iter4_reg;
        icmp_ln251_reg_217_pp0_iter6_reg <= icmp_ln251_reg_217_pp0_iter5_reg;
        icmp_ln251_reg_217_pp0_iter7_reg <= icmp_ln251_reg_217_pp0_iter6_reg;
        sext_ln254_reg_243_pp0_iter2_reg <= sext_ln254_reg_243;
        sext_ln254_reg_243_pp0_iter3_reg <= sext_ln254_reg_243_pp0_iter2_reg;
        sext_ln254_reg_243_pp0_iter4_reg <= sext_ln254_reg_243_pp0_iter3_reg;
        sext_ln254_reg_243_pp0_iter5_reg <= sext_ln254_reg_243_pp0_iter4_reg;
        sext_ln254_reg_243_pp0_iter6_reg <= sext_ln254_reg_243_pp0_iter5_reg;
        sext_ln254_reg_243_pp0_iter7_reg <= sext_ln254_reg_243_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln254_1_reg_231 <= select_ln254_1_fu_160_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln254_reg_226 <= select_ln254_fu_152_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln251_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln254_reg_243 <= sext_ln254_fu_211_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_217_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v121_reg_258 <= v116_q0;
        v122_reg_263 <= v117_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln251_reg_217_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v123_reg_268 <= grp_fu_124_p2;
    end
end

always @ (*) begin
    if ((icmp_ln251_fu_128_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_217 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i6_0_phi_fu_106_p4 = select_ln254_1_reg_231;
    end else begin
        ap_phi_mux_i6_0_phi_fu_106_p4 = i6_0_reg_102;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v116_ce0 = 1'b1;
    end else begin
        v116_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        v117_ce0 = 1'b1;
    end else begin
        v117_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v118_ce0 = 1'b1;
    end else begin
        v118_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_reg_217_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v118_we0 = 1'b1;
    end else begin
        v118_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln251_fu_128_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln251_fu_128_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln251_fu_134_p2 = (indvar_flatten_reg_91 + 14'd1);

assign add_ln254_fu_205_p2 = (sub_ln254_fu_196_p2 + zext_ln254_2_fu_202_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i6_fu_140_p2 = (ap_phi_mux_i6_0_phi_fu_106_p4 + 4'd1);

assign icmp_ln251_fu_128_p2 = ((indvar_flatten_reg_91 == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_146_p2 = ((j9_0_reg_113 == 10'd768) ? 1'b1 : 1'b0);

assign j9_fu_168_p2 = (select_ln254_fu_152_p3 + 10'd1);

assign select_ln254_1_fu_160_p3 = ((icmp_ln252_fu_146_p2[0:0] === 1'b1) ? i6_fu_140_p2 : ap_phi_mux_i6_0_phi_fu_106_p4);

assign select_ln254_fu_152_p3 = ((icmp_ln252_fu_146_p2[0:0] === 1'b1) ? 10'd0 : j9_0_reg_113);

assign sext_ln254_fu_211_p1 = $signed(add_ln254_fu_205_p2);

assign sub_ln254_fu_196_p2 = (zext_ln254_fu_181_p1 - zext_ln254_1_fu_192_p1);

assign tmp_20_fu_185_p3 = {{select_ln254_1_reg_231}, {8'd0}};

assign tmp_fu_174_p3 = {{select_ln254_1_reg_231}, {10'd0}};

assign v116_address0 = sext_ln254_fu_211_p1;

assign v117_address0 = sext_ln254_fu_211_p1;

assign v118_address0 = sext_ln254_reg_243_pp0_iter7_reg;

assign v118_d0 = v123_reg_268;

assign zext_ln254_1_fu_192_p1 = tmp_20_fu_185_p3;

assign zext_ln254_2_fu_202_p1 = select_ln254_reg_226;

assign zext_ln254_fu_181_p1 = tmp_fu_174_p3;

endmodule //Res_layer
