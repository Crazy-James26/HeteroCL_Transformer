// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_mh_separate_i_s_l_j_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Q_h_address0,
        Q_h_ce0,
        Q_h_we0,
        Q_h_d0,
        K_h_address0,
        K_h_ce0,
        K_h_we0,
        K_h_d0,
        V_h_address0,
        V_h_ce0,
        V_h_we0,
        V_h_d0,
        tmp,
        v75_address0,
        v75_ce0,
        v75_q0,
        v76_address0,
        v76_ce0,
        v76_q0,
        v77_address0,
        v77_ce0,
        v77_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] Q_h_address0;
output   Q_h_ce0;
output   Q_h_we0;
output  [31:0] Q_h_d0;
output  [9:0] K_h_address0;
output   K_h_ce0;
output   K_h_we0;
output  [31:0] K_h_d0;
output  [9:0] V_h_address0;
output   V_h_ce0;
output   V_h_we0;
output  [31:0] V_h_d0;
input  [9:0] tmp;
output  [13:0] v75_address0;
output   v75_ce0;
input  [31:0] v75_q0;
output  [13:0] v76_address0;
output   v76_ce0;
input  [31:0] v76_q0;
output  [13:0] v77_address0;
output   v77_ce0;
input  [31:0] v77_q0;

reg ap_idle;
reg Q_h_ce0;
reg Q_h_we0;
reg K_h_ce0;
reg K_h_we0;
reg V_h_ce0;
reg V_h_we0;
reg v75_ce0;
reg v76_ce0;
reg v77_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln176_fu_179_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln176_1_fu_217_p3;
reg   [3:0] select_ln176_1_reg_339;
wire   [9:0] zext_ln180_fu_225_p1;
reg   [9:0] zext_ln180_reg_346;
wire   [9:0] add_ln179_fu_229_p2;
reg   [9:0] add_ln179_reg_351;
wire   [9:0] add_ln180_fu_287_p2;
reg   [9:0] add_ln180_reg_356;
wire   [63:0] zext_ln179_2_fu_301_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln180_1_fu_308_p1;
reg   [6:0] j_s_fu_62;
wire   [6:0] add_ln177_fu_235_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_s_load;
reg   [3:0] i_s_fu_66;
reg   [3:0] ap_sig_allocacmp_i_s_load;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] add_ln176_1_fu_185_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln177_fu_203_p2;
wire   [3:0] add_ln176_fu_197_p2;
wire   [6:0] select_ln176_fu_209_p3;
wire   [11:0] tmp_19_fu_263_p3;
wire   [13:0] tmp_s_fu_256_p3;
wire   [13:0] zext_ln179_fu_270_p1;
wire   [9:0] tmp_20_fu_280_p3;
wire   [13:0] sub_ln179_fu_274_p2;
wire   [13:0] zext_ln179_1_fu_292_p1;
wire   [13:0] add_ln179_1_fu_295_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_s_fu_66 <= select_ln176_1_fu_217_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_s_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln176_1_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln176_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_s_fu_62 <= add_ln177_fu_235_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_s_fu_62 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln176_fu_179_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln179_reg_351 <= add_ln179_fu_229_p2;
        select_ln176_1_reg_339 <= select_ln176_1_fu_217_p3;
        zext_ln180_reg_346[6 : 0] <= zext_ln180_fu_225_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln180_reg_356 <= add_ln180_fu_287_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        K_h_ce0 = 1'b1;
    end else begin
        K_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        K_h_we0 = 1'b1;
    end else begin
        K_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Q_h_ce0 = 1'b1;
    end else begin
        Q_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Q_h_we0 = 1'b1;
    end else begin
        Q_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        V_h_ce0 = 1'b1;
    end else begin
        V_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        V_h_we0 = 1'b1;
    end else begin
        V_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln176_fu_179_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_s_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_s_load = i_s_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_s_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_s_load = j_s_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v75_ce0 = 1'b1;
    end else begin
        v75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v76_ce0 = 1'b1;
    end else begin
        v76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v77_ce0 = 1'b1;
    end else begin
        v77_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_h_address0 = zext_ln180_1_fu_308_p1;

assign K_h_d0 = v76_q0;

assign Q_h_address0 = zext_ln180_1_fu_308_p1;

assign Q_h_d0 = v75_q0;

assign V_h_address0 = zext_ln180_1_fu_308_p1;

assign V_h_d0 = v77_q0;

assign add_ln176_1_fu_185_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln176_fu_197_p2 = (ap_sig_allocacmp_i_s_load + 4'd1);

assign add_ln177_fu_235_p2 = (select_ln176_fu_209_p3 + 7'd1);

assign add_ln179_1_fu_295_p2 = (sub_ln179_fu_274_p2 + zext_ln179_1_fu_292_p1);

assign add_ln179_fu_229_p2 = (zext_ln180_fu_225_p1 + tmp);

assign add_ln180_fu_287_p2 = (tmp_20_fu_280_p3 + zext_ln180_reg_346);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln176_fu_179_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_203_p2 = ((ap_sig_allocacmp_j_s_load == 7'd64) ? 1'b1 : 1'b0);

assign select_ln176_1_fu_217_p3 = ((icmp_ln177_fu_203_p2[0:0] == 1'b1) ? add_ln176_fu_197_p2 : ap_sig_allocacmp_i_s_load);

assign select_ln176_fu_209_p3 = ((icmp_ln177_fu_203_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_s_load);

assign sub_ln179_fu_274_p2 = (tmp_s_fu_256_p3 - zext_ln179_fu_270_p1);

assign tmp_19_fu_263_p3 = {{select_ln176_1_reg_339}, {8'd0}};

assign tmp_20_fu_280_p3 = {{select_ln176_1_reg_339}, {6'd0}};

assign tmp_s_fu_256_p3 = {{select_ln176_1_reg_339}, {10'd0}};

assign v75_address0 = zext_ln179_2_fu_301_p1;

assign v76_address0 = zext_ln179_2_fu_301_p1;

assign v77_address0 = zext_ln179_2_fu_301_p1;

assign zext_ln179_1_fu_292_p1 = add_ln179_reg_351;

assign zext_ln179_2_fu_301_p1 = add_ln179_1_fu_295_p2;

assign zext_ln179_fu_270_p1 = tmp_19_fu_263_p3;

assign zext_ln180_1_fu_308_p1 = add_ln180_reg_356;

assign zext_ln180_fu_225_p1 = select_ln176_fu_209_p3;

always @ (posedge ap_clk) begin
    zext_ln180_reg_346[9:7] <= 3'b000;
end

endmodule //Bert_layer_Self_attention_Pipeline_l_mh_separate_i_s_l_j_s
