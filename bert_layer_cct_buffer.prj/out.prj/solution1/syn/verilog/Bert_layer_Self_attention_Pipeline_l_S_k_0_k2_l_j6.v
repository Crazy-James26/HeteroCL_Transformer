// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_S_k_0_k2_l_j6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        v89_address0,
        v89_ce0,
        v89_q0,
        V_h_address0,
        V_h_ce0,
        V_h_q0,
        v64_address0,
        v64_ce0,
        v64_we0,
        v64_d0,
        v64_address1,
        v64_ce1,
        v64_q1,
        grp_fu_514_p_din0,
        grp_fu_514_p_din1,
        grp_fu_514_p_opcode,
        grp_fu_514_p_dout0,
        grp_fu_514_p_ce,
        grp_fu_518_p_din0,
        grp_fu_518_p_din1,
        grp_fu_518_p_dout0,
        grp_fu_518_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] empty;
output  [7:0] v89_address0;
output   v89_ce0;
input  [31:0] v89_q0;
output  [9:0] V_h_address0;
output   V_h_ce0;
input  [31:0] V_h_q0;
output  [5:0] v64_address0;
output   v64_ce0;
output   v64_we0;
output  [31:0] v64_d0;
output  [5:0] v64_address1;
output   v64_ce1;
input  [31:0] v64_q1;
output  [31:0] grp_fu_514_p_din0;
output  [31:0] grp_fu_514_p_din1;
output  [0:0] grp_fu_514_p_opcode;
input  [31:0] grp_fu_514_p_dout0;
output   grp_fu_514_p_ce;
output  [31:0] grp_fu_518_p_din0;
output  [31:0] grp_fu_518_p_din1;
input  [31:0] grp_fu_518_p_dout0;
output   grp_fu_518_p_ce;

reg ap_idle;
reg v89_ce0;
reg V_h_ce0;
reg v64_ce0;
reg v64_we0;
reg v64_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln147_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln147_fu_166_p3;
reg   [6:0] select_ln147_reg_271;
wire   [3:0] select_ln147_1_fu_174_p3;
reg   [3:0] select_ln147_1_reg_277;
reg   [5:0] v64_addr_reg_293;
reg   [5:0] v64_addr_reg_293_pp0_iter2_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter3_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter4_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter5_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter6_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter7_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter8_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter9_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter10_reg;
reg   [5:0] v64_addr_reg_293_pp0_iter11_reg;
reg   [31:0] v89_load_reg_299;
reg   [31:0] v69_reg_304;
reg   [31:0] v70_reg_309;
reg   [31:0] v71_reg_314;
reg   [31:0] v72_reg_319;
wire   [63:0] add_ln147_1_cast_fu_218_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln151_1_fu_236_p1;
wire   [63:0] zext_ln148_fu_223_p1;
reg   [6:0] j6_fu_50;
wire   [6:0] add_ln148_fu_182_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j6_load;
reg   [3:0] k2_fu_54;
reg   [3:0] ap_sig_allocacmp_k2_load;
reg   [9:0] indvar_flatten37_fu_58;
wire   [9:0] add_ln147_2_fu_142_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten37_load;
wire   [0:0] icmp_ln148_fu_160_p2;
wire   [3:0] add_ln147_fu_154_p2;
wire   [7:0] zext_ln147_fu_210_p1;
wire   [7:0] add_ln147_1_fu_213_p2;
wire   [9:0] tmp_s_fu_203_p3;
wire   [9:0] zext_ln151_fu_227_p1;
wire   [9:0] add_ln151_fu_230_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten37_fu_58 <= add_ln147_2_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten37_fu_58 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j6_fu_50 <= add_ln148_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j6_fu_50 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k2_fu_54 <= select_ln147_1_fu_174_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k2_fu_54 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        v64_addr_reg_293_pp0_iter10_reg <= v64_addr_reg_293_pp0_iter9_reg;
        v64_addr_reg_293_pp0_iter11_reg <= v64_addr_reg_293_pp0_iter10_reg;
        v64_addr_reg_293_pp0_iter2_reg <= v64_addr_reg_293;
        v64_addr_reg_293_pp0_iter3_reg <= v64_addr_reg_293_pp0_iter2_reg;
        v64_addr_reg_293_pp0_iter4_reg <= v64_addr_reg_293_pp0_iter3_reg;
        v64_addr_reg_293_pp0_iter5_reg <= v64_addr_reg_293_pp0_iter4_reg;
        v64_addr_reg_293_pp0_iter6_reg <= v64_addr_reg_293_pp0_iter5_reg;
        v64_addr_reg_293_pp0_iter7_reg <= v64_addr_reg_293_pp0_iter6_reg;
        v64_addr_reg_293_pp0_iter8_reg <= v64_addr_reg_293_pp0_iter7_reg;
        v64_addr_reg_293_pp0_iter9_reg <= v64_addr_reg_293_pp0_iter8_reg;
        v69_reg_304 <= V_h_q0;
        v70_reg_309 <= grp_fu_518_p_dout0;
        v72_reg_319 <= grp_fu_514_p_dout0;
        v89_load_reg_299 <= v89_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        v64_addr_reg_293 <= zext_ln148_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln147_1_reg_277 <= select_ln147_1_fu_174_p3;
        select_ln147_reg_271 <= select_ln147_fu_166_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        v71_reg_314 <= v64_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        V_h_ce0 = 1'b1;
    end else begin
        V_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten37_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten37_load = indvar_flatten37_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j6_load = j6_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k2_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k2_load = k2_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        v64_ce0 = 1'b1;
    end else begin
        v64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        v64_ce1 = 1'b1;
    end else begin
        v64_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        v64_we0 = 1'b1;
    end else begin
        v64_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_ce0 = 1'b1;
    end else begin
        v89_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_h_address0 = zext_ln151_1_fu_236_p1;

assign add_ln147_1_cast_fu_218_p1 = add_ln147_1_fu_213_p2;

assign add_ln147_1_fu_213_p2 = (empty + zext_ln147_fu_210_p1);

assign add_ln147_2_fu_142_p2 = (ap_sig_allocacmp_indvar_flatten37_load + 10'd1);

assign add_ln147_fu_154_p2 = (ap_sig_allocacmp_k2_load + 4'd1);

assign add_ln148_fu_182_p2 = (select_ln147_fu_166_p3 + 7'd1);

assign add_ln151_fu_230_p2 = (tmp_s_fu_203_p3 + zext_ln151_fu_227_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_514_p_ce = 1'b1;

assign grp_fu_514_p_din0 = v71_reg_314;

assign grp_fu_514_p_din1 = v70_reg_309;

assign grp_fu_514_p_opcode = 2'd0;

assign grp_fu_518_p_ce = 1'b1;

assign grp_fu_518_p_din0 = v89_load_reg_299;

assign grp_fu_518_p_din1 = v69_reg_304;

assign icmp_ln147_fu_136_p2 = ((ap_sig_allocacmp_indvar_flatten37_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_160_p2 = ((ap_sig_allocacmp_j6_load == 7'd64) ? 1'b1 : 1'b0);

assign select_ln147_1_fu_174_p3 = ((icmp_ln148_fu_160_p2[0:0] == 1'b1) ? add_ln147_fu_154_p2 : ap_sig_allocacmp_k2_load);

assign select_ln147_fu_166_p3 = ((icmp_ln148_fu_160_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j6_load);

assign tmp_s_fu_203_p3 = {{select_ln147_1_reg_277}, {6'd0}};

assign v64_address0 = v64_addr_reg_293_pp0_iter11_reg;

assign v64_address1 = v64_addr_reg_293_pp0_iter4_reg;

assign v64_d0 = v72_reg_319;

assign v89_address0 = add_ln147_1_cast_fu_218_p1;

assign zext_ln147_fu_210_p1 = select_ln147_1_reg_277;

assign zext_ln148_fu_223_p1 = select_ln147_reg_271;

assign zext_ln151_1_fu_236_p1 = add_ln151_fu_230_p2;

assign zext_ln151_fu_227_p1 = select_ln147_reg_271;

endmodule //Bert_layer_Self_attention_Pipeline_l_S_k_0_k2_l_j6
