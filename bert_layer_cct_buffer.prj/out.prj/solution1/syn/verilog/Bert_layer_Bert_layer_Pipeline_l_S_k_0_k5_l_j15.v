// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_S_k_0_k5_l_j15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        v246_address0,
        v246_ce0,
        v246_q0,
        v231_address0,
        v231_ce0,
        v231_q0,
        v205_address0,
        v205_ce0,
        v205_we0,
        v205_d0,
        v205_address1,
        v205_ce1,
        v205_q1,
        grp_fu_690_p_din0,
        grp_fu_690_p_din1,
        grp_fu_690_p_opcode,
        grp_fu_690_p_dout0,
        grp_fu_690_p_ce,
        grp_fu_694_p_din0,
        grp_fu_694_p_din1,
        grp_fu_694_p_dout0,
        grp_fu_694_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] empty;
output  [15:0] v246_address0;
output   v246_ce0;
input  [31:0] v246_q0;
output  [21:0] v231_address0;
output   v231_ce0;
input  [31:0] v231_q0;
output  [9:0] v205_address0;
output   v205_ce0;
output   v205_we0;
output  [31:0] v205_d0;
output  [9:0] v205_address1;
output   v205_ce1;
input  [31:0] v205_q1;
output  [31:0] grp_fu_690_p_din0;
output  [31:0] grp_fu_690_p_din1;
output  [0:0] grp_fu_690_p_opcode;
input  [31:0] grp_fu_690_p_dout0;
output   grp_fu_690_p_ce;
output  [31:0] grp_fu_694_p_din0;
output  [31:0] grp_fu_694_p_din1;
input  [31:0] grp_fu_694_p_dout0;
output   grp_fu_694_p_ce;

reg ap_idle;
reg v246_ce0;
reg v231_ce0;
reg v205_ce0;
reg v205_we0;
reg v205_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln402_fu_143_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] select_ln402_fu_173_p3;
reg   [9:0] select_ln402_reg_301;
reg   [9:0] select_ln402_reg_301_pp0_iter2_reg;
reg   [9:0] select_ln402_reg_301_pp0_iter3_reg;
reg   [9:0] select_ln402_reg_301_pp0_iter4_reg;
reg   [9:0] select_ln402_reg_301_pp0_iter5_reg;
wire   [11:0] select_ln402_1_fu_181_p3;
reg   [11:0] select_ln402_1_reg_306;
wire   [21:0] add_ln406_fu_219_p2;
reg   [21:0] add_ln406_reg_311;
reg   [31:0] v246_load_reg_326;
reg   [31:0] v231_load_reg_331;
wire   [31:0] v210_fu_263_p1;
reg   [9:0] v205_addr_reg_341;
reg   [9:0] v205_addr_reg_341_pp0_iter7_reg;
reg   [9:0] v205_addr_reg_341_pp0_iter8_reg;
reg   [9:0] v205_addr_reg_341_pp0_iter9_reg;
reg   [9:0] v205_addr_reg_341_pp0_iter10_reg;
reg   [9:0] v205_addr_reg_341_pp0_iter11_reg;
reg   [9:0] v205_addr_reg_341_pp0_iter12_reg;
reg   [31:0] v211_reg_347;
reg   [31:0] v212_reg_352;
reg   [31:0] v213_reg_357;
wire   [63:0] add_ln402_1_cast_fu_254_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln406_1_fu_259_p1;
wire   [63:0] zext_ln403_fu_267_p1;
reg   [9:0] j15_fu_56;
wire   [9:0] add_ln403_fu_225_p2;
wire    ap_loop_init;
reg   [11:0] k5_fu_60;
reg   [21:0] indvar_flatten51_fu_64;
wire   [21:0] add_ln402_2_fu_149_p2;
wire   [0:0] icmp_ln403_fu_167_p2;
wire   [11:0] add_ln402_fu_161_p2;
wire   [19:0] tmp_37_fu_201_p3;
wire   [21:0] tmp_s_fu_193_p3;
wire   [21:0] zext_ln406_fu_209_p1;
wire   [21:0] sub_ln406_fu_213_p2;
wire   [21:0] zext_ln402_fu_189_p1;
wire   [15:0] zext_ln402_1_fu_246_p1;
wire   [15:0] add_ln402_1_fu_249_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten51_fu_64 <= 22'd0;
        end else if (((icmp_ln402_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten51_fu_64 <= add_ln402_2_fu_149_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j15_fu_56 <= 10'd0;
        end else if (((icmp_ln402_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j15_fu_56 <= add_ln403_fu_225_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k5_fu_60 <= 12'd0;
        end else if (((icmp_ln402_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k5_fu_60 <= select_ln402_1_fu_181_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln402_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln406_reg_311 <= add_ln406_fu_219_p2;
        select_ln402_1_reg_306 <= select_ln402_1_fu_181_p3;
        select_ln402_reg_301 <= select_ln402_fu_173_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        select_ln402_reg_301_pp0_iter2_reg <= select_ln402_reg_301;
        select_ln402_reg_301_pp0_iter3_reg <= select_ln402_reg_301_pp0_iter2_reg;
        select_ln402_reg_301_pp0_iter4_reg <= select_ln402_reg_301_pp0_iter3_reg;
        select_ln402_reg_301_pp0_iter5_reg <= select_ln402_reg_301_pp0_iter4_reg;
        v205_addr_reg_341 <= zext_ln403_fu_267_p1;
        v205_addr_reg_341_pp0_iter10_reg <= v205_addr_reg_341_pp0_iter9_reg;
        v205_addr_reg_341_pp0_iter11_reg <= v205_addr_reg_341_pp0_iter10_reg;
        v205_addr_reg_341_pp0_iter12_reg <= v205_addr_reg_341_pp0_iter11_reg;
        v205_addr_reg_341_pp0_iter7_reg <= v205_addr_reg_341;
        v205_addr_reg_341_pp0_iter8_reg <= v205_addr_reg_341_pp0_iter7_reg;
        v205_addr_reg_341_pp0_iter9_reg <= v205_addr_reg_341_pp0_iter8_reg;
        v211_reg_347 <= grp_fu_694_p_dout0;
        v213_reg_357 <= grp_fu_690_p_dout0;
        v231_load_reg_331 <= v231_q0;
        v246_load_reg_326 <= v246_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v212_reg_352 <= v205_q1;
    end
end

always @ (*) begin
    if (((icmp_ln402_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        v205_ce0 = 1'b1;
    end else begin
        v205_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        v205_ce1 = 1'b1;
    end else begin
        v205_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        v205_we0 = 1'b1;
    end else begin
        v205_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        v231_ce0 = 1'b1;
    end else begin
        v231_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        v246_ce0 = 1'b1;
    end else begin
        v246_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln402_1_cast_fu_254_p1 = add_ln402_1_fu_249_p2;

assign add_ln402_1_fu_249_p2 = (empty + zext_ln402_1_fu_246_p1);

assign add_ln402_2_fu_149_p2 = (indvar_flatten51_fu_64 + 22'd1);

assign add_ln402_fu_161_p2 = (k5_fu_60 + 12'd1);

assign add_ln403_fu_225_p2 = (select_ln402_fu_173_p3 + 10'd1);

assign add_ln406_fu_219_p2 = (sub_ln406_fu_213_p2 + zext_ln402_fu_189_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_690_p_ce = 1'b1;

assign grp_fu_690_p_din0 = v212_reg_352;

assign grp_fu_690_p_din1 = v211_reg_347;

assign grp_fu_690_p_opcode = 2'd0;

assign grp_fu_694_p_ce = 1'b1;

assign grp_fu_694_p_din0 = v246_load_reg_326;

assign grp_fu_694_p_din1 = v210_fu_263_p1;

assign icmp_ln402_fu_143_p2 = ((indvar_flatten51_fu_64 == 22'd2359296) ? 1'b1 : 1'b0);

assign icmp_ln403_fu_167_p2 = ((j15_fu_56 == 10'd768) ? 1'b1 : 1'b0);

assign select_ln402_1_fu_181_p3 = ((icmp_ln403_fu_167_p2[0:0] == 1'b1) ? add_ln402_fu_161_p2 : k5_fu_60);

assign select_ln402_fu_173_p3 = ((icmp_ln403_fu_167_p2[0:0] == 1'b1) ? 10'd0 : j15_fu_56);

assign sub_ln406_fu_213_p2 = (tmp_s_fu_193_p3 - zext_ln406_fu_209_p1);

assign tmp_37_fu_201_p3 = {{select_ln402_fu_173_p3}, {10'd0}};

assign tmp_s_fu_193_p3 = {{select_ln402_fu_173_p3}, {12'd0}};

assign v205_address0 = v205_addr_reg_341_pp0_iter12_reg;

assign v205_address1 = zext_ln403_fu_267_p1;

assign v205_d0 = v213_reg_357;

assign v210_fu_263_p1 = v231_load_reg_331;

assign v231_address0 = zext_ln406_1_fu_259_p1;

assign v246_address0 = add_ln402_1_cast_fu_254_p1;

assign zext_ln402_1_fu_246_p1 = select_ln402_1_reg_306;

assign zext_ln402_fu_189_p1 = select_ln402_1_fu_181_p3;

assign zext_ln403_fu_267_p1 = select_ln402_reg_301_pp0_iter5_reg;

assign zext_ln406_1_fu_259_p1 = add_ln406_reg_311;

assign zext_ln406_fu_209_p1 = tmp_37_fu_201_p3;

endmodule //Bert_layer_Bert_layer_Pipeline_l_S_k_0_k5_l_j15
