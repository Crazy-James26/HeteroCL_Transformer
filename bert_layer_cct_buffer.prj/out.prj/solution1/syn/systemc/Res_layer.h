// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Res_layer_HH_
#define _Res_layer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Bert_layer_fadd_3bkb.h"

namespace ap_rtl {

struct Res_layer : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > v116_address0;
    sc_out< sc_logic > v116_ce0;
    sc_in< sc_lv<32> > v116_q0;
    sc_out< sc_lv<14> > v117_address0;
    sc_out< sc_logic > v117_ce0;
    sc_in< sc_lv<32> > v117_q0;
    sc_out< sc_lv<14> > v118_address0;
    sc_out< sc_logic > v118_ce0;
    sc_out< sc_logic > v118_we0;
    sc_out< sc_lv<32> > v118_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Res_layer(sc_module_name name);
    SC_HAS_PROCESS(Res_layer);

    ~Res_layer();

    sc_trace_file* mVcdFile;

    Bert_layer_fadd_3bkb<1,5,32,32,32>* Bert_layer_fadd_3bkb_U43;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > indvar_flatten_reg_91;
    sc_signal< sc_lv<4> > i6_0_reg_102;
    sc_signal< sc_lv<10> > j9_0_reg_113;
    sc_signal< sc_lv<1> > icmp_ln251_fu_128_p2;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter6_reg;
    sc_signal< sc_lv<1> > icmp_ln251_reg_217_pp0_iter7_reg;
    sc_signal< sc_lv<14> > add_ln251_fu_134_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<10> > select_ln254_fu_152_p3;
    sc_signal< sc_lv<10> > select_ln254_reg_226;
    sc_signal< sc_lv<4> > select_ln254_1_fu_160_p3;
    sc_signal< sc_lv<4> > select_ln254_1_reg_231;
    sc_signal< sc_lv<10> > j9_fu_168_p2;
    sc_signal< sc_lv<64> > sext_ln254_fu_211_p1;
    sc_signal< sc_lv<64> > sext_ln254_reg_243;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter2_reg;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter3_reg;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter4_reg;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter5_reg;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter6_reg;
    sc_signal< sc_lv<64> > sext_ln254_reg_243_pp0_iter7_reg;
    sc_signal< sc_lv<32> > v121_reg_258;
    sc_signal< sc_lv<32> > v122_reg_263;
    sc_signal< sc_lv<32> > grp_fu_124_p2;
    sc_signal< sc_lv<32> > v123_reg_268;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<4> > ap_phi_mux_i6_0_phi_fu_106_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln252_fu_146_p2;
    sc_signal< sc_lv<4> > i6_fu_140_p2;
    sc_signal< sc_lv<14> > tmp_fu_174_p3;
    sc_signal< sc_lv<12> > tmp_20_fu_185_p3;
    sc_signal< sc_lv<15> > zext_ln254_fu_181_p1;
    sc_signal< sc_lv<15> > zext_ln254_1_fu_192_p1;
    sc_signal< sc_lv<15> > sub_ln254_fu_196_p2;
    sc_signal< sc_lv<15> > zext_ln254_2_fu_202_p1;
    sc_signal< sc_lv<15> > add_ln254_fu_205_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<14> ap_const_lv14_2400;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<10> ap_const_lv10_300;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln251_fu_134_p2();
    void thread_add_ln254_fu_205_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i6_0_phi_fu_106_p4();
    void thread_ap_ready();
    void thread_i6_fu_140_p2();
    void thread_icmp_ln251_fu_128_p2();
    void thread_icmp_ln252_fu_146_p2();
    void thread_j9_fu_168_p2();
    void thread_select_ln254_1_fu_160_p3();
    void thread_select_ln254_fu_152_p3();
    void thread_sext_ln254_fu_211_p1();
    void thread_sub_ln254_fu_196_p2();
    void thread_tmp_20_fu_185_p3();
    void thread_tmp_fu_174_p3();
    void thread_v116_address0();
    void thread_v116_ce0();
    void thread_v117_address0();
    void thread_v117_ce0();
    void thread_v118_address0();
    void thread_v118_ce0();
    void thread_v118_d0();
    void thread_v118_we0();
    void thread_zext_ln254_1_fu_192_p1();
    void thread_zext_ln254_2_fu_202_p1();
    void thread_zext_ln254_fu_181_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
