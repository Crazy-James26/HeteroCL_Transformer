// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Attention_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v22_address0,
        v22_ce0,
        v22_q0,
        v23_address0,
        v23_ce0,
        v23_q0,
        v24_address0,
        v24_ce0,
        v24_we0,
        v24_d0,
        v24_q0,
        v24_address1,
        v24_ce1,
        v24_we1,
        v24_d1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_pp1_stage0 = 12'd64;
parameter    ap_ST_fsm_state19 = 12'd128;
parameter    ap_ST_fsm_pp2_stage0 = 12'd256;
parameter    ap_ST_fsm_state22 = 12'd512;
parameter    ap_ST_fsm_pp3_stage0 = 12'd1024;
parameter    ap_ST_fsm_state30 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v22_address0;
output   v22_ce0;
input  [31:0] v22_q0;
output  [9:0] v23_address0;
output   v23_ce0;
input  [31:0] v23_q0;
output  [7:0] v24_address0;
output   v24_ce0;
output   v24_we0;
output  [31:0] v24_d0;
input  [31:0] v24_q0;
output  [7:0] v24_address1;
output   v24_ce1;
output   v24_we1;
output  [31:0] v24_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v22_ce0;
reg v23_ce0;
reg[7:0] v24_address0;
reg v24_ce0;
reg v24_we0;
reg[31:0] v24_d0;
reg v24_ce1;
reg v24_we1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_213;
reg   [6:0] k1_0_reg_224;
reg   [3:0] j2_0_reg_235;
reg   [3:0] j_back1_0_reg_246;
reg   [3:0] j3_0_reg_258;
wire   [31:0] grp_fu_273_p2;
reg   [31:0] reg_278;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_state15_pp1_stage0_iter8;
wire    ap_block_state16_pp1_stage0_iter9;
wire    ap_block_state17_pp1_stage0_iter10;
wire    ap_block_state18_pp1_stage0_iter11;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln75_reg_616;
reg   [0:0] icmp_ln75_reg_616_pp1_iter4_reg;
reg    ap_enable_reg_pp3_iter5;
wire    ap_block_state23_pp3_stage0_iter0;
wire    ap_block_state24_pp3_stage0_iter1;
wire    ap_block_state25_pp3_stage0_iter2;
wire    ap_block_state26_pp3_stage0_iter3;
wire    ap_block_state27_pp3_stage0_iter4;
wire    ap_block_state28_pp3_stage0_iter5;
wire    ap_block_state29_pp3_stage0_iter6;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln91_reg_690;
reg   [0:0] icmp_ln91_reg_690_pp3_iter4_reg;
wire   [3:0] v25_fu_290_p2;
reg   [3:0] v25_reg_570;
wire    ap_CS_fsm_state2;
wire   [8:0] sub_ln66_fu_320_p2;
reg   [8:0] sub_ln66_reg_575;
wire   [0:0] icmp_ln64_fu_284_p2;
wire   [3:0] v26_fu_332_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln69_fu_352_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] i1_fu_358_p2;
reg   [3:0] i1_reg_592;
wire   [3:0] j_init1_fu_370_p2;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln89_fu_389_p1;
reg   [10:0] zext_ln89_reg_605;
wire    ap_CS_fsm_state6;
wire   [8:0] sub_ln89_fu_417_p2;
reg   [8:0] sub_ln89_reg_610;
wire   [0:0] icmp_ln75_fu_423_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln75_reg_616_pp1_iter1_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter2_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter3_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter5_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter6_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter7_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter8_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter9_reg;
reg   [0:0] icmp_ln75_reg_616_pp1_iter10_reg;
wire   [9:0] add_ln75_fu_429_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] select_ln78_fu_447_p3;
reg   [3:0] select_ln78_reg_625;
reg   [3:0] select_ln78_reg_625_pp1_iter1_reg;
reg   [3:0] select_ln78_reg_625_pp1_iter2_reg;
reg   [3:0] select_ln78_reg_625_pp1_iter3_reg;
wire   [6:0] select_ln78_1_fu_455_p3;
reg   [6:0] select_ln78_1_reg_630;
wire   [3:0] j2_fu_500_p2;
reg   [31:0] v22_load_reg_650;
reg   [31:0] v33_reg_655;
reg   [3:0] v28_addr_2_reg_660;
reg   [3:0] v28_addr_2_reg_660_pp1_iter5_reg;
reg   [3:0] v28_addr_2_reg_660_pp1_iter6_reg;
reg   [3:0] v28_addr_2_reg_660_pp1_iter7_reg;
reg   [3:0] v28_addr_2_reg_660_pp1_iter8_reg;
reg   [3:0] v28_addr_2_reg_660_pp1_iter9_reg;
reg   [3:0] v28_addr_2_reg_660_pp1_iter10_reg;
wire   [31:0] v28_q0;
reg   [31:0] v35_reg_666;
wire   [31:0] grp_fu_269_p2;
reg   [31:0] v36_reg_671;
wire   [0:0] icmp_ln86_fu_510_p2;
reg   [0:0] icmp_ln86_reg_676;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state20_pp2_stage0_iter0;
wire    ap_block_state21_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [3:0] j_back1_fu_516_p2;
reg   [3:0] j_back1_reg_680;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln91_fu_541_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln91_reg_690_pp3_iter1_reg;
reg   [0:0] icmp_ln91_reg_690_pp3_iter2_reg;
reg   [0:0] icmp_ln91_reg_690_pp3_iter3_reg;
reg   [0:0] icmp_ln91_reg_690_pp3_iter5_reg;
wire   [3:0] j3_fu_547_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [7:0] v24_addr_2_reg_699;
reg   [7:0] v24_addr_2_reg_699_pp3_iter1_reg;
reg   [7:0] v24_addr_2_reg_699_pp3_iter2_reg;
reg   [7:0] v24_addr_2_reg_699_pp3_iter3_reg;
reg   [7:0] v24_addr_2_reg_699_pp3_iter4_reg;
reg   [7:0] v24_addr_2_reg_699_pp3_iter5_reg;
reg   [31:0] v40_reg_705;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
wire    ap_CS_fsm_state19;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state20;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state22;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state23;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter6;
reg   [3:0] v28_address0;
reg    v28_ce0;
reg    v28_we0;
reg   [3:0] v28_address1;
reg    v28_ce1;
reg    v28_we1;
wire   [31:0] v28_q1;
reg   [3:0] v25_0_reg_168;
wire   [0:0] icmp_ln65_fu_326_p2;
reg   [3:0] v26_0_reg_179;
reg   [3:0] i1_0_reg_190;
wire    ap_CS_fsm_state30;
reg   [3:0] j_init1_0_reg_202;
wire   [0:0] icmp_ln71_fu_364_p2;
reg   [6:0] ap_phi_mux_k1_0_phi_fu_228_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_j_back1_0_phi_fu_250_p4;
wire    ap_block_pp2_stage0;
wire  signed [63:0] sext_ln66_fu_347_p1;
wire   [63:0] zext_ln73_fu_376_p1;
wire   [63:0] zext_ln78_1_fu_472_p1;
wire   [63:0] zext_ln79_2_fu_495_p1;
wire   [63:0] zext_ln79_fu_506_p1;
wire   [63:0] zext_ln88_fu_522_p1;
wire  signed [63:0] sext_ln89_fu_536_p1;
wire  signed [63:0] sext_ln93_fu_562_p1;
wire    ap_block_pp3_stage0;
reg   [31:0] grp_fu_273_p0;
reg   [31:0] grp_fu_273_p1;
wire   [7:0] tmp_52_fu_296_p3;
wire   [5:0] tmp_53_fu_308_p3;
wire   [8:0] zext_ln66_fu_304_p1;
wire   [8:0] zext_ln66_1_fu_316_p1;
wire   [8:0] zext_ln66_2_fu_338_p1;
wire   [8:0] add_ln66_fu_342_p2;
wire   [9:0] tmp_54_fu_381_p3;
wire   [7:0] tmp_55_fu_393_p3;
wire   [5:0] tmp_56_fu_405_p3;
wire   [8:0] zext_ln89_1_fu_401_p1;
wire   [8:0] zext_ln89_2_fu_413_p1;
wire   [0:0] icmp_ln76_fu_441_p2;
wire   [6:0] k1_fu_435_p2;
wire   [10:0] zext_ln78_fu_463_p1;
wire   [10:0] add_ln78_fu_467_p2;
wire   [9:0] tmp_57_fu_477_p3;
wire   [10:0] zext_ln79_1_fu_485_p1;
wire   [10:0] add_ln79_fu_489_p2;
wire   [8:0] zext_ln89_3_fu_527_p1;
wire   [8:0] add_ln89_fu_531_p2;
wire   [8:0] zext_ln93_fu_553_p1;
wire   [8:0] add_ln93_fu_557_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
end

Attention_layer_v28 #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
v28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v28_address0),
    .ce0(v28_ce0),
    .we0(v28_we0),
    .d0(32'd0),
    .q0(v28_q0),
    .address1(v28_address1),
    .ce1(v28_ce1),
    .we1(v28_we1),
    .d1(v36_reg_671),
    .q1(v28_q1)
);

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v35_reg_666),
    .din1(reg_278),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_273_p0),
    .din1(grp_fu_273_p1),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state20))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state20);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state23)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp3_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_284_p2 == 1'd1))) begin
        i1_0_reg_190 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        i1_0_reg_190 <= i1_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_213 <= add_ln75_fu_429_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_213 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j2_0_reg_235 <= j2_fu_500_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j2_0_reg_235 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j3_0_reg_258 <= 4'd0;
    end else if (((icmp_ln91_fu_541_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j3_0_reg_258 <= j3_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_back1_0_reg_246 <= 4'd0;
    end else if (((icmp_ln86_reg_676 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_back1_0_reg_246 <= j_back1_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_init1_0_reg_202 <= j_init1_fu_370_p2;
    end else if (((icmp_ln69_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_init1_0_reg_202 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k1_0_reg_224 <= select_ln78_1_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k1_0_reg_224 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v25_0_reg_168 <= v25_reg_570;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v25_0_reg_168 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v26_0_reg_179 <= 4'd0;
    end else if (((icmp_ln65_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v26_0_reg_179 <= v26_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_reg_592 <= i1_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln75_reg_616 <= icmp_ln75_fu_423_p2;
        icmp_ln75_reg_616_pp1_iter1_reg <= icmp_ln75_reg_616;
        select_ln78_reg_625_pp1_iter1_reg <= select_ln78_reg_625;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln75_reg_616_pp1_iter10_reg <= icmp_ln75_reg_616_pp1_iter9_reg;
        icmp_ln75_reg_616_pp1_iter2_reg <= icmp_ln75_reg_616_pp1_iter1_reg;
        icmp_ln75_reg_616_pp1_iter3_reg <= icmp_ln75_reg_616_pp1_iter2_reg;
        icmp_ln75_reg_616_pp1_iter4_reg <= icmp_ln75_reg_616_pp1_iter3_reg;
        icmp_ln75_reg_616_pp1_iter5_reg <= icmp_ln75_reg_616_pp1_iter4_reg;
        icmp_ln75_reg_616_pp1_iter6_reg <= icmp_ln75_reg_616_pp1_iter5_reg;
        icmp_ln75_reg_616_pp1_iter7_reg <= icmp_ln75_reg_616_pp1_iter6_reg;
        icmp_ln75_reg_616_pp1_iter8_reg <= icmp_ln75_reg_616_pp1_iter7_reg;
        icmp_ln75_reg_616_pp1_iter9_reg <= icmp_ln75_reg_616_pp1_iter8_reg;
        select_ln78_reg_625_pp1_iter2_reg <= select_ln78_reg_625_pp1_iter1_reg;
        select_ln78_reg_625_pp1_iter3_reg <= select_ln78_reg_625_pp1_iter2_reg;
        v28_addr_2_reg_660_pp1_iter10_reg <= v28_addr_2_reg_660_pp1_iter9_reg;
        v28_addr_2_reg_660_pp1_iter5_reg <= v28_addr_2_reg_660;
        v28_addr_2_reg_660_pp1_iter6_reg <= v28_addr_2_reg_660_pp1_iter5_reg;
        v28_addr_2_reg_660_pp1_iter7_reg <= v28_addr_2_reg_660_pp1_iter6_reg;
        v28_addr_2_reg_660_pp1_iter8_reg <= v28_addr_2_reg_660_pp1_iter7_reg;
        v28_addr_2_reg_660_pp1_iter9_reg <= v28_addr_2_reg_660_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln86_reg_676 <= icmp_ln86_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln91_reg_690 <= icmp_ln91_fu_541_p2;
        icmp_ln91_reg_690_pp3_iter1_reg <= icmp_ln91_reg_690;
        v24_addr_2_reg_699_pp3_iter1_reg <= v24_addr_2_reg_699;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln91_reg_690_pp3_iter2_reg <= icmp_ln91_reg_690_pp3_iter1_reg;
        icmp_ln91_reg_690_pp3_iter3_reg <= icmp_ln91_reg_690_pp3_iter2_reg;
        icmp_ln91_reg_690_pp3_iter4_reg <= icmp_ln91_reg_690_pp3_iter3_reg;
        icmp_ln91_reg_690_pp3_iter5_reg <= icmp_ln91_reg_690_pp3_iter4_reg;
        v24_addr_2_reg_699_pp3_iter2_reg <= v24_addr_2_reg_699_pp3_iter1_reg;
        v24_addr_2_reg_699_pp3_iter3_reg <= v24_addr_2_reg_699_pp3_iter2_reg;
        v24_addr_2_reg_699_pp3_iter4_reg <= v24_addr_2_reg_699_pp3_iter3_reg;
        v24_addr_2_reg_699_pp3_iter5_reg <= v24_addr_2_reg_699_pp3_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_back1_reg_680 <= j_back1_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln91_reg_690_pp3_iter4_reg == 1'd0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln75_reg_616_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
        reg_278 <= grp_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln78_1_reg_630 <= select_ln78_1_fu_455_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_423_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln78_reg_625 <= select_ln78_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln66_reg_575[8 : 2] <= sub_ln66_fu_320_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln89_reg_610[8 : 2] <= sub_ln89_fu_417_p2[8 : 2];
        zext_ln89_reg_605[9 : 6] <= zext_ln89_fu_389_p1[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        v22_load_reg_650 <= v22_q0;
        v33_reg_655 <= v23_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_541_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v24_addr_2_reg_699 <= sext_ln93_fu_562_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v25_reg_570 <= v25_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_616_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v28_addr_2_reg_660 <= zext_ln79_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_616_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        v35_reg_666 <= v28_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_616_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v36_reg_671 <= grp_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_690 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v40_reg_705 <= v24_q0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_423_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_510_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln91_fu_541_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln69_fu_352_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln86_reg_676 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_back1_0_phi_fu_250_p4 = j_back1_reg_680;
    end else begin
        ap_phi_mux_j_back1_0_phi_fu_250_p4 = j_back1_0_reg_246;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_616 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_k1_0_phi_fu_228_p4 = select_ln78_1_reg_630;
    end else begin
        ap_phi_mux_k1_0_phi_fu_228_p4 = k1_0_reg_224;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln69_fu_352_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_273_p0 = v40_reg_705;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_273_p0 = v22_load_reg_650;
    end else begin
        grp_fu_273_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_273_p1 = 32'd1040187392;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        grp_fu_273_p1 = v33_reg_655;
    end else begin
        grp_fu_273_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        v22_ce0 = 1'b1;
    end else begin
        v22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        v23_ce0 = 1'b1;
    end else begin
        v23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        v24_address0 = sext_ln93_fu_562_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v24_address0 = sext_ln89_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v24_address0 = sext_ln66_fu_347_p1;
    end else begin
        v24_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        v24_ce0 = 1'b1;
    end else begin
        v24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v24_ce1 = 1'b1;
    end else begin
        v24_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v24_d0 = v28_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v24_d0 = 32'd0;
    end else begin
        v24_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_676 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln65_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v24_we0 = 1'b1;
    end else begin
        v24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_690_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v24_we1 = 1'b1;
    end else begin
        v24_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        v28_address0 = zext_ln79_fu_506_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v28_address0 = zext_ln73_fu_376_p1;
    end else begin
        v28_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v28_address1 = zext_ln88_fu_522_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        v28_address1 = v28_addr_2_reg_660_pp1_iter10_reg;
    end else begin
        v28_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        v28_ce0 = 1'b1;
    end else begin
        v28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        v28_ce1 = 1'b1;
    end else begin
        v28_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v28_we0 = 1'b1;
    end else begin
        v28_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_616_pp1_iter10_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        v28_we1 = 1'b1;
    end else begin
        v28_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln64_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln65_fu_326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln69_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln71_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln75_fu_423_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter10 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter10 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln75_fu_423_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln86_fu_510_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln86_fu_510_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln91_fu_541_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((ap_enable_reg_pp3_iter5 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter5 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln91_fu_541_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_342_p2 = (sub_ln66_reg_575 + zext_ln66_2_fu_338_p1);

assign add_ln75_fu_429_p2 = (indvar_flatten_reg_213 + 10'd1);

assign add_ln78_fu_467_p2 = (zext_ln78_fu_463_p1 + zext_ln89_reg_605);

assign add_ln79_fu_489_p2 = (zext_ln78_fu_463_p1 + zext_ln79_1_fu_485_p1);

assign add_ln89_fu_531_p2 = (sub_ln89_reg_610 + zext_ln89_3_fu_527_p1);

assign add_ln93_fu_557_p2 = (sub_ln89_reg_610 + zext_ln93_fu_553_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign i1_fu_358_p2 = (i1_0_reg_190 + 4'd1);

assign icmp_ln64_fu_284_p2 = ((v25_0_reg_168 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_326_p2 = ((v26_0_reg_179 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_352_p2 = ((i1_0_reg_190 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_364_p2 = ((j_init1_0_reg_202 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_423_p2 = ((indvar_flatten_reg_213 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_441_p2 = ((j2_0_reg_235 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_510_p2 = ((ap_phi_mux_j_back1_0_phi_fu_250_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_541_p2 = ((j3_0_reg_258 == 4'd12) ? 1'b1 : 1'b0);

assign j2_fu_500_p2 = (select_ln78_fu_447_p3 + 4'd1);

assign j3_fu_547_p2 = (j3_0_reg_258 + 4'd1);

assign j_back1_fu_516_p2 = (ap_phi_mux_j_back1_0_phi_fu_250_p4 + 4'd1);

assign j_init1_fu_370_p2 = (j_init1_0_reg_202 + 4'd1);

assign k1_fu_435_p2 = (ap_phi_mux_k1_0_phi_fu_228_p4 + 7'd1);

assign select_ln78_1_fu_455_p3 = ((icmp_ln76_fu_441_p2[0:0] === 1'b1) ? k1_fu_435_p2 : ap_phi_mux_k1_0_phi_fu_228_p4);

assign select_ln78_fu_447_p3 = ((icmp_ln76_fu_441_p2[0:0] === 1'b1) ? 4'd0 : j2_0_reg_235);

assign sext_ln66_fu_347_p1 = $signed(add_ln66_fu_342_p2);

assign sext_ln89_fu_536_p1 = $signed(add_ln89_fu_531_p2);

assign sext_ln93_fu_562_p1 = $signed(add_ln93_fu_557_p2);

assign sub_ln66_fu_320_p2 = (zext_ln66_fu_304_p1 - zext_ln66_1_fu_316_p1);

assign sub_ln89_fu_417_p2 = (zext_ln89_1_fu_401_p1 - zext_ln89_2_fu_413_p1);

assign tmp_52_fu_296_p3 = {{v25_0_reg_168}, {4'd0}};

assign tmp_53_fu_308_p3 = {{v25_0_reg_168}, {2'd0}};

assign tmp_54_fu_381_p3 = {{i1_0_reg_190}, {6'd0}};

assign tmp_55_fu_393_p3 = {{i1_0_reg_190}, {4'd0}};

assign tmp_56_fu_405_p3 = {{i1_0_reg_190}, {2'd0}};

assign tmp_57_fu_477_p3 = {{select_ln78_fu_447_p3}, {6'd0}};

assign v22_address0 = zext_ln78_1_fu_472_p1;

assign v23_address0 = zext_ln79_2_fu_495_p1;

assign v24_address1 = v24_addr_2_reg_699_pp3_iter5_reg;

assign v24_d1 = reg_278;

assign v25_fu_290_p2 = (v25_0_reg_168 + 4'd1);

assign v26_fu_332_p2 = (v26_0_reg_179 + 4'd1);

assign zext_ln66_1_fu_316_p1 = tmp_53_fu_308_p3;

assign zext_ln66_2_fu_338_p1 = v26_0_reg_179;

assign zext_ln66_fu_304_p1 = tmp_52_fu_296_p3;

assign zext_ln73_fu_376_p1 = j_init1_0_reg_202;

assign zext_ln78_1_fu_472_p1 = add_ln78_fu_467_p2;

assign zext_ln78_fu_463_p1 = select_ln78_1_fu_455_p3;

assign zext_ln79_1_fu_485_p1 = tmp_57_fu_477_p3;

assign zext_ln79_2_fu_495_p1 = add_ln79_fu_489_p2;

assign zext_ln79_fu_506_p1 = select_ln78_reg_625_pp1_iter3_reg;

assign zext_ln88_fu_522_p1 = ap_phi_mux_j_back1_0_phi_fu_250_p4;

assign zext_ln89_1_fu_401_p1 = tmp_55_fu_393_p3;

assign zext_ln89_2_fu_413_p1 = tmp_56_fu_405_p3;

assign zext_ln89_3_fu_527_p1 = j_back1_0_reg_246;

assign zext_ln89_fu_389_p1 = tmp_54_fu_381_p3;

assign zext_ln93_fu_553_p1 = j3_0_reg_258;

always @ (posedge ap_clk) begin
    sub_ln66_reg_575[1:0] <= 2'b00;
    zext_ln89_reg_605[5:0] <= 6'b000000;
    zext_ln89_reg_605[10] <= 1'b0;
    sub_ln89_reg_610[1:0] <= 2'b00;
end

endmodule //Attention_layer
