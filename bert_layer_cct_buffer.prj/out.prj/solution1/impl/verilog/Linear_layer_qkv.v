// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Linear_layer_qkv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0,
        v3_q0,
        v3_address1,
        v3_ce1,
        v3_we1,
        v3_d1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_pp1_stage0 = 12'd64;
parameter    ap_ST_fsm_state22 = 12'd128;
parameter    ap_ST_fsm_pp2_stage0 = 12'd256;
parameter    ap_ST_fsm_state25 = 12'd512;
parameter    ap_ST_fsm_pp3_stage0 = 12'd1024;
parameter    ap_ST_fsm_state34 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [9:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;
input  [31:0] v3_q0;
output  [13:0] v3_address1;
output   v3_ce1;
output   v3_we1;
output  [31:0] v3_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v0_ce0;
reg v1_ce0;
reg v2_ce0;
reg[13:0] v3_address0;
reg v3_ce0;
reg v3_we0;
reg[31:0] v3_d0;
reg v3_ce1;
reg v3_we1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [19:0] indvar_flatten_reg_230;
reg   [9:0] k_0_reg_241;
reg   [9:0] j_0_reg_252;
reg   [9:0] j_back_0_reg_263;
reg   [9:0] j1_0_reg_274;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] reg_293;
reg    ap_enable_reg_pp1_iter13;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_state15_pp1_stage0_iter8;
wire    ap_block_state16_pp1_stage0_iter9;
wire    ap_block_state17_pp1_stage0_iter10;
wire    ap_block_state18_pp1_stage0_iter11;
wire    ap_block_state19_pp1_stage0_iter12;
wire    ap_block_state20_pp1_stage0_iter13;
wire    ap_block_state21_pp1_stage0_iter14;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln33_reg_637;
reg   [0:0] icmp_ln33_reg_637_pp1_iter12_reg;
reg    ap_enable_reg_pp3_iter6;
wire    ap_block_state26_pp3_stage0_iter0;
wire    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
wire    ap_block_state29_pp3_stage0_iter3;
wire    ap_block_state30_pp3_stage0_iter4;
wire    ap_block_state31_pp3_stage0_iter5;
wire    ap_block_state32_pp3_stage0_iter6;
wire    ap_block_state33_pp3_stage0_iter7;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln49_reg_720;
reg   [0:0] icmp_ln49_reg_720_pp3_iter5_reg;
wire   [3:0] v4_fu_305_p2;
reg   [3:0] v4_reg_595;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln24_fu_335_p2;
reg   [14:0] sub_ln24_reg_600;
wire   [0:0] icmp_ln22_fu_299_p2;
wire   [9:0] v5_fu_347_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln27_fu_367_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] i_fu_373_p2;
reg   [3:0] i_reg_617;
wire   [9:0] j_init_fu_385_p2;
wire    ap_CS_fsm_state5;
wire   [14:0] sub_ln36_fu_420_p2;
reg   [14:0] sub_ln36_reg_630;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln33_fu_426_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln33_reg_637_pp1_iter1_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter2_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter3_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter4_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter5_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter6_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter7_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter8_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter9_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter10_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter11_reg;
reg   [0:0] icmp_ln33_reg_637_pp1_iter13_reg;
wire   [19:0] add_ln33_fu_432_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [9:0] select_ln36_fu_450_p3;
reg   [9:0] select_ln36_reg_646;
reg   [9:0] select_ln36_reg_646_pp1_iter1_reg;
reg   [9:0] select_ln36_reg_646_pp1_iter2_reg;
reg   [9:0] select_ln36_reg_646_pp1_iter3_reg;
reg   [9:0] select_ln36_reg_646_pp1_iter4_reg;
reg   [9:0] select_ln36_reg_646_pp1_iter5_reg;
reg   [9:0] select_ln36_reg_646_pp1_iter6_reg;
wire   [9:0] select_ln36_1_fu_458_p3;
reg   [9:0] select_ln36_1_reg_653;
reg   [9:0] select_ln36_1_reg_653_pp1_iter1_reg;
reg   [9:0] select_ln36_1_reg_653_pp1_iter2_reg;
wire   [9:0] j_fu_466_p2;
reg   [31:0] v0_load_reg_675;
reg   [31:0] v12_reg_680;
reg   [9:0] v7_addr_2_reg_685;
reg   [9:0] v7_addr_2_reg_685_pp1_iter8_reg;
reg   [9:0] v7_addr_2_reg_685_pp1_iter9_reg;
reg   [9:0] v7_addr_2_reg_685_pp1_iter10_reg;
reg   [9:0] v7_addr_2_reg_685_pp1_iter11_reg;
reg   [9:0] v7_addr_2_reg_685_pp1_iter12_reg;
reg   [9:0] v7_addr_2_reg_685_pp1_iter13_reg;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] v13_reg_691;
wire   [31:0] v7_q0;
reg   [31:0] v14_reg_696;
reg    ap_enable_reg_pp1_iter8;
wire   [0:0] icmp_ln44_fu_531_p2;
reg   [0:0] icmp_ln44_reg_701;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [9:0] j_back_fu_537_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [14:0] add_ln47_fu_552_p2;
reg   [14:0] add_ln47_reg_710;
wire   [0:0] icmp_ln49_fu_561_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln49_reg_720_pp3_iter1_reg;
reg   [0:0] icmp_ln49_reg_720_pp3_iter2_reg;
reg   [0:0] icmp_ln49_reg_720_pp3_iter3_reg;
reg   [0:0] icmp_ln49_reg_720_pp3_iter4_reg;
reg   [0:0] icmp_ln49_reg_720_pp3_iter6_reg;
wire   [9:0] j1_fu_567_p2;
reg    ap_enable_reg_pp3_iter0;
reg   [13:0] v3_addr_2_reg_729;
reg   [13:0] v3_addr_2_reg_729_pp3_iter1_reg;
reg   [13:0] v3_addr_2_reg_729_pp3_iter2_reg;
reg   [13:0] v3_addr_2_reg_729_pp3_iter3_reg;
reg   [13:0] v3_addr_2_reg_729_pp3_iter4_reg;
reg   [13:0] v3_addr_2_reg_729_pp3_iter5_reg;
reg   [13:0] v3_addr_2_reg_729_pp3_iter6_reg;
reg   [31:0] v19_reg_740;
reg   [31:0] v20_reg_745;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter14;
wire    ap_CS_fsm_state22;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state25;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter7;
reg   [9:0] v7_address0;
reg    v7_ce0;
reg    v7_we0;
reg   [9:0] v7_address1;
reg    v7_ce1;
reg    v7_we1;
wire   [31:0] v7_q1;
reg   [3:0] v4_0_reg_185;
wire   [0:0] icmp_ln23_fu_341_p2;
reg   [9:0] v5_0_reg_196;
reg   [3:0] i_0_reg_207;
wire    ap_CS_fsm_state34;
reg   [9:0] j_init_0_reg_219;
wire   [0:0] icmp_ln29_fu_379_p2;
reg   [9:0] ap_phi_mux_k_0_phi_fu_245_p4;
wire    ap_block_pp1_stage0;
wire  signed [63:0] sext_ln24_fu_362_p1;
wire   [63:0] zext_ln31_fu_391_p1;
wire  signed [63:0] sext_ln37_fu_509_p1;
wire  signed [63:0] sext_ln36_fu_522_p1;
wire   [63:0] zext_ln37_fu_527_p1;
wire   [63:0] zext_ln46_fu_543_p1;
wire    ap_block_pp2_stage0;
wire  signed [63:0] sext_ln47_fu_557_p1;
wire  signed [63:0] sext_ln52_fu_587_p1;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln51_fu_573_p1;
reg   [31:0] grp_fu_285_p0;
reg   [31:0] grp_fu_285_p1;
wire   [13:0] tmp_21_fu_311_p3;
wire   [11:0] tmp_22_fu_323_p3;
wire   [14:0] zext_ln24_fu_319_p1;
wire   [14:0] zext_ln24_1_fu_331_p1;
wire   [14:0] zext_ln24_2_fu_353_p1;
wire   [14:0] add_ln24_fu_357_p2;
wire   [13:0] tmp_23_fu_396_p3;
wire   [11:0] tmp_24_fu_408_p3;
wire   [14:0] zext_ln36_fu_404_p1;
wire   [14:0] zext_ln36_1_fu_416_p1;
wire   [0:0] icmp_ln34_fu_444_p2;
wire   [9:0] k_fu_438_p2;
wire   [19:0] tmp_25_fu_475_p3;
wire   [17:0] tmp_26_fu_486_p3;
wire   [20:0] zext_ln37_1_fu_482_p1;
wire   [20:0] zext_ln37_2_fu_493_p1;
wire   [20:0] sub_ln37_fu_497_p2;
wire   [20:0] zext_ln36_3_fu_472_p1;
wire   [20:0] add_ln37_fu_503_p2;
wire   [14:0] zext_ln36_2_fu_514_p1;
wire   [14:0] add_ln36_fu_517_p2;
wire   [14:0] zext_ln47_fu_548_p1;
wire   [14:0] zext_ln52_fu_578_p1;
wire   [14:0] add_ln52_fu_582_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
end

Linear_layer_qkv_v7 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
v7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(v7_address0),
    .ce0(v7_ce0),
    .we0(v7_we0),
    .d0(32'd0),
    .q0(v7_q0),
    .address1(v7_address1),
    .ce1(v7_ce1),
    .we1(v7_we1),
    .d1(reg_293),
    .q1(v7_q1)
);

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_285_p0),
    .din1(grp_fu_285_p1),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_load_reg_675),
    .din1(v12_reg_680),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state23))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_299_p2 == 1'd1))) begin
        i_0_reg_207 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i_0_reg_207 <= i_reg_617;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_426_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_230 <= add_ln33_fu_432_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_230 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j1_0_reg_274 <= 10'd0;
    end else if (((icmp_ln49_fu_561_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j1_0_reg_274 <= j1_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_426_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_0_reg_252 <= j_fu_466_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_252 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_back_0_reg_263 <= 10'd0;
    end else if (((icmp_ln44_fu_531_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_back_0_reg_263 <= j_back_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_init_0_reg_219 <= j_init_fu_385_p2;
    end else if (((icmp_ln27_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_init_0_reg_219 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_637 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_0_reg_241 <= select_ln36_1_reg_653;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_0_reg_241 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v4_0_reg_185 <= v4_reg_595;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v4_0_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v5_0_reg_196 <= 10'd0;
    end else if (((icmp_ln23_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v5_0_reg_196 <= v5_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_531_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln47_reg_710 <= add_ln47_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_617 <= i_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln33_reg_637 <= icmp_ln33_fu_426_p2;
        icmp_ln33_reg_637_pp1_iter1_reg <= icmp_ln33_reg_637;
        select_ln36_1_reg_653_pp1_iter1_reg <= select_ln36_1_reg_653;
        select_ln36_reg_646_pp1_iter1_reg <= select_ln36_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln33_reg_637_pp1_iter10_reg <= icmp_ln33_reg_637_pp1_iter9_reg;
        icmp_ln33_reg_637_pp1_iter11_reg <= icmp_ln33_reg_637_pp1_iter10_reg;
        icmp_ln33_reg_637_pp1_iter12_reg <= icmp_ln33_reg_637_pp1_iter11_reg;
        icmp_ln33_reg_637_pp1_iter13_reg <= icmp_ln33_reg_637_pp1_iter12_reg;
        icmp_ln33_reg_637_pp1_iter2_reg <= icmp_ln33_reg_637_pp1_iter1_reg;
        icmp_ln33_reg_637_pp1_iter3_reg <= icmp_ln33_reg_637_pp1_iter2_reg;
        icmp_ln33_reg_637_pp1_iter4_reg <= icmp_ln33_reg_637_pp1_iter3_reg;
        icmp_ln33_reg_637_pp1_iter5_reg <= icmp_ln33_reg_637_pp1_iter4_reg;
        icmp_ln33_reg_637_pp1_iter6_reg <= icmp_ln33_reg_637_pp1_iter5_reg;
        icmp_ln33_reg_637_pp1_iter7_reg <= icmp_ln33_reg_637_pp1_iter6_reg;
        icmp_ln33_reg_637_pp1_iter8_reg <= icmp_ln33_reg_637_pp1_iter7_reg;
        icmp_ln33_reg_637_pp1_iter9_reg <= icmp_ln33_reg_637_pp1_iter8_reg;
        select_ln36_1_reg_653_pp1_iter2_reg <= select_ln36_1_reg_653_pp1_iter1_reg;
        select_ln36_reg_646_pp1_iter2_reg <= select_ln36_reg_646_pp1_iter1_reg;
        select_ln36_reg_646_pp1_iter3_reg <= select_ln36_reg_646_pp1_iter2_reg;
        select_ln36_reg_646_pp1_iter4_reg <= select_ln36_reg_646_pp1_iter3_reg;
        select_ln36_reg_646_pp1_iter5_reg <= select_ln36_reg_646_pp1_iter4_reg;
        select_ln36_reg_646_pp1_iter6_reg <= select_ln36_reg_646_pp1_iter5_reg;
        v7_addr_2_reg_685_pp1_iter10_reg <= v7_addr_2_reg_685_pp1_iter9_reg;
        v7_addr_2_reg_685_pp1_iter11_reg <= v7_addr_2_reg_685_pp1_iter10_reg;
        v7_addr_2_reg_685_pp1_iter12_reg <= v7_addr_2_reg_685_pp1_iter11_reg;
        v7_addr_2_reg_685_pp1_iter13_reg <= v7_addr_2_reg_685_pp1_iter12_reg;
        v7_addr_2_reg_685_pp1_iter8_reg <= v7_addr_2_reg_685;
        v7_addr_2_reg_685_pp1_iter9_reg <= v7_addr_2_reg_685_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln44_reg_701 <= icmp_ln44_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln49_reg_720 <= icmp_ln49_fu_561_p2;
        icmp_ln49_reg_720_pp3_iter1_reg <= icmp_ln49_reg_720;
        v3_addr_2_reg_729_pp3_iter1_reg <= v3_addr_2_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln49_reg_720_pp3_iter2_reg <= icmp_ln49_reg_720_pp3_iter1_reg;
        icmp_ln49_reg_720_pp3_iter3_reg <= icmp_ln49_reg_720_pp3_iter2_reg;
        icmp_ln49_reg_720_pp3_iter4_reg <= icmp_ln49_reg_720_pp3_iter3_reg;
        icmp_ln49_reg_720_pp3_iter5_reg <= icmp_ln49_reg_720_pp3_iter4_reg;
        icmp_ln49_reg_720_pp3_iter6_reg <= icmp_ln49_reg_720_pp3_iter5_reg;
        v3_addr_2_reg_729_pp3_iter2_reg <= v3_addr_2_reg_729_pp3_iter1_reg;
        v3_addr_2_reg_729_pp3_iter3_reg <= v3_addr_2_reg_729_pp3_iter2_reg;
        v3_addr_2_reg_729_pp3_iter4_reg <= v3_addr_2_reg_729_pp3_iter3_reg;
        v3_addr_2_reg_729_pp3_iter5_reg <= v3_addr_2_reg_729_pp3_iter4_reg;
        v3_addr_2_reg_729_pp3_iter6_reg <= v3_addr_2_reg_729_pp3_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln33_reg_637_pp1_iter12_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter13 == 1'b1)) | ((icmp_ln49_reg_720_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_293 <= grp_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_426_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln36_1_reg_653 <= select_ln36_1_fu_458_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_426_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln36_reg_646 <= select_ln36_fu_450_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_299_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln24_reg_600[14 : 8] <= sub_ln24_fu_335_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln36_reg_630[14 : 8] <= sub_ln36_fu_420_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_637_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v0_load_reg_675 <= v0_q0;
        v12_reg_680 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_637_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v13_reg_691 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_637_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1))) begin
        v14_reg_696 <= v7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_720 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v19_reg_740 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_720 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v20_reg_745 <= v3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v3_addr_2_reg_729 <= sext_ln52_fu_587_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v4_reg_595 <= v4_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_637_pp1_iter6_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v7_addr_2_reg_685 <= zext_ln37_fu_527_p1;
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_426_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln44_fu_531_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_561_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_fu_367_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_637 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_k_0_phi_fu_245_p4 = select_ln36_1_reg_653;
    end else begin
        ap_phi_mux_k_0_phi_fu_245_p4 = k_0_reg_241;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_fu_367_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_285_p0 = v20_reg_745;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        grp_fu_285_p0 = v14_reg_696;
    end else begin
        grp_fu_285_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        grp_fu_285_p1 = v19_reg_740;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter9 == 1'b1))) begin
        grp_fu_285_p1 = v13_reg_691;
    end else begin
        grp_fu_285_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        v3_address0 = sext_ln52_fu_587_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v3_address0 = sext_ln47_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v3_address0 = sext_ln24_fu_362_p1;
    end else begin
        v3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v3_ce1 = 1'b1;
    end else begin
        v3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v3_d0 = v7_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v3_d0 = 32'd0;
    end else begin
        v3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln44_reg_701 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln23_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_720_pp3_iter6_reg == 1'd0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        v3_we1 = 1'b1;
    end else begin
        v3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter7 == 1'b1))) begin
        v7_address0 = zext_ln37_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v7_address0 = zext_ln31_fu_391_p1;
    end else begin
        v7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        v7_address1 = zext_ln46_fu_543_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        v7_address1 = v7_addr_2_reg_685_pp1_iter13_reg;
    end else begin
        v7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
        v7_ce0 = 1'b1;
    end else begin
        v7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        v7_ce1 = 1'b1;
    end else begin
        v7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v7_we0 = 1'b1;
    end else begin
        v7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_637_pp1_iter13_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        v7_we1 = 1'b1;
    end else begin
        v7_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln23_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln27_fu_367_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln29_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln33_fu_426_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln33_fu_426_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln44_fu_531_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln44_fu_531_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln49_fu_561_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter7 == 1'b1) & (ap_enable_reg_pp3_iter6 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln49_fu_561_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_357_p2 = (sub_ln24_reg_600 + zext_ln24_2_fu_353_p1);

assign add_ln33_fu_432_p2 = (indvar_flatten_reg_230 + 20'd1);

assign add_ln36_fu_517_p2 = (sub_ln36_reg_630 + zext_ln36_2_fu_514_p1);

assign add_ln37_fu_503_p2 = (sub_ln37_fu_497_p2 + zext_ln36_3_fu_472_p1);

assign add_ln47_fu_552_p2 = (sub_ln36_reg_630 + zext_ln47_fu_548_p1);

assign add_ln52_fu_582_p2 = (sub_ln36_reg_630 + zext_ln52_fu_578_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign i_fu_373_p2 = (i_0_reg_207 + 4'd1);

assign icmp_ln22_fu_299_p2 = ((v4_0_reg_185 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_341_p2 = ((v5_0_reg_196 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_367_p2 = ((i_0_reg_207 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_379_p2 = ((j_init_0_reg_219 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_426_p2 = ((indvar_flatten_reg_230 == 20'd589824) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_444_p2 = ((j_0_reg_252 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_531_p2 = ((j_back_0_reg_263 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_561_p2 = ((j1_0_reg_274 == 10'd768) ? 1'b1 : 1'b0);

assign j1_fu_567_p2 = (j1_0_reg_274 + 10'd1);

assign j_back_fu_537_p2 = (j_back_0_reg_263 + 10'd1);

assign j_fu_466_p2 = (select_ln36_fu_450_p3 + 10'd1);

assign j_init_fu_385_p2 = (j_init_0_reg_219 + 10'd1);

assign k_fu_438_p2 = (ap_phi_mux_k_0_phi_fu_245_p4 + 10'd1);

assign select_ln36_1_fu_458_p3 = ((icmp_ln34_fu_444_p2[0:0] === 1'b1) ? k_fu_438_p2 : ap_phi_mux_k_0_phi_fu_245_p4);

assign select_ln36_fu_450_p3 = ((icmp_ln34_fu_444_p2[0:0] === 1'b1) ? 10'd0 : j_0_reg_252);

assign sext_ln24_fu_362_p1 = $signed(add_ln24_fu_357_p2);

assign sext_ln36_fu_522_p1 = $signed(add_ln36_fu_517_p2);

assign sext_ln37_fu_509_p1 = $signed(add_ln37_fu_503_p2);

assign sext_ln47_fu_557_p1 = $signed(add_ln47_reg_710);

assign sext_ln52_fu_587_p1 = $signed(add_ln52_fu_582_p2);

assign sub_ln24_fu_335_p2 = (zext_ln24_fu_319_p1 - zext_ln24_1_fu_331_p1);

assign sub_ln36_fu_420_p2 = (zext_ln36_fu_404_p1 - zext_ln36_1_fu_416_p1);

assign sub_ln37_fu_497_p2 = (zext_ln37_1_fu_482_p1 - zext_ln37_2_fu_493_p1);

assign tmp_21_fu_311_p3 = {{v4_0_reg_185}, {10'd0}};

assign tmp_22_fu_323_p3 = {{v4_0_reg_185}, {8'd0}};

assign tmp_23_fu_396_p3 = {{i_0_reg_207}, {10'd0}};

assign tmp_24_fu_408_p3 = {{i_0_reg_207}, {8'd0}};

assign tmp_25_fu_475_p3 = {{select_ln36_reg_646}, {10'd0}};

assign tmp_26_fu_486_p3 = {{select_ln36_reg_646}, {8'd0}};

assign v0_address0 = sext_ln36_fu_522_p1;

assign v1_address0 = sext_ln37_fu_509_p1;

assign v2_address0 = zext_ln51_fu_573_p1;

assign v3_address1 = v3_addr_2_reg_729_pp3_iter6_reg;

assign v3_d1 = reg_293;

assign v4_fu_305_p2 = (v4_0_reg_185 + 4'd1);

assign v5_fu_347_p2 = (v5_0_reg_196 + 10'd1);

assign zext_ln24_1_fu_331_p1 = tmp_22_fu_323_p3;

assign zext_ln24_2_fu_353_p1 = v5_0_reg_196;

assign zext_ln24_fu_319_p1 = tmp_21_fu_311_p3;

assign zext_ln31_fu_391_p1 = j_init_0_reg_219;

assign zext_ln36_1_fu_416_p1 = tmp_24_fu_408_p3;

assign zext_ln36_2_fu_514_p1 = select_ln36_1_reg_653_pp1_iter2_reg;

assign zext_ln36_3_fu_472_p1 = select_ln36_1_reg_653;

assign zext_ln36_fu_404_p1 = tmp_23_fu_396_p3;

assign zext_ln37_1_fu_482_p1 = tmp_25_fu_475_p3;

assign zext_ln37_2_fu_493_p1 = tmp_26_fu_486_p3;

assign zext_ln37_fu_527_p1 = select_ln36_reg_646_pp1_iter6_reg;

assign zext_ln46_fu_543_p1 = j_back_0_reg_263;

assign zext_ln47_fu_548_p1 = j_back_0_reg_263;

assign zext_ln51_fu_573_p1 = j1_0_reg_274;

assign zext_ln52_fu_578_p1 = j1_0_reg_274;

always @ (posedge ap_clk) begin
    sub_ln24_reg_600[7:0] <= 8'b00000000;
    sub_ln36_reg_630[7:0] <= 8'b00000000;
end

endmodule //Linear_layer_qkv
