-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Self_attention is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v75_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v75_ce0 : OUT STD_LOGIC;
    v75_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v76_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v76_ce0 : OUT STD_LOGIC;
    v76_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v77_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v77_ce0 : OUT STD_LOGIC;
    v77_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v78_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v78_ce0 : OUT STD_LOGIC;
    v78_we0 : OUT STD_LOGIC;
    v78_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Self_attention is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_s_0_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_s_0_reg_237 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten11_reg_248 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_m_0_reg_259 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_m_0_reg_270 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln172_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal h_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_575 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_313_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_580 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln176_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln176_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln176_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln179_fu_345_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln179_reg_595 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln179_reg_595_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln179_1_fu_353_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_600 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_600_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln179_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln179_reg_608 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_s_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln193_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln193_fu_453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln196_1_fu_479_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln196_1_reg_642 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln197_fu_518_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln197_reg_654 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_m_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_Context_layer_fu_294_ap_ready : STD_LOGIC;
    signal grp_Context_layer_fu_294_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal Q_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Q_h_ce0 : STD_LOGIC;
    signal Q_h_we0 : STD_LOGIC;
    signal Q_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal K_h_ce0 : STD_LOGIC;
    signal K_h_we0 : STD_LOGIC;
    signal K_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal V_h_ce0 : STD_LOGIC;
    signal V_h_we0 : STD_LOGIC;
    signal V_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v88_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v88_ce0 : STD_LOGIC;
    signal v88_we0 : STD_LOGIC;
    signal v88_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v88_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v88_ce1 : STD_LOGIC;
    signal v88_we1 : STD_LOGIC;
    signal v89_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v89_ce0 : STD_LOGIC;
    signal v89_we0 : STD_LOGIC;
    signal v89_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v90_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal v90_ce0 : STD_LOGIC;
    signal v90_we0 : STD_LOGIC;
    signal v90_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Softmax_layer_fu_281_ap_start : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_ap_done : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_ap_idle : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_ap_ready : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_v42_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Softmax_layer_fu_281_v42_ce0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_v42_we0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_v42_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Softmax_layer_fu_281_v43_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Softmax_layer_fu_281_v43_ce0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_v43_we0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_281_v43_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Attention_layer_fu_287_ap_start : STD_LOGIC;
    signal grp_Attention_layer_fu_287_ap_done : STD_LOGIC;
    signal grp_Attention_layer_fu_287_ap_idle : STD_LOGIC;
    signal grp_Attention_layer_fu_287_ap_ready : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v22_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Attention_layer_fu_287_v22_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v23_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Attention_layer_fu_287_v23_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v24_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Attention_layer_fu_287_v24_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v24_we0 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v24_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Attention_layer_fu_287_v24_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Attention_layer_fu_287_v24_ce1 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v24_we1 : STD_LOGIC;
    signal grp_Attention_layer_fu_287_v24_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Context_layer_fu_294_ap_start : STD_LOGIC;
    signal grp_Context_layer_fu_294_ap_idle : STD_LOGIC;
    signal grp_Context_layer_fu_294_v58_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Context_layer_fu_294_v58_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_294_v59_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Context_layer_fu_294_v59_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_294_v60_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Context_layer_fu_294_v60_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_294_v60_we0 : STD_LOGIC;
    signal grp_Context_layer_fu_294_v60_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_phi_mux_i_s_0_phi_fu_230_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_m_0_phi_fu_263_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_Softmax_layer_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_Attention_layer_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_Context_layer_fu_294_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln179_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_1_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln197_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln177_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_333_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln177_fu_361_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_376_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_387_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln179_fu_383_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln179_1_fu_394_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln179_fu_398_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln179_2_fu_404_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln179_1_fu_407_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_16_fu_420_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln177_1_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln180_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln180_fu_434_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln194_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_m_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_487_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln196_fu_471_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln194_1_fu_495_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln196_fu_503_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln196_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln194_fu_499_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_529_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln197_fu_536_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln197_1_fu_547_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln197_fu_551_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln197_2_fu_557_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln197_1_fu_560_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component Softmax_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v42_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v42_ce0 : OUT STD_LOGIC;
        v42_we0 : OUT STD_LOGIC;
        v42_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v42_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v43_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v43_ce0 : OUT STD_LOGIC;
        v43_we0 : OUT STD_LOGIC;
        v43_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Attention_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v22_ce0 : OUT STD_LOGIC;
        v22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v23_ce0 : OUT STD_LOGIC;
        v23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v24_ce0 : OUT STD_LOGIC;
        v24_we0 : OUT STD_LOGIC;
        v24_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v24_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v24_ce1 : OUT STD_LOGIC;
        v24_we1 : OUT STD_LOGIC;
        v24_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Context_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v58_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v58_ce0 : OUT STD_LOGIC;
        v58_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v59_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v59_ce0 : OUT STD_LOGIC;
        v59_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v60_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v60_ce0 : OUT STD_LOGIC;
        v60_we0 : OUT STD_LOGIC;
        v60_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Self_attention_Q_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Self_attention_v88 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Self_attention_v89 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Q_h_U : component Self_attention_Q_h
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Q_h_address0,
        ce0 => Q_h_ce0,
        we0 => Q_h_we0,
        d0 => v75_q0,
        q0 => Q_h_q0);

    K_h_U : component Self_attention_Q_h
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K_h_address0,
        ce0 => K_h_ce0,
        we0 => K_h_we0,
        d0 => v76_q0,
        q0 => K_h_q0);

    V_h_U : component Self_attention_Q_h
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_h_address0,
        ce0 => V_h_ce0,
        we0 => V_h_we0,
        d0 => v77_q0,
        q0 => V_h_q0);

    v88_U : component Self_attention_v88
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v88_address0,
        ce0 => v88_ce0,
        we0 => v88_we0,
        d0 => v88_d0,
        q0 => v88_q0,
        address1 => grp_Attention_layer_fu_287_v24_address1,
        ce1 => v88_ce1,
        we1 => v88_we1,
        d1 => grp_Attention_layer_fu_287_v24_d1);

    v89_U : component Self_attention_v89
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v89_address0,
        ce0 => v89_ce0,
        we0 => v89_we0,
        d0 => grp_Softmax_layer_fu_281_v43_d0,
        q0 => v89_q0);

    v90_U : component Self_attention_Q_h
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v90_address0,
        ce0 => v90_ce0,
        we0 => v90_we0,
        d0 => grp_Context_layer_fu_294_v60_d0,
        q0 => v90_q0);

    grp_Softmax_layer_fu_281 : component Softmax_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Softmax_layer_fu_281_ap_start,
        ap_done => grp_Softmax_layer_fu_281_ap_done,
        ap_idle => grp_Softmax_layer_fu_281_ap_idle,
        ap_ready => grp_Softmax_layer_fu_281_ap_ready,
        v42_address0 => grp_Softmax_layer_fu_281_v42_address0,
        v42_ce0 => grp_Softmax_layer_fu_281_v42_ce0,
        v42_we0 => grp_Softmax_layer_fu_281_v42_we0,
        v42_d0 => grp_Softmax_layer_fu_281_v42_d0,
        v42_q0 => v88_q0,
        v43_address0 => grp_Softmax_layer_fu_281_v43_address0,
        v43_ce0 => grp_Softmax_layer_fu_281_v43_ce0,
        v43_we0 => grp_Softmax_layer_fu_281_v43_we0,
        v43_d0 => grp_Softmax_layer_fu_281_v43_d0);

    grp_Attention_layer_fu_287 : component Attention_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Attention_layer_fu_287_ap_start,
        ap_done => grp_Attention_layer_fu_287_ap_done,
        ap_idle => grp_Attention_layer_fu_287_ap_idle,
        ap_ready => grp_Attention_layer_fu_287_ap_ready,
        v22_address0 => grp_Attention_layer_fu_287_v22_address0,
        v22_ce0 => grp_Attention_layer_fu_287_v22_ce0,
        v22_q0 => Q_h_q0,
        v23_address0 => grp_Attention_layer_fu_287_v23_address0,
        v23_ce0 => grp_Attention_layer_fu_287_v23_ce0,
        v23_q0 => K_h_q0,
        v24_address0 => grp_Attention_layer_fu_287_v24_address0,
        v24_ce0 => grp_Attention_layer_fu_287_v24_ce0,
        v24_we0 => grp_Attention_layer_fu_287_v24_we0,
        v24_d0 => grp_Attention_layer_fu_287_v24_d0,
        v24_q0 => v88_q0,
        v24_address1 => grp_Attention_layer_fu_287_v24_address1,
        v24_ce1 => grp_Attention_layer_fu_287_v24_ce1,
        v24_we1 => grp_Attention_layer_fu_287_v24_we1,
        v24_d1 => grp_Attention_layer_fu_287_v24_d1);

    grp_Context_layer_fu_294 : component Context_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Context_layer_fu_294_ap_start,
        ap_done => grp_Context_layer_fu_294_ap_done,
        ap_idle => grp_Context_layer_fu_294_ap_idle,
        ap_ready => grp_Context_layer_fu_294_ap_ready,
        v58_address0 => grp_Context_layer_fu_294_v58_address0,
        v58_ce0 => grp_Context_layer_fu_294_v58_ce0,
        v58_q0 => v89_q0,
        v59_address0 => grp_Context_layer_fu_294_v59_address0,
        v59_ce0 => grp_Context_layer_fu_294_v59_ce0,
        v59_q0 => V_h_q0,
        v60_address0 => grp_Context_layer_fu_294_v60_address0,
        v60_ce0 => grp_Context_layer_fu_294_v60_ce0,
        v60_we0 => grp_Context_layer_fu_294_v60_we0,
        v60_d0 => grp_Context_layer_fu_294_v60_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state12);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Attention_layer_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Attention_layer_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_Attention_layer_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Attention_layer_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_Attention_layer_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Context_layer_fu_294_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Context_layer_fu_294_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_Context_layer_fu_294_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Context_layer_fu_294_ap_ready = ap_const_logic_1)) then 
                    grp_Context_layer_fu_294_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Softmax_layer_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Softmax_layer_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_Softmax_layer_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Softmax_layer_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_Softmax_layer_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                h_0_reg_204 <= h_reg_575;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_0_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_m_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_reg_633 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_m_0_reg_259 <= select_ln196_1_reg_642;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then 
                i_m_0_reg_259 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_s_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_reg_586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_s_0_reg_226 <= select_ln179_1_reg_600;
            elsif (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_s_0_reg_226 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_447_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten11_reg_248 <= add_ln193_fu_453_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then 
                indvar_flatten11_reg_248 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_215 <= add_ln176_fu_327_p2;
            elsif (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_215 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_m_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_447_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_m_0_reg_270 <= j_m_fu_523_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then 
                j_m_0_reg_270 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_s_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_s_0_reg_237 <= j_s_fu_370_p2;
            elsif (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_s_0_reg_237 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln179_reg_608 <= add_ln179_fu_365_p2;
                select_ln179_reg_595 <= select_ln179_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_447_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln197_reg_654 <= add_ln197_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h_reg_575 <= h_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln176_reg_586 <= icmp_ln176_fu_321_p2;
                icmp_ln176_reg_586_pp0_iter1_reg <= icmp_ln176_reg_586;
                select_ln179_1_reg_600_pp0_iter1_reg <= select_ln179_1_reg_600;
                select_ln179_reg_595_pp0_iter1_reg <= select_ln179_reg_595;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln193_reg_633 <= icmp_ln193_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln179_1_reg_600 <= select_ln179_1_fu_353_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_447_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln196_1_reg_642 <= select_ln196_1_fu_479_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln172_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_580(9 downto 6) <= shl_ln_fu_313_p3(9 downto 6);
            end if;
        end if;
    end process;
    shl_ln_reg_580(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln172_fu_301_p2, ap_CS_fsm_state2, icmp_ln176_fu_321_p2, ap_enable_reg_pp0_iter0, icmp_ln193_fu_447_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, grp_Context_layer_fu_294_ap_done, ap_block_pp1_stage0_subdone, grp_Softmax_layer_fu_281_ap_done, grp_Attention_layer_fu_287_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln172_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln176_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln176_fu_321_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_Attention_layer_fu_287_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_Softmax_layer_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_Context_layer_fu_294_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln193_fu_447_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln193_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    K_h_address0_assign_proc : process(ap_enable_reg_pp0_iter2, grp_Attention_layer_fu_287_v23_address0, ap_block_pp0_stage0, ap_CS_fsm_state7, zext_ln180_1_fu_440_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_h_address0 <= zext_ln180_1_fu_440_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            K_h_address0 <= grp_Attention_layer_fu_287_v23_address0;
        else 
            K_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    K_h_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_Attention_layer_fu_287_v23_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            K_h_ce0 <= grp_Attention_layer_fu_287_v23_ce0;
        else 
            K_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    K_h_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln176_reg_586_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_reg_586_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_h_we0 <= ap_const_logic_1;
        else 
            K_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_h_address0_assign_proc : process(ap_enable_reg_pp0_iter2, grp_Attention_layer_fu_287_v22_address0, ap_block_pp0_stage0, ap_CS_fsm_state7, zext_ln180_1_fu_440_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Q_h_address0 <= zext_ln180_1_fu_440_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Q_h_address0 <= grp_Attention_layer_fu_287_v22_address0;
        else 
            Q_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Q_h_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_Attention_layer_fu_287_v22_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Q_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Q_h_ce0 <= grp_Attention_layer_fu_287_v22_ce0;
        else 
            Q_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_h_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln176_reg_586_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_reg_586_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Q_h_we0 <= ap_const_logic_1;
        else 
            Q_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_h_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, grp_Context_layer_fu_294_v59_address0, ap_block_pp0_stage0, zext_ln180_1_fu_440_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_h_address0 <= zext_ln180_1_fu_440_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            V_h_address0 <= grp_Context_layer_fu_294_v59_address0;
        else 
            V_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    V_h_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state11, grp_Context_layer_fu_294_v59_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            V_h_ce0 <= grp_Context_layer_fu_294_v59_ce0;
        else 
            V_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_h_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln176_reg_586_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln176_reg_586_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_h_we0 <= ap_const_logic_1;
        else 
            V_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln176_fu_327_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_215) + unsigned(ap_const_lv10_1));
    add_ln179_1_fu_407_p2 <= std_logic_vector(unsigned(sub_ln179_fu_398_p2) + unsigned(zext_ln179_2_fu_404_p1));
    add_ln179_fu_365_p2 <= std_logic_vector(unsigned(zext_ln177_fu_361_p1) + unsigned(shl_ln_reg_580));
    add_ln180_fu_434_p2 <= std_logic_vector(unsigned(zext_ln177_1_fu_427_p1) + unsigned(zext_ln180_fu_431_p1));
    add_ln193_fu_453_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_248) + unsigned(ap_const_lv10_1));
    add_ln196_fu_507_p2 <= std_logic_vector(unsigned(zext_ln194_1_fu_495_p1) + unsigned(zext_ln196_fu_503_p1));
    add_ln197_1_fu_560_p2 <= std_logic_vector(unsigned(sub_ln197_fu_551_p2) + unsigned(zext_ln197_2_fu_557_p1));
    add_ln197_fu_518_p2 <= std_logic_vector(unsigned(zext_ln194_fu_499_p1) + unsigned(shl_ln_reg_580));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln176_fu_321_p2)
    begin
        if ((icmp_ln176_fu_321_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(icmp_ln193_fu_447_p2)
    begin
        if ((icmp_ln193_fu_447_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln172_fu_301_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln172_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_m_0_phi_fu_263_p4_assign_proc : process(i_m_0_reg_259, icmp_ln193_reg_633, ap_CS_fsm_pp1_stage0, select_ln196_1_reg_642, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln193_reg_633 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_m_0_phi_fu_263_p4 <= select_ln196_1_reg_642;
        else 
            ap_phi_mux_i_m_0_phi_fu_263_p4 <= i_m_0_reg_259;
        end if; 
    end process;


    ap_phi_mux_i_s_0_phi_fu_230_p4_assign_proc : process(i_s_0_reg_226, icmp_ln176_reg_586, ap_CS_fsm_pp0_stage0, select_ln179_1_reg_600, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln176_reg_586 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_s_0_phi_fu_230_p4 <= select_ln179_1_reg_600;
        else 
            ap_phi_mux_i_s_0_phi_fu_230_p4 <= i_s_0_reg_226;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln172_fu_301_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln172_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Attention_layer_fu_287_ap_start <= grp_Attention_layer_fu_287_ap_start_reg;
    grp_Context_layer_fu_294_ap_start <= grp_Context_layer_fu_294_ap_start_reg;
    grp_Softmax_layer_fu_281_ap_start <= grp_Softmax_layer_fu_281_ap_start_reg;
    h_fu_307_p2 <= std_logic_vector(unsigned(h_0_reg_204) + unsigned(ap_const_lv4_1));
    i_m_fu_459_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_m_0_phi_fu_263_p4) + unsigned(ap_const_lv4_1));
    i_s_fu_333_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_s_0_phi_fu_230_p4) + unsigned(ap_const_lv4_1));
    icmp_ln172_fu_301_p2 <= "1" when (h_0_reg_204 = ap_const_lv4_C) else "0";
    icmp_ln176_fu_321_p2 <= "1" when (indvar_flatten_reg_215 = ap_const_lv10_300) else "0";
    icmp_ln177_fu_339_p2 <= "1" when (j_s_0_reg_237 = ap_const_lv7_40) else "0";
    icmp_ln193_fu_447_p2 <= "1" when (indvar_flatten11_reg_248 = ap_const_lv10_300) else "0";
    icmp_ln194_fu_465_p2 <= "1" when (j_m_0_reg_270 = ap_const_lv7_40) else "0";
    j_m_fu_523_p2 <= std_logic_vector(unsigned(select_ln196_fu_471_p3) + unsigned(ap_const_lv7_1));
    j_s_fu_370_p2 <= std_logic_vector(unsigned(select_ln179_fu_345_p3) + unsigned(ap_const_lv7_1));
    select_ln179_1_fu_353_p3 <= 
        i_s_fu_333_p2 when (icmp_ln177_fu_339_p2(0) = '1') else 
        ap_phi_mux_i_s_0_phi_fu_230_p4;
    select_ln179_fu_345_p3 <= 
        ap_const_lv7_0 when (icmp_ln177_fu_339_p2(0) = '1') else 
        j_s_0_reg_237;
    select_ln196_1_fu_479_p3 <= 
        i_m_fu_459_p2 when (icmp_ln194_fu_465_p2(0) = '1') else 
        ap_phi_mux_i_m_0_phi_fu_263_p4;
    select_ln196_fu_471_p3 <= 
        ap_const_lv7_0 when (icmp_ln194_fu_465_p2(0) = '1') else 
        j_m_0_reg_270;
        sext_ln179_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln179_1_fu_407_p2),64));

        sext_ln197_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln197_1_fu_560_p2),64));

    shl_ln_fu_313_p3 <= (h_0_reg_204 & ap_const_lv6_0);
    sub_ln179_fu_398_p2 <= std_logic_vector(unsigned(zext_ln179_fu_383_p1) - unsigned(zext_ln179_1_fu_394_p1));
    sub_ln197_fu_551_p2 <= std_logic_vector(unsigned(zext_ln197_fu_536_p1) - unsigned(zext_ln197_1_fu_547_p1));
    tmp_15_fu_387_p3 <= (select_ln179_1_reg_600 & ap_const_lv8_0);
    tmp_16_fu_420_p3 <= (select_ln179_1_reg_600_pp0_iter1_reg & ap_const_lv6_0);
    tmp_17_fu_529_p3 <= (select_ln196_1_reg_642 & ap_const_lv10_0);
    tmp_18_fu_540_p3 <= (select_ln196_1_reg_642 & ap_const_lv8_0);
    tmp_19_fu_487_p3 <= (select_ln196_1_fu_479_p3 & ap_const_lv6_0);
    tmp_s_fu_376_p3 <= (select_ln179_1_reg_600 & ap_const_lv10_0);
    v75_address0 <= sext_ln179_fu_413_p1(14 - 1 downto 0);

    v75_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v75_ce0 <= ap_const_logic_1;
        else 
            v75_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v76_address0 <= sext_ln179_fu_413_p1(14 - 1 downto 0);

    v76_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v76_ce0 <= ap_const_logic_1;
        else 
            v76_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v77_address0 <= sext_ln179_fu_413_p1(14 - 1 downto 0);

    v77_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v77_ce0 <= ap_const_logic_1;
        else 
            v77_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v78_address0 <= sext_ln197_fu_566_p1(14 - 1 downto 0);

    v78_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            v78_ce0 <= ap_const_logic_1;
        else 
            v78_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v78_d0 <= v90_q0;

    v78_we0_assign_proc : process(icmp_ln193_reg_633, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln193_reg_633 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            v78_we0 <= ap_const_logic_1;
        else 
            v78_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v88_address0_assign_proc : process(grp_Softmax_layer_fu_281_v42_address0, grp_Attention_layer_fu_287_v24_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_address0 <= grp_Attention_layer_fu_287_v24_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v88_address0 <= grp_Softmax_layer_fu_281_v42_address0;
        else 
            v88_address0 <= "XXXXXXXX";
        end if; 
    end process;


    v88_ce0_assign_proc : process(grp_Softmax_layer_fu_281_v42_ce0, grp_Attention_layer_fu_287_v24_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_ce0 <= grp_Attention_layer_fu_287_v24_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v88_ce0 <= grp_Softmax_layer_fu_281_v42_ce0;
        else 
            v88_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v88_ce1_assign_proc : process(grp_Attention_layer_fu_287_v24_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_ce1 <= grp_Attention_layer_fu_287_v24_ce1;
        else 
            v88_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v88_d0_assign_proc : process(grp_Softmax_layer_fu_281_v42_d0, grp_Attention_layer_fu_287_v24_d0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_d0 <= grp_Attention_layer_fu_287_v24_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v88_d0 <= grp_Softmax_layer_fu_281_v42_d0;
        else 
            v88_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v88_we0_assign_proc : process(grp_Softmax_layer_fu_281_v42_we0, grp_Attention_layer_fu_287_v24_we0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_we0 <= grp_Attention_layer_fu_287_v24_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v88_we0 <= grp_Softmax_layer_fu_281_v42_we0;
        else 
            v88_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v88_we1_assign_proc : process(grp_Attention_layer_fu_287_v24_we1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            v88_we1 <= grp_Attention_layer_fu_287_v24_we1;
        else 
            v88_we1 <= ap_const_logic_0;
        end if; 
    end process;


    v89_address0_assign_proc : process(ap_CS_fsm_state11, grp_Softmax_layer_fu_281_v43_address0, grp_Context_layer_fu_294_v58_address0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v89_address0 <= grp_Context_layer_fu_294_v58_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v89_address0 <= grp_Softmax_layer_fu_281_v43_address0;
        else 
            v89_address0 <= "XXXXXXXX";
        end if; 
    end process;


    v89_ce0_assign_proc : process(ap_CS_fsm_state11, grp_Softmax_layer_fu_281_v43_ce0, grp_Context_layer_fu_294_v58_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v89_ce0 <= grp_Context_layer_fu_294_v58_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v89_ce0 <= grp_Softmax_layer_fu_281_v43_ce0;
        else 
            v89_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v89_we0_assign_proc : process(grp_Softmax_layer_fu_281_v43_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v89_we0 <= grp_Softmax_layer_fu_281_v43_we0;
        else 
            v89_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v90_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state11, grp_Context_layer_fu_294_v60_address0, ap_block_pp1_stage0, zext_ln196_1_fu_513_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            v90_address0 <= zext_ln196_1_fu_513_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v90_address0 <= grp_Context_layer_fu_294_v60_address0;
        else 
            v90_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v90_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state11, grp_Context_layer_fu_294_v60_ce0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            v90_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v90_ce0 <= grp_Context_layer_fu_294_v60_ce0;
        else 
            v90_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v90_we0_assign_proc : process(ap_CS_fsm_state11, grp_Context_layer_fu_294_v60_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v90_we0 <= grp_Context_layer_fu_294_v60_we0;
        else 
            v90_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln177_1_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_420_p3),11));
    zext_ln177_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_fu_345_p3),10));
    zext_ln179_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_387_p3),15));
    zext_ln179_2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_reg_608),15));
    zext_ln179_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_376_p3),15));
    zext_ln180_1_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_434_p2),64));
    zext_ln180_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_reg_595_pp0_iter1_reg),11));
    zext_ln194_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_487_p3),11));
    zext_ln194_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln196_fu_471_p3),10));
    zext_ln196_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_fu_507_p2),64));
    zext_ln196_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln196_fu_471_p3),11));
    zext_ln197_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_540_p3),15));
    zext_ln197_2_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln197_reg_654),15));
    zext_ln197_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_529_p3),15));
end behav;
