-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Res_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v116_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v116_ce0 : OUT STD_LOGIC;
    v116_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v117_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v117_ce0 : OUT STD_LOGIC;
    v117_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v118_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v118_ce0 : OUT STD_LOGIC;
    v118_we0 : OUT STD_LOGIC;
    v118_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Res_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_91 : STD_LOGIC_VECTOR (13 downto 0);
    signal i6_0_reg_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal j9_0_reg_113 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln251_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln251_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln251_reg_217_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln251_fu_134_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln254_fu_152_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln254_reg_226 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln254_1_fu_160_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln254_1_reg_231 : STD_LOGIC_VECTOR (3 downto 0);
    signal j9_fu_168_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln254_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln254_reg_243_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v121_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal v122_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v123_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_i6_0_phi_fu_106_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln252_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i6_fu_140_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_174_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_185_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln254_fu_181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln254_1_fu_192_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln254_fu_196_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln254_2_fu_202_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln254_fu_205_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Bert_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Bert_layer_fadd_3bkb_U43 : component Bert_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v121_reg_258,
        din1 => v122_reg_263,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i6_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_reg_217 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i6_0_reg_102 <= select_ln254_1_reg_231;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i6_0_reg_102 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_fu_128_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_91 <= add_ln251_fu_134_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_91 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j9_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_fu_128_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j9_0_reg_113 <= j9_fu_168_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j9_0_reg_113 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln251_reg_217 <= icmp_ln251_fu_128_p2;
                icmp_ln251_reg_217_pp0_iter1_reg <= icmp_ln251_reg_217;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln251_reg_217_pp0_iter2_reg <= icmp_ln251_reg_217_pp0_iter1_reg;
                icmp_ln251_reg_217_pp0_iter3_reg <= icmp_ln251_reg_217_pp0_iter2_reg;
                icmp_ln251_reg_217_pp0_iter4_reg <= icmp_ln251_reg_217_pp0_iter3_reg;
                icmp_ln251_reg_217_pp0_iter5_reg <= icmp_ln251_reg_217_pp0_iter4_reg;
                icmp_ln251_reg_217_pp0_iter6_reg <= icmp_ln251_reg_217_pp0_iter5_reg;
                icmp_ln251_reg_217_pp0_iter7_reg <= icmp_ln251_reg_217_pp0_iter6_reg;
                sext_ln254_reg_243_pp0_iter2_reg <= sext_ln254_reg_243;
                sext_ln254_reg_243_pp0_iter3_reg <= sext_ln254_reg_243_pp0_iter2_reg;
                sext_ln254_reg_243_pp0_iter4_reg <= sext_ln254_reg_243_pp0_iter3_reg;
                sext_ln254_reg_243_pp0_iter5_reg <= sext_ln254_reg_243_pp0_iter4_reg;
                sext_ln254_reg_243_pp0_iter6_reg <= sext_ln254_reg_243_pp0_iter5_reg;
                sext_ln254_reg_243_pp0_iter7_reg <= sext_ln254_reg_243_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_fu_128_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln254_1_reg_231 <= select_ln254_1_fu_160_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln254_reg_226 <= select_ln254_fu_152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln251_reg_217 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln254_reg_243 <= sext_ln254_fu_211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_reg_217_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v121_reg_258 <= v116_q0;
                v122_reg_263 <= v117_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln251_reg_217_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                v123_reg_268 <= grp_fu_124_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln251_fu_128_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln251_fu_128_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln251_fu_128_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln251_fu_134_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_91) + unsigned(ap_const_lv14_1));
    add_ln254_fu_205_p2 <= std_logic_vector(unsigned(sub_ln254_fu_196_p2) + unsigned(zext_ln254_2_fu_202_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln251_fu_128_p2)
    begin
        if ((icmp_ln251_fu_128_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i6_0_phi_fu_106_p4_assign_proc : process(i6_0_reg_102, icmp_ln251_reg_217, ap_CS_fsm_pp0_stage0, select_ln254_1_reg_231, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln251_reg_217 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i6_0_phi_fu_106_p4 <= select_ln254_1_reg_231;
        else 
            ap_phi_mux_i6_0_phi_fu_106_p4 <= i6_0_reg_102;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i6_fu_140_p2 <= std_logic_vector(unsigned(ap_phi_mux_i6_0_phi_fu_106_p4) + unsigned(ap_const_lv4_1));
    icmp_ln251_fu_128_p2 <= "1" when (indvar_flatten_reg_91 = ap_const_lv14_2400) else "0";
    icmp_ln252_fu_146_p2 <= "1" when (j9_0_reg_113 = ap_const_lv10_300) else "0";
    j9_fu_168_p2 <= std_logic_vector(unsigned(select_ln254_fu_152_p3) + unsigned(ap_const_lv10_1));
    select_ln254_1_fu_160_p3 <= 
        i6_fu_140_p2 when (icmp_ln252_fu_146_p2(0) = '1') else 
        ap_phi_mux_i6_0_phi_fu_106_p4;
    select_ln254_fu_152_p3 <= 
        ap_const_lv10_0 when (icmp_ln252_fu_146_p2(0) = '1') else 
        j9_0_reg_113;
        sext_ln254_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln254_fu_205_p2),64));

    sub_ln254_fu_196_p2 <= std_logic_vector(unsigned(zext_ln254_fu_181_p1) - unsigned(zext_ln254_1_fu_192_p1));
    tmp_20_fu_185_p3 <= (select_ln254_1_reg_231 & ap_const_lv8_0);
    tmp_fu_174_p3 <= (select_ln254_1_reg_231 & ap_const_lv10_0);
    v116_address0 <= sext_ln254_fu_211_p1(14 - 1 downto 0);

    v116_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v116_ce0 <= ap_const_logic_1;
        else 
            v116_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v117_address0 <= sext_ln254_fu_211_p1(14 - 1 downto 0);

    v117_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            v117_ce0 <= ap_const_logic_1;
        else 
            v117_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v118_address0 <= sext_ln254_reg_243_pp0_iter7_reg(14 - 1 downto 0);

    v118_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v118_ce0 <= ap_const_logic_1;
        else 
            v118_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v118_d0 <= v123_reg_268;

    v118_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln251_reg_217_pp0_iter7_reg, ap_enable_reg_pp0_iter8)
    begin
        if (((icmp_ln251_reg_217_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v118_we0 <= ap_const_logic_1;
        else 
            v118_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln254_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_185_p3),15));
    zext_ln254_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln254_reg_226),15));
    zext_ln254_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_174_p3),15));
end behav;
