// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Bert_layer_systolic_array_k_768_Loop_data_load_proc143_HH_
#define _Bert_layer_systolic_array_k_768_Loop_data_load_proc143_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Bert_layer_Bert_layer_add_10ns_10ns_10_1_1.h"

namespace ap_rtl {

struct Bert_layer_systolic_array_k_768_Loop_data_load_proc143 : public sc_module {
    // Port declarations 154
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > A_loader_V_V_dout;
    sc_in< sc_logic > A_loader_V_V_empty_n;
    sc_out< sc_logic > A_loader_V_V_read;
    sc_out< sc_lv<24> > A_fifo_0_0_din;
    sc_in< sc_logic > A_fifo_0_0_full_n;
    sc_out< sc_logic > A_fifo_0_0_write;
    sc_in< sc_lv<24> > A_loader_1_V_V_dout;
    sc_in< sc_logic > A_loader_1_V_V_empty_n;
    sc_out< sc_logic > A_loader_1_V_V_read;
    sc_out< sc_lv<24> > A_fifo_1_0_din;
    sc_in< sc_logic > A_fifo_1_0_full_n;
    sc_out< sc_logic > A_fifo_1_0_write;
    sc_in< sc_lv<24> > A_loader_2_V_V_dout;
    sc_in< sc_logic > A_loader_2_V_V_empty_n;
    sc_out< sc_logic > A_loader_2_V_V_read;
    sc_out< sc_lv<24> > A_fifo_2_0_din;
    sc_in< sc_logic > A_fifo_2_0_full_n;
    sc_out< sc_logic > A_fifo_2_0_write;
    sc_in< sc_lv<24> > A_loader_3_V_V_dout;
    sc_in< sc_logic > A_loader_3_V_V_empty_n;
    sc_out< sc_logic > A_loader_3_V_V_read;
    sc_out< sc_lv<24> > A_fifo_3_0_din;
    sc_in< sc_logic > A_fifo_3_0_full_n;
    sc_out< sc_logic > A_fifo_3_0_write;
    sc_in< sc_lv<24> > A_loader_4_V_V_dout;
    sc_in< sc_logic > A_loader_4_V_V_empty_n;
    sc_out< sc_logic > A_loader_4_V_V_read;
    sc_out< sc_lv<24> > A_fifo_4_0_din;
    sc_in< sc_logic > A_fifo_4_0_full_n;
    sc_out< sc_logic > A_fifo_4_0_write;
    sc_in< sc_lv<24> > A_loader_5_V_V_dout;
    sc_in< sc_logic > A_loader_5_V_V_empty_n;
    sc_out< sc_logic > A_loader_5_V_V_read;
    sc_out< sc_lv<24> > A_fifo_5_0_din;
    sc_in< sc_logic > A_fifo_5_0_full_n;
    sc_out< sc_logic > A_fifo_5_0_write;
    sc_in< sc_lv<24> > A_loader_6_V_V_dout;
    sc_in< sc_logic > A_loader_6_V_V_empty_n;
    sc_out< sc_logic > A_loader_6_V_V_read;
    sc_out< sc_lv<24> > A_fifo_6_0_din;
    sc_in< sc_logic > A_fifo_6_0_full_n;
    sc_out< sc_logic > A_fifo_6_0_write;
    sc_in< sc_lv<24> > A_loader_7_V_V_dout;
    sc_in< sc_logic > A_loader_7_V_V_empty_n;
    sc_out< sc_logic > A_loader_7_V_V_read;
    sc_out< sc_lv<24> > A_fifo_7_0_din;
    sc_in< sc_logic > A_fifo_7_0_full_n;
    sc_out< sc_logic > A_fifo_7_0_write;
    sc_in< sc_lv<24> > A_loader_8_V_V_dout;
    sc_in< sc_logic > A_loader_8_V_V_empty_n;
    sc_out< sc_logic > A_loader_8_V_V_read;
    sc_out< sc_lv<24> > A_fifo_8_0_din;
    sc_in< sc_logic > A_fifo_8_0_full_n;
    sc_out< sc_logic > A_fifo_8_0_write;
    sc_in< sc_lv<24> > A_loader_9_V_V_dout;
    sc_in< sc_logic > A_loader_9_V_V_empty_n;
    sc_out< sc_logic > A_loader_9_V_V_read;
    sc_out< sc_lv<24> > A_fifo_9_0_din;
    sc_in< sc_logic > A_fifo_9_0_full_n;
    sc_out< sc_logic > A_fifo_9_0_write;
    sc_in< sc_lv<24> > A_loader_10_V_V_dout;
    sc_in< sc_logic > A_loader_10_V_V_empty_n;
    sc_out< sc_logic > A_loader_10_V_V_read;
    sc_out< sc_lv<24> > A_fifo_10_0_din;
    sc_in< sc_logic > A_fifo_10_0_full_n;
    sc_out< sc_logic > A_fifo_10_0_write;
    sc_in< sc_lv<24> > A_loader_11_V_V_dout;
    sc_in< sc_logic > A_loader_11_V_V_empty_n;
    sc_out< sc_logic > A_loader_11_V_V_read;
    sc_out< sc_lv<24> > A_fifo_11_0_din;
    sc_in< sc_logic > A_fifo_11_0_full_n;
    sc_out< sc_logic > A_fifo_11_0_write;
    sc_in< sc_lv<24> > B_loader_V_V_dout;
    sc_in< sc_logic > B_loader_V_V_empty_n;
    sc_out< sc_logic > B_loader_V_V_read;
    sc_out< sc_lv<24> > B_fifo_0_0_din;
    sc_in< sc_logic > B_fifo_0_0_full_n;
    sc_out< sc_logic > B_fifo_0_0_write;
    sc_in< sc_lv<24> > B_loader_1_V_V_dout;
    sc_in< sc_logic > B_loader_1_V_V_empty_n;
    sc_out< sc_logic > B_loader_1_V_V_read;
    sc_out< sc_lv<24> > B_fifo_1_0_din;
    sc_in< sc_logic > B_fifo_1_0_full_n;
    sc_out< sc_logic > B_fifo_1_0_write;
    sc_in< sc_lv<24> > B_loader_2_V_V_dout;
    sc_in< sc_logic > B_loader_2_V_V_empty_n;
    sc_out< sc_logic > B_loader_2_V_V_read;
    sc_out< sc_lv<24> > B_fifo_2_0_din;
    sc_in< sc_logic > B_fifo_2_0_full_n;
    sc_out< sc_logic > B_fifo_2_0_write;
    sc_in< sc_lv<24> > B_loader_3_V_V_dout;
    sc_in< sc_logic > B_loader_3_V_V_empty_n;
    sc_out< sc_logic > B_loader_3_V_V_read;
    sc_out< sc_lv<24> > B_fifo_3_0_din;
    sc_in< sc_logic > B_fifo_3_0_full_n;
    sc_out< sc_logic > B_fifo_3_0_write;
    sc_in< sc_lv<24> > B_loader_4_V_V_dout;
    sc_in< sc_logic > B_loader_4_V_V_empty_n;
    sc_out< sc_logic > B_loader_4_V_V_read;
    sc_out< sc_lv<24> > B_fifo_4_0_din;
    sc_in< sc_logic > B_fifo_4_0_full_n;
    sc_out< sc_logic > B_fifo_4_0_write;
    sc_in< sc_lv<24> > B_loader_5_V_V_dout;
    sc_in< sc_logic > B_loader_5_V_V_empty_n;
    sc_out< sc_logic > B_loader_5_V_V_read;
    sc_out< sc_lv<24> > B_fifo_5_0_din;
    sc_in< sc_logic > B_fifo_5_0_full_n;
    sc_out< sc_logic > B_fifo_5_0_write;
    sc_in< sc_lv<24> > B_loader_6_V_V_dout;
    sc_in< sc_logic > B_loader_6_V_V_empty_n;
    sc_out< sc_logic > B_loader_6_V_V_read;
    sc_out< sc_lv<24> > B_fifo_6_0_din;
    sc_in< sc_logic > B_fifo_6_0_full_n;
    sc_out< sc_logic > B_fifo_6_0_write;
    sc_in< sc_lv<24> > B_loader_7_V_V_dout;
    sc_in< sc_logic > B_loader_7_V_V_empty_n;
    sc_out< sc_logic > B_loader_7_V_V_read;
    sc_out< sc_lv<24> > B_fifo_7_0_din;
    sc_in< sc_logic > B_fifo_7_0_full_n;
    sc_out< sc_logic > B_fifo_7_0_write;
    sc_in< sc_lv<24> > B_loader_8_V_V_dout;
    sc_in< sc_logic > B_loader_8_V_V_empty_n;
    sc_out< sc_logic > B_loader_8_V_V_read;
    sc_out< sc_lv<24> > B_fifo_8_0_din;
    sc_in< sc_logic > B_fifo_8_0_full_n;
    sc_out< sc_logic > B_fifo_8_0_write;
    sc_in< sc_lv<24> > B_loader_9_V_V_dout;
    sc_in< sc_logic > B_loader_9_V_V_empty_n;
    sc_out< sc_logic > B_loader_9_V_V_read;
    sc_out< sc_lv<24> > B_fifo_9_0_din;
    sc_in< sc_logic > B_fifo_9_0_full_n;
    sc_out< sc_logic > B_fifo_9_0_write;
    sc_in< sc_lv<24> > B_loader_10_V_V_dout;
    sc_in< sc_logic > B_loader_10_V_V_empty_n;
    sc_out< sc_logic > B_loader_10_V_V_read;
    sc_out< sc_lv<24> > B_fifo_10_0_din;
    sc_in< sc_logic > B_fifo_10_0_full_n;
    sc_out< sc_logic > B_fifo_10_0_write;
    sc_in< sc_lv<24> > B_loader_11_V_V_dout;
    sc_in< sc_logic > B_loader_11_V_V_empty_n;
    sc_out< sc_logic > B_loader_11_V_V_read;
    sc_out< sc_lv<24> > B_fifo_11_0_din;
    sc_in< sc_logic > B_fifo_11_0_full_n;
    sc_out< sc_logic > B_fifo_11_0_write;
    sc_signal< sc_lv<10> > ap_var_for_const0;


    // Module declarations
    Bert_layer_systolic_array_k_768_Loop_data_load_proc143(sc_module_name name);
    SC_HAS_PROCESS(Bert_layer_systolic_array_k_768_Loop_data_load_proc143);

    ~Bert_layer_systolic_array_k_768_Loop_data_load_proc143();

    sc_trace_file* mVcdFile;

    Bert_layer_Bert_layer_add_10ns_10ns_10_1_1<1,1,10,10,10>* Bert_layer_add_10ns_10ns_10_1_1_U57;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > A_loader_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln32_reg_491;
    sc_signal< sc_logic > A_fifo_0_0_blk_n;
    sc_signal< sc_logic > A_loader_1_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_1_0_blk_n;
    sc_signal< sc_logic > A_loader_2_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_2_0_blk_n;
    sc_signal< sc_logic > A_loader_3_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_3_0_blk_n;
    sc_signal< sc_logic > A_loader_4_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_4_0_blk_n;
    sc_signal< sc_logic > A_loader_5_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_5_0_blk_n;
    sc_signal< sc_logic > A_loader_6_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_6_0_blk_n;
    sc_signal< sc_logic > A_loader_7_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_7_0_blk_n;
    sc_signal< sc_logic > A_loader_8_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_8_0_blk_n;
    sc_signal< sc_logic > A_loader_9_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_9_0_blk_n;
    sc_signal< sc_logic > A_loader_10_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_10_0_blk_n;
    sc_signal< sc_logic > A_loader_11_V_V_blk_n;
    sc_signal< sc_logic > A_fifo_11_0_blk_n;
    sc_signal< sc_logic > B_loader_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_0_0_blk_n;
    sc_signal< sc_logic > B_loader_1_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_1_0_blk_n;
    sc_signal< sc_logic > B_loader_2_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_2_0_blk_n;
    sc_signal< sc_logic > B_loader_3_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_3_0_blk_n;
    sc_signal< sc_logic > B_loader_4_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_4_0_blk_n;
    sc_signal< sc_logic > B_loader_5_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_5_0_blk_n;
    sc_signal< sc_logic > B_loader_6_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_6_0_blk_n;
    sc_signal< sc_logic > B_loader_7_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_7_0_blk_n;
    sc_signal< sc_logic > B_loader_8_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_8_0_blk_n;
    sc_signal< sc_logic > B_loader_9_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_9_0_blk_n;
    sc_signal< sc_logic > B_loader_10_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_10_0_blk_n;
    sc_signal< sc_logic > B_loader_11_V_V_blk_n;
    sc_signal< sc_logic > B_fifo_11_0_blk_n;
    sc_signal< sc_lv<10> > k_reg_468;
    sc_signal< sc_lv<1> > icmp_ln32_fu_479_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > k_1_fu_485_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_300;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_fifo_0_0_blk_n();
    void thread_A_fifo_0_0_din();
    void thread_A_fifo_0_0_write();
    void thread_A_fifo_10_0_blk_n();
    void thread_A_fifo_10_0_din();
    void thread_A_fifo_10_0_write();
    void thread_A_fifo_11_0_blk_n();
    void thread_A_fifo_11_0_din();
    void thread_A_fifo_11_0_write();
    void thread_A_fifo_1_0_blk_n();
    void thread_A_fifo_1_0_din();
    void thread_A_fifo_1_0_write();
    void thread_A_fifo_2_0_blk_n();
    void thread_A_fifo_2_0_din();
    void thread_A_fifo_2_0_write();
    void thread_A_fifo_3_0_blk_n();
    void thread_A_fifo_3_0_din();
    void thread_A_fifo_3_0_write();
    void thread_A_fifo_4_0_blk_n();
    void thread_A_fifo_4_0_din();
    void thread_A_fifo_4_0_write();
    void thread_A_fifo_5_0_blk_n();
    void thread_A_fifo_5_0_din();
    void thread_A_fifo_5_0_write();
    void thread_A_fifo_6_0_blk_n();
    void thread_A_fifo_6_0_din();
    void thread_A_fifo_6_0_write();
    void thread_A_fifo_7_0_blk_n();
    void thread_A_fifo_7_0_din();
    void thread_A_fifo_7_0_write();
    void thread_A_fifo_8_0_blk_n();
    void thread_A_fifo_8_0_din();
    void thread_A_fifo_8_0_write();
    void thread_A_fifo_9_0_blk_n();
    void thread_A_fifo_9_0_din();
    void thread_A_fifo_9_0_write();
    void thread_A_loader_10_V_V_blk_n();
    void thread_A_loader_10_V_V_read();
    void thread_A_loader_11_V_V_blk_n();
    void thread_A_loader_11_V_V_read();
    void thread_A_loader_1_V_V_blk_n();
    void thread_A_loader_1_V_V_read();
    void thread_A_loader_2_V_V_blk_n();
    void thread_A_loader_2_V_V_read();
    void thread_A_loader_3_V_V_blk_n();
    void thread_A_loader_3_V_V_read();
    void thread_A_loader_4_V_V_blk_n();
    void thread_A_loader_4_V_V_read();
    void thread_A_loader_5_V_V_blk_n();
    void thread_A_loader_5_V_V_read();
    void thread_A_loader_6_V_V_blk_n();
    void thread_A_loader_6_V_V_read();
    void thread_A_loader_7_V_V_blk_n();
    void thread_A_loader_7_V_V_read();
    void thread_A_loader_8_V_V_blk_n();
    void thread_A_loader_8_V_V_read();
    void thread_A_loader_9_V_V_blk_n();
    void thread_A_loader_9_V_V_read();
    void thread_A_loader_V_V_blk_n();
    void thread_A_loader_V_V_read();
    void thread_B_fifo_0_0_blk_n();
    void thread_B_fifo_0_0_din();
    void thread_B_fifo_0_0_write();
    void thread_B_fifo_10_0_blk_n();
    void thread_B_fifo_10_0_din();
    void thread_B_fifo_10_0_write();
    void thread_B_fifo_11_0_blk_n();
    void thread_B_fifo_11_0_din();
    void thread_B_fifo_11_0_write();
    void thread_B_fifo_1_0_blk_n();
    void thread_B_fifo_1_0_din();
    void thread_B_fifo_1_0_write();
    void thread_B_fifo_2_0_blk_n();
    void thread_B_fifo_2_0_din();
    void thread_B_fifo_2_0_write();
    void thread_B_fifo_3_0_blk_n();
    void thread_B_fifo_3_0_din();
    void thread_B_fifo_3_0_write();
    void thread_B_fifo_4_0_blk_n();
    void thread_B_fifo_4_0_din();
    void thread_B_fifo_4_0_write();
    void thread_B_fifo_5_0_blk_n();
    void thread_B_fifo_5_0_din();
    void thread_B_fifo_5_0_write();
    void thread_B_fifo_6_0_blk_n();
    void thread_B_fifo_6_0_din();
    void thread_B_fifo_6_0_write();
    void thread_B_fifo_7_0_blk_n();
    void thread_B_fifo_7_0_din();
    void thread_B_fifo_7_0_write();
    void thread_B_fifo_8_0_blk_n();
    void thread_B_fifo_8_0_din();
    void thread_B_fifo_8_0_write();
    void thread_B_fifo_9_0_blk_n();
    void thread_B_fifo_9_0_din();
    void thread_B_fifo_9_0_write();
    void thread_B_loader_10_V_V_blk_n();
    void thread_B_loader_10_V_V_read();
    void thread_B_loader_11_V_V_blk_n();
    void thread_B_loader_11_V_V_read();
    void thread_B_loader_1_V_V_blk_n();
    void thread_B_loader_1_V_V_read();
    void thread_B_loader_2_V_V_blk_n();
    void thread_B_loader_2_V_V_read();
    void thread_B_loader_3_V_V_blk_n();
    void thread_B_loader_3_V_V_read();
    void thread_B_loader_4_V_V_blk_n();
    void thread_B_loader_4_V_V_read();
    void thread_B_loader_5_V_V_blk_n();
    void thread_B_loader_5_V_V_read();
    void thread_B_loader_6_V_V_blk_n();
    void thread_B_loader_6_V_V_read();
    void thread_B_loader_7_V_V_blk_n();
    void thread_B_loader_7_V_V_read();
    void thread_B_loader_8_V_V_blk_n();
    void thread_B_loader_8_V_V_read();
    void thread_B_loader_9_V_V_blk_n();
    void thread_B_loader_9_V_V_read();
    void thread_B_loader_V_V_blk_n();
    void thread_B_loader_V_V_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_icmp_ln32_fu_479_p2();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
