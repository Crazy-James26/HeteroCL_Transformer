// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Bert_layer_PE446_HH_
#define _Bert_layer_PE446_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Bert_layer_Bert_layer_add_12ns_12ns_12_1_1.h"
#include "Bert_layer_Bert_layer_mul_24s_24s_40_2_1.h"
#include "Bert_layer_Bert_layer_add_40ns_40ns_40_1_1.h"

namespace ap_rtl {

struct Bert_layer_PE446 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > A_in_V_V_dout;
    sc_in< sc_logic > A_in_V_V_empty_n;
    sc_out< sc_logic > A_in_V_V_read;
    sc_out< sc_lv<24> > A_out_V_V_din;
    sc_in< sc_logic > A_out_V_V_full_n;
    sc_out< sc_logic > A_out_V_V_write;
    sc_in< sc_lv<24> > B_in_V_V_dout;
    sc_in< sc_logic > B_in_V_V_empty_n;
    sc_out< sc_logic > B_in_V_V_read;
    sc_out< sc_lv<24> > B_out_V_V_din;
    sc_in< sc_logic > B_out_V_V_full_n;
    sc_out< sc_logic > B_out_V_V_write;
    sc_out< sc_lv<24> > C_out_V_out_din;
    sc_in< sc_logic > C_out_V_out_full_n;
    sc_out< sc_logic > C_out_V_out_write;
    sc_signal< sc_lv<12> > ap_var_for_const0;


    // Module declarations
    Bert_layer_PE446(sc_module_name name);
    SC_HAS_PROCESS(Bert_layer_PE446);

    ~Bert_layer_PE446();

    sc_trace_file* mVcdFile;

    Bert_layer_Bert_layer_add_12ns_12ns_12_1_1<1,1,12,12,12>* Bert_layer_add_12ns_12ns_12_1_1_U4523;
    Bert_layer_Bert_layer_mul_24s_24s_40_2_1<1,2,24,24,40>* Bert_layer_mul_24s_24s_40_2_1_U4524;
    Bert_layer_Bert_layer_add_40ns_40ns_40_1_1<1,1,40,40,40>* Bert_layer_add_40ns_40ns_40_1_1_U4525;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > A_in_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln8_reg_166;
    sc_signal< sc_logic > A_out_V_V_blk_n;
    sc_signal< sc_logic > B_in_V_V_blk_n;
    sc_signal< sc_logic > B_out_V_V_blk_n;
    sc_signal< sc_logic > C_out_V_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<24> > C_out_V_dc_01_reg_95;
    sc_signal< sc_lv<12> > k_reg_108;
    sc_signal< sc_lv<1> > icmp_ln8_fu_119_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln8_reg_166_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_166_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln8_reg_166_pp0_iter3_reg;
    sc_signal< sc_lv<12> > k_34_fu_125_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<24> > A_in_V_V_read_reg_175;
    sc_signal< sc_lv<24> > B_in_V_V_read_reg_180;
    sc_signal< sc_lv<40> > grp_fu_137_p2;
    sc_signal< sc_lv<40> > mul_ln1146_reg_195;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<40> > add_ln1146_fu_151_p0;
    sc_signal< sc_lv<40> > add_ln1146_fu_151_p2;
    sc_signal< sc_logic > grp_fu_137_ce;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_C00;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_27;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_in_V_V_blk_n();
    void thread_A_in_V_V_read();
    void thread_A_out_V_V_blk_n();
    void thread_A_out_V_V_din();
    void thread_A_out_V_V_write();
    void thread_B_in_V_V_blk_n();
    void thread_B_in_V_V_read();
    void thread_B_out_V_V_blk_n();
    void thread_B_out_V_V_din();
    void thread_B_out_V_V_write();
    void thread_C_out_V_out_blk_n();
    void thread_C_out_V_out_din();
    void thread_C_out_V_out_write();
    void thread_add_ln1146_fu_151_p0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_grp_fu_137_ce();
    void thread_icmp_ln8_fu_119_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
