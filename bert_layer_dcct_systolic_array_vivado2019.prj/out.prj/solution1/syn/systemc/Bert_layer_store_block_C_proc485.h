// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Bert_layer_store_block_C_proc485_HH_
#define _Bert_layer_store_block_C_proc485_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Bert_layer_Bert_layer_add_5ns_5ns_5_1_1.h"
#include "Bert_layer_Bert_layer_add_3ns_3ns_3_1_1.h"
#include "Bert_layer_Bert_layer_add_4ns_4ns_4_1_1.h"
#include "Bert_layer_Bert_layer_sub_8ns_8ns_8_1_1.h"
#include "Bert_layer_Bert_layer_add_8ns_8ns_8_1_1.h"
#include "Bert_layer_Bert_layer_add_24ns_24ns_24_1_1.h"

namespace ap_rtl {

struct Bert_layer_store_block_C_proc485 : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<2> > ii_dout;
    sc_in< sc_logic > ii_empty_n;
    sc_out< sc_logic > ii_read;
    sc_in< sc_lv<2> > jj_dout;
    sc_in< sc_logic > jj_empty_n;
    sc_out< sc_logic > jj_read;
    sc_out< sc_lv<8> > outp_V_address0;
    sc_out< sc_logic > outp_V_ce0;
    sc_out< sc_logic > outp_V_we0;
    sc_out< sc_lv<24> > outp_V_d0;
    sc_in< sc_lv<24> > outp_V_q0;
    sc_in< sc_lv<24> > block_C_drainer_0_V_V9_dout;
    sc_in< sc_logic > block_C_drainer_0_V_V9_empty_n;
    sc_out< sc_logic > block_C_drainer_0_V_V9_read;
    sc_in< sc_lv<24> > block_C_drainer_1_V_V10_dout;
    sc_in< sc_logic > block_C_drainer_1_V_V10_empty_n;
    sc_out< sc_logic > block_C_drainer_1_V_V10_read;
    sc_in< sc_lv<24> > block_C_drainer_2_V_V11_dout;
    sc_in< sc_logic > block_C_drainer_2_V_V11_empty_n;
    sc_out< sc_logic > block_C_drainer_2_V_V11_read;
    sc_in< sc_lv<24> > block_C_drainer_3_V_V12_dout;
    sc_in< sc_logic > block_C_drainer_3_V_V12_empty_n;
    sc_out< sc_logic > block_C_drainer_3_V_V12_read;
    sc_signal< sc_lv<5> > ap_var_for_const0;
    sc_signal< sc_lv<3> > ap_var_for_const1;


    // Module declarations
    Bert_layer_store_block_C_proc485(sc_module_name name);
    SC_HAS_PROCESS(Bert_layer_store_block_C_proc485);

    ~Bert_layer_store_block_C_proc485();

    sc_trace_file* mVcdFile;

    Bert_layer_Bert_layer_add_5ns_5ns_5_1_1<1,1,5,5,5>* Bert_layer_add_5ns_5ns_5_1_1_U2528;
    Bert_layer_Bert_layer_add_3ns_3ns_3_1_1<1,1,3,3,3>* Bert_layer_add_3ns_3ns_3_1_1_U2529;
    Bert_layer_Bert_layer_add_4ns_4ns_4_1_1<1,1,4,4,4>* Bert_layer_add_4ns_4ns_4_1_1_U2530;
    Bert_layer_Bert_layer_sub_8ns_8ns_8_1_1<1,1,8,8,8>* Bert_layer_sub_8ns_8ns_8_1_1_U2531;
    Bert_layer_Bert_layer_add_4ns_4ns_4_1_1<1,1,4,4,4>* Bert_layer_add_4ns_4ns_4_1_1_U2532;
    Bert_layer_Bert_layer_add_8ns_8ns_8_1_1<1,1,8,8,8>* Bert_layer_add_8ns_8ns_8_1_1_U2533;
    Bert_layer_Bert_layer_add_3ns_3ns_3_1_1<1,1,3,3,3>* Bert_layer_add_3ns_3ns_3_1_1_U2534;
    Bert_layer_Bert_layer_add_24ns_24ns_24_1_1<1,1,24,24,24>* Bert_layer_add_24ns_24ns_24_1_1_U2535;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ii_blk_n;
    sc_signal< sc_logic > jj_blk_n;
    sc_signal< sc_logic > block_C_drainer_0_V_V9_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > icmp_ln84_reg_307;
    sc_signal< sc_lv<2> > trunc_ln84_reg_327;
    sc_signal< sc_logic > block_C_drainer_1_V_V10_blk_n;
    sc_signal< sc_logic > block_C_drainer_2_V_V11_blk_n;
    sc_signal< sc_logic > block_C_drainer_3_V_V12_blk_n;
    sc_signal< sc_lv<5> > indvar_flatten_reg_123;
    sc_signal< sc_lv<3> > i_reg_134;
    sc_signal< sc_lv<3> > j_reg_145;
    sc_signal< sc_lv<4> > tmp_fu_169_p3;
    sc_signal< sc_lv<4> > tmp_reg_297;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<4> > tmp_3_fu_177_p3;
    sc_signal< sc_lv<4> > tmp_3_reg_302;
    sc_signal< sc_lv<1> > icmp_ln84_fu_185_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<5> > add_ln84_2_fu_191_p2;
    sc_signal< sc_lv<5> > add_ln84_2_reg_311;
    sc_signal< sc_lv<3> > select_ln84_fu_209_p3;
    sc_signal< sc_lv<3> > select_ln84_reg_316;
    sc_signal< sc_lv<3> > select_ln84_1_fu_217_p3;
    sc_signal< sc_lv<3> > select_ln84_1_reg_322;
    sc_signal< sc_lv<2> > trunc_ln84_fu_225_p1;
    sc_signal< sc_lv<4> > add_ln84_1_fu_233_p2;
    sc_signal< sc_lv<4> > add_ln84_1_reg_331;
    sc_signal< bool > ap_predicate_op41_read_state3;
    sc_signal< bool > ap_predicate_op43_read_state3;
    sc_signal< bool > ap_predicate_op45_read_state3;
    sc_signal< bool > ap_predicate_op47_read_state3;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<8> > outp_V_addr_reg_357;
    sc_signal< sc_lv<3> > add_ln86_fu_285_p2;
    sc_signal< sc_lv<3> > add_ln86_reg_362;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<5> > ap_phi_mux_indvar_flatten_phi_fu_127_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_i_phi_fu_138_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_j_phi_fu_149_p4;
    sc_signal< sc_lv<24> > ap_phi_reg_pp0_iter0_p_0_reg_156;
    sc_signal< sc_lv<24> > ap_phi_reg_pp0_iter1_p_0_reg_156;
    sc_signal< sc_lv<64> > zext_ln657_2_fu_280_p1;
    sc_signal< sc_lv<24> > add_ln657_fu_290_p2;
    sc_signal< sc_lv<1> > icmp_ln86_fu_203_p2;
    sc_signal< sc_lv<3> > add_ln84_fu_197_p2;
    sc_signal< sc_lv<4> > add_ln84_1_fu_233_p0;
    sc_signal< sc_lv<6> > tmp_5_fu_245_p3;
    sc_signal< sc_lv<8> > sub_ln657_fu_256_p0;
    sc_signal< sc_lv<8> > sub_ln657_fu_256_p1;
    sc_signal< sc_lv<4> > add_ln88_fu_265_p1;
    sc_signal< sc_lv<4> > add_ln88_fu_265_p2;
    sc_signal< sc_lv<8> > add_ln657_1_fu_274_p0;
    sc_signal< sc_lv<8> > sub_ln657_fu_256_p2;
    sc_signal< sc_lv<8> > add_ln657_1_fu_274_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_188;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_add_ln657_1_fu_274_p0();
    void thread_add_ln84_1_fu_233_p0();
    void thread_add_ln88_fu_265_p1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_188();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_138_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_127_p4();
    void thread_ap_phi_mux_j_phi_fu_149_p4();
    void thread_ap_phi_reg_pp0_iter0_p_0_reg_156();
    void thread_ap_predicate_op41_read_state3();
    void thread_ap_predicate_op43_read_state3();
    void thread_ap_predicate_op45_read_state3();
    void thread_ap_predicate_op47_read_state3();
    void thread_ap_ready();
    void thread_block_C_drainer_0_V_V9_blk_n();
    void thread_block_C_drainer_0_V_V9_read();
    void thread_block_C_drainer_1_V_V10_blk_n();
    void thread_block_C_drainer_1_V_V10_read();
    void thread_block_C_drainer_2_V_V11_blk_n();
    void thread_block_C_drainer_2_V_V11_read();
    void thread_block_C_drainer_3_V_V12_blk_n();
    void thread_block_C_drainer_3_V_V12_read();
    void thread_icmp_ln84_fu_185_p2();
    void thread_icmp_ln86_fu_203_p2();
    void thread_ii_blk_n();
    void thread_ii_read();
    void thread_jj_blk_n();
    void thread_jj_read();
    void thread_outp_V_address0();
    void thread_outp_V_ce0();
    void thread_outp_V_d0();
    void thread_outp_V_we0();
    void thread_select_ln84_1_fu_217_p3();
    void thread_select_ln84_fu_209_p3();
    void thread_sub_ln657_fu_256_p0();
    void thread_sub_ln657_fu_256_p1();
    void thread_tmp_3_fu_177_p3();
    void thread_tmp_5_fu_245_p3();
    void thread_tmp_fu_169_p3();
    void thread_trunc_ln84_fu_225_p1();
    void thread_zext_ln657_2_fu_280_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
