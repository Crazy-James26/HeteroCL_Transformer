// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Bert_layer_dataflow_parent_loop_proc_HH_
#define _Bert_layer_dataflow_parent_loop_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Bert_layer_dataflow_in_loop489.h"

namespace ap_rtl {

struct Bert_layer_dataflow_parent_loop_proc : public sc_module {
    // Port declarations 39
    sc_out< sc_lv<8> > v66_V_address0;
    sc_out< sc_logic > v66_V_ce0;
    sc_out< sc_lv<24> > v66_V_d0;
    sc_in< sc_lv<24> > v66_V_q0;
    sc_out< sc_logic > v66_V_we0;
    sc_out< sc_lv<8> > v66_V_address1;
    sc_out< sc_logic > v66_V_ce1;
    sc_out< sc_lv<24> > v66_V_d1;
    sc_in< sc_lv<24> > v66_V_q1;
    sc_out< sc_logic > v66_V_we1;
    sc_in< sc_lv<2> > ii;
    sc_out< sc_lv<10> > v67_V_address0;
    sc_out< sc_logic > v67_V_ce0;
    sc_out< sc_lv<24> > v67_V_d0;
    sc_in< sc_lv<24> > v67_V_q0;
    sc_out< sc_logic > v67_V_we0;
    sc_out< sc_lv<10> > v67_V_address1;
    sc_out< sc_logic > v67_V_ce1;
    sc_out< sc_lv<24> > v67_V_d1;
    sc_in< sc_lv<24> > v67_V_q1;
    sc_out< sc_logic > v67_V_we1;
    sc_out< sc_lv<10> > v68_V_address0;
    sc_out< sc_logic > v68_V_ce0;
    sc_out< sc_lv<24> > v68_V_d0;
    sc_in< sc_lv<24> > v68_V_q0;
    sc_out< sc_logic > v68_V_we0;
    sc_out< sc_lv<10> > v68_V_address1;
    sc_out< sc_logic > v68_V_ce1;
    sc_out< sc_lv<24> > v68_V_d1;
    sc_in< sc_lv<24> > v68_V_q1;
    sc_out< sc_logic > v68_V_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ii_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<24> > ap_var_for_const0;


    // Module declarations
    Bert_layer_dataflow_parent_loop_proc(sc_module_name name);
    SC_HAS_PROCESS(Bert_layer_dataflow_parent_loop_proc);

    ~Bert_layer_dataflow_parent_loop_proc();

    sc_trace_file* mVcdFile;

    Bert_layer_dataflow_in_loop489* dataflow_in_loop489_U0;
    sc_signal< sc_lv<8> > dataflow_in_loop489_U0_v66_V_address0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v66_V_ce0;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v66_V_d0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v66_V_we0;
    sc_signal< sc_lv<8> > dataflow_in_loop489_U0_v66_V_address1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v66_V_ce1;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v66_V_d1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v66_V_we1;
    sc_signal< sc_lv<10> > dataflow_in_loop489_U0_v67_V_address0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v67_V_ce0;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v67_V_d0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v67_V_we0;
    sc_signal< sc_lv<10> > dataflow_in_loop489_U0_v67_V_address1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v67_V_ce1;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v67_V_d1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v67_V_we1;
    sc_signal< sc_lv<10> > dataflow_in_loop489_U0_v68_V_address0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v68_V_ce0;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v68_V_d0;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v68_V_we0;
    sc_signal< sc_lv<10> > dataflow_in_loop489_U0_v68_V_address1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v68_V_ce1;
    sc_signal< sc_lv<24> > dataflow_in_loop489_U0_v68_V_d1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_v68_V_we1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_ap_start;
    sc_signal< sc_logic > dataflow_in_loop489_U0_ap_done;
    sc_signal< sc_logic > dataflow_in_loop489_U0_ap_ready;
    sc_signal< sc_logic > dataflow_in_loop489_U0_ap_idle;
    sc_signal< sc_logic > dataflow_in_loop489_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<5> > loop_dataflow_input_count;
    sc_signal< sc_lv<5> > loop_dataflow_output_count;
    sc_signal< sc_lv<5> > bound_minus_1;
    sc_signal< sc_logic > dataflow_in_loop489_U0_start_full_n;
    sc_signal< sc_logic > dataflow_in_loop489_U0_start_write;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<24> ap_const_lv24_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_bound_minus_1();
    void thread_dataflow_in_loop489_U0_ap_continue();
    void thread_dataflow_in_loop489_U0_ap_start();
    void thread_dataflow_in_loop489_U0_start_full_n();
    void thread_dataflow_in_loop489_U0_start_write();
    void thread_v66_V_address0();
    void thread_v66_V_address1();
    void thread_v66_V_ce0();
    void thread_v66_V_ce1();
    void thread_v66_V_d0();
    void thread_v66_V_d1();
    void thread_v66_V_we0();
    void thread_v66_V_we1();
    void thread_v67_V_address0();
    void thread_v67_V_address1();
    void thread_v67_V_ce0();
    void thread_v67_V_ce1();
    void thread_v67_V_d0();
    void thread_v67_V_d1();
    void thread_v67_V_we0();
    void thread_v67_V_we1();
    void thread_v68_V_address0();
    void thread_v68_V_address1();
    void thread_v68_V_ce0();
    void thread_v68_V_ce1();
    void thread_v68_V_d0();
    void thread_v68_V_d1();
    void thread_v68_V_we0();
    void thread_v68_V_we1();
};

}

using namespace ap_rtl;

#endif
