-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_update_i4_l_j3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_sumRow_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    inp_sumRow_ce0 : OUT STD_LOGIC;
    inp_sumRow_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v100_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v100_ce0 : OUT STD_LOGIC;
    v100_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v101_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v101_V_ce0 : OUT STD_LOGIC;
    v101_V_we0 : OUT STD_LOGIC;
    v101_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v101_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    v101_V_1_ce0 : OUT STD_LOGIC;
    v101_V_1_we0 : OUT STD_LOGIC;
    v101_V_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    grp_fu_2235_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2235_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2235_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2235_p_ce : OUT STD_LOGIC;
    grp_fu_2239_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2239_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2239_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_update_i4_l_j3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln122_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln122_fu_209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_reg_586_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_2_fu_217_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln122_2_reg_592 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln129_mid2_v_reg_599 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln129_mid2_v_reg_599_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln122_fu_235_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_reg_605_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal inp_sumRow_load_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal v62_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_629_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_629_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_629_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v64_reg_629_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_640 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln600_fu_328_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln600_reg_645 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln606_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_650_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_650_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_358_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_657 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_657_pp0_iter22_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_662 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln617_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln617_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln618_fu_403_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln618_reg_674 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln616_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_680_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln616_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln620_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln617_fu_464_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln617_reg_695 : STD_LOGIC_VECTOR (23 downto 0);
    signal v65_V_fu_515_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v65_V_reg_700 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln122_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln125_3_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_1_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j3_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln123_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j3_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i4_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i4_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln122_1_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln123_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln125_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln125_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln125_2_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln125_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ireg_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln590_fu_306_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_33_fu_341_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln604_fu_348_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_352_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln501_fu_338_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_365_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln616_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln616_fu_377_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln616_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln617_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln617_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616cast_fu_437_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln638_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln639_fu_441_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln606_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln617_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln638_fu_446_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln621_fu_471_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln621_fu_474_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln768_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln621_fu_479_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln623_fu_494_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln620_fu_502_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln616_fu_509_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_529_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_522_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln129_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln129_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln125_1_fu_546_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln129_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i4_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln122_fu_179_p2 = ap_const_lv1_0))) then 
                    i4_fu_94 <= select_ln122_2_fu_217_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i4_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln122_fu_179_p2 = ap_const_lv1_0))) then 
                    indvar_flatten7_fu_98 <= add_ln122_1_fu_185_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_98 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j3_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln122_fu_179_p2 = ap_const_lv1_0))) then 
                    j3_fu_90 <= add_ln123_fu_239_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j3_fu_90 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln616_reg_680 <= and_ln616_fu_418_p2;
                icmp_ln617_reg_669 <= icmp_ln617_fu_397_p2;
                man_V_2_reg_657 <= man_V_2_fu_358_p3;
                sh_amt_reg_662 <= sh_amt_fu_389_p3;
                trunc_ln618_reg_674 <= trunc_ln618_fu_403_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln616_reg_680_pp0_iter22_reg <= and_ln616_reg_680;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                exp_tmp_reg_640 <= ireg_fu_302_p1(62 downto 52);
                icmp_ln606_reg_650 <= icmp_ln606_fu_332_p2;
                icmp_ln606_reg_650_pp0_iter21_reg <= icmp_ln606_reg_650;
                icmp_ln606_reg_650_pp0_iter22_reg <= icmp_ln606_reg_650_pp0_iter21_reg;
                inp_sumRow_load_reg_619 <= inp_sumRow_q0;
                man_V_2_reg_657_pp0_iter22_reg <= man_V_2_reg_657;
                p_Result_s_reg_635 <= ireg_fu_302_p1(63 downto 63);
                select_ln122_reg_586_pp0_iter10_reg <= select_ln122_reg_586_pp0_iter9_reg;
                select_ln122_reg_586_pp0_iter11_reg <= select_ln122_reg_586_pp0_iter10_reg;
                select_ln122_reg_586_pp0_iter12_reg <= select_ln122_reg_586_pp0_iter11_reg;
                select_ln122_reg_586_pp0_iter13_reg <= select_ln122_reg_586_pp0_iter12_reg;
                select_ln122_reg_586_pp0_iter14_reg <= select_ln122_reg_586_pp0_iter13_reg;
                select_ln122_reg_586_pp0_iter15_reg <= select_ln122_reg_586_pp0_iter14_reg;
                select_ln122_reg_586_pp0_iter16_reg <= select_ln122_reg_586_pp0_iter15_reg;
                select_ln122_reg_586_pp0_iter17_reg <= select_ln122_reg_586_pp0_iter16_reg;
                select_ln122_reg_586_pp0_iter18_reg <= select_ln122_reg_586_pp0_iter17_reg;
                select_ln122_reg_586_pp0_iter19_reg <= select_ln122_reg_586_pp0_iter18_reg;
                select_ln122_reg_586_pp0_iter20_reg <= select_ln122_reg_586_pp0_iter19_reg;
                select_ln122_reg_586_pp0_iter21_reg <= select_ln122_reg_586_pp0_iter20_reg;
                select_ln122_reg_586_pp0_iter22_reg <= select_ln122_reg_586_pp0_iter21_reg;
                select_ln122_reg_586_pp0_iter23_reg <= select_ln122_reg_586_pp0_iter22_reg;
                select_ln122_reg_586_pp0_iter2_reg <= select_ln122_reg_586_pp0_iter1_reg;
                select_ln122_reg_586_pp0_iter3_reg <= select_ln122_reg_586_pp0_iter2_reg;
                select_ln122_reg_586_pp0_iter4_reg <= select_ln122_reg_586_pp0_iter3_reg;
                select_ln122_reg_586_pp0_iter5_reg <= select_ln122_reg_586_pp0_iter4_reg;
                select_ln122_reg_586_pp0_iter6_reg <= select_ln122_reg_586_pp0_iter5_reg;
                select_ln122_reg_586_pp0_iter7_reg <= select_ln122_reg_586_pp0_iter6_reg;
                select_ln122_reg_586_pp0_iter8_reg <= select_ln122_reg_586_pp0_iter7_reg;
                select_ln122_reg_586_pp0_iter9_reg <= select_ln122_reg_586_pp0_iter8_reg;
                trunc_ln122_reg_605_pp0_iter10_reg <= trunc_ln122_reg_605_pp0_iter9_reg;
                trunc_ln122_reg_605_pp0_iter11_reg <= trunc_ln122_reg_605_pp0_iter10_reg;
                trunc_ln122_reg_605_pp0_iter12_reg <= trunc_ln122_reg_605_pp0_iter11_reg;
                trunc_ln122_reg_605_pp0_iter13_reg <= trunc_ln122_reg_605_pp0_iter12_reg;
                trunc_ln122_reg_605_pp0_iter14_reg <= trunc_ln122_reg_605_pp0_iter13_reg;
                trunc_ln122_reg_605_pp0_iter15_reg <= trunc_ln122_reg_605_pp0_iter14_reg;
                trunc_ln122_reg_605_pp0_iter16_reg <= trunc_ln122_reg_605_pp0_iter15_reg;
                trunc_ln122_reg_605_pp0_iter17_reg <= trunc_ln122_reg_605_pp0_iter16_reg;
                trunc_ln122_reg_605_pp0_iter18_reg <= trunc_ln122_reg_605_pp0_iter17_reg;
                trunc_ln122_reg_605_pp0_iter19_reg <= trunc_ln122_reg_605_pp0_iter18_reg;
                trunc_ln122_reg_605_pp0_iter20_reg <= trunc_ln122_reg_605_pp0_iter19_reg;
                trunc_ln122_reg_605_pp0_iter21_reg <= trunc_ln122_reg_605_pp0_iter20_reg;
                trunc_ln122_reg_605_pp0_iter22_reg <= trunc_ln122_reg_605_pp0_iter21_reg;
                trunc_ln122_reg_605_pp0_iter23_reg <= trunc_ln122_reg_605_pp0_iter22_reg;
                trunc_ln122_reg_605_pp0_iter2_reg <= trunc_ln122_reg_605_pp0_iter1_reg;
                trunc_ln122_reg_605_pp0_iter3_reg <= trunc_ln122_reg_605_pp0_iter2_reg;
                trunc_ln122_reg_605_pp0_iter4_reg <= trunc_ln122_reg_605_pp0_iter3_reg;
                trunc_ln122_reg_605_pp0_iter5_reg <= trunc_ln122_reg_605_pp0_iter4_reg;
                trunc_ln122_reg_605_pp0_iter6_reg <= trunc_ln122_reg_605_pp0_iter5_reg;
                trunc_ln122_reg_605_pp0_iter7_reg <= trunc_ln122_reg_605_pp0_iter6_reg;
                trunc_ln122_reg_605_pp0_iter8_reg <= trunc_ln122_reg_605_pp0_iter7_reg;
                trunc_ln122_reg_605_pp0_iter9_reg <= trunc_ln122_reg_605_pp0_iter8_reg;
                trunc_ln600_reg_645 <= trunc_ln600_fu_328_p1;
                v62_reg_624 <= v100_q0;
                v64_reg_629 <= grp_fu_2235_p_dout0;
                v64_reg_629_pp0_iter19_reg <= v64_reg_629;
                v64_reg_629_pp0_iter20_reg <= v64_reg_629_pp0_iter19_reg;
                v64_reg_629_pp0_iter21_reg <= v64_reg_629_pp0_iter20_reg;
                v64_reg_629_pp0_iter22_reg <= v64_reg_629_pp0_iter21_reg;
                v65_V_reg_700 <= v65_V_fu_515_p3;
                zext_ln129_mid2_v_reg_599_pp0_iter10_reg <= zext_ln129_mid2_v_reg_599_pp0_iter9_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter11_reg <= zext_ln129_mid2_v_reg_599_pp0_iter10_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter12_reg <= zext_ln129_mid2_v_reg_599_pp0_iter11_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter13_reg <= zext_ln129_mid2_v_reg_599_pp0_iter12_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter14_reg <= zext_ln129_mid2_v_reg_599_pp0_iter13_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter15_reg <= zext_ln129_mid2_v_reg_599_pp0_iter14_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter16_reg <= zext_ln129_mid2_v_reg_599_pp0_iter15_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter17_reg <= zext_ln129_mid2_v_reg_599_pp0_iter16_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter18_reg <= zext_ln129_mid2_v_reg_599_pp0_iter17_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter19_reg <= zext_ln129_mid2_v_reg_599_pp0_iter18_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter20_reg <= zext_ln129_mid2_v_reg_599_pp0_iter19_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter21_reg <= zext_ln129_mid2_v_reg_599_pp0_iter20_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter22_reg <= zext_ln129_mid2_v_reg_599_pp0_iter21_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter23_reg <= zext_ln129_mid2_v_reg_599_pp0_iter22_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter2_reg <= zext_ln129_mid2_v_reg_599_pp0_iter1_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter3_reg <= zext_ln129_mid2_v_reg_599_pp0_iter2_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter4_reg <= zext_ln129_mid2_v_reg_599_pp0_iter3_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter5_reg <= zext_ln129_mid2_v_reg_599_pp0_iter4_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter6_reg <= zext_ln129_mid2_v_reg_599_pp0_iter5_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter7_reg <= zext_ln129_mid2_v_reg_599_pp0_iter6_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter8_reg <= zext_ln129_mid2_v_reg_599_pp0_iter7_reg;
                zext_ln129_mid2_v_reg_599_pp0_iter9_reg <= zext_ln129_mid2_v_reg_599_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln122_reg_586_pp0_iter1_reg <= select_ln122_reg_586;
                trunc_ln122_reg_605_pp0_iter1_reg <= trunc_ln122_reg_605;
                zext_ln129_mid2_v_reg_599_pp0_iter1_reg <= zext_ln129_mid2_v_reg_599;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_650_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln616_reg_680) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln620_reg_690 <= icmp_ln620_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln122_fu_179_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln122_2_reg_592 <= select_ln122_2_fu_217_p3;
                select_ln122_reg_586 <= select_ln122_fu_209_p3;
                trunc_ln122_reg_605 <= trunc_ln122_fu_235_p1;
                zext_ln129_mid2_v_reg_599 <= select_ln122_2_fu_217_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_650_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln616_reg_680) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln617_reg_695 <= select_ln617_fu_464_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_650_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln616_reg_685 <= sext_ln616_fu_424_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_fu_338_p1));
    add_ln122_1_fu_185_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten7_load) + unsigned(ap_const_lv8_1));
    add_ln122_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i4_load) + unsigned(ap_const_lv4_1));
    add_ln123_fu_239_p2 <= std_logic_vector(unsigned(select_ln122_fu_209_p3) + unsigned(ap_const_lv4_1));
    add_ln125_fu_291_p2 <= std_logic_vector(unsigned(sub_ln125_fu_282_p2) + unsigned(zext_ln125_2_fu_288_p1));
    add_ln129_fu_549_p2 <= std_logic_vector(unsigned(sub_ln129_fu_540_p2) + unsigned(zext_ln125_1_fu_546_p1));
    add_ln616_fu_377_p2 <= std_logic_vector(unsigned(F2_fu_365_p2) + unsigned(ap_const_lv12_FF0));
    and_ln616_fu_418_p2 <= (xor_ln617_fu_412_p2 and icmp_ln616_fu_371_p2);
    and_ln617_fu_459_p2 <= (xor_ln606_fu_454_p2 and icmp_ln617_reg_669);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln122_fu_179_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln122_fu_179_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter23_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i4_fu_94)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i4_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i4_load <= i4_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_98)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten7_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load <= indvar_flatten7_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_j3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j3_fu_90, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j3_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j3_load <= j3_fu_90;
        end if; 
    end process;

    ashr_ln621_fu_474_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_657_pp0_iter22_reg),to_integer(unsigned('0' & zext_ln621_fu_471_p1(31-1 downto 0)))));
    bitcast_ln768_fu_483_p1 <= v64_reg_629_pp0_iter22_reg;
    grp_fu_2235_p_ce <= ap_const_logic_1;
    grp_fu_2235_p_din0 <= v62_reg_624;
    grp_fu_2235_p_din1 <= inp_sumRow_load_reg_619;
    grp_fu_2239_p_ce <= ap_const_logic_1;
    grp_fu_2239_p_din0 <= v64_reg_629;
    icmp_ln122_fu_179_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten7_load = ap_const_lv8_90) else "0";
    icmp_ln123_fu_203_p2 <= "1" when (ap_sig_allocacmp_j3_load = ap_const_lv4_C) else "0";
    icmp_ln606_fu_332_p2 <= "1" when (trunc_ln590_fu_306_p1 = ap_const_lv63_0) else "0";
    icmp_ln616_fu_371_p2 <= "1" when (signed(F2_fu_365_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln617_fu_397_p2 <= "1" when (F2_fu_365_p2 = ap_const_lv12_10) else "0";
    icmp_ln620_fu_427_p2 <= "1" when (unsigned(sh_amt_reg_662) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln638_fu_432_p2 <= "1" when (unsigned(sh_amt_reg_662) < unsigned(ap_const_lv12_18)) else "0";
    inp_sumRow_address0 <= zext_ln122_fu_260_p1(4 - 1 downto 0);

    inp_sumRow_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inp_sumRow_ce0 <= ap_const_logic_1;
        else 
            inp_sumRow_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_302_p1 <= grp_fu_2239_p_dout0;
    man_V_1_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln604_fu_348_p1));
    man_V_2_fu_358_p3 <= 
        man_V_1_fu_352_p2 when (p_Result_s_reg_635(0) = '1') else 
        zext_ln604_fu_348_p1;
    or_ln617_fu_407_p2 <= (icmp_ln617_fu_397_p2 or icmp_ln606_reg_650);
    p_Result_33_fu_341_p3 <= (ap_const_lv1_1 & trunc_ln600_reg_645);
    p_shl_fu_264_p3 <= (select_ln122_2_reg_592 & ap_const_lv4_0);
    select_ln122_2_fu_217_p3 <= 
        add_ln122_fu_197_p2 when (icmp_ln123_fu_203_p2(0) = '1') else 
        ap_sig_allocacmp_i4_load;
    select_ln122_fu_209_p3 <= 
        ap_const_lv4_0 when (icmp_ln123_fu_203_p2(0) = '1') else 
        ap_sig_allocacmp_j3_load;
    select_ln616_fu_509_p3 <= 
        select_ln620_fu_502_p3 when (and_ln616_reg_680_pp0_iter22_reg(0) = '1') else 
        select_ln617_reg_695;
    select_ln617_fu_464_p3 <= 
        trunc_ln618_reg_674 when (and_ln617_fu_459_p2(0) = '1') else 
        select_ln638_fu_446_p3;
    select_ln620_fu_502_p3 <= 
        trunc_ln621_fu_479_p1 when (icmp_ln620_reg_690(0) = '1') else 
        select_ln623_fu_494_p3;
    select_ln623_fu_494_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_28_fu_486_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln638_fu_446_p3 <= 
        shl_ln639_fu_441_p2 when (icmp_ln638_fu_432_p2(0) = '1') else 
        ap_const_lv24_0;
        sext_ln616_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_662),32));

    sext_ln616cast_fu_437_p1 <= sext_ln616_fu_424_p1(24 - 1 downto 0);
    sh_amt_fu_389_p3 <= 
        add_ln616_fu_377_p2 when (icmp_ln616_fu_371_p2(0) = '1') else 
        sub_ln616_fu_383_p2;
    shl_ln639_fu_441_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln618_reg_674),to_integer(unsigned('0' & sext_ln616cast_fu_437_p1(24-1 downto 0)))));
    sub_ln125_fu_282_p2 <= std_logic_vector(unsigned(p_shl_fu_264_p3) - unsigned(zext_ln125_fu_278_p1));
    sub_ln129_fu_540_p2 <= std_logic_vector(unsigned(tmp_s_fu_522_p3) - unsigned(zext_ln129_fu_536_p1));
    sub_ln616_fu_383_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_365_p2));
    tmp_19_fu_529_p3 <= (zext_ln129_mid2_v_reg_599_pp0_iter23_reg & ap_const_lv2_0);
    tmp_28_fu_486_p3 <= bitcast_ln768_fu_483_p1(31 downto 31);
    tmp_fu_271_p3 <= (select_ln122_2_reg_592 & ap_const_lv2_0);
    tmp_s_fu_522_p3 <= (zext_ln129_mid2_v_reg_599_pp0_iter23_reg & ap_const_lv4_0);
    trunc_ln122_fu_235_p1 <= select_ln122_2_fu_217_p3(1 - 1 downto 0);
    trunc_ln590_fu_306_p1 <= ireg_fu_302_p1(63 - 1 downto 0);
    trunc_ln600_fu_328_p1 <= ireg_fu_302_p1(52 - 1 downto 0);
    trunc_ln618_fu_403_p1 <= man_V_2_fu_358_p3(24 - 1 downto 0);
    trunc_ln621_fu_479_p1 <= ashr_ln621_fu_474_p2(24 - 1 downto 0);
    v100_address0 <= zext_ln125_3_fu_297_p1(8 - 1 downto 0);

    v100_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v100_ce0 <= ap_const_logic_1;
        else 
            v100_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v101_V_1_address0 <= zext_ln129_1_fu_555_p1(7 - 1 downto 0);

    v101_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v101_V_1_ce0 <= ap_const_logic_1;
        else 
            v101_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v101_V_1_d0 <= v65_V_reg_700;

    v101_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001, trunc_ln122_reg_605_pp0_iter23_reg)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln122_reg_605_pp0_iter23_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v101_V_1_we0 <= ap_const_logic_1;
        else 
            v101_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v101_V_address0 <= zext_ln129_1_fu_555_p1(7 - 1 downto 0);

    v101_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v101_V_ce0 <= ap_const_logic_1;
        else 
            v101_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v101_V_d0 <= v65_V_reg_700;

    v101_V_we0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001, trunc_ln122_reg_605_pp0_iter23_reg)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln122_reg_605_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v101_V_we0 <= ap_const_logic_1;
        else 
            v101_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v65_V_fu_515_p3 <= 
        ap_const_lv24_0 when (icmp_ln606_reg_650_pp0_iter22_reg(0) = '1') else 
        select_ln616_fu_509_p3;
    xor_ln606_fu_454_p2 <= (icmp_ln606_reg_650_pp0_iter21_reg xor ap_const_lv1_1);
    xor_ln617_fu_412_p2 <= (or_ln617_fu_407_p2 xor ap_const_lv1_1);
    zext_ln122_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_2_reg_592),64));
    zext_ln125_1_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_reg_586_pp0_iter23_reg),7));
    zext_ln125_2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_reg_586),8));
    zext_ln125_3_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_fu_291_p2),64));
    zext_ln125_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_271_p3),8));
    zext_ln129_1_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln129_fu_549_p2),64));
    zext_ln129_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_529_p3),7));
    zext_ln501_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_640),12));
    zext_ln604_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_fu_341_p3),54));
    zext_ln621_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln616_reg_685),54));
end behav;
