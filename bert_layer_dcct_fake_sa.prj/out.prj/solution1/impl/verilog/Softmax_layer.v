// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Softmax_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v49_address0,
        v49_ce0,
        v49_we0,
        v49_d0,
        v49_q0,
        v50_V_address0,
        v50_V_ce0,
        v50_V_we0,
        v50_V_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_pp0_stage1 = 11'd8;
parameter    ap_ST_fsm_pp0_stage2 = 11'd16;
parameter    ap_ST_fsm_pp0_stage3 = 11'd32;
parameter    ap_ST_fsm_pp0_stage4 = 11'd64;
parameter    ap_ST_fsm_pp0_stage5 = 11'd128;
parameter    ap_ST_fsm_state20 = 11'd256;
parameter    ap_ST_fsm_pp1_stage0 = 11'd512;
parameter    ap_ST_fsm_state44 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v49_address0;
output   v49_ce0;
output   v49_we0;
output  [31:0] v49_d0;
input  [31:0] v49_q0;
output  [7:0] v50_V_address0;
output   v50_V_ce0;
output   v50_V_we0;
output  [23:0] v50_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] v49_address0;
reg v49_ce0;
reg v49_we0;
reg v50_V_ce0;
reg v50_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten_reg_170;
reg   [3:0] i3_0_reg_181;
reg   [3:0] j2_0_reg_192;
reg   [7:0] indvar_flatten14_reg_203;
reg   [3:0] i4_0_reg_214;
reg   [3:0] j3_0_reg_225;
reg   [31:0] reg_255;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state17_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln115_reg_747;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
wire    ap_block_state24_pp1_stage0_iter3;
wire    ap_block_state25_pp1_stage0_iter4;
wire    ap_block_state26_pp1_stage0_iter5;
wire    ap_block_state27_pp1_stage0_iter6;
wire    ap_block_state28_pp1_stage0_iter7;
wire    ap_block_state29_pp1_stage0_iter8;
wire    ap_block_state30_pp1_stage0_iter9;
wire    ap_block_state31_pp1_stage0_iter10;
wire    ap_block_state32_pp1_stage0_iter11;
wire    ap_block_state33_pp1_stage0_iter12;
wire    ap_block_state34_pp1_stage0_iter13;
wire    ap_block_state35_pp1_stage0_iter14;
wire    ap_block_state36_pp1_stage0_iter15;
wire    ap_block_state37_pp1_stage0_iter16;
wire    ap_block_state38_pp1_stage0_iter17;
wire    ap_block_state39_pp1_stage0_iter18;
wire    ap_block_state40_pp1_stage0_iter19;
wire    ap_block_state41_pp1_stage0_iter20;
wire    ap_block_state42_pp1_stage0_iter21;
wire    ap_block_state43_pp1_stage0_iter22;
wire    ap_block_pp1_stage0_11001;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln127_reg_791;
reg   [0:0] icmp_ln127_reg_791_pp1_iter1_reg;
wire   [31:0] inp_sumRow_q0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln115_reg_747_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln127_reg_791_pp1_iter2_reg;
wire   [0:0] icmp_ln112_fu_267_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] v52_fu_273_p2;
wire   [0:0] icmp_ln115_fu_284_p2;
reg   [0:0] icmp_ln115_reg_747_pp0_iter2_reg;
wire   [7:0] add_ln115_fu_290_p2;
reg   [7:0] add_ln115_reg_751;
wire   [3:0] select_ln118_fu_308_p3;
reg   [3:0] select_ln118_reg_756;
wire   [3:0] select_ln118_1_fu_316_p3;
reg   [3:0] select_ln118_1_reg_762;
reg   [3:0] select_ln118_1_reg_762_pp0_iter1_reg;
reg   [7:0] v49_addr_reg_770;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state16_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] v49_addr_reg_770_pp0_iter1_reg;
wire   [3:0] j2_fu_366_p2;
reg   [3:0] j2_reg_775;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_state14_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] v56_reg_780;
reg   [3:0] inp_sumRow_addr_1_reg_786;
wire   [0:0] icmp_ln127_fu_375_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln127_reg_791_pp1_iter3_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter4_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter5_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter6_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter7_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter8_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter9_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter10_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter11_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter12_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter13_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter14_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter15_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter16_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter17_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter18_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter19_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter20_reg;
reg   [0:0] icmp_ln127_reg_791_pp1_iter21_reg;
wire   [7:0] add_ln127_fu_381_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] select_ln130_fu_399_p3;
reg   [3:0] select_ln130_reg_800;
wire   [3:0] select_ln130_2_fu_407_p3;
reg   [3:0] select_ln130_2_reg_805;
reg   [3:0] select_ln130_2_reg_805_pp1_iter1_reg;
wire   [3:0] j3_fu_415_p2;
wire   [63:0] zext_ln130_4_fu_458_p1;
reg   [63:0] zext_ln130_4_reg_818;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter2_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter3_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter4_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter5_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter6_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter7_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter8_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter9_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter10_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter11_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter12_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter13_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter14_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter15_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter16_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter17_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter18_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter19_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter20_reg;
reg   [63:0] zext_ln130_4_reg_818_pp1_iter21_reg;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] v64_reg_833;
reg   [31:0] v64_reg_833_pp1_iter19_reg;
reg   [31:0] v64_reg_833_pp1_iter20_reg;
wire   [53:0] man_V_2_fu_519_p3;
reg   [53:0] man_V_2_reg_839;
wire   [0:0] icmp_ln571_fu_527_p2;
reg   [0:0] icmp_ln571_reg_844;
wire   [0:0] icmp_ln581_fu_539_p2;
reg   [0:0] icmp_ln581_reg_850;
wire  signed [11:0] sh_amt_fu_557_p3;
reg  signed [11:0] sh_amt_reg_856;
wire   [0:0] icmp_ln582_fu_565_p2;
reg   [0:0] icmp_ln582_reg_863;
wire   [23:0] trunc_ln583_fu_571_p1;
reg   [23:0] trunc_ln583_reg_869;
wire   [23:0] v65_V_fu_730_p3;
reg   [23:0] v65_V_reg_875;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state19_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_CS_fsm_state20;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg   [3:0] inp_sumRow_address0;
reg    inp_sumRow_ce0;
reg    inp_sumRow_we0;
reg   [31:0] inp_sumRow_d0;
reg   [3:0] v52_0_reg_159;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_174_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i3_0_phi_fu_185_p4;
reg   [3:0] ap_phi_mux_j2_0_phi_fu_196_p4;
reg   [3:0] ap_phi_mux_i4_0_phi_fu_218_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln113_fu_279_p1;
wire  signed [63:0] sext_ln118_fu_361_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln118_fu_371_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln130_fu_463_p1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_236_p2;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln116_fu_302_p2;
wire   [3:0] i3_fu_296_p2;
wire   [7:0] tmp_fu_324_p3;
wire   [5:0] tmp_s_fu_335_p3;
wire   [8:0] zext_ln118_1_fu_331_p1;
wire   [8:0] zext_ln118_2_fu_342_p1;
wire   [8:0] sub_ln118_fu_346_p2;
wire   [8:0] zext_ln118_3_fu_352_p1;
wire   [8:0] add_ln118_fu_355_p2;
wire   [0:0] icmp_ln128_fu_393_p2;
wire   [3:0] i4_fu_387_p2;
wire   [7:0] tmp_27_fu_421_p3;
wire   [5:0] tmp_28_fu_432_p3;
wire   [8:0] zext_ln130_1_fu_428_p1;
wire   [8:0] zext_ln130_2_fu_439_p1;
wire   [8:0] zext_ln130_3_fu_449_p1;
wire   [8:0] sub_ln130_fu_443_p2;
wire   [8:0] add_ln130_fu_452_p2;
wire   [63:0] grp_fu_247_p1;
wire   [63:0] ireg_V_fu_467_p1;
wire   [10:0] exp_tmp_V_fu_483_p4;
wire   [51:0] trunc_ln565_fu_497_p1;
wire   [52:0] tmp_7_fu_501_p3;
wire   [53:0] p_Result_67_fu_509_p1;
wire   [0:0] p_Result_s_fu_475_p3;
wire   [53:0] man_V_1_fu_513_p2;
wire   [62:0] trunc_ln556_fu_471_p1;
wire   [11:0] zext_ln461_fu_493_p1;
wire   [11:0] F2_fu_533_p2;
wire   [11:0] add_ln581_fu_545_p2;
wire   [11:0] sub_ln581_fu_551_p2;
wire  signed [31:0] sext_ln581_fu_575_p1;
wire   [53:0] zext_ln586_fu_588_p1;
wire   [53:0] ashr_ln586_fu_592_p2;
wire   [31:0] bitcast_ln696_fu_601_p1;
wire   [0:0] tmp_30_fu_604_p3;
wire   [23:0] sext_ln581cast_fu_620_p1;
wire   [0:0] xor_ln571_fu_629_p2;
wire   [0:0] or_ln582_fu_639_p2;
wire   [0:0] xor_ln582_fu_643_p2;
wire   [0:0] icmp_ln585_fu_578_p2;
wire   [0:0] and_ln581_fu_649_p2;
wire   [0:0] xor_ln585_fu_654_p2;
wire   [0:0] or_ln581_fu_672_p2;
wire   [0:0] icmp_ln603_fu_583_p2;
wire   [0:0] xor_ln581_fu_677_p2;
wire   [0:0] and_ln603_fu_683_p2;
wire   [23:0] shl_ln604_fu_624_p2;
wire   [23:0] trunc_ln586_fu_597_p1;
wire   [0:0] and_ln585_1_fu_666_p2;
wire   [0:0] and_ln585_fu_660_p2;
wire   [23:0] select_ln588_fu_612_p3;
wire   [0:0] and_ln582_fu_634_p2;
wire   [0:0] or_ln603_fu_697_p2;
wire   [23:0] select_ln603_fu_689_p3;
wire   [23:0] select_ln603_1_fu_703_p3;
wire   [0:0] or_ln603_1_fu_710_p2;
wire   [0:0] or_ln603_2_fu_724_p2;
wire   [23:0] select_ln603_2_fu_716_p3;
wire    ap_CS_fsm_state44;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state18_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
end

Softmax_layer_inpfYi #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
inp_sumRow_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inp_sumRow_address0),
    .ce0(inp_sumRow_ce0),
    .we0(inp_sumRow_we0),
    .d0(inp_sumRow_d0),
    .q0(inp_sumRow_q0)
);

Bert_layer_fadd_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3g8j_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inp_sumRow_q0),
    .din1(v56_reg_780),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

Bert_layer_fdiv_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3hbi_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_255),
    .din1(inp_sumRow_q0),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

Bert_layer_fpext_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Bert_layer_fpext_ibs_U182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v64_reg_833),
    .ce(1'b1),
    .dout(grp_fu_247_p1)
);

Bert_layer_fexp_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fexp_3jbC_U183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_255),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter22 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
        i3_0_reg_181 <= 4'd0;
    end else if (((icmp_ln115_reg_747 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i3_0_reg_181 <= select_ln118_1_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i4_0_reg_214 <= 4'd0;
    end else if (((icmp_ln127_reg_791 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i4_0_reg_214 <= select_ln130_2_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten14_reg_203 <= 8'd0;
    end else if (((icmp_ln127_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten14_reg_203 <= add_ln127_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
        indvar_flatten_reg_170 <= 8'd0;
    end else if (((icmp_ln115_reg_747 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_170 <= add_ln115_reg_751;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
        j2_0_reg_192 <= 4'd0;
    end else if (((icmp_ln115_reg_747 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j2_0_reg_192 <= j2_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j3_0_reg_225 <= 4'd0;
    end else if (((icmp_ln127_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j3_0_reg_225 <= j3_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v52_0_reg_159 <= v52_fu_273_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v52_0_reg_159 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln115_reg_751 <= add_ln115_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln115_reg_747 <= icmp_ln115_fu_284_p2;
        icmp_ln115_reg_747_pp0_iter1_reg <= icmp_ln115_reg_747;
        icmp_ln115_reg_747_pp0_iter2_reg <= icmp_ln115_reg_747_pp0_iter1_reg;
        select_ln118_1_reg_762_pp0_iter1_reg <= select_ln118_1_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln127_reg_791 <= icmp_ln127_fu_375_p2;
        icmp_ln127_reg_791_pp1_iter1_reg <= icmp_ln127_reg_791;
        select_ln130_2_reg_805_pp1_iter1_reg <= select_ln130_2_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln127_reg_791_pp1_iter10_reg <= icmp_ln127_reg_791_pp1_iter9_reg;
        icmp_ln127_reg_791_pp1_iter11_reg <= icmp_ln127_reg_791_pp1_iter10_reg;
        icmp_ln127_reg_791_pp1_iter12_reg <= icmp_ln127_reg_791_pp1_iter11_reg;
        icmp_ln127_reg_791_pp1_iter13_reg <= icmp_ln127_reg_791_pp1_iter12_reg;
        icmp_ln127_reg_791_pp1_iter14_reg <= icmp_ln127_reg_791_pp1_iter13_reg;
        icmp_ln127_reg_791_pp1_iter15_reg <= icmp_ln127_reg_791_pp1_iter14_reg;
        icmp_ln127_reg_791_pp1_iter16_reg <= icmp_ln127_reg_791_pp1_iter15_reg;
        icmp_ln127_reg_791_pp1_iter17_reg <= icmp_ln127_reg_791_pp1_iter16_reg;
        icmp_ln127_reg_791_pp1_iter18_reg <= icmp_ln127_reg_791_pp1_iter17_reg;
        icmp_ln127_reg_791_pp1_iter19_reg <= icmp_ln127_reg_791_pp1_iter18_reg;
        icmp_ln127_reg_791_pp1_iter20_reg <= icmp_ln127_reg_791_pp1_iter19_reg;
        icmp_ln127_reg_791_pp1_iter21_reg <= icmp_ln127_reg_791_pp1_iter20_reg;
        icmp_ln127_reg_791_pp1_iter2_reg <= icmp_ln127_reg_791_pp1_iter1_reg;
        icmp_ln127_reg_791_pp1_iter3_reg <= icmp_ln127_reg_791_pp1_iter2_reg;
        icmp_ln127_reg_791_pp1_iter4_reg <= icmp_ln127_reg_791_pp1_iter3_reg;
        icmp_ln127_reg_791_pp1_iter5_reg <= icmp_ln127_reg_791_pp1_iter4_reg;
        icmp_ln127_reg_791_pp1_iter6_reg <= icmp_ln127_reg_791_pp1_iter5_reg;
        icmp_ln127_reg_791_pp1_iter7_reg <= icmp_ln127_reg_791_pp1_iter6_reg;
        icmp_ln127_reg_791_pp1_iter8_reg <= icmp_ln127_reg_791_pp1_iter7_reg;
        icmp_ln127_reg_791_pp1_iter9_reg <= icmp_ln127_reg_791_pp1_iter8_reg;
        v64_reg_833_pp1_iter19_reg <= v64_reg_833;
        v64_reg_833_pp1_iter20_reg <= v64_reg_833_pp1_iter19_reg;
        zext_ln130_4_reg_818_pp1_iter10_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter9_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter11_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter10_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter12_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter11_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter13_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter12_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter14_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter13_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter15_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter14_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter16_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter15_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter17_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter16_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter18_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter17_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter19_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter18_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter20_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter19_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter21_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter20_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter2_reg[8 : 0] <= zext_ln130_4_reg_818[8 : 0];
        zext_ln130_4_reg_818_pp1_iter3_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter2_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter4_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter3_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter5_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter4_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter6_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter5_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter7_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter6_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter8_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter7_reg[8 : 0];
        zext_ln130_4_reg_818_pp1_iter9_reg[8 : 0] <= zext_ln130_4_reg_818_pp1_iter8_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_reg_791_pp1_iter19_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln571_reg_844 <= icmp_ln571_fu_527_p2;
        icmp_ln581_reg_850 <= icmp_ln581_fu_539_p2;
        icmp_ln582_reg_863 <= icmp_ln582_fu_565_p2;
        man_V_2_reg_839 <= man_V_2_fu_519_p3;
        sh_amt_reg_856 <= sh_amt_fu_557_p3;
        trunc_ln583_reg_869 <= trunc_ln583_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_747_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        inp_sumRow_addr_1_reg_786 <= zext_ln118_fu_371_p1;
        v56_reg_780 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        j2_reg_775 <= j2_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln127_reg_791_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_255 <= v49_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_284_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln118_1_reg_762 <= select_ln118_1_fu_316_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln118_reg_756 <= select_ln118_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln130_2_reg_805 <= select_ln130_2_fu_407_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln130_reg_800 <= select_ln130_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v49_addr_reg_770 <= sext_ln118_fu_361_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v49_addr_reg_770_pp0_iter1_reg <= v49_addr_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_reg_791_pp1_iter17_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v64_reg_833 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_reg_791_pp1_iter20_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v65_V_reg_875 <= v65_V_fu_730_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_reg_791 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln130_4_reg_818[8 : 0] <= zext_ln130_4_fu_458_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln115_fu_284_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln127_fu_375_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i3_0_phi_fu_185_p4 = select_ln118_1_reg_762;
    end else begin
        ap_phi_mux_i3_0_phi_fu_185_p4 = i3_0_reg_181;
    end
end

always @ (*) begin
    if (((icmp_ln127_reg_791 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i4_0_phi_fu_218_p4 = select_ln130_2_reg_805;
    end else begin
        ap_phi_mux_i4_0_phi_fu_218_p4 = i4_0_reg_214;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_174_p4 = add_ln115_reg_751;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_174_p4 = indvar_flatten_reg_170;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j2_0_phi_fu_196_p4 = j2_reg_775;
    end else begin
        ap_phi_mux_j2_0_phi_fu_196_p4 = j2_0_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        inp_sumRow_address0 = zext_ln130_fu_463_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp_sumRow_address0 = inp_sumRow_addr_1_reg_786;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        inp_sumRow_address0 = zext_ln118_fu_371_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_address0 = zext_ln113_fu_279_p1;
    end else begin
        inp_sumRow_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        inp_sumRow_ce0 = 1'b1;
    end else begin
        inp_sumRow_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp_sumRow_d0 = grp_fu_236_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_d0 = 32'd0;
    end else begin
        inp_sumRow_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln112_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln115_reg_747_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        inp_sumRow_we0 = 1'b1;
    end else begin
        inp_sumRow_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        v49_address0 = zext_ln130_4_fu_458_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v49_address0 = v49_addr_reg_770_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v49_address0 = sext_ln118_fu_361_p1;
    end else begin
        v49_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        v49_ce0 = 1'b1;
    end else begin
        v49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_reg_747_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v49_we0 = 1'b1;
    end else begin
        v49_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter22 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v50_V_ce0 = 1'b1;
    end else begin
        v50_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln127_reg_791_pp1_iter21_reg == 1'd0) & (ap_enable_reg_pp1_iter22 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v50_V_we0 = 1'b1;
    end else begin
        v50_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln112_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln115_fu_284_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln115_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln127_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter21 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter22 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter21 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter22 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln127_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_533_p2 = (12'd1075 - zext_ln461_fu_493_p1);

assign add_ln115_fu_290_p2 = (ap_phi_mux_indvar_flatten_phi_fu_174_p4 + 8'd1);

assign add_ln118_fu_355_p2 = (sub_ln118_fu_346_p2 + zext_ln118_3_fu_352_p1);

assign add_ln127_fu_381_p2 = (indvar_flatten14_reg_203 + 8'd1);

assign add_ln130_fu_452_p2 = (zext_ln130_3_fu_449_p1 + sub_ln130_fu_443_p2);

assign add_ln581_fu_545_p2 = ($signed(12'd4080) + $signed(F2_fu_533_p2));

assign and_ln581_fu_649_p2 = (xor_ln582_fu_643_p2 & icmp_ln581_reg_850);

assign and_ln582_fu_634_p2 = (xor_ln571_fu_629_p2 & icmp_ln582_reg_863);

assign and_ln585_1_fu_666_p2 = (icmp_ln585_fu_578_p2 & and_ln581_fu_649_p2);

assign and_ln585_fu_660_p2 = (xor_ln585_fu_654_p2 & and_ln581_fu_649_p2);

assign and_ln603_fu_683_p2 = (xor_ln581_fu_677_p2 & icmp_ln603_fu_583_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd10];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ashr_ln586_fu_592_p2 = $signed(man_V_2_reg_839) >>> zext_ln586_fu_588_p1;

assign bitcast_ln696_fu_601_p1 = v64_reg_833_pp1_iter20_reg;

assign exp_tmp_V_fu_483_p4 = {{ireg_V_fu_467_p1[62:52]}};

assign i3_fu_296_p2 = (ap_phi_mux_i3_0_phi_fu_185_p4 + 4'd1);

assign i4_fu_387_p2 = (4'd1 + ap_phi_mux_i4_0_phi_fu_218_p4);

assign icmp_ln112_fu_267_p2 = ((v52_0_reg_159 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_284_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_174_p4 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln116_fu_302_p2 = ((ap_phi_mux_j2_0_phi_fu_196_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_375_p2 = ((indvar_flatten14_reg_203 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_393_p2 = ((j3_0_reg_225 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_527_p2 = ((trunc_ln556_fu_471_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_539_p2 = (($signed(F2_fu_533_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_565_p2 = ((F2_fu_533_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_578_p2 = ((sh_amt_reg_856 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_583_p2 = ((sh_amt_reg_856 < 12'd24) ? 1'b1 : 1'b0);

assign ireg_V_fu_467_p1 = grp_fu_247_p1;

assign j2_fu_366_p2 = (select_ln118_reg_756 + 4'd1);

assign j3_fu_415_p2 = (4'd1 + select_ln130_fu_399_p3);

assign man_V_1_fu_513_p2 = (54'd0 - p_Result_67_fu_509_p1);

assign man_V_2_fu_519_p3 = ((p_Result_s_fu_475_p3[0:0] === 1'b1) ? man_V_1_fu_513_p2 : p_Result_67_fu_509_p1);

assign or_ln581_fu_672_p2 = (or_ln582_fu_639_p2 | icmp_ln581_reg_850);

assign or_ln582_fu_639_p2 = (icmp_ln582_reg_863 | icmp_ln571_reg_844);

assign or_ln603_1_fu_710_p2 = (and_ln585_fu_660_p2 | and_ln582_fu_634_p2);

assign or_ln603_2_fu_724_p2 = (or_ln603_fu_697_p2 | or_ln603_1_fu_710_p2);

assign or_ln603_fu_697_p2 = (and_ln603_fu_683_p2 | and_ln585_1_fu_666_p2);

assign p_Result_67_fu_509_p1 = tmp_7_fu_501_p3;

assign p_Result_s_fu_475_p3 = ireg_V_fu_467_p1[32'd63];

assign select_ln118_1_fu_316_p3 = ((icmp_ln116_fu_302_p2[0:0] === 1'b1) ? i3_fu_296_p2 : ap_phi_mux_i3_0_phi_fu_185_p4);

assign select_ln118_fu_308_p3 = ((icmp_ln116_fu_302_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j2_0_phi_fu_196_p4);

assign select_ln130_2_fu_407_p3 = ((icmp_ln128_fu_393_p2[0:0] === 1'b1) ? i4_fu_387_p2 : ap_phi_mux_i4_0_phi_fu_218_p4);

assign select_ln130_fu_399_p3 = ((icmp_ln128_fu_393_p2[0:0] === 1'b1) ? 4'd0 : j3_0_reg_225);

assign select_ln588_fu_612_p3 = ((tmp_30_fu_604_p3[0:0] === 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln603_1_fu_703_p3 = ((and_ln585_fu_660_p2[0:0] === 1'b1) ? select_ln588_fu_612_p3 : trunc_ln583_reg_869);

assign select_ln603_2_fu_716_p3 = ((or_ln603_fu_697_p2[0:0] === 1'b1) ? select_ln603_fu_689_p3 : select_ln603_1_fu_703_p3);

assign select_ln603_fu_689_p3 = ((and_ln603_fu_683_p2[0:0] === 1'b1) ? shl_ln604_fu_624_p2 : trunc_ln586_fu_597_p1);

assign sext_ln118_fu_361_p1 = $signed(add_ln118_fu_355_p2);

assign sext_ln581_fu_575_p1 = sh_amt_reg_856;

assign sext_ln581cast_fu_620_p1 = sext_ln581_fu_575_p1[23:0];

assign sh_amt_fu_557_p3 = ((icmp_ln581_fu_539_p2[0:0] === 1'b1) ? add_ln581_fu_545_p2 : sub_ln581_fu_551_p2);

assign shl_ln604_fu_624_p2 = trunc_ln583_reg_869 << sext_ln581cast_fu_620_p1;

assign sub_ln118_fu_346_p2 = (zext_ln118_1_fu_331_p1 - zext_ln118_2_fu_342_p1);

assign sub_ln130_fu_443_p2 = (zext_ln130_1_fu_428_p1 - zext_ln130_2_fu_439_p1);

assign sub_ln581_fu_551_p2 = (12'd16 - F2_fu_533_p2);

assign tmp_27_fu_421_p3 = {{select_ln130_2_reg_805}, {4'd0}};

assign tmp_28_fu_432_p3 = {{select_ln130_2_reg_805}, {2'd0}};

assign tmp_30_fu_604_p3 = bitcast_ln696_fu_601_p1[32'd31];

assign tmp_7_fu_501_p3 = {{1'd1}, {trunc_ln565_fu_497_p1}};

assign tmp_fu_324_p3 = {{select_ln118_1_reg_762}, {4'd0}};

assign tmp_s_fu_335_p3 = {{select_ln118_1_reg_762}, {2'd0}};

assign trunc_ln556_fu_471_p1 = ireg_V_fu_467_p1[62:0];

assign trunc_ln565_fu_497_p1 = ireg_V_fu_467_p1[51:0];

assign trunc_ln583_fu_571_p1 = man_V_2_fu_519_p3[23:0];

assign trunc_ln586_fu_597_p1 = ashr_ln586_fu_592_p2[23:0];

assign v49_d0 = v56_reg_780;

assign v50_V_address0 = zext_ln130_4_reg_818_pp1_iter21_reg;

assign v50_V_d0 = v65_V_reg_875;

assign v52_fu_273_p2 = (v52_0_reg_159 + 4'd1);

assign v65_V_fu_730_p3 = ((or_ln603_2_fu_724_p2[0:0] === 1'b1) ? select_ln603_2_fu_716_p3 : 24'd0);

assign xor_ln571_fu_629_p2 = (icmp_ln571_reg_844 ^ 1'd1);

assign xor_ln581_fu_677_p2 = (or_ln581_fu_672_p2 ^ 1'd1);

assign xor_ln582_fu_643_p2 = (or_ln582_fu_639_p2 ^ 1'd1);

assign xor_ln585_fu_654_p2 = (icmp_ln585_fu_578_p2 ^ 1'd1);

assign zext_ln113_fu_279_p1 = v52_0_reg_159;

assign zext_ln118_1_fu_331_p1 = tmp_fu_324_p3;

assign zext_ln118_2_fu_342_p1 = tmp_s_fu_335_p3;

assign zext_ln118_3_fu_352_p1 = select_ln118_reg_756;

assign zext_ln118_fu_371_p1 = select_ln118_1_reg_762_pp0_iter1_reg;

assign zext_ln130_1_fu_428_p1 = tmp_27_fu_421_p3;

assign zext_ln130_2_fu_439_p1 = tmp_28_fu_432_p3;

assign zext_ln130_3_fu_449_p1 = select_ln130_reg_800;

assign zext_ln130_4_fu_458_p1 = add_ln130_fu_452_p2;

assign zext_ln130_fu_463_p1 = select_ln130_2_reg_805_pp1_iter1_reg;

assign zext_ln461_fu_493_p1 = exp_tmp_V_fu_483_p4;

assign zext_ln586_fu_588_p1 = $unsigned(sext_ln581_fu_575_p1);

always @ (posedge ap_clk) begin
    zext_ln130_4_reg_818[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter4_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter5_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter6_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter7_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter8_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter9_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter10_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter11_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter12_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter13_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter14_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter15_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter16_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter17_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter18_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter19_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter20_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln130_4_reg_818_pp1_iter21_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Softmax_layer
