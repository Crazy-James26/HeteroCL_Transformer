// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_systolic_array_k_12_Loop_data_drain_C_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        block_C_drainer_0_din,
        block_C_drainer_0_num_data_valid,
        block_C_drainer_0_fifo_cap,
        block_C_drainer_0_full_n,
        block_C_drainer_0_write,
        block_C_drainer_1_din,
        block_C_drainer_1_num_data_valid,
        block_C_drainer_1_fifo_cap,
        block_C_drainer_1_full_n,
        block_C_drainer_1_write,
        block_C_drainer_2_din,
        block_C_drainer_2_num_data_valid,
        block_C_drainer_2_fifo_cap,
        block_C_drainer_2_full_n,
        block_C_drainer_2_write,
        block_C_drainer_3_din,
        block_C_drainer_3_num_data_valid,
        block_C_drainer_3_fifo_cap,
        block_C_drainer_3_full_n,
        block_C_drainer_3_write,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [23:0] block_C_drainer_0_din;
input  [1:0] block_C_drainer_0_num_data_valid;
input  [1:0] block_C_drainer_0_fifo_cap;
input   block_C_drainer_0_full_n;
output   block_C_drainer_0_write;
output  [23:0] block_C_drainer_1_din;
input  [1:0] block_C_drainer_1_num_data_valid;
input  [1:0] block_C_drainer_1_fifo_cap;
input   block_C_drainer_1_full_n;
output   block_C_drainer_1_write;
output  [23:0] block_C_drainer_2_din;
input  [1:0] block_C_drainer_2_num_data_valid;
input  [1:0] block_C_drainer_2_fifo_cap;
input   block_C_drainer_2_full_n;
output   block_C_drainer_2_write;
output  [23:0] block_C_drainer_3_din;
input  [1:0] block_C_drainer_3_num_data_valid;
input  [1:0] block_C_drainer_3_fifo_cap;
input   block_C_drainer_3_full_n;
output   block_C_drainer_3_write;
input  [23:0] p_read;
input  [23:0] p_read1;
input  [23:0] p_read2;
input  [23:0] p_read3;
input  [23:0] p_read4;
input  [23:0] p_read5;
input  [23:0] p_read6;
input  [23:0] p_read7;
input  [23:0] p_read8;
input  [23:0] p_read9;
input  [23:0] p_read10;
input  [23:0] p_read11;
input  [23:0] p_read12;
input  [23:0] p_read13;
input  [23:0] p_read14;
input  [23:0] p_read15;

reg ap_idle;
reg block_C_drainer_0_write;
reg block_C_drainer_1_write;
reg block_C_drainer_2_write;
reg block_C_drainer_3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln228_fu_210_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    block_C_drainer_0_blk_n;
wire    ap_block_pp0_stage0;
reg    block_C_drainer_1_blk_n;
reg    block_C_drainer_2_blk_n;
reg    block_C_drainer_3_blk_n;
wire   [23:0] tmp_i_fu_222_p6;
reg   [23:0] tmp_i_reg_293;
reg    ap_block_pp0_stage0_11001;
wire   [23:0] tmp_111_i_fu_236_p6;
reg   [23:0] tmp_111_i_reg_298;
wire   [23:0] tmp_112_i_fu_250_p6;
reg   [23:0] tmp_112_i_reg_303;
wire   [23:0] tmp_113_i_fu_264_p6;
reg   [23:0] tmp_113_i_reg_308;
reg   [2:0] n_fu_74;
wire   [2:0] add_ln228_fu_216_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_n_6;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_133;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_43_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
mux_43_24_1_1_U2966(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(ap_sig_allocacmp_n_6),
    .dout(tmp_i_fu_222_p6)
);

Bert_layer_mux_43_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
mux_43_24_1_1_U2967(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(ap_sig_allocacmp_n_6),
    .dout(tmp_111_i_fu_236_p6)
);

Bert_layer_mux_43_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
mux_43_24_1_1_U2968(
    .din0(p_read8),
    .din1(p_read9),
    .din2(p_read10),
    .din3(p_read11),
    .din4(ap_sig_allocacmp_n_6),
    .dout(tmp_112_i_fu_250_p6)
);

Bert_layer_mux_43_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
mux_43_24_1_1_U2969(
    .din0(p_read12),
    .din1(p_read13),
    .din2(p_read14),
    .din3(p_read15),
    .din4(ap_sig_allocacmp_n_6),
    .dout(tmp_113_i_fu_264_p6)
);

Bert_layer_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_133)) begin
        if ((icmp_ln228_fu_210_p2 == 1'd0)) begin
            n_fu_74 <= add_ln228_fu_216_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_74 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_210_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_111_i_reg_298 <= tmp_111_i_fu_236_p6;
        tmp_112_i_reg_303 <= tmp_112_i_fu_250_p6;
        tmp_113_i_reg_308 <= tmp_113_i_fu_264_p6;
        tmp_i_reg_293 <= tmp_i_fu_222_p6;
    end
end

always @ (*) begin
    if (((icmp_ln228_fu_210_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_6 = 3'd0;
    end else begin
        ap_sig_allocacmp_n_6 = n_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_0_blk_n = block_C_drainer_0_full_n;
    end else begin
        block_C_drainer_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_0_write = 1'b1;
    end else begin
        block_C_drainer_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_1_blk_n = block_C_drainer_1_full_n;
    end else begin
        block_C_drainer_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_1_write = 1'b1;
    end else begin
        block_C_drainer_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_2_blk_n = block_C_drainer_2_full_n;
    end else begin
        block_C_drainer_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_2_write = 1'b1;
    end else begin
        block_C_drainer_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_3_blk_n = block_C_drainer_3_full_n;
    end else begin
        block_C_drainer_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_C_drainer_3_write = 1'b1;
    end else begin
        block_C_drainer_3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln228_fu_216_p2 = (ap_sig_allocacmp_n_6 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_C_drainer_3_full_n == 1'b0) | (block_C_drainer_2_full_n == 1'b0) | (block_C_drainer_1_full_n == 1'b0) | (block_C_drainer_0_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_C_drainer_3_full_n == 1'b0) | (block_C_drainer_2_full_n == 1'b0) | (block_C_drainer_1_full_n == 1'b0) | (block_C_drainer_0_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_C_drainer_3_full_n == 1'b0) | (block_C_drainer_2_full_n == 1'b0) | (block_C_drainer_1_full_n == 1'b0) | (block_C_drainer_0_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((block_C_drainer_3_full_n == 1'b0) | (block_C_drainer_2_full_n == 1'b0) | (block_C_drainer_1_full_n == 1'b0) | (block_C_drainer_0_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign block_C_drainer_0_din = tmp_i_reg_293;

assign block_C_drainer_1_din = tmp_111_i_reg_298;

assign block_C_drainer_2_din = tmp_112_i_reg_303;

assign block_C_drainer_3_din = tmp_113_i_reg_308;

assign icmp_ln228_fu_210_p2 = ((ap_sig_allocacmp_n_6 == 3'd4) ? 1'b1 : 1'b0);

endmodule //Bert_layer_systolic_array_k_12_Loop_data_drain_C_proc
