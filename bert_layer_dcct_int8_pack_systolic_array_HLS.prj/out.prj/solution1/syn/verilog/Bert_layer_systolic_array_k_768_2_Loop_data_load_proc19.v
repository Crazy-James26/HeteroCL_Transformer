// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_systolic_array_k_768_2_Loop_data_load_proc19 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        block_A_loader_0_dout,
        block_A_loader_0_num_data_valid,
        block_A_loader_0_fifo_cap,
        block_A_loader_0_empty_n,
        block_A_loader_0_read,
        block_A_loader_1_dout,
        block_A_loader_1_num_data_valid,
        block_A_loader_1_fifo_cap,
        block_A_loader_1_empty_n,
        block_A_loader_1_read,
        block_A_loader_2_dout,
        block_A_loader_2_num_data_valid,
        block_A_loader_2_fifo_cap,
        block_A_loader_2_empty_n,
        block_A_loader_2_read,
        block_A_loader_3_dout,
        block_A_loader_3_num_data_valid,
        block_A_loader_3_fifo_cap,
        block_A_loader_3_empty_n,
        block_A_loader_3_read,
        block_A_loader_4_dout,
        block_A_loader_4_num_data_valid,
        block_A_loader_4_fifo_cap,
        block_A_loader_4_empty_n,
        block_A_loader_4_read,
        block_A_loader_5_dout,
        block_A_loader_5_num_data_valid,
        block_A_loader_5_fifo_cap,
        block_A_loader_5_empty_n,
        block_A_loader_5_read,
        block_A_loader_6_dout,
        block_A_loader_6_num_data_valid,
        block_A_loader_6_fifo_cap,
        block_A_loader_6_empty_n,
        block_A_loader_6_read,
        block_A_loader_7_dout,
        block_A_loader_7_num_data_valid,
        block_A_loader_7_fifo_cap,
        block_A_loader_7_empty_n,
        block_A_loader_7_read,
        block_A_loader_8_dout,
        block_A_loader_8_num_data_valid,
        block_A_loader_8_fifo_cap,
        block_A_loader_8_empty_n,
        block_A_loader_8_read,
        block_A_loader_9_dout,
        block_A_loader_9_num_data_valid,
        block_A_loader_9_fifo_cap,
        block_A_loader_9_empty_n,
        block_A_loader_9_read,
        block_A_loader_10_dout,
        block_A_loader_10_num_data_valid,
        block_A_loader_10_fifo_cap,
        block_A_loader_10_empty_n,
        block_A_loader_10_read,
        block_A_loader_11_dout,
        block_A_loader_11_num_data_valid,
        block_A_loader_11_fifo_cap,
        block_A_loader_11_empty_n,
        block_A_loader_11_read,
        block_B_loader_0_dout,
        block_B_loader_0_num_data_valid,
        block_B_loader_0_fifo_cap,
        block_B_loader_0_empty_n,
        block_B_loader_0_read,
        block_B_loader_1_dout,
        block_B_loader_1_num_data_valid,
        block_B_loader_1_fifo_cap,
        block_B_loader_1_empty_n,
        block_B_loader_1_read,
        block_B_loader_2_dout,
        block_B_loader_2_num_data_valid,
        block_B_loader_2_fifo_cap,
        block_B_loader_2_empty_n,
        block_B_loader_2_read,
        block_B_loader_3_dout,
        block_B_loader_3_num_data_valid,
        block_B_loader_3_fifo_cap,
        block_B_loader_3_empty_n,
        block_B_loader_3_read,
        block_B_loader_4_dout,
        block_B_loader_4_num_data_valid,
        block_B_loader_4_fifo_cap,
        block_B_loader_4_empty_n,
        block_B_loader_4_read,
        block_B_loader_5_dout,
        block_B_loader_5_num_data_valid,
        block_B_loader_5_fifo_cap,
        block_B_loader_5_empty_n,
        block_B_loader_5_read,
        block_B_loader_6_dout,
        block_B_loader_6_num_data_valid,
        block_B_loader_6_fifo_cap,
        block_B_loader_6_empty_n,
        block_B_loader_6_read,
        block_B_loader_7_dout,
        block_B_loader_7_num_data_valid,
        block_B_loader_7_fifo_cap,
        block_B_loader_7_empty_n,
        block_B_loader_7_read,
        block_B_loader_8_dout,
        block_B_loader_8_num_data_valid,
        block_B_loader_8_fifo_cap,
        block_B_loader_8_empty_n,
        block_B_loader_8_read,
        block_B_loader_9_dout,
        block_B_loader_9_num_data_valid,
        block_B_loader_9_fifo_cap,
        block_B_loader_9_empty_n,
        block_B_loader_9_read,
        block_B_loader_10_dout,
        block_B_loader_10_num_data_valid,
        block_B_loader_10_fifo_cap,
        block_B_loader_10_empty_n,
        block_B_loader_10_read,
        block_B_loader_11_dout,
        block_B_loader_11_num_data_valid,
        block_B_loader_11_fifo_cap,
        block_B_loader_11_empty_n,
        block_B_loader_11_read,
        A_fifo_0_0_din,
        A_fifo_0_0_num_data_valid,
        A_fifo_0_0_fifo_cap,
        A_fifo_0_0_full_n,
        A_fifo_0_0_write,
        A_fifo_1_0_din,
        A_fifo_1_0_num_data_valid,
        A_fifo_1_0_fifo_cap,
        A_fifo_1_0_full_n,
        A_fifo_1_0_write,
        A_fifo_2_0_din,
        A_fifo_2_0_num_data_valid,
        A_fifo_2_0_fifo_cap,
        A_fifo_2_0_full_n,
        A_fifo_2_0_write,
        A_fifo_3_0_din,
        A_fifo_3_0_num_data_valid,
        A_fifo_3_0_fifo_cap,
        A_fifo_3_0_full_n,
        A_fifo_3_0_write,
        A_fifo_4_0_din,
        A_fifo_4_0_num_data_valid,
        A_fifo_4_0_fifo_cap,
        A_fifo_4_0_full_n,
        A_fifo_4_0_write,
        A_fifo_5_0_din,
        A_fifo_5_0_num_data_valid,
        A_fifo_5_0_fifo_cap,
        A_fifo_5_0_full_n,
        A_fifo_5_0_write,
        A_fifo_6_0_din,
        A_fifo_6_0_num_data_valid,
        A_fifo_6_0_fifo_cap,
        A_fifo_6_0_full_n,
        A_fifo_6_0_write,
        A_fifo_7_0_din,
        A_fifo_7_0_num_data_valid,
        A_fifo_7_0_fifo_cap,
        A_fifo_7_0_full_n,
        A_fifo_7_0_write,
        A_fifo_8_0_din,
        A_fifo_8_0_num_data_valid,
        A_fifo_8_0_fifo_cap,
        A_fifo_8_0_full_n,
        A_fifo_8_0_write,
        A_fifo_9_0_din,
        A_fifo_9_0_num_data_valid,
        A_fifo_9_0_fifo_cap,
        A_fifo_9_0_full_n,
        A_fifo_9_0_write,
        A_fifo_10_0_din,
        A_fifo_10_0_num_data_valid,
        A_fifo_10_0_fifo_cap,
        A_fifo_10_0_full_n,
        A_fifo_10_0_write,
        A_fifo_11_0_din,
        A_fifo_11_0_num_data_valid,
        A_fifo_11_0_fifo_cap,
        A_fifo_11_0_full_n,
        A_fifo_11_0_write,
        B_fifo_0_0_din,
        B_fifo_0_0_num_data_valid,
        B_fifo_0_0_fifo_cap,
        B_fifo_0_0_full_n,
        B_fifo_0_0_write,
        B_fifo_1_0_din,
        B_fifo_1_0_num_data_valid,
        B_fifo_1_0_fifo_cap,
        B_fifo_1_0_full_n,
        B_fifo_1_0_write,
        B_fifo_2_0_din,
        B_fifo_2_0_num_data_valid,
        B_fifo_2_0_fifo_cap,
        B_fifo_2_0_full_n,
        B_fifo_2_0_write,
        B_fifo_3_0_din,
        B_fifo_3_0_num_data_valid,
        B_fifo_3_0_fifo_cap,
        B_fifo_3_0_full_n,
        B_fifo_3_0_write,
        B_fifo_4_0_din,
        B_fifo_4_0_num_data_valid,
        B_fifo_4_0_fifo_cap,
        B_fifo_4_0_full_n,
        B_fifo_4_0_write,
        B_fifo_5_0_din,
        B_fifo_5_0_num_data_valid,
        B_fifo_5_0_fifo_cap,
        B_fifo_5_0_full_n,
        B_fifo_5_0_write,
        B_fifo_6_0_din,
        B_fifo_6_0_num_data_valid,
        B_fifo_6_0_fifo_cap,
        B_fifo_6_0_full_n,
        B_fifo_6_0_write,
        B_fifo_7_0_din,
        B_fifo_7_0_num_data_valid,
        B_fifo_7_0_fifo_cap,
        B_fifo_7_0_full_n,
        B_fifo_7_0_write,
        B_fifo_8_0_din,
        B_fifo_8_0_num_data_valid,
        B_fifo_8_0_fifo_cap,
        B_fifo_8_0_full_n,
        B_fifo_8_0_write,
        B_fifo_9_0_din,
        B_fifo_9_0_num_data_valid,
        B_fifo_9_0_fifo_cap,
        B_fifo_9_0_full_n,
        B_fifo_9_0_write,
        B_fifo_10_0_din,
        B_fifo_10_0_num_data_valid,
        B_fifo_10_0_fifo_cap,
        B_fifo_10_0_full_n,
        B_fifo_10_0_write,
        B_fifo_11_0_din,
        B_fifo_11_0_num_data_valid,
        B_fifo_11_0_fifo_cap,
        B_fifo_11_0_full_n,
        B_fifo_11_0_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] block_A_loader_0_dout;
input  [1:0] block_A_loader_0_num_data_valid;
input  [1:0] block_A_loader_0_fifo_cap;
input   block_A_loader_0_empty_n;
output   block_A_loader_0_read;
input  [7:0] block_A_loader_1_dout;
input  [1:0] block_A_loader_1_num_data_valid;
input  [1:0] block_A_loader_1_fifo_cap;
input   block_A_loader_1_empty_n;
output   block_A_loader_1_read;
input  [7:0] block_A_loader_2_dout;
input  [1:0] block_A_loader_2_num_data_valid;
input  [1:0] block_A_loader_2_fifo_cap;
input   block_A_loader_2_empty_n;
output   block_A_loader_2_read;
input  [7:0] block_A_loader_3_dout;
input  [1:0] block_A_loader_3_num_data_valid;
input  [1:0] block_A_loader_3_fifo_cap;
input   block_A_loader_3_empty_n;
output   block_A_loader_3_read;
input  [7:0] block_A_loader_4_dout;
input  [1:0] block_A_loader_4_num_data_valid;
input  [1:0] block_A_loader_4_fifo_cap;
input   block_A_loader_4_empty_n;
output   block_A_loader_4_read;
input  [7:0] block_A_loader_5_dout;
input  [1:0] block_A_loader_5_num_data_valid;
input  [1:0] block_A_loader_5_fifo_cap;
input   block_A_loader_5_empty_n;
output   block_A_loader_5_read;
input  [7:0] block_A_loader_6_dout;
input  [1:0] block_A_loader_6_num_data_valid;
input  [1:0] block_A_loader_6_fifo_cap;
input   block_A_loader_6_empty_n;
output   block_A_loader_6_read;
input  [7:0] block_A_loader_7_dout;
input  [1:0] block_A_loader_7_num_data_valid;
input  [1:0] block_A_loader_7_fifo_cap;
input   block_A_loader_7_empty_n;
output   block_A_loader_7_read;
input  [7:0] block_A_loader_8_dout;
input  [1:0] block_A_loader_8_num_data_valid;
input  [1:0] block_A_loader_8_fifo_cap;
input   block_A_loader_8_empty_n;
output   block_A_loader_8_read;
input  [7:0] block_A_loader_9_dout;
input  [1:0] block_A_loader_9_num_data_valid;
input  [1:0] block_A_loader_9_fifo_cap;
input   block_A_loader_9_empty_n;
output   block_A_loader_9_read;
input  [7:0] block_A_loader_10_dout;
input  [1:0] block_A_loader_10_num_data_valid;
input  [1:0] block_A_loader_10_fifo_cap;
input   block_A_loader_10_empty_n;
output   block_A_loader_10_read;
input  [7:0] block_A_loader_11_dout;
input  [1:0] block_A_loader_11_num_data_valid;
input  [1:0] block_A_loader_11_fifo_cap;
input   block_A_loader_11_empty_n;
output   block_A_loader_11_read;
input  [7:0] block_B_loader_0_dout;
input  [1:0] block_B_loader_0_num_data_valid;
input  [1:0] block_B_loader_0_fifo_cap;
input   block_B_loader_0_empty_n;
output   block_B_loader_0_read;
input  [7:0] block_B_loader_1_dout;
input  [1:0] block_B_loader_1_num_data_valid;
input  [1:0] block_B_loader_1_fifo_cap;
input   block_B_loader_1_empty_n;
output   block_B_loader_1_read;
input  [7:0] block_B_loader_2_dout;
input  [1:0] block_B_loader_2_num_data_valid;
input  [1:0] block_B_loader_2_fifo_cap;
input   block_B_loader_2_empty_n;
output   block_B_loader_2_read;
input  [7:0] block_B_loader_3_dout;
input  [1:0] block_B_loader_3_num_data_valid;
input  [1:0] block_B_loader_3_fifo_cap;
input   block_B_loader_3_empty_n;
output   block_B_loader_3_read;
input  [7:0] block_B_loader_4_dout;
input  [1:0] block_B_loader_4_num_data_valid;
input  [1:0] block_B_loader_4_fifo_cap;
input   block_B_loader_4_empty_n;
output   block_B_loader_4_read;
input  [7:0] block_B_loader_5_dout;
input  [1:0] block_B_loader_5_num_data_valid;
input  [1:0] block_B_loader_5_fifo_cap;
input   block_B_loader_5_empty_n;
output   block_B_loader_5_read;
input  [7:0] block_B_loader_6_dout;
input  [1:0] block_B_loader_6_num_data_valid;
input  [1:0] block_B_loader_6_fifo_cap;
input   block_B_loader_6_empty_n;
output   block_B_loader_6_read;
input  [7:0] block_B_loader_7_dout;
input  [1:0] block_B_loader_7_num_data_valid;
input  [1:0] block_B_loader_7_fifo_cap;
input   block_B_loader_7_empty_n;
output   block_B_loader_7_read;
input  [7:0] block_B_loader_8_dout;
input  [1:0] block_B_loader_8_num_data_valid;
input  [1:0] block_B_loader_8_fifo_cap;
input   block_B_loader_8_empty_n;
output   block_B_loader_8_read;
input  [7:0] block_B_loader_9_dout;
input  [1:0] block_B_loader_9_num_data_valid;
input  [1:0] block_B_loader_9_fifo_cap;
input   block_B_loader_9_empty_n;
output   block_B_loader_9_read;
input  [7:0] block_B_loader_10_dout;
input  [1:0] block_B_loader_10_num_data_valid;
input  [1:0] block_B_loader_10_fifo_cap;
input   block_B_loader_10_empty_n;
output   block_B_loader_10_read;
input  [7:0] block_B_loader_11_dout;
input  [1:0] block_B_loader_11_num_data_valid;
input  [1:0] block_B_loader_11_fifo_cap;
input   block_B_loader_11_empty_n;
output   block_B_loader_11_read;
output  [7:0] A_fifo_0_0_din;
input  [1:0] A_fifo_0_0_num_data_valid;
input  [1:0] A_fifo_0_0_fifo_cap;
input   A_fifo_0_0_full_n;
output   A_fifo_0_0_write;
output  [7:0] A_fifo_1_0_din;
input  [1:0] A_fifo_1_0_num_data_valid;
input  [1:0] A_fifo_1_0_fifo_cap;
input   A_fifo_1_0_full_n;
output   A_fifo_1_0_write;
output  [7:0] A_fifo_2_0_din;
input  [1:0] A_fifo_2_0_num_data_valid;
input  [1:0] A_fifo_2_0_fifo_cap;
input   A_fifo_2_0_full_n;
output   A_fifo_2_0_write;
output  [7:0] A_fifo_3_0_din;
input  [1:0] A_fifo_3_0_num_data_valid;
input  [1:0] A_fifo_3_0_fifo_cap;
input   A_fifo_3_0_full_n;
output   A_fifo_3_0_write;
output  [7:0] A_fifo_4_0_din;
input  [1:0] A_fifo_4_0_num_data_valid;
input  [1:0] A_fifo_4_0_fifo_cap;
input   A_fifo_4_0_full_n;
output   A_fifo_4_0_write;
output  [7:0] A_fifo_5_0_din;
input  [1:0] A_fifo_5_0_num_data_valid;
input  [1:0] A_fifo_5_0_fifo_cap;
input   A_fifo_5_0_full_n;
output   A_fifo_5_0_write;
output  [7:0] A_fifo_6_0_din;
input  [1:0] A_fifo_6_0_num_data_valid;
input  [1:0] A_fifo_6_0_fifo_cap;
input   A_fifo_6_0_full_n;
output   A_fifo_6_0_write;
output  [7:0] A_fifo_7_0_din;
input  [1:0] A_fifo_7_0_num_data_valid;
input  [1:0] A_fifo_7_0_fifo_cap;
input   A_fifo_7_0_full_n;
output   A_fifo_7_0_write;
output  [7:0] A_fifo_8_0_din;
input  [1:0] A_fifo_8_0_num_data_valid;
input  [1:0] A_fifo_8_0_fifo_cap;
input   A_fifo_8_0_full_n;
output   A_fifo_8_0_write;
output  [7:0] A_fifo_9_0_din;
input  [1:0] A_fifo_9_0_num_data_valid;
input  [1:0] A_fifo_9_0_fifo_cap;
input   A_fifo_9_0_full_n;
output   A_fifo_9_0_write;
output  [7:0] A_fifo_10_0_din;
input  [1:0] A_fifo_10_0_num_data_valid;
input  [1:0] A_fifo_10_0_fifo_cap;
input   A_fifo_10_0_full_n;
output   A_fifo_10_0_write;
output  [7:0] A_fifo_11_0_din;
input  [1:0] A_fifo_11_0_num_data_valid;
input  [1:0] A_fifo_11_0_fifo_cap;
input   A_fifo_11_0_full_n;
output   A_fifo_11_0_write;
output  [7:0] B_fifo_0_0_din;
input  [1:0] B_fifo_0_0_num_data_valid;
input  [1:0] B_fifo_0_0_fifo_cap;
input   B_fifo_0_0_full_n;
output   B_fifo_0_0_write;
output  [7:0] B_fifo_1_0_din;
input  [1:0] B_fifo_1_0_num_data_valid;
input  [1:0] B_fifo_1_0_fifo_cap;
input   B_fifo_1_0_full_n;
output   B_fifo_1_0_write;
output  [7:0] B_fifo_2_0_din;
input  [1:0] B_fifo_2_0_num_data_valid;
input  [1:0] B_fifo_2_0_fifo_cap;
input   B_fifo_2_0_full_n;
output   B_fifo_2_0_write;
output  [7:0] B_fifo_3_0_din;
input  [1:0] B_fifo_3_0_num_data_valid;
input  [1:0] B_fifo_3_0_fifo_cap;
input   B_fifo_3_0_full_n;
output   B_fifo_3_0_write;
output  [7:0] B_fifo_4_0_din;
input  [1:0] B_fifo_4_0_num_data_valid;
input  [1:0] B_fifo_4_0_fifo_cap;
input   B_fifo_4_0_full_n;
output   B_fifo_4_0_write;
output  [7:0] B_fifo_5_0_din;
input  [1:0] B_fifo_5_0_num_data_valid;
input  [1:0] B_fifo_5_0_fifo_cap;
input   B_fifo_5_0_full_n;
output   B_fifo_5_0_write;
output  [7:0] B_fifo_6_0_din;
input  [1:0] B_fifo_6_0_num_data_valid;
input  [1:0] B_fifo_6_0_fifo_cap;
input   B_fifo_6_0_full_n;
output   B_fifo_6_0_write;
output  [7:0] B_fifo_7_0_din;
input  [1:0] B_fifo_7_0_num_data_valid;
input  [1:0] B_fifo_7_0_fifo_cap;
input   B_fifo_7_0_full_n;
output   B_fifo_7_0_write;
output  [7:0] B_fifo_8_0_din;
input  [1:0] B_fifo_8_0_num_data_valid;
input  [1:0] B_fifo_8_0_fifo_cap;
input   B_fifo_8_0_full_n;
output   B_fifo_8_0_write;
output  [7:0] B_fifo_9_0_din;
input  [1:0] B_fifo_9_0_num_data_valid;
input  [1:0] B_fifo_9_0_fifo_cap;
input   B_fifo_9_0_full_n;
output   B_fifo_9_0_write;
output  [7:0] B_fifo_10_0_din;
input  [1:0] B_fifo_10_0_num_data_valid;
input  [1:0] B_fifo_10_0_fifo_cap;
input   B_fifo_10_0_full_n;
output   B_fifo_10_0_write;
output  [7:0] B_fifo_11_0_din;
input  [1:0] B_fifo_11_0_num_data_valid;
input  [1:0] B_fifo_11_0_fifo_cap;
input   B_fifo_11_0_full_n;
output   B_fifo_11_0_write;
output   start_out;
output   start_write;

reg ap_idle;
reg block_A_loader_0_read;
reg block_A_loader_1_read;
reg block_A_loader_2_read;
reg block_A_loader_3_read;
reg block_A_loader_4_read;
reg block_A_loader_5_read;
reg block_A_loader_6_read;
reg block_A_loader_7_read;
reg block_A_loader_8_read;
reg block_A_loader_9_read;
reg block_A_loader_10_read;
reg block_A_loader_11_read;
reg block_B_loader_0_read;
reg block_B_loader_1_read;
reg block_B_loader_2_read;
reg block_B_loader_3_read;
reg block_B_loader_4_read;
reg block_B_loader_5_read;
reg block_B_loader_6_read;
reg block_B_loader_7_read;
reg block_B_loader_8_read;
reg block_B_loader_9_read;
reg block_B_loader_10_read;
reg block_B_loader_11_read;
reg A_fifo_0_0_write;
reg A_fifo_1_0_write;
reg A_fifo_2_0_write;
reg A_fifo_3_0_write;
reg A_fifo_4_0_write;
reg A_fifo_5_0_write;
reg A_fifo_6_0_write;
reg A_fifo_7_0_write;
reg A_fifo_8_0_write;
reg A_fifo_9_0_write;
reg A_fifo_10_0_write;
reg A_fifo_11_0_write;
reg B_fifo_0_0_write;
reg B_fifo_1_0_write;
reg B_fifo_2_0_write;
reg B_fifo_3_0_write;
reg B_fifo_4_0_write;
reg B_fifo_5_0_write;
reg B_fifo_6_0_write;
reg B_fifo_7_0_write;
reg B_fifo_8_0_write;
reg B_fifo_9_0_write;
reg B_fifo_10_0_write;
reg B_fifo_11_0_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln47_fu_452_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    block_A_loader_0_blk_n;
wire    ap_block_pp0_stage0;
reg    A_fifo_0_0_blk_n;
reg    block_A_loader_1_blk_n;
reg    A_fifo_1_0_blk_n;
reg    block_A_loader_2_blk_n;
reg    A_fifo_2_0_blk_n;
reg    block_A_loader_3_blk_n;
reg    A_fifo_3_0_blk_n;
reg    block_A_loader_4_blk_n;
reg    A_fifo_4_0_blk_n;
reg    block_A_loader_5_blk_n;
reg    A_fifo_5_0_blk_n;
reg    block_A_loader_6_blk_n;
reg    A_fifo_6_0_blk_n;
reg    block_A_loader_7_blk_n;
reg    A_fifo_7_0_blk_n;
reg    block_A_loader_8_blk_n;
reg    A_fifo_8_0_blk_n;
reg    block_A_loader_9_blk_n;
reg    A_fifo_9_0_blk_n;
reg    block_A_loader_10_blk_n;
reg    A_fifo_10_0_blk_n;
reg    block_A_loader_11_blk_n;
reg    A_fifo_11_0_blk_n;
reg    block_B_loader_0_blk_n;
reg    B_fifo_0_0_blk_n;
reg    block_B_loader_1_blk_n;
reg    B_fifo_1_0_blk_n;
reg    block_B_loader_2_blk_n;
reg    B_fifo_2_0_blk_n;
reg    block_B_loader_3_blk_n;
reg    B_fifo_3_0_blk_n;
reg    block_B_loader_4_blk_n;
reg    B_fifo_4_0_blk_n;
reg    block_B_loader_5_blk_n;
reg    B_fifo_5_0_blk_n;
reg    block_B_loader_6_blk_n;
reg    B_fifo_6_0_blk_n;
reg    block_B_loader_7_blk_n;
reg    B_fifo_7_0_blk_n;
reg    block_B_loader_8_blk_n;
reg    B_fifo_8_0_blk_n;
reg    block_B_loader_9_blk_n;
reg    B_fifo_9_0_blk_n;
reg    block_B_loader_10_blk_n;
reg    B_fifo_10_0_blk_n;
reg    block_B_loader_11_blk_n;
reg    B_fifo_11_0_blk_n;
reg   [7:0] tmp_reg_479;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] tmp_47_reg_484;
reg   [7:0] tmp_48_reg_489;
reg   [7:0] tmp_49_reg_494;
reg   [7:0] tmp_50_reg_499;
reg   [7:0] tmp_51_reg_504;
reg   [7:0] tmp_52_reg_509;
reg   [7:0] tmp_53_reg_514;
reg   [7:0] tmp_54_reg_519;
reg   [7:0] tmp_55_reg_524;
reg   [7:0] tmp_56_reg_529;
reg   [7:0] tmp_57_reg_534;
reg   [7:0] tmp_58_reg_539;
reg   [7:0] tmp_59_reg_544;
reg   [7:0] tmp_60_reg_549;
reg   [7:0] tmp_61_reg_554;
reg   [7:0] tmp_62_reg_559;
reg   [7:0] tmp_63_reg_564;
reg   [7:0] tmp_64_reg_569;
reg   [7:0] tmp_65_reg_574;
reg   [7:0] tmp_66_reg_579;
reg   [7:0] tmp_67_reg_584;
reg   [7:0] tmp_68_reg_589;
reg   [7:0] tmp_69_reg_594;
reg   [9:0] k_fu_128;
wire   [9:0] k_9_fu_458_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_k_8;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_595;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_595)) begin
        if ((icmp_ln47_fu_452_p2 == 1'd0)) begin
            k_fu_128 <= k_9_fu_458_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_128 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_47_reg_484 <= block_A_loader_1_dout;
        tmp_48_reg_489 <= block_A_loader_2_dout;
        tmp_49_reg_494 <= block_A_loader_3_dout;
        tmp_50_reg_499 <= block_A_loader_4_dout;
        tmp_51_reg_504 <= block_A_loader_5_dout;
        tmp_52_reg_509 <= block_A_loader_6_dout;
        tmp_53_reg_514 <= block_A_loader_7_dout;
        tmp_54_reg_519 <= block_A_loader_8_dout;
        tmp_55_reg_524 <= block_A_loader_9_dout;
        tmp_56_reg_529 <= block_A_loader_10_dout;
        tmp_57_reg_534 <= block_A_loader_11_dout;
        tmp_58_reg_539 <= block_B_loader_0_dout;
        tmp_59_reg_544 <= block_B_loader_1_dout;
        tmp_60_reg_549 <= block_B_loader_2_dout;
        tmp_61_reg_554 <= block_B_loader_3_dout;
        tmp_62_reg_559 <= block_B_loader_4_dout;
        tmp_63_reg_564 <= block_B_loader_5_dout;
        tmp_64_reg_569 <= block_B_loader_6_dout;
        tmp_65_reg_574 <= block_B_loader_7_dout;
        tmp_66_reg_579 <= block_B_loader_8_dout;
        tmp_67_reg_584 <= block_B_loader_9_dout;
        tmp_68_reg_589 <= block_B_loader_10_dout;
        tmp_69_reg_594 <= block_B_loader_11_dout;
        tmp_reg_479 <= block_A_loader_0_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_0_0_blk_n = A_fifo_0_0_full_n;
    end else begin
        A_fifo_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_0_0_write = 1'b1;
    end else begin
        A_fifo_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_0_blk_n = A_fifo_10_0_full_n;
    end else begin
        A_fifo_10_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_0_write = 1'b1;
    end else begin
        A_fifo_10_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_11_0_blk_n = A_fifo_11_0_full_n;
    end else begin
        A_fifo_11_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_11_0_write = 1'b1;
    end else begin
        A_fifo_11_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_1_0_blk_n = A_fifo_1_0_full_n;
    end else begin
        A_fifo_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_1_0_write = 1'b1;
    end else begin
        A_fifo_1_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_2_0_blk_n = A_fifo_2_0_full_n;
    end else begin
        A_fifo_2_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_2_0_write = 1'b1;
    end else begin
        A_fifo_2_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_0_blk_n = A_fifo_3_0_full_n;
    end else begin
        A_fifo_3_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_0_write = 1'b1;
    end else begin
        A_fifo_3_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_4_0_blk_n = A_fifo_4_0_full_n;
    end else begin
        A_fifo_4_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_4_0_write = 1'b1;
    end else begin
        A_fifo_4_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_5_0_blk_n = A_fifo_5_0_full_n;
    end else begin
        A_fifo_5_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_5_0_write = 1'b1;
    end else begin
        A_fifo_5_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_6_0_blk_n = A_fifo_6_0_full_n;
    end else begin
        A_fifo_6_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_6_0_write = 1'b1;
    end else begin
        A_fifo_6_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_7_0_blk_n = A_fifo_7_0_full_n;
    end else begin
        A_fifo_7_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_7_0_write = 1'b1;
    end else begin
        A_fifo_7_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_8_0_blk_n = A_fifo_8_0_full_n;
    end else begin
        A_fifo_8_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_8_0_write = 1'b1;
    end else begin
        A_fifo_8_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_9_0_blk_n = A_fifo_9_0_full_n;
    end else begin
        A_fifo_9_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_9_0_write = 1'b1;
    end else begin
        A_fifo_9_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_0_0_blk_n = B_fifo_0_0_full_n;
    end else begin
        B_fifo_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_0_0_write = 1'b1;
    end else begin
        B_fifo_0_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_10_0_blk_n = B_fifo_10_0_full_n;
    end else begin
        B_fifo_10_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_10_0_write = 1'b1;
    end else begin
        B_fifo_10_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_11_0_blk_n = B_fifo_11_0_full_n;
    end else begin
        B_fifo_11_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_11_0_write = 1'b1;
    end else begin
        B_fifo_11_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_1_0_blk_n = B_fifo_1_0_full_n;
    end else begin
        B_fifo_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_1_0_write = 1'b1;
    end else begin
        B_fifo_1_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_2_0_blk_n = B_fifo_2_0_full_n;
    end else begin
        B_fifo_2_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_2_0_write = 1'b1;
    end else begin
        B_fifo_2_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_3_0_blk_n = B_fifo_3_0_full_n;
    end else begin
        B_fifo_3_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_3_0_write = 1'b1;
    end else begin
        B_fifo_3_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_4_0_blk_n = B_fifo_4_0_full_n;
    end else begin
        B_fifo_4_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_4_0_write = 1'b1;
    end else begin
        B_fifo_4_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_0_blk_n = B_fifo_5_0_full_n;
    end else begin
        B_fifo_5_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_0_write = 1'b1;
    end else begin
        B_fifo_5_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_6_0_blk_n = B_fifo_6_0_full_n;
    end else begin
        B_fifo_6_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_6_0_write = 1'b1;
    end else begin
        B_fifo_6_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_7_0_blk_n = B_fifo_7_0_full_n;
    end else begin
        B_fifo_7_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_7_0_write = 1'b1;
    end else begin
        B_fifo_7_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_8_0_blk_n = B_fifo_8_0_full_n;
    end else begin
        B_fifo_8_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_8_0_write = 1'b1;
    end else begin
        B_fifo_8_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_0_blk_n = B_fifo_9_0_full_n;
    end else begin
        B_fifo_9_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_0_write = 1'b1;
    end else begin
        B_fifo_9_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln47_fu_452_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_8 = 10'd0;
    end else begin
        ap_sig_allocacmp_k_8 = k_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_0_blk_n = block_A_loader_0_empty_n;
    end else begin
        block_A_loader_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_0_read = 1'b1;
    end else begin
        block_A_loader_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_10_blk_n = block_A_loader_10_empty_n;
    end else begin
        block_A_loader_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_10_read = 1'b1;
    end else begin
        block_A_loader_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_11_blk_n = block_A_loader_11_empty_n;
    end else begin
        block_A_loader_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_11_read = 1'b1;
    end else begin
        block_A_loader_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_1_blk_n = block_A_loader_1_empty_n;
    end else begin
        block_A_loader_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_1_read = 1'b1;
    end else begin
        block_A_loader_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_2_blk_n = block_A_loader_2_empty_n;
    end else begin
        block_A_loader_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_2_read = 1'b1;
    end else begin
        block_A_loader_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_3_blk_n = block_A_loader_3_empty_n;
    end else begin
        block_A_loader_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_3_read = 1'b1;
    end else begin
        block_A_loader_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_4_blk_n = block_A_loader_4_empty_n;
    end else begin
        block_A_loader_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_4_read = 1'b1;
    end else begin
        block_A_loader_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_5_blk_n = block_A_loader_5_empty_n;
    end else begin
        block_A_loader_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_5_read = 1'b1;
    end else begin
        block_A_loader_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_6_blk_n = block_A_loader_6_empty_n;
    end else begin
        block_A_loader_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_6_read = 1'b1;
    end else begin
        block_A_loader_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_7_blk_n = block_A_loader_7_empty_n;
    end else begin
        block_A_loader_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_7_read = 1'b1;
    end else begin
        block_A_loader_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_8_blk_n = block_A_loader_8_empty_n;
    end else begin
        block_A_loader_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_8_read = 1'b1;
    end else begin
        block_A_loader_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_9_blk_n = block_A_loader_9_empty_n;
    end else begin
        block_A_loader_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_A_loader_9_read = 1'b1;
    end else begin
        block_A_loader_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_0_blk_n = block_B_loader_0_empty_n;
    end else begin
        block_B_loader_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_0_read = 1'b1;
    end else begin
        block_B_loader_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_10_blk_n = block_B_loader_10_empty_n;
    end else begin
        block_B_loader_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_10_read = 1'b1;
    end else begin
        block_B_loader_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_11_blk_n = block_B_loader_11_empty_n;
    end else begin
        block_B_loader_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_11_read = 1'b1;
    end else begin
        block_B_loader_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_1_blk_n = block_B_loader_1_empty_n;
    end else begin
        block_B_loader_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_1_read = 1'b1;
    end else begin
        block_B_loader_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_2_blk_n = block_B_loader_2_empty_n;
    end else begin
        block_B_loader_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_2_read = 1'b1;
    end else begin
        block_B_loader_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_3_blk_n = block_B_loader_3_empty_n;
    end else begin
        block_B_loader_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_3_read = 1'b1;
    end else begin
        block_B_loader_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_4_blk_n = block_B_loader_4_empty_n;
    end else begin
        block_B_loader_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_4_read = 1'b1;
    end else begin
        block_B_loader_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_5_blk_n = block_B_loader_5_empty_n;
    end else begin
        block_B_loader_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_5_read = 1'b1;
    end else begin
        block_B_loader_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_6_blk_n = block_B_loader_6_empty_n;
    end else begin
        block_B_loader_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_6_read = 1'b1;
    end else begin
        block_B_loader_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_7_blk_n = block_B_loader_7_empty_n;
    end else begin
        block_B_loader_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_7_read = 1'b1;
    end else begin
        block_B_loader_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_8_blk_n = block_B_loader_8_empty_n;
    end else begin
        block_B_loader_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_8_read = 1'b1;
    end else begin
        block_B_loader_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (ap_done_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_9_blk_n = block_B_loader_9_empty_n;
    end else begin
        block_B_loader_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln47_fu_452_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_B_loader_9_read = 1'b1;
    end else begin
        block_B_loader_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_fifo_0_0_din = tmp_reg_479;

assign A_fifo_10_0_din = tmp_56_reg_529;

assign A_fifo_11_0_din = tmp_57_reg_534;

assign A_fifo_1_0_din = tmp_47_reg_484;

assign A_fifo_2_0_din = tmp_48_reg_489;

assign A_fifo_3_0_din = tmp_49_reg_494;

assign A_fifo_4_0_din = tmp_50_reg_499;

assign A_fifo_5_0_din = tmp_51_reg_504;

assign A_fifo_6_0_din = tmp_52_reg_509;

assign A_fifo_7_0_din = tmp_53_reg_514;

assign A_fifo_8_0_din = tmp_54_reg_519;

assign A_fifo_9_0_din = tmp_55_reg_524;

assign B_fifo_0_0_din = tmp_58_reg_539;

assign B_fifo_10_0_din = tmp_68_reg_589;

assign B_fifo_11_0_din = tmp_69_reg_594;

assign B_fifo_1_0_din = tmp_59_reg_544;

assign B_fifo_2_0_din = tmp_60_reg_549;

assign B_fifo_3_0_din = tmp_61_reg_554;

assign B_fifo_4_0_din = tmp_62_reg_559;

assign B_fifo_5_0_din = tmp_63_reg_564;

assign B_fifo_6_0_din = tmp_64_reg_569;

assign B_fifo_7_0_din = tmp_65_reg_574;

assign B_fifo_8_0_din = tmp_66_reg_579;

assign B_fifo_9_0_din = tmp_67_reg_584;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_11_0_full_n) | (1'b0 == B_fifo_10_0_full_n) | (1'b0 == B_fifo_9_0_full_n) | (1'b0 == B_fifo_8_0_full_n) | (1'b0 == B_fifo_7_0_full_n) | (1'b0 == B_fifo_6_0_full_n) | (1'b0 == B_fifo_5_0_full_n) | (1'b0 == B_fifo_4_0_full_n) | (1'b0 == B_fifo_3_0_full_n) | (1'b0 == B_fifo_2_0_full_n) | (1'b0 == B_fifo_1_0_full_n) | (1'b0 == B_fifo_0_0_full_n) | (1'b0 == A_fifo_11_0_full_n) | (1'b0 == A_fifo_10_0_full_n) | (1'b0 == A_fifo_9_0_full_n) | (1'b0 == A_fifo_8_0_full_n) | (1'b0 == A_fifo_7_0_full_n) | (1'b0 == A_fifo_6_0_full_n) | (1'b0 == A_fifo_5_0_full_n) | (1'b0 == A_fifo_4_0_full_n) | (1'b0 == A_fifo_3_0_full_n) | (1'b0 == A_fifo_2_0_full_n) | (1'b0 == A_fifo_1_0_full_n) | (1'b0 == A_fifo_0_0_full_n))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((block_A_loader_6_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_5_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_4_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_3_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_2_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_1_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_7_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_6_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_5_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_4_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_3_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_2_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_1_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_7_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_11_0_full_n) | (1'b0 == B_fifo_10_0_full_n) | (1'b0 == B_fifo_9_0_full_n) | (1'b0 == B_fifo_8_0_full_n) | (1'b0 == B_fifo_7_0_full_n) | (1'b0 == B_fifo_6_0_full_n) | (1'b0 == B_fifo_5_0_full_n) | (1'b0 == B_fifo_4_0_full_n) | (1'b0 == B_fifo_3_0_full_n) | (1'b0 == B_fifo_2_0_full_n) | (1'b0 == B_fifo_1_0_full_n) | (1'b0 == B_fifo_0_0_full_n) | (1'b0 == A_fifo_11_0_full_n) | (1'b0 == A_fifo_10_0_full_n) | (1'b0 == A_fifo_9_0_full_n) | (1'b0 == A_fifo_8_0_full_n) | (1'b0 == A_fifo_7_0_full_n) | (1'b0 == A_fifo_6_0_full_n) | (1'b0 == A_fifo_5_0_full_n) | (1'b0 == A_fifo_4_0_full_n) | (1'b0 == A_fifo_3_0_full_n) | (1'b0 == A_fifo_2_0_full_n) | (1'b0 == A_fifo_1_0_full_n) | (1'b0 == A_fifo_0_0_full_n))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((block_A_loader_6_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_5_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_4_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_3_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_2_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_1_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_7_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_6_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_5_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_4_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_3_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_2_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_1_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_7_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_11_0_full_n) | (1'b0 == B_fifo_10_0_full_n) | (1'b0 == B_fifo_9_0_full_n) | (1'b0 == B_fifo_8_0_full_n) | (1'b0 == B_fifo_7_0_full_n) | (1'b0 == B_fifo_6_0_full_n) | (1'b0 == B_fifo_5_0_full_n) | (1'b0 == B_fifo_4_0_full_n) | (1'b0 == B_fifo_3_0_full_n) | (1'b0 == B_fifo_2_0_full_n) | (1'b0 == B_fifo_1_0_full_n) | (1'b0 == B_fifo_0_0_full_n) | (1'b0 == A_fifo_11_0_full_n) | (1'b0 == A_fifo_10_0_full_n) | (1'b0 == A_fifo_9_0_full_n) | (1'b0 == A_fifo_8_0_full_n) | (1'b0 == A_fifo_7_0_full_n) | (1'b0 == A_fifo_6_0_full_n) | (1'b0 == A_fifo_5_0_full_n) | (1'b0 == A_fifo_4_0_full_n) | (1'b0 == A_fifo_3_0_full_n) | (1'b0 == A_fifo_2_0_full_n) | (1'b0 == A_fifo_1_0_full_n) | (1'b0 == A_fifo_0_0_full_n))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((block_A_loader_6_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_5_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_4_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_3_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_2_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_1_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_7_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_6_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_5_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_4_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_3_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_2_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_1_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_7_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((block_A_loader_6_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_5_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_4_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_3_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_2_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((block_A_loader_1_empty_n == 1'b0) & (icmp_ln47_fu_452_p2 == 1'd0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_7_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_6_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_5_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_4_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_3_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_2_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_1_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_B_loader_0_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_11_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_10_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_9_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_8_empty_n == 1'b0)) | ((icmp_ln47_fu_452_p2 == 1'd0) & (block_A_loader_7_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == B_fifo_11_0_full_n) | (1'b0 == B_fifo_10_0_full_n) | (1'b0 == B_fifo_9_0_full_n) | (1'b0 == B_fifo_8_0_full_n) | (1'b0 == B_fifo_7_0_full_n) | (1'b0 == B_fifo_6_0_full_n) | (1'b0 == B_fifo_5_0_full_n) | (1'b0 == B_fifo_4_0_full_n) | (1'b0 == B_fifo_3_0_full_n) | (1'b0 == B_fifo_2_0_full_n) | (1'b0 == B_fifo_1_0_full_n) | (1'b0 == B_fifo_0_0_full_n) | (1'b0 == A_fifo_11_0_full_n) | (1'b0 == A_fifo_10_0_full_n) | (1'b0 == A_fifo_9_0_full_n) | (1'b0 == A_fifo_8_0_full_n) | (1'b0 == A_fifo_7_0_full_n) | (1'b0 == A_fifo_6_0_full_n) | (1'b0 == A_fifo_5_0_full_n) | (1'b0 == A_fifo_4_0_full_n) | (1'b0 == A_fifo_3_0_full_n) | (1'b0 == A_fifo_2_0_full_n) | (1'b0 == A_fifo_1_0_full_n) | (1'b0 == A_fifo_0_0_full_n));
end

always @ (*) begin
    ap_condition_595 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln47_fu_452_p2 = ((ap_sig_allocacmp_k_8 == 10'd768) ? 1'b1 : 1'b0);

assign k_9_fu_458_p2 = (ap_sig_allocacmp_k_8 + 10'd1);

assign start_out = real_start;

endmodule //Bert_layer_systolic_array_k_768_2_Loop_data_load_proc19
