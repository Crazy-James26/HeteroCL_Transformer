// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_j24 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mean21_load,
        mean1_load,
        mean21_address0,
        mean21_ce0,
        mean21_we0,
        mean21_d0,
        zext_ln531,
        mean1_address0,
        mean1_ce0,
        mean1_we0,
        mean1_d0,
        v365_address0,
        v365_ce0,
        v365_q0,
        v365_1_address0,
        v365_1_ce0,
        v365_1_q0,
        v365_2_address0,
        v365_2_ce0,
        v365_2_q0,
        v365_3_address0,
        v365_3_ce0,
        v365_3_q0,
        v365_4_address0,
        v365_4_ce0,
        v365_4_q0,
        v365_5_address0,
        v365_5_ce0,
        v365_5_q0,
        v365_6_address0,
        v365_6_ce0,
        v365_6_q0,
        v365_7_address0,
        v365_7_ce0,
        v365_7_q0,
        v365_8_address0,
        v365_8_ce0,
        v365_8_q0,
        v365_9_address0,
        v365_9_ce0,
        v365_9_q0,
        v365_10_address0,
        v365_10_ce0,
        v365_10_q0,
        v365_11_address0,
        v365_11_ce0,
        v365_11_q0,
        i25,
        grp_fu_2476_p_din0,
        grp_fu_2476_p_din1,
        grp_fu_2476_p_opcode,
        grp_fu_2476_p_dout0,
        grp_fu_2476_p_ce,
        grp_fu_2465_p_din0,
        grp_fu_2465_p_din1,
        grp_fu_2465_p_dout0,
        grp_fu_2465_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mean21_load;
input  [31:0] mean1_load;
output  [3:0] mean21_address0;
output   mean21_ce0;
output   mean21_we0;
output  [31:0] mean21_d0;
input  [3:0] zext_ln531;
output  [3:0] mean1_address0;
output   mean1_ce0;
output   mean1_we0;
output  [31:0] mean1_d0;
output  [9:0] v365_address0;
output   v365_ce0;
input  [31:0] v365_q0;
output  [9:0] v365_1_address0;
output   v365_1_ce0;
input  [31:0] v365_1_q0;
output  [9:0] v365_2_address0;
output   v365_2_ce0;
input  [31:0] v365_2_q0;
output  [9:0] v365_3_address0;
output   v365_3_ce0;
input  [31:0] v365_3_q0;
output  [9:0] v365_4_address0;
output   v365_4_ce0;
input  [31:0] v365_4_q0;
output  [9:0] v365_5_address0;
output   v365_5_ce0;
input  [31:0] v365_5_q0;
output  [9:0] v365_6_address0;
output   v365_6_ce0;
input  [31:0] v365_6_q0;
output  [9:0] v365_7_address0;
output   v365_7_ce0;
input  [31:0] v365_7_q0;
output  [9:0] v365_8_address0;
output   v365_8_ce0;
input  [31:0] v365_8_q0;
output  [9:0] v365_9_address0;
output   v365_9_ce0;
input  [31:0] v365_9_q0;
output  [9:0] v365_10_address0;
output   v365_10_ce0;
input  [31:0] v365_10_q0;
output  [9:0] v365_11_address0;
output   v365_11_ce0;
input  [31:0] v365_11_q0;
input  [3:0] i25;
output  [31:0] grp_fu_2476_p_din0;
output  [31:0] grp_fu_2476_p_din1;
output  [0:0] grp_fu_2476_p_opcode;
input  [31:0] grp_fu_2476_p_dout0;
output   grp_fu_2476_p_ce;
output  [31:0] grp_fu_2465_p_din0;
output  [31:0] grp_fu_2465_p_din1;
input  [31:0] grp_fu_2465_p_dout0;
output   grp_fu_2465_p_ce;

reg ap_idle;
reg mean21_ce0;
reg mean21_we0;
reg mean1_ce0;
reg mean1_we0;
reg v365_ce0;
reg v365_1_ce0;
reg v365_2_ce0;
reg v365_3_ce0;
reg v365_4_ce0;
reg v365_5_ce0;
reg v365_6_ce0;
reg v365_7_ce0;
reg v365_8_ce0;
reg v365_9_ce0;
reg v365_10_ce0;
reg v365_11_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln532_reg_442;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] reg_290;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] mean21_addr_reg_432;
reg   [3:0] mean21_addr_reg_432_pp0_iter1_reg;
reg   [3:0] mean21_addr_reg_432_pp0_iter2_reg;
reg   [3:0] mean1_addr_reg_437;
reg   [3:0] mean1_addr_reg_437_pp0_iter1_reg;
wire   [0:0] icmp_ln532_fu_320_p2;
reg   [0:0] icmp_ln532_reg_442_pp0_iter1_reg;
wire   [0:0] icmp_ln532_1_fu_348_p2;
reg   [0:0] icmp_ln532_1_reg_506;
reg   [0:0] icmp_ln532_1_reg_506_pp0_iter1_reg;
reg   [0:0] icmp_ln532_1_reg_506_pp0_iter2_reg;
wire   [31:0] v294_fu_359_p14;
reg   [31:0] v294_reg_510;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] v298_reg_522;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln531_cast_fu_296_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln532_fu_332_p1;
reg   [31:0] v295_fu_66;
reg   [31:0] ap_sig_allocacmp_v295_load;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [31:0] v299_fu_70;
reg   [31:0] ap_sig_allocacmp_v299_load;
wire    ap_block_pp0_stage3;
reg   [9:0] j24_fu_74;
wire   [9:0] add_ln532_fu_326_p2;
reg   [9:0] ap_sig_allocacmp_j24_1;
reg   [31:0] grp_fu_282_p0;
reg   [31:0] grp_fu_282_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U10414(
    .din0(v365_q0),
    .din1(v365_1_q0),
    .din2(v365_2_q0),
    .din3(v365_3_q0),
    .din4(v365_4_q0),
    .din5(v365_5_q0),
    .din6(v365_6_q0),
    .din7(v365_7_q0),
    .din8(v365_8_q0),
    .din9(v365_9_q0),
    .din10(v365_10_q0),
    .din11(v365_11_q0),
    .din12(i25),
    .dout(v294_fu_359_p14)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln532_fu_320_p2 == 1'd0))) begin
            j24_fu_74 <= add_ln532_fu_326_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j24_fu_74 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v295_fu_66 <= mean1_load;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v295_fu_66 <= grp_fu_2476_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v299_fu_70 <= mean21_load;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v299_fu_70 <= grp_fu_2476_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln532_fu_320_p2 == 1'd0))) begin
        icmp_ln532_1_reg_506 <= icmp_ln532_1_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln532_1_reg_506_pp0_iter1_reg <= icmp_ln532_1_reg_506;
        icmp_ln532_1_reg_506_pp0_iter2_reg <= icmp_ln532_1_reg_506_pp0_iter1_reg;
        icmp_ln532_reg_442 <= icmp_ln532_fu_320_p2;
        icmp_ln532_reg_442_pp0_iter1_reg <= icmp_ln532_reg_442;
        mean1_addr_reg_437 <= zext_ln531_cast_fu_296_p1;
        mean1_addr_reg_437_pp0_iter1_reg <= mean1_addr_reg_437;
        mean21_addr_reg_432 <= zext_ln531_cast_fu_296_p1;
        mean21_addr_reg_432_pp0_iter1_reg <= mean21_addr_reg_432;
        mean21_addr_reg_432_pp0_iter2_reg <= mean21_addr_reg_432_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_290 <= grp_fu_2476_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln532_reg_442 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v294_reg_510 <= v294_fu_359_p14;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v298_reg_522 <= grp_fu_2465_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln532_reg_442 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln532_reg_442_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j24_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_j24_1 = j24_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_v295_load = grp_fu_2476_p_dout0;
    end else begin
        ap_sig_allocacmp_v295_load = v295_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_sig_allocacmp_v299_load = grp_fu_2476_p_dout0;
    end else begin
        ap_sig_allocacmp_v299_load = v299_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_282_p0 = ap_sig_allocacmp_v299_load;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_282_p0 = ap_sig_allocacmp_v295_load;
    end else begin
        grp_fu_282_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_282_p1 = v298_reg_522;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_282_p1 = v294_reg_510;
    end else begin
        grp_fu_282_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mean1_ce0 = 1'b1;
    end else begin
        mean1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln532_1_reg_506_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mean1_we0 = 1'b1;
    end else begin
        mean1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mean21_ce0 = 1'b1;
    end else begin
        mean21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln532_1_reg_506_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mean21_we0 = 1'b1;
    end else begin
        mean21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_10_ce0 = 1'b1;
    end else begin
        v365_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_11_ce0 = 1'b1;
    end else begin
        v365_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_1_ce0 = 1'b1;
    end else begin
        v365_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_2_ce0 = 1'b1;
    end else begin
        v365_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_3_ce0 = 1'b1;
    end else begin
        v365_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_4_ce0 = 1'b1;
    end else begin
        v365_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_5_ce0 = 1'b1;
    end else begin
        v365_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_6_ce0 = 1'b1;
    end else begin
        v365_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_7_ce0 = 1'b1;
    end else begin
        v365_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_8_ce0 = 1'b1;
    end else begin
        v365_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_9_ce0 = 1'b1;
    end else begin
        v365_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v365_ce0 = 1'b1;
    end else begin
        v365_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln532_fu_326_p2 = (ap_sig_allocacmp_j24_1 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign grp_fu_2465_p_ce = 1'b1;

assign grp_fu_2465_p_din0 = v294_reg_510;

assign grp_fu_2465_p_din1 = v294_reg_510;

assign grp_fu_2476_p_ce = 1'b1;

assign grp_fu_2476_p_din0 = grp_fu_282_p0;

assign grp_fu_2476_p_din1 = grp_fu_282_p1;

assign grp_fu_2476_p_opcode = 2'd0;

assign icmp_ln532_1_fu_348_p2 = ((add_ln532_fu_326_p2 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln532_fu_320_p2 = ((ap_sig_allocacmp_j24_1 == 10'd768) ? 1'b1 : 1'b0);

assign mean1_address0 = mean1_addr_reg_437_pp0_iter1_reg;

assign mean1_d0 = reg_290;

assign mean21_address0 = mean21_addr_reg_432_pp0_iter2_reg;

assign mean21_d0 = reg_290;

assign v365_10_address0 = zext_ln532_fu_332_p1;

assign v365_11_address0 = zext_ln532_fu_332_p1;

assign v365_1_address0 = zext_ln532_fu_332_p1;

assign v365_2_address0 = zext_ln532_fu_332_p1;

assign v365_3_address0 = zext_ln532_fu_332_p1;

assign v365_4_address0 = zext_ln532_fu_332_p1;

assign v365_5_address0 = zext_ln532_fu_332_p1;

assign v365_6_address0 = zext_ln532_fu_332_p1;

assign v365_7_address0 = zext_ln532_fu_332_p1;

assign v365_8_address0 = zext_ln532_fu_332_p1;

assign v365_9_address0 = zext_ln532_fu_332_p1;

assign v365_address0 = zext_ln532_fu_332_p1;

assign zext_ln531_cast_fu_296_p1 = zext_ln531;

assign zext_ln532_fu_332_p1 = ap_sig_allocacmp_j24_1;

endmodule //Bert_layer_Bert_layer_Pipeline_l_j24
