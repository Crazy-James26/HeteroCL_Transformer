// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_PE_8_4_pack_591 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        A_fifo_10_5_dout,
        A_fifo_10_5_num_data_valid,
        A_fifo_10_5_fifo_cap,
        A_fifo_10_5_empty_n,
        A_fifo_10_5_read,
        B_fifo_5_10_dout,
        B_fifo_5_10_num_data_valid,
        B_fifo_5_10_fifo_cap,
        B_fifo_5_10_empty_n,
        B_fifo_5_10_read,
        A_fifo_10_6_din,
        A_fifo_10_6_num_data_valid,
        A_fifo_10_6_fifo_cap,
        A_fifo_10_6_full_n,
        A_fifo_10_6_write,
        B_fifo_5_11_din,
        B_fifo_5_11_num_data_valid,
        B_fifo_5_11_fifo_cap,
        B_fifo_5_11_full_n,
        B_fifo_5_11_write,
        start_out,
        start_write,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] A_fifo_10_5_dout;
input  [1:0] A_fifo_10_5_num_data_valid;
input  [1:0] A_fifo_10_5_fifo_cap;
input   A_fifo_10_5_empty_n;
output   A_fifo_10_5_read;
input  [7:0] B_fifo_5_10_dout;
input  [1:0] B_fifo_5_10_num_data_valid;
input  [1:0] B_fifo_5_10_fifo_cap;
input   B_fifo_5_10_empty_n;
output   B_fifo_5_10_read;
output  [7:0] A_fifo_10_6_din;
input  [1:0] A_fifo_10_6_num_data_valid;
input  [1:0] A_fifo_10_6_fifo_cap;
input   A_fifo_10_6_full_n;
output   A_fifo_10_6_write;
output  [7:0] B_fifo_5_11_din;
input  [1:0] B_fifo_5_11_num_data_valid;
input  [1:0] B_fifo_5_11_fifo_cap;
input   B_fifo_5_11_full_n;
output   B_fifo_5_11_write;
output   start_out;
output   start_write;
output  [47:0] ap_return;

reg ap_idle;
reg A_fifo_10_5_read;
reg B_fifo_5_10_read;
reg A_fifo_10_6_write;
reg B_fifo_5_11_write;
reg start_write;
reg[47:0] ap_return;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln7_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_fifo_10_5_blk_n;
wire    ap_block_pp0_stage0;
reg    A_fifo_10_6_blk_n;
reg    B_fifo_5_10_blk_n;
reg    B_fifo_5_11_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln7_reg_220;
reg   [0:0] icmp_ln7_reg_220_pp0_iter1_reg;
reg   [0:0] icmp_ln7_reg_220_pp0_iter2_reg;
reg   [11:0] k_02_fu_60;
wire   [11:0] k_124_fu_110_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_k;
reg   [47:0] C_out_out_0_fu_64;
wire   [47:0] add_ln886_fu_184_p2;
reg   [47:0] ap_sig_allocacmp_C_out_out_0_load_95;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] tmp3_fu_121_p4;
wire   [3:0] trunc_ln674_fu_131_p1;
wire  signed [16:0] pack_b_fu_135_p4;
wire  signed [24:0] grp_fu_198_p2;
wire   [11:0] tmp_s_fu_156_p4;
wire   [11:0] trunc_ln674_63_fu_165_p1;
wire   [36:0] tmp_76_fu_168_p5;
wire   [47:0] zext_ln886_fu_180_p1;
reg    grp_fu_198_ce;
reg   [47:0] ap_return_preg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_146;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_return_preg = 48'd0;
end

Bert_layer_mul_mul_17s_8s_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_mul_17s_8s_25_4_1_U8888(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(pack_b_fu_135_p4),
    .din1(A_fifo_10_5_dout),
    .ce(grp_fu_198_ce),
    .dout(grp_fu_198_p2)
);

Bert_layer_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 48'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_220_pp0_iter2_reg == 1'd1))) begin
            ap_return_preg <= ap_sig_allocacmp_C_out_out_0_load_95;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_146)) begin
        if ((icmp_ln7_fu_104_p2 == 1'd0)) begin
            k_02_fu_60 <= k_124_fu_110_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_02_fu_60 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        C_out_out_0_fu_64 <= add_ln886_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln7_reg_220 <= icmp_ln7_fu_104_p2;
        icmp_ln7_reg_220_pp0_iter1_reg <= icmp_ln7_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln7_reg_220_pp0_iter2_reg <= icmp_ln7_reg_220_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_5_blk_n = A_fifo_10_5_empty_n;
    end else begin
        A_fifo_10_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_5_read = 1'b1;
    end else begin
        A_fifo_10_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_6_blk_n = A_fifo_10_6_full_n;
    end else begin
        A_fifo_10_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_10_6_write = 1'b1;
    end else begin
        A_fifo_10_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_10_blk_n = B_fifo_5_10_empty_n;
    end else begin
        B_fifo_5_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_10_read = 1'b1;
    end else begin
        B_fifo_5_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_11_blk_n = B_fifo_5_11_full_n;
    end else begin
        B_fifo_5_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_5_11_write = 1'b1;
    end else begin
        B_fifo_5_11_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln7_reg_220_pp0_iter2_reg == 1'd1))) begin
        ap_return = ap_sig_allocacmp_C_out_out_0_load_95;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_C_out_out_0_load_95 = add_ln886_fu_184_p2;
    end else begin
        ap_sig_allocacmp_C_out_out_0_load_95 = C_out_out_0_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k = 12'd0;
    end else begin
        ap_sig_allocacmp_k = k_02_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_198_ce = 1'b1;
    end else begin
        grp_fu_198_ce = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_fifo_10_6_din = A_fifo_10_5_dout;

assign B_fifo_5_11_din = B_fifo_5_10_dout;

assign add_ln886_fu_184_p2 = (C_out_out_0_fu_64 + zext_ln886_fu_180_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_5_11_full_n) | (1'b0 == A_fifo_10_6_full_n) | (1'b0 == B_fifo_5_10_empty_n) | (1'b0 == A_fifo_10_5_empty_n))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_5_11_full_n) | (1'b0 == A_fifo_10_6_full_n) | (1'b0 == B_fifo_5_10_empty_n) | (1'b0 == A_fifo_10_5_empty_n))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == B_fifo_5_11_full_n) | (1'b0 == A_fifo_10_6_full_n) | (1'b0 == B_fifo_5_10_empty_n) | (1'b0 == A_fifo_10_5_empty_n))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((1'b0 == B_fifo_5_11_full_n) | (1'b0 == A_fifo_10_6_full_n) | (1'b0 == B_fifo_5_10_empty_n) | (1'b0 == A_fifo_10_5_empty_n));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_146 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign icmp_ln7_fu_104_p2 = ((ap_sig_allocacmp_k == 12'd3072) ? 1'b1 : 1'b0);

assign k_124_fu_110_p2 = (ap_sig_allocacmp_k + 12'd1);

assign pack_b_fu_135_p4 = {{{tmp3_fu_121_p4}, {9'd0}}, {trunc_ln674_fu_131_p1}};

assign start_out = real_start;

assign tmp3_fu_121_p4 = {{B_fifo_5_10_dout[7:4]}};

assign tmp_76_fu_168_p5 = {{{{{{1'd0}, {tmp_s_fu_156_p4}}}, {12'd0}}}, {trunc_ln674_63_fu_165_p1}};

assign tmp_s_fu_156_p4 = {{grp_fu_198_p2[24:13]}};

assign trunc_ln674_63_fu_165_p1 = grp_fu_198_p2[11:0];

assign trunc_ln674_fu_131_p1 = B_fifo_5_10_dout[3:0];

assign zext_ln886_fu_180_p1 = tmp_76_fu_168_p5;

endmodule //Bert_layer_PE_8_4_pack_591
