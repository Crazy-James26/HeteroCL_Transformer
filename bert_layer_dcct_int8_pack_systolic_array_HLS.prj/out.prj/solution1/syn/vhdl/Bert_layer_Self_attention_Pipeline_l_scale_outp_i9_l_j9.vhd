-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_scale_outp_i9_l_j9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v346_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v346_ce0 : OUT STD_LOGIC;
    v346_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_outp2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    acc_outp2_V_ce0 : OUT STD_LOGIC;
    acc_outp2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc_outp2_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    acc_outp2_V_1_ce0 : OUT STD_LOGIC;
    acc_outp2_V_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc_outp2_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    acc_outp2_V_2_ce0 : OUT STD_LOGIC;
    acc_outp2_V_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    acc_outp2_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    acc_outp2_V_3_ce0 : OUT STD_LOGIC;
    acc_outp2_V_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v125_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_ce0 : OUT STD_LOGIC;
    v125_we0 : OUT STD_LOGIC;
    v125_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_1_ce0 : OUT STD_LOGIC;
    v125_1_we0 : OUT STD_LOGIC;
    v125_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_2_ce0 : OUT STD_LOGIC;
    v125_2_we0 : OUT STD_LOGIC;
    v125_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_3_ce0 : OUT STD_LOGIC;
    v125_3_we0 : OUT STD_LOGIC;
    v125_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_fu_705_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_ce : OUT STD_LOGIC;
    grp_fu_713_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_713_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_713_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_scale_outp_i9_l_j9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln179_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln179_1_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln179_1_reg_557_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln179_fu_306_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln179_reg_562_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln182_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln182_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_addr_reg_592_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597 : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_1_addr_reg_597_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_2_addr_reg_602_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v125_3_addr_reg_607_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v102_V_fu_370_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal v102_V_reg_612 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln184_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v346_load_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal v104_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln179_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v105_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_647_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_35_fu_416_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_35_reg_652 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_448_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_662 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_510_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln182_1_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln179_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j9_fu_110 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln180_fu_338_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j9_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i9_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i9_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten53_fu_118 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln179_1_fu_266_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten53_load : STD_LOGIC_VECTOR (9 downto 0);
    signal result_V_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln180_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln179_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast21_mid2_v_fu_310_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln179_fu_290_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_320_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln182_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_V_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_420_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_424_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_444_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_456_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_465_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln1488_fu_472_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_476_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_fu_488_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_52_fu_482_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln818_1_fu_496_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_500_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_9_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_sitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_42_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_24_1_1_U3185 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => acc_outp2_V_q0,
        din1 => acc_outp2_V_1_q0,
        din2 => acc_outp2_V_2_q0,
        din3 => acc_outp2_V_3_q0,
        din4 => trunc_ln179_reg_562_pp0_iter1_reg,
        dout => v102_V_fu_370_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i9_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln179_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i9_fu_114 <= select_ln179_1_fu_298_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i9_fu_114 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten53_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln179_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten53_fu_118 <= add_ln179_1_fu_266_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten53_fu_118 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j9_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln179_fu_260_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j9_fu_110 <= add_ln180_fu_338_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j9_fu_110 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln179_fu_260_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln182_reg_567 <= add_ln182_fu_332_p2;
                select_ln179_1_reg_557 <= select_ln179_1_fu_298_p3;
                trunc_ln179_reg_562 <= trunc_ln179_fu_306_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                isNeg_reg_657 <= add_ln346_fu_424_p2(8 downto 8);
                p_Result_35_reg_652 <= p_Result_35_fu_416_p1;
                p_Result_s_reg_647 <= data_V_fu_395_p1(31 downto 31);
                p_Result_s_reg_647_pp0_iter14_reg <= p_Result_s_reg_647;
                select_ln179_1_reg_557_pp0_iter2_reg <= select_ln179_1_reg_557_pp0_iter1_reg;
                select_ln179_1_reg_557_pp0_iter3_reg <= select_ln179_1_reg_557_pp0_iter2_reg;
                select_ln179_1_reg_557_pp0_iter4_reg <= select_ln179_1_reg_557_pp0_iter3_reg;
                select_ln179_1_reg_557_pp0_iter5_reg <= select_ln179_1_reg_557_pp0_iter4_reg;
                select_ln179_1_reg_557_pp0_iter6_reg <= select_ln179_1_reg_557_pp0_iter5_reg;
                trunc_ln179_reg_562_pp0_iter10_reg <= trunc_ln179_reg_562_pp0_iter9_reg;
                trunc_ln179_reg_562_pp0_iter11_reg <= trunc_ln179_reg_562_pp0_iter10_reg;
                trunc_ln179_reg_562_pp0_iter12_reg <= trunc_ln179_reg_562_pp0_iter11_reg;
                trunc_ln179_reg_562_pp0_iter13_reg <= trunc_ln179_reg_562_pp0_iter12_reg;
                trunc_ln179_reg_562_pp0_iter14_reg <= trunc_ln179_reg_562_pp0_iter13_reg;
                trunc_ln179_reg_562_pp0_iter2_reg <= trunc_ln179_reg_562_pp0_iter1_reg;
                trunc_ln179_reg_562_pp0_iter3_reg <= trunc_ln179_reg_562_pp0_iter2_reg;
                trunc_ln179_reg_562_pp0_iter4_reg <= trunc_ln179_reg_562_pp0_iter3_reg;
                trunc_ln179_reg_562_pp0_iter5_reg <= trunc_ln179_reg_562_pp0_iter4_reg;
                trunc_ln179_reg_562_pp0_iter6_reg <= trunc_ln179_reg_562_pp0_iter5_reg;
                trunc_ln179_reg_562_pp0_iter7_reg <= trunc_ln179_reg_562_pp0_iter6_reg;
                trunc_ln179_reg_562_pp0_iter8_reg <= trunc_ln179_reg_562_pp0_iter7_reg;
                trunc_ln179_reg_562_pp0_iter9_reg <= trunc_ln179_reg_562_pp0_iter8_reg;
                ush_reg_662 <= ush_fu_448_p3;
                v102_V_reg_612 <= v102_V_fu_370_p6;
                v104_reg_632 <= grp_fu_713_p_dout0;
                v105_reg_642 <= grp_fu_705_p_dout0;
                v125_1_addr_reg_597_pp0_iter10_reg <= v125_1_addr_reg_597_pp0_iter9_reg;
                v125_1_addr_reg_597_pp0_iter11_reg <= v125_1_addr_reg_597_pp0_iter10_reg;
                v125_1_addr_reg_597_pp0_iter12_reg <= v125_1_addr_reg_597_pp0_iter11_reg;
                v125_1_addr_reg_597_pp0_iter13_reg <= v125_1_addr_reg_597_pp0_iter12_reg;
                v125_1_addr_reg_597_pp0_iter14_reg <= v125_1_addr_reg_597_pp0_iter13_reg;
                v125_1_addr_reg_597_pp0_iter2_reg <= v125_1_addr_reg_597;
                v125_1_addr_reg_597_pp0_iter3_reg <= v125_1_addr_reg_597_pp0_iter2_reg;
                v125_1_addr_reg_597_pp0_iter4_reg <= v125_1_addr_reg_597_pp0_iter3_reg;
                v125_1_addr_reg_597_pp0_iter5_reg <= v125_1_addr_reg_597_pp0_iter4_reg;
                v125_1_addr_reg_597_pp0_iter6_reg <= v125_1_addr_reg_597_pp0_iter5_reg;
                v125_1_addr_reg_597_pp0_iter7_reg <= v125_1_addr_reg_597_pp0_iter6_reg;
                v125_1_addr_reg_597_pp0_iter8_reg <= v125_1_addr_reg_597_pp0_iter7_reg;
                v125_1_addr_reg_597_pp0_iter9_reg <= v125_1_addr_reg_597_pp0_iter8_reg;
                v125_2_addr_reg_602_pp0_iter10_reg <= v125_2_addr_reg_602_pp0_iter9_reg;
                v125_2_addr_reg_602_pp0_iter11_reg <= v125_2_addr_reg_602_pp0_iter10_reg;
                v125_2_addr_reg_602_pp0_iter12_reg <= v125_2_addr_reg_602_pp0_iter11_reg;
                v125_2_addr_reg_602_pp0_iter13_reg <= v125_2_addr_reg_602_pp0_iter12_reg;
                v125_2_addr_reg_602_pp0_iter14_reg <= v125_2_addr_reg_602_pp0_iter13_reg;
                v125_2_addr_reg_602_pp0_iter2_reg <= v125_2_addr_reg_602;
                v125_2_addr_reg_602_pp0_iter3_reg <= v125_2_addr_reg_602_pp0_iter2_reg;
                v125_2_addr_reg_602_pp0_iter4_reg <= v125_2_addr_reg_602_pp0_iter3_reg;
                v125_2_addr_reg_602_pp0_iter5_reg <= v125_2_addr_reg_602_pp0_iter4_reg;
                v125_2_addr_reg_602_pp0_iter6_reg <= v125_2_addr_reg_602_pp0_iter5_reg;
                v125_2_addr_reg_602_pp0_iter7_reg <= v125_2_addr_reg_602_pp0_iter6_reg;
                v125_2_addr_reg_602_pp0_iter8_reg <= v125_2_addr_reg_602_pp0_iter7_reg;
                v125_2_addr_reg_602_pp0_iter9_reg <= v125_2_addr_reg_602_pp0_iter8_reg;
                v125_3_addr_reg_607_pp0_iter10_reg <= v125_3_addr_reg_607_pp0_iter9_reg;
                v125_3_addr_reg_607_pp0_iter11_reg <= v125_3_addr_reg_607_pp0_iter10_reg;
                v125_3_addr_reg_607_pp0_iter12_reg <= v125_3_addr_reg_607_pp0_iter11_reg;
                v125_3_addr_reg_607_pp0_iter13_reg <= v125_3_addr_reg_607_pp0_iter12_reg;
                v125_3_addr_reg_607_pp0_iter14_reg <= v125_3_addr_reg_607_pp0_iter13_reg;
                v125_3_addr_reg_607_pp0_iter2_reg <= v125_3_addr_reg_607;
                v125_3_addr_reg_607_pp0_iter3_reg <= v125_3_addr_reg_607_pp0_iter2_reg;
                v125_3_addr_reg_607_pp0_iter4_reg <= v125_3_addr_reg_607_pp0_iter3_reg;
                v125_3_addr_reg_607_pp0_iter5_reg <= v125_3_addr_reg_607_pp0_iter4_reg;
                v125_3_addr_reg_607_pp0_iter6_reg <= v125_3_addr_reg_607_pp0_iter5_reg;
                v125_3_addr_reg_607_pp0_iter7_reg <= v125_3_addr_reg_607_pp0_iter6_reg;
                v125_3_addr_reg_607_pp0_iter8_reg <= v125_3_addr_reg_607_pp0_iter7_reg;
                v125_3_addr_reg_607_pp0_iter9_reg <= v125_3_addr_reg_607_pp0_iter8_reg;
                v125_addr_reg_592_pp0_iter10_reg <= v125_addr_reg_592_pp0_iter9_reg;
                v125_addr_reg_592_pp0_iter11_reg <= v125_addr_reg_592_pp0_iter10_reg;
                v125_addr_reg_592_pp0_iter12_reg <= v125_addr_reg_592_pp0_iter11_reg;
                v125_addr_reg_592_pp0_iter13_reg <= v125_addr_reg_592_pp0_iter12_reg;
                v125_addr_reg_592_pp0_iter14_reg <= v125_addr_reg_592_pp0_iter13_reg;
                v125_addr_reg_592_pp0_iter2_reg <= v125_addr_reg_592;
                v125_addr_reg_592_pp0_iter3_reg <= v125_addr_reg_592_pp0_iter2_reg;
                v125_addr_reg_592_pp0_iter4_reg <= v125_addr_reg_592_pp0_iter3_reg;
                v125_addr_reg_592_pp0_iter5_reg <= v125_addr_reg_592_pp0_iter4_reg;
                v125_addr_reg_592_pp0_iter6_reg <= v125_addr_reg_592_pp0_iter5_reg;
                v125_addr_reg_592_pp0_iter7_reg <= v125_addr_reg_592_pp0_iter6_reg;
                v125_addr_reg_592_pp0_iter8_reg <= v125_addr_reg_592_pp0_iter7_reg;
                v125_addr_reg_592_pp0_iter9_reg <= v125_addr_reg_592_pp0_iter8_reg;
                v346_load_reg_627 <= v346_q0;
                val_reg_667 <= val_fu_510_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln179_1_reg_557_pp0_iter1_reg <= select_ln179_1_reg_557;
                trunc_ln179_reg_562_pp0_iter1_reg <= trunc_ln179_reg_562;
                v125_1_addr_reg_597 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);
                v125_2_addr_reg_602 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);
                v125_3_addr_reg_607 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);
                v125_addr_reg_592 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_outp2_V_1_address0 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);

    acc_outp2_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp2_V_1_ce0 <= ap_const_logic_1;
        else 
            acc_outp2_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp2_V_2_address0 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);

    acc_outp2_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp2_V_2_ce0 <= ap_const_logic_1;
        else 
            acc_outp2_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp2_V_3_address0 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);

    acc_outp2_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp2_V_3_ce0 <= ap_const_logic_1;
        else 
            acc_outp2_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp2_V_address0 <= zext_ln182_1_fu_359_p1(8 - 1 downto 0);

    acc_outp2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp2_V_ce0 <= ap_const_logic_1;
        else 
            acc_outp2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln179_1_fu_266_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten53_load) + unsigned(ap_const_lv10_1));
    add_ln179_fu_278_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i9_load) + unsigned(ap_const_lv4_1));
    add_ln180_fu_338_p2 <= std_logic_vector(unsigned(select_ln179_fu_290_p3) + unsigned(ap_const_lv7_1));
    add_ln182_fu_332_p2 <= std_logic_vector(unsigned(tmp_s_fu_320_p3) + unsigned(zext_ln182_fu_328_p1));
    add_ln346_fu_424_p2 <= std_logic_vector(unsigned(zext_ln346_fu_420_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln179_fu_260_p2)
    begin
        if (((icmp_ln179_fu_260_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i9_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i9_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i9_load <= i9_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten53_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten53_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten53_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten53_load <= indvar_flatten53_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_j9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j9_fu_110, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j9_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j9_load <= j9_fu_110;
        end if; 
    end process;

    bitcast_ln179_fu_391_p1 <= v346_load_reg_627;
    data_V_fu_395_p1 <= v105_reg_642;
    grp_fu_705_p_ce <= ap_const_logic_1;
    grp_fu_705_p_din0 <= v104_reg_632;
    grp_fu_705_p_din1 <= bitcast_ln179_fu_391_p1;
    grp_fu_713_p_ce <= ap_const_logic_1;
    grp_fu_713_p_din0 <= sext_ln184_fu_383_p1;
    icmp_ln179_fu_260_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten53_load = ap_const_lv10_300) else "0";
    icmp_ln180_fu_284_p2 <= "1" when (ap_sig_allocacmp_j9_load = ap_const_lv7_40) else "0";
    isNeg_fu_430_p3 <= add_ln346_fu_424_p2(8 downto 8);
    mantissa_fu_456_p4 <= ((ap_const_lv1_1 & p_Result_35_reg_652) & ap_const_lv1_0);
    p_Result_35_fu_416_p1 <= data_V_fu_395_p1(23 - 1 downto 0);
    p_cast21_mid2_v_fu_310_p4 <= select_ln179_1_fu_298_p3(3 downto 2);
    r_V_52_fu_482_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_465_p1),to_integer(unsigned('0' & zext_ln1488_fu_472_p1(31-1 downto 0)))));
    r_V_fu_476_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_465_p1),to_integer(unsigned('0' & zext_ln1488_fu_472_p1(31-1 downto 0)))));
    result_V_9_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_reg_667));
    result_V_fu_522_p3 <= 
        result_V_9_fu_517_p2 when (p_Result_s_reg_647_pp0_iter14_reg(0) = '1') else 
        val_reg_667;
    select_ln179_1_fu_298_p3 <= 
        add_ln179_fu_278_p2 when (icmp_ln180_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_i9_load;
    select_ln179_fu_290_p3 <= 
        ap_const_lv7_0 when (icmp_ln180_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_j9_load;
        sext_ln1488_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_662),32));

        sext_ln1512_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_438_p2),9));

        sext_ln184_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v102_V_reg_612),32));

    sub_ln1512_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_406_p4));
    tmp_25_fu_500_p4 <= r_V_52_fu_482_p2(31 downto 24);
    tmp_fu_488_p3 <= r_V_fu_476_p2(24 downto 24);
    tmp_s_fu_320_p3 <= (p_cast21_mid2_v_fu_310_p4 & ap_const_lv6_0);
    trunc_ln179_fu_306_p1 <= select_ln179_1_fu_298_p3(2 - 1 downto 0);
    ush_fu_448_p3 <= 
        sext_ln1512_fu_444_p1 when (isNeg_fu_430_p3(0) = '1') else 
        add_ln346_fu_424_p2;
    v125_1_address0 <= v125_1_addr_reg_597_pp0_iter14_reg;

    v125_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            v125_1_ce0 <= ap_const_logic_1;
        else 
            v125_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_1_d0 <= result_V_fu_522_p3;

    v125_1_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln179_reg_562_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln179_reg_562_pp0_iter14_reg = ap_const_lv2_1))) then 
            v125_1_we0 <= ap_const_logic_1;
        else 
            v125_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_2_address0 <= v125_2_addr_reg_602_pp0_iter14_reg;

    v125_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            v125_2_ce0 <= ap_const_logic_1;
        else 
            v125_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_2_d0 <= result_V_fu_522_p3;

    v125_2_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln179_reg_562_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln179_reg_562_pp0_iter14_reg = ap_const_lv2_2))) then 
            v125_2_we0 <= ap_const_logic_1;
        else 
            v125_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_3_address0 <= v125_3_addr_reg_607_pp0_iter14_reg;

    v125_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            v125_3_ce0 <= ap_const_logic_1;
        else 
            v125_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_3_d0 <= result_V_fu_522_p3;

    v125_3_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln179_reg_562_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln179_reg_562_pp0_iter14_reg = ap_const_lv2_3))) then 
            v125_3_we0 <= ap_const_logic_1;
        else 
            v125_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_address0 <= v125_addr_reg_592_pp0_iter14_reg;

    v125_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            v125_ce0 <= ap_const_logic_1;
        else 
            v125_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_d0 <= result_V_fu_522_p3;

    v125_we0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, trunc_ln179_reg_562_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (trunc_ln179_reg_562_pp0_iter14_reg = ap_const_lv2_0))) then 
            v125_we0 <= ap_const_logic_1;
        else 
            v125_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v346_address0 <= zext_ln179_fu_387_p1(4 - 1 downto 0);

    v346_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            v346_ce0 <= ap_const_logic_1;
        else 
            v346_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    val_fu_510_p3 <= 
        zext_ln818_1_fu_496_p1 when (isNeg_reg_657(0) = '1') else 
        tmp_25_fu_500_p4;
    xs_exp_V_fu_406_p4 <= data_V_fu_395_p1(30 downto 23);
    zext_ln1488_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_469_p1),55));
    zext_ln15_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_456_p4),55));
    zext_ln179_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_1_reg_557_pp0_iter6_reg),64));
    zext_ln182_1_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_reg_567),64));
    zext_ln182_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln179_fu_290_p3),8));
    zext_ln346_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_406_p4),9));
    zext_ln818_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_488_p3),8));
end behav;
