//=============================================================================
// Auto generated by Allo
//=============================================================================

// OpenCL utility layer include
#include "xcl2.hpp"
#include <algorithm>
#include <cstdio>
#include <random>
#include <vector>
#include <iomanip>

typedef struct{
  int8_t data[inp_num];
} io_pack_int8;

typedef struct{
  float data[inp_num];
} io_pack_float;

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cout << "Usage: " << argv[0] << " <XCLBIN File>" << std::endl;
        return EXIT_FAILURE;
    }

    std::string binaryFile = argv[1];
    cl_int err;
    cl::CommandQueue q;
    cl::Context context;
    cl::Program program;
    cl::Kernel krnl_Bert_layer;
    // Allocate Memory in Host Memory
    // When creating a buffer with user pointer (CL_MEM_USE_HOST_PTR), under the
    // hood user ptr is used if it is properly aligned. when not aligned, runtime had no choice
    // but to create its own host side buffer. So it is recommended to use this allocator if
    // user wish to create buffer using CL_MEM_USE_HOST_PTR to align user buffer to page
    // boundary. It will ensure that user buffer is used when user create Buffer/Mem object with
    // CL_MEM_USE_HOST_PTR
    size_t size_bytes_in0 = sizeof(io_pack_float) * 768;
    std::vector<io_pack_float, aligned_allocator<io_pack_float> > source_in0(768);
    size_t size_bytes_out0 = sizeof(io_pack_float) * 768;
    std::vector<io_pack_float, aligned_allocator<io_pack_float> > source_out0(768);
    size_t size_bytes_buf1 = sizeof(io_pack_int8) * 18432;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf1(18432);
    size_t size_bytes_buf3 = sizeof(io_pack_int8) * 18432;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf3(18432);
    size_t size_bytes_buf5 = sizeof(io_pack_int8) * 18432;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf5(18432);
    size_t size_bytes_buf7 = sizeof(io_pack_int8) * 18432;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf7(18432);
    size_t size_bytes_buf9 = sizeof(io_pack_int8) * 73728;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf9(73728);
    size_t size_bytes_buf11 = sizeof(io_pack_int8) * 73728;
    std::vector<io_pack_int8, aligned_allocator<io_pack_int8> > source_buf11(73728);

    // OPENCL HOST CODE AREA START
    // get_xil_devices() is a utility API which will find the xilinx
    // platforms and will return list of devices connected to Xilinx platform
    auto devices = xcl::get_xil_devices();
    // read_binary_file() is a utility API which will load the binaryFile
    // and will return the pointer to file buffer.
    auto fileBuf = xcl::read_binary_file(binaryFile);
    cl::Program::Binaries bins{{fileBuf.data(), fileBuf.size()}};
    bool valid_device = false;
    for (unsigned int i = 0; i < devices.size(); i++) {
        auto device = devices[i];
        // Creating Context and Command Queue for selected Device
        OCL_CHECK(err, context = cl::Context(device, nullptr, nullptr, nullptr, &err));
        OCL_CHECK(err, q = cl::CommandQueue(context, device, CL_QUEUE_PROFILING_ENABLE, &err));
        std::cout << "Trying to program device[" << i << "]: " << device.getInfo<CL_DEVICE_NAME>() << std::endl;
        cl::Program program(context, {device}, bins, nullptr, &err);
        if (err != CL_SUCCESS) {
            std::cout << "Failed to program device[" << i << "] with xclbin file!\n";
        } else {
            std::cout << "Device[" << i << "]: program successful!\n";
            OCL_CHECK(err, krnl_Bert_layer = cl::Kernel(program, "Bert_layer", &err));
            valid_device = true;
            break; // we break because we found a valid device
        }
    }
    if (!valid_device) {
        std::cout << "Failed to program any device found, exit!\n";
        exit(EXIT_FAILURE);
    }
    // Allocate Buffer in Global Memory
    // Buffers are allocated using CL_MEM_USE_HOST_PTR for efficient memory and
    // Device-to-host communication
    OCL_CHECK(err, cl::Buffer buffer_in0(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_in0, source_in0.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf1(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf1, source_buf1.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf3(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf3, source_buf3.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf5(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf5, source_buf5.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf7(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf7, source_buf7.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf9(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf9, source_buf9.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_buf11(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, size_bytes_buf11, source_buf11.data(), &err));
    OCL_CHECK(err, cl::Buffer buffer_out0(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, size_bytes_out0, source_out0.data(), &err));

    OCL_CHECK(err, err = krnl_Bert_layer.setArg(0, buffer_in0));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(1, buffer_buf1));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(2, buffer_buf3));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(3, buffer_buf5));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(4, buffer_buf7));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(5, buffer_buf9));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(6, buffer_buf11));
    OCL_CHECK(err, err = krnl_Bert_layer.setArg(7, buffer_out0));
    // Copy input data to device global memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_in0, buffer_buf1, buffer_buf3, buffer_buf5, buffer_buf7, buffer_buf9, buffer_buf11}, 0 /* 0 means from host*/));

    cl::Event event;
    uint64_t nstimestart, nstimeend;
    std::cout << "|-------------------------+-------------------------|\n"
              << "| Kernel                  |    Wall-Clock Time (ns) |\n"
              << "|-------------------------+-------------------------|\n";

    // Launch the Kernel
    OCL_CHECK(err, err = q.enqueueTask(krnl_Bert_layer, nullptr, &event));

    // Copy Result from Device Global Memory to Host Local Memory
    OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_out0}, CL_MIGRATE_MEM_OBJECT_HOST));
    q.finish();
    // OpenCL Host Code Ends

    // Get the execution time
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_START, &nstimestart));
    OCL_CHECK(err, err = event.getProfilingInfo<uint64_t>(CL_PROFILING_COMMAND_END, &nstimeend));
    auto exe_time = nstimeend - nstimestart;
    std::cout << "| " << std::left << std::setw(24) << "Bert_layer: "
              << "|" << std::right << std::setw(24) << exe_time << " |\n";
    std::cout << "|-------------------------+-------------------------|\n";
    std::cout << "Note: Wall Clock Time is meaningful for real hardware execution "
              << "only, not for emulation.\n";
    std::cout << "Please refer to profile summary for kernel execution time for "
              << "hardware emulation.\n";
    std::cout << "TEST PASSED\n\n";
    return EXIT_SUCCESS;
}
