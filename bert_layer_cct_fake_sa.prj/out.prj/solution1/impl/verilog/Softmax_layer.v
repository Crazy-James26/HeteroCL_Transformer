// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Softmax_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v38_address0,
        v38_ce0,
        v38_we0,
        v38_d0,
        v38_q0,
        v39_address0,
        v39_ce0,
        v39_we0,
        v39_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_pp0_stage1 = 11'd8;
parameter    ap_ST_fsm_pp0_stage2 = 11'd16;
parameter    ap_ST_fsm_pp0_stage3 = 11'd32;
parameter    ap_ST_fsm_pp0_stage4 = 11'd64;
parameter    ap_ST_fsm_pp0_stage5 = 11'd128;
parameter    ap_ST_fsm_state20 = 11'd256;
parameter    ap_ST_fsm_pp1_stage0 = 11'd512;
parameter    ap_ST_fsm_state41 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v38_address0;
output   v38_ce0;
output   v38_we0;
output  [31:0] v38_d0;
input  [31:0] v38_q0;
output  [7:0] v39_address0;
output   v39_ce0;
output   v39_we0;
output  [31:0] v39_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] v38_address0;
reg v38_ce0;
reg v38_we0;
reg v39_ce0;
reg v39_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten_reg_134;
reg   [3:0] i3_0_reg_145;
reg   [3:0] j2_0_reg_156;
reg   [7:0] indvar_flatten14_reg_167;
reg   [3:0] i4_0_reg_178;
reg   [3:0] j3_0_reg_189;
reg   [31:0] reg_216;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state17_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln101_reg_437;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_state23_pp1_stage0_iter2;
wire    ap_block_state24_pp1_stage0_iter3;
wire    ap_block_state25_pp1_stage0_iter4;
wire    ap_block_state26_pp1_stage0_iter5;
wire    ap_block_state27_pp1_stage0_iter6;
wire    ap_block_state28_pp1_stage0_iter7;
wire    ap_block_state29_pp1_stage0_iter8;
wire    ap_block_state30_pp1_stage0_iter9;
wire    ap_block_state31_pp1_stage0_iter10;
wire    ap_block_state32_pp1_stage0_iter11;
wire    ap_block_state33_pp1_stage0_iter12;
wire    ap_block_state34_pp1_stage0_iter13;
wire    ap_block_state35_pp1_stage0_iter14;
wire    ap_block_state36_pp1_stage0_iter15;
wire    ap_block_state37_pp1_stage0_iter16;
wire    ap_block_state38_pp1_stage0_iter17;
wire    ap_block_state39_pp1_stage0_iter18;
wire    ap_block_state40_pp1_stage0_iter19;
wire    ap_block_pp1_stage0_11001;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln113_reg_481;
reg   [0:0] icmp_ln113_reg_481_pp1_iter1_reg;
wire   [31:0] inp_sumRow_q0;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln101_reg_437_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln113_reg_481_pp1_iter2_reg;
wire   [0:0] icmp_ln98_fu_228_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] v41_fu_234_p2;
wire   [0:0] icmp_ln101_fu_245_p2;
reg   [0:0] icmp_ln101_reg_437_pp0_iter2_reg;
wire   [7:0] add_ln101_fu_251_p2;
reg   [7:0] add_ln101_reg_441;
wire   [3:0] select_ln104_fu_269_p3;
reg   [3:0] select_ln104_reg_446;
wire   [3:0] select_ln104_1_fu_277_p3;
reg   [3:0] select_ln104_1_reg_452;
reg   [3:0] select_ln104_1_reg_452_pp0_iter1_reg;
reg   [7:0] v38_addr_reg_460;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state16_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] v38_addr_reg_460_pp0_iter1_reg;
wire   [3:0] j2_fu_327_p2;
reg   [3:0] j2_reg_465;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_state14_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] v45_reg_470;
reg   [3:0] inp_sumRow_addr_1_reg_476;
wire   [0:0] icmp_ln113_fu_336_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln113_reg_481_pp1_iter3_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter4_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter5_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter6_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter7_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter8_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter9_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter10_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter11_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter12_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter13_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter14_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter15_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter16_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter17_reg;
reg   [0:0] icmp_ln113_reg_481_pp1_iter18_reg;
wire   [7:0] add_ln113_fu_342_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] select_ln116_fu_360_p3;
reg   [3:0] select_ln116_reg_490;
wire   [3:0] select_ln116_2_fu_368_p3;
reg   [3:0] select_ln116_2_reg_495;
reg   [3:0] select_ln116_2_reg_495_pp1_iter1_reg;
wire   [3:0] j3_fu_376_p2;
wire   [63:0] zext_ln116_4_fu_419_p1;
reg   [63:0] zext_ln116_4_reg_508;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter2_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter3_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter4_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter5_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter6_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter7_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter8_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter9_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter10_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter11_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter12_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter13_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter14_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter15_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter16_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter17_reg;
reg   [63:0] zext_ln116_4_reg_508_pp1_iter18_reg;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] v53_reg_523;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state19_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_CS_fsm_state20;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg   [3:0] inp_sumRow_address0;
reg    inp_sumRow_ce0;
reg    inp_sumRow_we0;
reg   [31:0] inp_sumRow_d0;
reg   [3:0] v41_0_reg_123;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_138_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_i3_0_phi_fu_149_p4;
reg   [3:0] ap_phi_mux_j2_0_phi_fu_160_p4;
reg   [3:0] ap_phi_mux_i4_0_phi_fu_182_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln99_fu_240_p1;
wire  signed [63:0] sext_ln104_fu_322_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln104_fu_332_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln116_fu_424_p1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_200_p2;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln102_fu_263_p2;
wire   [3:0] i3_fu_257_p2;
wire   [7:0] tmp_fu_285_p3;
wire   [5:0] tmp_s_fu_296_p3;
wire   [8:0] zext_ln104_1_fu_292_p1;
wire   [8:0] zext_ln104_2_fu_303_p1;
wire   [8:0] sub_ln104_fu_307_p2;
wire   [8:0] zext_ln104_3_fu_313_p1;
wire   [8:0] add_ln104_fu_316_p2;
wire   [0:0] icmp_ln114_fu_354_p2;
wire   [3:0] i4_fu_348_p2;
wire   [7:0] tmp_27_fu_382_p3;
wire   [5:0] tmp_28_fu_393_p3;
wire   [8:0] zext_ln116_1_fu_389_p1;
wire   [8:0] zext_ln116_2_fu_400_p1;
wire   [8:0] zext_ln116_3_fu_410_p1;
wire   [8:0] sub_ln116_fu_404_p2;
wire   [8:0] add_ln116_fu_413_p2;
wire    ap_CS_fsm_state41;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state18_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
end

Softmax_layer_inpfYi #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
inp_sumRow_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inp_sumRow_address0),
    .ce0(inp_sumRow_ce0),
    .we0(inp_sumRow_we0),
    .d0(inp_sumRow_d0),
    .q0(inp_sumRow_q0)
);

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U231(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inp_sumRow_q0),
    .din1(v45_reg_470),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

Bert_layer_fdiv_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3g8j_U232(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_216),
    .din1(inp_sumRow_q0),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

Bert_layer_fexp_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fexp_3hbi_U233(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_216),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state21)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
        i3_0_reg_145 <= 4'd0;
    end else if (((icmp_ln101_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i3_0_reg_145 <= select_ln104_1_reg_452;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i4_0_reg_178 <= 4'd0;
    end else if (((icmp_ln113_reg_481 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i4_0_reg_178 <= select_ln116_2_reg_495;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten14_reg_167 <= 8'd0;
    end else if (((icmp_ln113_fu_336_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten14_reg_167 <= add_ln113_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
        indvar_flatten_reg_134 <= 8'd0;
    end else if (((icmp_ln101_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_134 <= add_ln101_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
        j2_0_reg_156 <= 4'd0;
    end else if (((icmp_ln101_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j2_0_reg_156 <= j2_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j3_0_reg_189 <= 4'd0;
    end else if (((icmp_ln113_fu_336_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j3_0_reg_189 <= j3_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v41_0_reg_123 <= v41_fu_234_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v41_0_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln101_reg_441 <= add_ln101_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln101_reg_437 <= icmp_ln101_fu_245_p2;
        icmp_ln101_reg_437_pp0_iter1_reg <= icmp_ln101_reg_437;
        icmp_ln101_reg_437_pp0_iter2_reg <= icmp_ln101_reg_437_pp0_iter1_reg;
        select_ln104_1_reg_452_pp0_iter1_reg <= select_ln104_1_reg_452;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln113_reg_481 <= icmp_ln113_fu_336_p2;
        icmp_ln113_reg_481_pp1_iter1_reg <= icmp_ln113_reg_481;
        select_ln116_2_reg_495_pp1_iter1_reg <= select_ln116_2_reg_495;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln113_reg_481_pp1_iter10_reg <= icmp_ln113_reg_481_pp1_iter9_reg;
        icmp_ln113_reg_481_pp1_iter11_reg <= icmp_ln113_reg_481_pp1_iter10_reg;
        icmp_ln113_reg_481_pp1_iter12_reg <= icmp_ln113_reg_481_pp1_iter11_reg;
        icmp_ln113_reg_481_pp1_iter13_reg <= icmp_ln113_reg_481_pp1_iter12_reg;
        icmp_ln113_reg_481_pp1_iter14_reg <= icmp_ln113_reg_481_pp1_iter13_reg;
        icmp_ln113_reg_481_pp1_iter15_reg <= icmp_ln113_reg_481_pp1_iter14_reg;
        icmp_ln113_reg_481_pp1_iter16_reg <= icmp_ln113_reg_481_pp1_iter15_reg;
        icmp_ln113_reg_481_pp1_iter17_reg <= icmp_ln113_reg_481_pp1_iter16_reg;
        icmp_ln113_reg_481_pp1_iter18_reg <= icmp_ln113_reg_481_pp1_iter17_reg;
        icmp_ln113_reg_481_pp1_iter2_reg <= icmp_ln113_reg_481_pp1_iter1_reg;
        icmp_ln113_reg_481_pp1_iter3_reg <= icmp_ln113_reg_481_pp1_iter2_reg;
        icmp_ln113_reg_481_pp1_iter4_reg <= icmp_ln113_reg_481_pp1_iter3_reg;
        icmp_ln113_reg_481_pp1_iter5_reg <= icmp_ln113_reg_481_pp1_iter4_reg;
        icmp_ln113_reg_481_pp1_iter6_reg <= icmp_ln113_reg_481_pp1_iter5_reg;
        icmp_ln113_reg_481_pp1_iter7_reg <= icmp_ln113_reg_481_pp1_iter6_reg;
        icmp_ln113_reg_481_pp1_iter8_reg <= icmp_ln113_reg_481_pp1_iter7_reg;
        icmp_ln113_reg_481_pp1_iter9_reg <= icmp_ln113_reg_481_pp1_iter8_reg;
        zext_ln116_4_reg_508_pp1_iter10_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter9_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter11_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter10_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter12_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter11_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter13_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter12_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter14_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter13_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter15_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter14_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter16_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter15_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter17_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter16_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter18_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter17_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter2_reg[8 : 0] <= zext_ln116_4_reg_508[8 : 0];
        zext_ln116_4_reg_508_pp1_iter3_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter2_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter4_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter3_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter5_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter4_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter6_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter5_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter7_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter6_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter8_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter7_reg[8 : 0];
        zext_ln116_4_reg_508_pp1_iter9_reg[8 : 0] <= zext_ln116_4_reg_508_pp1_iter8_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_437_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        inp_sumRow_addr_1_reg_476 <= zext_ln104_fu_332_p1;
        v45_reg_470 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        j2_reg_465 <= j2_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln113_reg_481_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        reg_216 <= v38_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln104_1_reg_452 <= select_ln104_1_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln104_reg_446 <= select_ln104_fu_269_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_336_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln116_2_reg_495 <= select_ln116_2_fu_368_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln116_reg_490 <= select_ln116_fu_360_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v38_addr_reg_460 <= sext_ln104_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v38_addr_reg_460_pp0_iter1_reg <= v38_addr_reg_460;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_reg_481_pp1_iter17_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v53_reg_523 <= grp_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln116_4_reg_508[8 : 0] <= zext_ln116_4_fu_419_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln101_fu_245_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln113_fu_336_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i3_0_phi_fu_149_p4 = select_ln104_1_reg_452;
    end else begin
        ap_phi_mux_i3_0_phi_fu_149_p4 = i3_0_reg_145;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_481 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i4_0_phi_fu_182_p4 = select_ln116_2_reg_495;
    end else begin
        ap_phi_mux_i4_0_phi_fu_182_p4 = i4_0_reg_178;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_138_p4 = add_ln101_reg_441;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_138_p4 = indvar_flatten_reg_134;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_437 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j2_0_phi_fu_160_p4 = j2_reg_465;
    end else begin
        ap_phi_mux_j2_0_phi_fu_160_p4 = j2_0_reg_156;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        inp_sumRow_address0 = zext_ln116_fu_424_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp_sumRow_address0 = inp_sumRow_addr_1_reg_476;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        inp_sumRow_address0 = zext_ln104_fu_332_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_address0 = zext_ln99_fu_240_p1;
    end else begin
        inp_sumRow_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        inp_sumRow_ce0 = 1'b1;
    end else begin
        inp_sumRow_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        inp_sumRow_d0 = grp_fu_200_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_d0 = 32'd0;
    end else begin
        inp_sumRow_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln98_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln101_reg_437_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        inp_sumRow_we0 = 1'b1;
    end else begin
        inp_sumRow_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        v38_address0 = zext_ln116_4_fu_419_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v38_address0 = v38_addr_reg_460_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v38_address0 = sext_ln104_fu_322_p1;
    end else begin
        v38_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        v38_ce0 = 1'b1;
    end else begin
        v38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_reg_437_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v38_we0 = 1'b1;
    end else begin
        v38_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter19 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v39_ce0 = 1'b1;
    end else begin
        v39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_481_pp1_iter18_reg == 1'd0) & (ap_enable_reg_pp1_iter19 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        v39_we0 = 1'b1;
    end else begin
        v39_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln98_fu_228_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_fu_245_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln113_fu_336_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter18 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter19 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter18 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter19 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln113_fu_336_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_fu_251_p2 = (ap_phi_mux_indvar_flatten_phi_fu_138_p4 + 8'd1);

assign add_ln104_fu_316_p2 = (sub_ln104_fu_307_p2 + zext_ln104_3_fu_313_p1);

assign add_ln113_fu_342_p2 = (indvar_flatten14_reg_167 + 8'd1);

assign add_ln116_fu_413_p2 = (zext_ln116_3_fu_410_p1 + sub_ln116_fu_404_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd10];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i3_fu_257_p2 = (ap_phi_mux_i3_0_phi_fu_149_p4 + 4'd1);

assign i4_fu_348_p2 = (ap_phi_mux_i4_0_phi_fu_182_p4 + 4'd1);

assign icmp_ln101_fu_245_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_138_p4 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_263_p2 = ((ap_phi_mux_j2_0_phi_fu_160_p4 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_336_p2 = ((indvar_flatten14_reg_167 == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_354_p2 = ((j3_0_reg_189 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_228_p2 = ((v41_0_reg_123 == 4'd12) ? 1'b1 : 1'b0);

assign j2_fu_327_p2 = (select_ln104_reg_446 + 4'd1);

assign j3_fu_376_p2 = (select_ln116_fu_360_p3 + 4'd1);

assign select_ln104_1_fu_277_p3 = ((icmp_ln102_fu_263_p2[0:0] === 1'b1) ? i3_fu_257_p2 : ap_phi_mux_i3_0_phi_fu_149_p4);

assign select_ln104_fu_269_p3 = ((icmp_ln102_fu_263_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j2_0_phi_fu_160_p4);

assign select_ln116_2_fu_368_p3 = ((icmp_ln114_fu_354_p2[0:0] === 1'b1) ? i4_fu_348_p2 : ap_phi_mux_i4_0_phi_fu_182_p4);

assign select_ln116_fu_360_p3 = ((icmp_ln114_fu_354_p2[0:0] === 1'b1) ? 4'd0 : j3_0_reg_189);

assign sext_ln104_fu_322_p1 = $signed(add_ln104_fu_316_p2);

assign sub_ln104_fu_307_p2 = (zext_ln104_1_fu_292_p1 - zext_ln104_2_fu_303_p1);

assign sub_ln116_fu_404_p2 = (zext_ln116_1_fu_389_p1 - zext_ln116_2_fu_400_p1);

assign tmp_27_fu_382_p3 = {{select_ln116_2_reg_495}, {4'd0}};

assign tmp_28_fu_393_p3 = {{select_ln116_2_reg_495}, {2'd0}};

assign tmp_fu_285_p3 = {{select_ln104_1_reg_452}, {4'd0}};

assign tmp_s_fu_296_p3 = {{select_ln104_1_reg_452}, {2'd0}};

assign v38_d0 = v45_reg_470;

assign v39_address0 = zext_ln116_4_reg_508_pp1_iter18_reg;

assign v39_d0 = v53_reg_523;

assign v41_fu_234_p2 = (v41_0_reg_123 + 4'd1);

assign zext_ln104_1_fu_292_p1 = tmp_fu_285_p3;

assign zext_ln104_2_fu_303_p1 = tmp_s_fu_296_p3;

assign zext_ln104_3_fu_313_p1 = select_ln104_reg_446;

assign zext_ln104_fu_332_p1 = select_ln104_1_reg_452_pp0_iter1_reg;

assign zext_ln116_1_fu_389_p1 = tmp_27_fu_382_p3;

assign zext_ln116_2_fu_400_p1 = tmp_28_fu_393_p3;

assign zext_ln116_3_fu_410_p1 = select_ln116_reg_490;

assign zext_ln116_4_fu_419_p1 = add_ln116_fu_413_p2;

assign zext_ln116_fu_424_p1 = select_ln116_2_reg_495_pp1_iter1_reg;

assign zext_ln99_fu_240_p1 = v41_0_reg_123;

always @ (posedge ap_clk) begin
    zext_ln116_4_reg_508[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter4_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter5_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter6_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter7_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter8_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter9_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter10_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter11_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter12_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter13_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter14_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter15_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter16_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter17_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln116_4_reg_508_pp1_iter18_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //Softmax_layer
