// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exp_generic_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] table_exp_Z1_array_s_address0;
reg    table_exp_Z1_array_s_ce0;
wire   [57:0] table_exp_Z1_array_s_q0;
wire   [7:0] table_f_Z3_array_V_address0;
reg    table_f_Z3_array_V_ce0;
wire   [25:0] table_f_Z3_array_V_q0;
wire   [7:0] table_f_Z3_array_V_address1;
reg    table_f_Z3_array_V_ce1;
wire   [25:0] table_f_Z3_array_V_q1;
wire   [7:0] table_f_Z2_array_V_address0;
reg    table_f_Z2_array_V_ce0;
wire   [41:0] table_f_Z2_array_V_q0;
wire   [0:0] p_Result_64_fu_265_p3;
reg   [0:0] p_Result_64_reg_1127;
reg   [0:0] p_Result_64_reg_1127_pp0_iter1_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter2_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter3_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter4_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter5_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter6_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter7_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter8_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter9_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter10_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter11_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter12_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter13_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter14_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter15_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter16_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter17_reg;
reg   [0:0] p_Result_64_reg_1127_pp0_iter18_reg;
reg   [10:0] tmp_V_reg_1132;
wire   [0:0] icmp_ln837_fu_287_p2;
reg   [0:0] icmp_ln837_reg_1139;
wire   [0:0] icmp_ln833_6_fu_293_p2;
reg   [0:0] icmp_ln833_6_reg_1144;
wire   [53:0] select_ln253_fu_313_p3;
reg   [53:0] select_ln253_reg_1149;
reg   [53:0] select_ln253_reg_1149_pp0_iter1_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter2_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter3_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter4_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter5_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter6_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter7_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter8_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter9_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter10_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter11_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter12_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter13_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter14_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter15_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter16_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter17_reg;
reg   [53:0] select_ln253_reg_1149_pp0_iter18_reg;
wire   [0:0] and_ln209_fu_326_p2;
reg   [0:0] and_ln209_reg_1155;
reg   [0:0] and_ln209_reg_1155_pp0_iter2_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter3_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter4_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter5_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter6_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter7_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter8_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter9_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter10_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter11_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter12_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter13_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter14_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter15_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter16_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter17_reg;
reg   [0:0] and_ln209_reg_1155_pp0_iter18_reg;
wire   [0:0] and_ln18_fu_331_p2;
reg   [0:0] and_ln18_reg_1162;
reg   [0:0] and_ln18_reg_1162_pp0_iter2_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter3_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter4_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter5_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter6_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter7_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter8_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter9_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter10_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter11_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter12_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter13_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter14_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter15_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter16_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter17_reg;
reg   [0:0] and_ln18_reg_1162_pp0_iter18_reg;
wire  signed [70:0] sext_ln682_fu_352_p1;
reg  signed [70:0] sext_ln682_reg_1168;
wire   [0:0] isNeg_fu_356_p3;
reg   [0:0] isNeg_reg_1173;
wire  signed [31:0] sext_ln1311_1_fu_381_p1;
reg  signed [31:0] sext_ln1311_1_reg_1178;
wire  signed [70:0] r_V_49_fu_409_p3;
reg  signed [70:0] r_V_49_reg_1183;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter2_reg;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter3_reg;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter4_reg;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter5_reg;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter6_reg;
reg  signed [70:0] r_V_49_reg_1183_pp0_iter7_reg;
reg   [63:0] m_fix_l_V_reg_1188;
reg  signed [15:0] m_fix_hi_V_reg_1194;
reg   [0:0] p_Result_65_reg_1199;
wire   [0:0] icmp_ln338_fu_445_p2;
reg   [0:0] icmp_ln338_reg_1204;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter2_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter3_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter4_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter5_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter6_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter7_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter8_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter9_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter10_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter11_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter12_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter13_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter14_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter15_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter16_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter17_reg;
reg   [0:0] icmp_ln338_reg_1204_pp0_iter18_reg;
wire  signed [12:0] r_exp_V_6_fu_517_p3;
reg  signed [12:0] r_exp_V_6_reg_1212;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter3_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter4_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter5_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter6_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter7_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter8_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter9_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter10_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter11_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter12_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter13_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter14_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter15_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter16_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter17_reg;
reg  signed [12:0] r_exp_V_6_reg_1212_pp0_iter18_reg;
wire   [0:0] icmp_ln338_1_fu_540_p2;
reg   [0:0] icmp_ln338_1_reg_1219;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter3_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter4_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter5_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter6_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter7_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter8_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter9_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter10_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter11_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter12_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter13_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter14_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter15_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter16_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter17_reg;
reg   [0:0] icmp_ln338_1_reg_1219_pp0_iter18_reg;
reg   [70:0] tmp_s_reg_1229;
reg   [7:0] m_diff_hi_V_reg_1234;
reg   [7:0] m_diff_hi_V_reg_1234_pp0_iter9_reg;
reg   [7:0] m_diff_hi_V_reg_1234_pp0_iter10_reg;
reg   [7:0] m_diff_hi_V_reg_1234_pp0_iter11_reg;
reg   [7:0] m_diff_hi_V_reg_1234_pp0_iter12_reg;
reg   [7:0] m_diff_hi_V_reg_1234_pp0_iter13_reg;
reg   [7:0] Z2_V_reg_1239;
reg   [7:0] Z2_V_reg_1239_pp0_iter9_reg;
reg   [7:0] Z2_V_reg_1239_pp0_iter10_reg;
reg   [7:0] Z2_V_reg_1239_pp0_iter11_reg;
reg   [7:0] Z2_V_reg_1239_pp0_iter12_reg;
reg   [7:0] Z2_V_reg_1239_pp0_iter13_reg;
reg   [7:0] Z2_V_reg_1239_pp0_iter14_reg;
wire   [7:0] Z3_V_fu_604_p4;
reg   [7:0] Z3_V_reg_1246;
reg   [7:0] Z3_V_reg_1246_pp0_iter9_reg;
wire   [34:0] Z4_V_fu_614_p1;
reg   [34:0] Z4_V_reg_1251;
wire   [35:0] ret_V_26_fu_655_p2;
reg   [35:0] ret_V_26_reg_1266;
reg   [35:0] ret_V_26_reg_1266_pp0_iter10_reg;
reg   [35:0] ret_V_26_reg_1266_pp0_iter11_reg;
reg   [25:0] p_Val2_112_reg_1272;
wire   [42:0] tmp_i_fu_661_p4;
reg   [42:0] tmp_i_reg_1277;
reg   [42:0] tmp_i_reg_1277_pp0_iter11_reg;
reg   [19:0] tmp_12_reg_1292;
wire   [43:0] exp_Z2P_m_1_V_fu_711_p2;
reg   [43:0] exp_Z2P_m_1_V_reg_1302;
reg   [43:0] exp_Z2P_m_1_V_reg_1302_pp0_iter13_reg;
reg   [43:0] exp_Z2P_m_1_V_reg_1302_pp0_iter14_reg;
reg   [39:0] tmp_13_reg_1308;
reg   [39:0] tmp_13_reg_1308_pp0_iter13_reg;
reg   [39:0] tmp_13_reg_1308_pp0_iter14_reg;
reg   [35:0] tmp_14_reg_1329;
reg   [57:0] exp_Z1_V_reg_1334;
reg   [57:0] exp_Z1_V_reg_1334_pp0_iter16_reg;
reg   [57:0] exp_Z1_V_reg_1334_pp0_iter17_reg;
reg   [49:0] exp_Z1P_m_1_V_reg_1339;
reg   [49:0] exp_Z1_hi_V_reg_1344;
wire   [99:0] grp_fu_820_p2;
reg   [99:0] r_V_54_reg_1359;
reg   [99:0] r_V_54_reg_1359_pp0_iter18_reg;
wire   [58:0] ret_V_28_fu_829_p2;
reg   [58:0] ret_V_28_reg_1365;
reg   [0:0] tmp_24_reg_1370;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln498_10_fu_628_p1;
wire   [63:0] zext_ln498_11_fu_633_p1;
wire   [63:0] zext_ln498_12_fu_692_p1;
wire   [63:0] zext_ln498_fu_748_p1;
wire   [63:0] p_Val2_s_fu_261_p1;
wire   [51:0] tmp_V_7_fu_283_p1;
wire   [53:0] p_Result_s_fu_299_p3;
wire   [53:0] e_frac_V_fu_307_p2;
wire   [0:0] icmp_ln833_fu_321_p2;
wire   [11:0] zext_ln502_fu_336_p1;
wire  signed [60:0] m_frac_l_V_fu_345_p3;
wire   [11:0] m_exp_fu_339_p2;
wire   [10:0] sub_ln1311_fu_364_p2;
wire  signed [11:0] sext_ln1311_fu_369_p1;
wire   [11:0] m_exp_2_fu_373_p3;
wire   [60:0] zext_ln1285_fu_389_p1;
wire   [60:0] r_V_fu_393_p2;
wire   [70:0] zext_ln1287_fu_385_p1;
wire  signed [70:0] sext_ln1287_fu_399_p1;
wire   [70:0] r_V_37_fu_403_p2;
wire   [63:0] zext_ln1253_fu_451_p1;
wire  signed [18:0] rhs_V_fu_467_p3;
wire  signed [30:0] grp_fu_1116_p3;
wire   [17:0] trunc_ln805_fu_494_p1;
wire   [12:0] tmp_6_fu_478_p4;
wire   [0:0] icmp_ln805_fu_497_p2;
wire   [12:0] add_ln805_fu_503_p2;
wire   [0:0] p_Result_56_fu_487_p3;
wire   [12:0] select_ln805_fu_509_p3;
wire   [63:0] r_V_39_fu_454_p2;
wire   [63:0] r_V_40_fu_459_p2;
wire   [63:0] select_ln1322_fu_525_p3;
wire   [70:0] shl_ln_fu_532_p3;
wire   [71:0] grp_fu_548_p0;
wire   [83:0] grp_fu_548_p2;
wire   [71:0] rhs_V_16_fu_567_p3;
wire  signed [72:0] lhs_V_fu_564_p1;
wire  signed [72:0] sext_ln682_2_fu_574_p1;
wire   [72:0] ret_V_25_fu_578_p2;
wire   [7:0] Z4_ind_V_fu_618_p4;
wire   [9:0] f_Z4_V_fu_638_p4;
wire   [35:0] rhs_V_17_fu_651_p1;
wire   [35:0] lhs_V_19_fu_648_p1;
wire   [35:0] grp_fu_676_p0;
wire   [42:0] grp_fu_676_p1;
wire   [78:0] grp_fu_676_p2;
wire   [35:0] zext_ln657_fu_699_p1;
wire   [35:0] add_ln657_fu_702_p2;
wire   [43:0] ret_V_27_fu_696_p1;
wire   [43:0] zext_ln657_14_fu_707_p1;
wire   [48:0] lshr_ln662_s_fu_727_p4;
wire   [43:0] grp_fu_742_p0;
wire   [48:0] grp_fu_742_p1;
wire   [92:0] grp_fu_742_p2;
wire   [50:0] lhs_V_20_fu_762_p5;
wire   [43:0] zext_ln657_15_fu_776_p1;
wire   [43:0] add_ln657_12_fu_779_p2;
wire   [51:0] zext_ln682_fu_772_p1;
wire   [51:0] zext_ln657_16_fu_784_p1;
wire   [51:0] exp_Z1P_m_1_l_V_fu_788_p2;
wire   [49:0] grp_fu_820_p0;
wire   [49:0] grp_fu_820_p1;
wire   [58:0] lhs_V_21_fu_826_p1;
wire   [57:0] trunc_ln1146_fu_838_p1;
wire   [106:0] trunc_ln_fu_842_p3;
wire   [106:0] zext_ln1146_fu_835_p1;
wire   [106:0] add_ln1146_2_fu_850_p2;
wire   [0:0] xor_ln936_fu_864_p2;
wire   [0:0] x_is_pinf_fu_869_p2;
wire   [0:0] or_ln214_fu_874_p2;
wire   [63:0] select_ln214_fu_879_p3;
wire   [107:0] zext_ln657_18_fu_905_p1;
wire   [107:0] lhs_V_22_fu_898_p3;
wire   [12:0] r_exp_V_fu_914_p2;
wire   [12:0] r_exp_V_5_fu_919_p3;
wire   [2:0] tmp_25_fu_925_p4;
wire   [0:0] icmp_ln849_fu_935_p2;
wire   [0:0] tmp_26_fu_946_p3;
wire   [107:0] ret_V_29_fu_908_p2;
wire   [51:0] tmp_fu_967_p4;
wire   [51:0] tmp_7_fu_977_p4;
wire   [10:0] trunc_ln168_fu_994_p1;
wire   [10:0] out_exp_V_fu_998_p2;
wire   [51:0] tmp_V_8_fu_987_p3;
wire   [63:0] p_Result_66_fu_1004_p4;
wire   [0:0] or_ln214_1_fu_886_p2;
wire   [0:0] or_ln338_fu_941_p2;
wire   [0:0] xor_ln338_fu_1029_p2;
wire   [0:0] and_ln338_fu_1024_p2;
wire   [0:0] and_ln849_fu_1034_p2;
wire   [0:0] or_ln849_fu_1040_p2;
wire   [0:0] xor_ln214_fu_1018_p2;
wire   [0:0] sel_tmp5_fu_1046_p2;
wire   [63:0] select_ln339_fu_953_p3;
wire   [63:0] bitcast_ln512_fu_1014_p1;
wire   [63:0] select_ln214_1_fu_890_p3;
wire   [63:0] sel_tmp6_fu_1052_p3;
wire   [0:0] xor_ln338_1_fu_1068_p2;
wire   [0:0] or_ln849_1_fu_1079_p2;
wire   [0:0] and_ln338_1_fu_1074_p2;
wire   [0:0] xor_ln849_fu_1084_p2;
wire   [0:0] or_ln849_2_fu_1090_p2;
wire   [0:0] tmp19_fu_1096_p2;
wire   [0:0] icmp_ln853_fu_961_p2;
wire   [0:0] sel_tmp16_fu_1102_p2;
wire   [63:0] select_ln214_2_fu_1060_p3;
wire   [15:0] grp_fu_1116_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to18;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [78:0] grp_fu_676_p00;
wire   [78:0] grp_fu_676_p10;
wire   [92:0] grp_fu_742_p00;
wire   [92:0] grp_fu_742_p10;
wire   [99:0] grp_fu_820_p00;
wire   [99:0] grp_fu_820_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

pow_generic_doublAem #(
    .DataWidth( 58 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_exp_Z1_array_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_exp_Z1_array_s_address0),
    .ce0(table_exp_Z1_array_s_ce0),
    .q0(table_exp_Z1_array_s_q0)
);

pow_generic_doublBew #(
    .DataWidth( 26 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z3_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z3_array_V_address0),
    .ce0(table_f_Z3_array_V_ce0),
    .q0(table_f_Z3_array_V_q0),
    .address1(table_f_Z3_array_V_address1),
    .ce1(table_f_Z3_array_V_ce1),
    .q1(table_f_Z3_array_V_q1)
);

pow_generic_doublCeG #(
    .DataWidth( 42 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z2_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z2_array_V_address0),
    .ce0(table_f_Z2_array_V_ce0),
    .q0(table_f_Z2_array_V_q0)
);

Bert_layer_mul_72WhU #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 72 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 84 ))
Bert_layer_mul_72WhU_U1214(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_548_p0),
    .din1(r_exp_V_6_reg_1212),
    .ce(1'b1),
    .dout(grp_fu_548_p2)
);

Bert_layer_mul_36Xh4 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 43 ),
    .dout_WIDTH( 79 ))
Bert_layer_mul_36Xh4_U1215(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_676_p0),
    .din1(grp_fu_676_p1),
    .ce(1'b1),
    .dout(grp_fu_676_p2)
);

Bert_layer_mul_44Yie #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 44 ),
    .din1_WIDTH( 49 ),
    .dout_WIDTH( 93 ))
Bert_layer_mul_44Yie_U1216(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_742_p0),
    .din1(grp_fu_742_p1),
    .ce(1'b1),
    .dout(grp_fu_742_p2)
);

Bert_layer_mul_50Rg6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 100 ))
Bert_layer_mul_50Rg6_U1217(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_820_p0),
    .din1(grp_fu_820_p1),
    .ce(1'b1),
    .dout(grp_fu_820_p2)
);

Bert_layer_mac_muShg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 31 ))
Bert_layer_mac_muShg_U1218(
    .din0(grp_fu_1116_p0),
    .din1(m_fix_hi_V_reg_1194),
    .din2(rhs_V_fu_467_p3),
    .dout(grp_fu_1116_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Z2_V_reg_1239 <= {{ret_V_25_fu_578_p2[50:43]}};
        Z2_V_reg_1239_pp0_iter10_reg <= Z2_V_reg_1239_pp0_iter9_reg;
        Z2_V_reg_1239_pp0_iter11_reg <= Z2_V_reg_1239_pp0_iter10_reg;
        Z2_V_reg_1239_pp0_iter12_reg <= Z2_V_reg_1239_pp0_iter11_reg;
        Z2_V_reg_1239_pp0_iter13_reg <= Z2_V_reg_1239_pp0_iter12_reg;
        Z2_V_reg_1239_pp0_iter14_reg <= Z2_V_reg_1239_pp0_iter13_reg;
        Z2_V_reg_1239_pp0_iter9_reg <= Z2_V_reg_1239;
        Z3_V_reg_1246 <= {{ret_V_25_fu_578_p2[42:35]}};
        Z3_V_reg_1246_pp0_iter9_reg <= Z3_V_reg_1246;
        Z4_V_reg_1251 <= Z4_V_fu_614_p1;
        and_ln18_reg_1162_pp0_iter10_reg <= and_ln18_reg_1162_pp0_iter9_reg;
        and_ln18_reg_1162_pp0_iter11_reg <= and_ln18_reg_1162_pp0_iter10_reg;
        and_ln18_reg_1162_pp0_iter12_reg <= and_ln18_reg_1162_pp0_iter11_reg;
        and_ln18_reg_1162_pp0_iter13_reg <= and_ln18_reg_1162_pp0_iter12_reg;
        and_ln18_reg_1162_pp0_iter14_reg <= and_ln18_reg_1162_pp0_iter13_reg;
        and_ln18_reg_1162_pp0_iter15_reg <= and_ln18_reg_1162_pp0_iter14_reg;
        and_ln18_reg_1162_pp0_iter16_reg <= and_ln18_reg_1162_pp0_iter15_reg;
        and_ln18_reg_1162_pp0_iter17_reg <= and_ln18_reg_1162_pp0_iter16_reg;
        and_ln18_reg_1162_pp0_iter18_reg <= and_ln18_reg_1162_pp0_iter17_reg;
        and_ln18_reg_1162_pp0_iter2_reg <= and_ln18_reg_1162;
        and_ln18_reg_1162_pp0_iter3_reg <= and_ln18_reg_1162_pp0_iter2_reg;
        and_ln18_reg_1162_pp0_iter4_reg <= and_ln18_reg_1162_pp0_iter3_reg;
        and_ln18_reg_1162_pp0_iter5_reg <= and_ln18_reg_1162_pp0_iter4_reg;
        and_ln18_reg_1162_pp0_iter6_reg <= and_ln18_reg_1162_pp0_iter5_reg;
        and_ln18_reg_1162_pp0_iter7_reg <= and_ln18_reg_1162_pp0_iter6_reg;
        and_ln18_reg_1162_pp0_iter8_reg <= and_ln18_reg_1162_pp0_iter7_reg;
        and_ln18_reg_1162_pp0_iter9_reg <= and_ln18_reg_1162_pp0_iter8_reg;
        and_ln209_reg_1155_pp0_iter10_reg <= and_ln209_reg_1155_pp0_iter9_reg;
        and_ln209_reg_1155_pp0_iter11_reg <= and_ln209_reg_1155_pp0_iter10_reg;
        and_ln209_reg_1155_pp0_iter12_reg <= and_ln209_reg_1155_pp0_iter11_reg;
        and_ln209_reg_1155_pp0_iter13_reg <= and_ln209_reg_1155_pp0_iter12_reg;
        and_ln209_reg_1155_pp0_iter14_reg <= and_ln209_reg_1155_pp0_iter13_reg;
        and_ln209_reg_1155_pp0_iter15_reg <= and_ln209_reg_1155_pp0_iter14_reg;
        and_ln209_reg_1155_pp0_iter16_reg <= and_ln209_reg_1155_pp0_iter15_reg;
        and_ln209_reg_1155_pp0_iter17_reg <= and_ln209_reg_1155_pp0_iter16_reg;
        and_ln209_reg_1155_pp0_iter18_reg <= and_ln209_reg_1155_pp0_iter17_reg;
        and_ln209_reg_1155_pp0_iter2_reg <= and_ln209_reg_1155;
        and_ln209_reg_1155_pp0_iter3_reg <= and_ln209_reg_1155_pp0_iter2_reg;
        and_ln209_reg_1155_pp0_iter4_reg <= and_ln209_reg_1155_pp0_iter3_reg;
        and_ln209_reg_1155_pp0_iter5_reg <= and_ln209_reg_1155_pp0_iter4_reg;
        and_ln209_reg_1155_pp0_iter6_reg <= and_ln209_reg_1155_pp0_iter5_reg;
        and_ln209_reg_1155_pp0_iter7_reg <= and_ln209_reg_1155_pp0_iter6_reg;
        and_ln209_reg_1155_pp0_iter8_reg <= and_ln209_reg_1155_pp0_iter7_reg;
        and_ln209_reg_1155_pp0_iter9_reg <= and_ln209_reg_1155_pp0_iter8_reg;
        exp_Z1P_m_1_V_reg_1339 <= {{exp_Z1P_m_1_l_V_fu_788_p2[51:2]}};
        exp_Z1_V_reg_1334 <= table_exp_Z1_array_s_q0;
        exp_Z1_V_reg_1334_pp0_iter16_reg <= exp_Z1_V_reg_1334;
        exp_Z1_V_reg_1334_pp0_iter17_reg <= exp_Z1_V_reg_1334_pp0_iter16_reg;
        exp_Z1_hi_V_reg_1344 <= {{table_exp_Z1_array_s_q0[57:8]}};
        exp_Z2P_m_1_V_reg_1302 <= exp_Z2P_m_1_V_fu_711_p2;
        exp_Z2P_m_1_V_reg_1302_pp0_iter13_reg <= exp_Z2P_m_1_V_reg_1302;
        exp_Z2P_m_1_V_reg_1302_pp0_iter14_reg <= exp_Z2P_m_1_V_reg_1302_pp0_iter13_reg;
        icmp_ln338_1_reg_1219 <= icmp_ln338_1_fu_540_p2;
        icmp_ln338_1_reg_1219_pp0_iter10_reg <= icmp_ln338_1_reg_1219_pp0_iter9_reg;
        icmp_ln338_1_reg_1219_pp0_iter11_reg <= icmp_ln338_1_reg_1219_pp0_iter10_reg;
        icmp_ln338_1_reg_1219_pp0_iter12_reg <= icmp_ln338_1_reg_1219_pp0_iter11_reg;
        icmp_ln338_1_reg_1219_pp0_iter13_reg <= icmp_ln338_1_reg_1219_pp0_iter12_reg;
        icmp_ln338_1_reg_1219_pp0_iter14_reg <= icmp_ln338_1_reg_1219_pp0_iter13_reg;
        icmp_ln338_1_reg_1219_pp0_iter15_reg <= icmp_ln338_1_reg_1219_pp0_iter14_reg;
        icmp_ln338_1_reg_1219_pp0_iter16_reg <= icmp_ln338_1_reg_1219_pp0_iter15_reg;
        icmp_ln338_1_reg_1219_pp0_iter17_reg <= icmp_ln338_1_reg_1219_pp0_iter16_reg;
        icmp_ln338_1_reg_1219_pp0_iter18_reg <= icmp_ln338_1_reg_1219_pp0_iter17_reg;
        icmp_ln338_1_reg_1219_pp0_iter3_reg <= icmp_ln338_1_reg_1219;
        icmp_ln338_1_reg_1219_pp0_iter4_reg <= icmp_ln338_1_reg_1219_pp0_iter3_reg;
        icmp_ln338_1_reg_1219_pp0_iter5_reg <= icmp_ln338_1_reg_1219_pp0_iter4_reg;
        icmp_ln338_1_reg_1219_pp0_iter6_reg <= icmp_ln338_1_reg_1219_pp0_iter5_reg;
        icmp_ln338_1_reg_1219_pp0_iter7_reg <= icmp_ln338_1_reg_1219_pp0_iter6_reg;
        icmp_ln338_1_reg_1219_pp0_iter8_reg <= icmp_ln338_1_reg_1219_pp0_iter7_reg;
        icmp_ln338_1_reg_1219_pp0_iter9_reg <= icmp_ln338_1_reg_1219_pp0_iter8_reg;
        icmp_ln338_reg_1204_pp0_iter10_reg <= icmp_ln338_reg_1204_pp0_iter9_reg;
        icmp_ln338_reg_1204_pp0_iter11_reg <= icmp_ln338_reg_1204_pp0_iter10_reg;
        icmp_ln338_reg_1204_pp0_iter12_reg <= icmp_ln338_reg_1204_pp0_iter11_reg;
        icmp_ln338_reg_1204_pp0_iter13_reg <= icmp_ln338_reg_1204_pp0_iter12_reg;
        icmp_ln338_reg_1204_pp0_iter14_reg <= icmp_ln338_reg_1204_pp0_iter13_reg;
        icmp_ln338_reg_1204_pp0_iter15_reg <= icmp_ln338_reg_1204_pp0_iter14_reg;
        icmp_ln338_reg_1204_pp0_iter16_reg <= icmp_ln338_reg_1204_pp0_iter15_reg;
        icmp_ln338_reg_1204_pp0_iter17_reg <= icmp_ln338_reg_1204_pp0_iter16_reg;
        icmp_ln338_reg_1204_pp0_iter18_reg <= icmp_ln338_reg_1204_pp0_iter17_reg;
        icmp_ln338_reg_1204_pp0_iter2_reg <= icmp_ln338_reg_1204;
        icmp_ln338_reg_1204_pp0_iter3_reg <= icmp_ln338_reg_1204_pp0_iter2_reg;
        icmp_ln338_reg_1204_pp0_iter4_reg <= icmp_ln338_reg_1204_pp0_iter3_reg;
        icmp_ln338_reg_1204_pp0_iter5_reg <= icmp_ln338_reg_1204_pp0_iter4_reg;
        icmp_ln338_reg_1204_pp0_iter6_reg <= icmp_ln338_reg_1204_pp0_iter5_reg;
        icmp_ln338_reg_1204_pp0_iter7_reg <= icmp_ln338_reg_1204_pp0_iter6_reg;
        icmp_ln338_reg_1204_pp0_iter8_reg <= icmp_ln338_reg_1204_pp0_iter7_reg;
        icmp_ln338_reg_1204_pp0_iter9_reg <= icmp_ln338_reg_1204_pp0_iter8_reg;
        m_diff_hi_V_reg_1234 <= {{ret_V_25_fu_578_p2[58:51]}};
        m_diff_hi_V_reg_1234_pp0_iter10_reg <= m_diff_hi_V_reg_1234_pp0_iter9_reg;
        m_diff_hi_V_reg_1234_pp0_iter11_reg <= m_diff_hi_V_reg_1234_pp0_iter10_reg;
        m_diff_hi_V_reg_1234_pp0_iter12_reg <= m_diff_hi_V_reg_1234_pp0_iter11_reg;
        m_diff_hi_V_reg_1234_pp0_iter13_reg <= m_diff_hi_V_reg_1234_pp0_iter12_reg;
        m_diff_hi_V_reg_1234_pp0_iter9_reg <= m_diff_hi_V_reg_1234;
        p_Result_64_reg_1127_pp0_iter10_reg <= p_Result_64_reg_1127_pp0_iter9_reg;
        p_Result_64_reg_1127_pp0_iter11_reg <= p_Result_64_reg_1127_pp0_iter10_reg;
        p_Result_64_reg_1127_pp0_iter12_reg <= p_Result_64_reg_1127_pp0_iter11_reg;
        p_Result_64_reg_1127_pp0_iter13_reg <= p_Result_64_reg_1127_pp0_iter12_reg;
        p_Result_64_reg_1127_pp0_iter14_reg <= p_Result_64_reg_1127_pp0_iter13_reg;
        p_Result_64_reg_1127_pp0_iter15_reg <= p_Result_64_reg_1127_pp0_iter14_reg;
        p_Result_64_reg_1127_pp0_iter16_reg <= p_Result_64_reg_1127_pp0_iter15_reg;
        p_Result_64_reg_1127_pp0_iter17_reg <= p_Result_64_reg_1127_pp0_iter16_reg;
        p_Result_64_reg_1127_pp0_iter18_reg <= p_Result_64_reg_1127_pp0_iter17_reg;
        p_Result_64_reg_1127_pp0_iter2_reg <= p_Result_64_reg_1127_pp0_iter1_reg;
        p_Result_64_reg_1127_pp0_iter3_reg <= p_Result_64_reg_1127_pp0_iter2_reg;
        p_Result_64_reg_1127_pp0_iter4_reg <= p_Result_64_reg_1127_pp0_iter3_reg;
        p_Result_64_reg_1127_pp0_iter5_reg <= p_Result_64_reg_1127_pp0_iter4_reg;
        p_Result_64_reg_1127_pp0_iter6_reg <= p_Result_64_reg_1127_pp0_iter5_reg;
        p_Result_64_reg_1127_pp0_iter7_reg <= p_Result_64_reg_1127_pp0_iter6_reg;
        p_Result_64_reg_1127_pp0_iter8_reg <= p_Result_64_reg_1127_pp0_iter7_reg;
        p_Result_64_reg_1127_pp0_iter9_reg <= p_Result_64_reg_1127_pp0_iter8_reg;
        r_V_49_reg_1183_pp0_iter2_reg <= r_V_49_reg_1183;
        r_V_49_reg_1183_pp0_iter3_reg <= r_V_49_reg_1183_pp0_iter2_reg;
        r_V_49_reg_1183_pp0_iter4_reg <= r_V_49_reg_1183_pp0_iter3_reg;
        r_V_49_reg_1183_pp0_iter5_reg <= r_V_49_reg_1183_pp0_iter4_reg;
        r_V_49_reg_1183_pp0_iter6_reg <= r_V_49_reg_1183_pp0_iter5_reg;
        r_V_49_reg_1183_pp0_iter7_reg <= r_V_49_reg_1183_pp0_iter6_reg;
        r_V_54_reg_1359 <= grp_fu_820_p2;
        r_V_54_reg_1359_pp0_iter18_reg <= r_V_54_reg_1359;
        r_exp_V_6_reg_1212 <= r_exp_V_6_fu_517_p3;
        r_exp_V_6_reg_1212_pp0_iter10_reg <= r_exp_V_6_reg_1212_pp0_iter9_reg;
        r_exp_V_6_reg_1212_pp0_iter11_reg <= r_exp_V_6_reg_1212_pp0_iter10_reg;
        r_exp_V_6_reg_1212_pp0_iter12_reg <= r_exp_V_6_reg_1212_pp0_iter11_reg;
        r_exp_V_6_reg_1212_pp0_iter13_reg <= r_exp_V_6_reg_1212_pp0_iter12_reg;
        r_exp_V_6_reg_1212_pp0_iter14_reg <= r_exp_V_6_reg_1212_pp0_iter13_reg;
        r_exp_V_6_reg_1212_pp0_iter15_reg <= r_exp_V_6_reg_1212_pp0_iter14_reg;
        r_exp_V_6_reg_1212_pp0_iter16_reg <= r_exp_V_6_reg_1212_pp0_iter15_reg;
        r_exp_V_6_reg_1212_pp0_iter17_reg <= r_exp_V_6_reg_1212_pp0_iter16_reg;
        r_exp_V_6_reg_1212_pp0_iter18_reg <= r_exp_V_6_reg_1212_pp0_iter17_reg;
        r_exp_V_6_reg_1212_pp0_iter3_reg <= r_exp_V_6_reg_1212;
        r_exp_V_6_reg_1212_pp0_iter4_reg <= r_exp_V_6_reg_1212_pp0_iter3_reg;
        r_exp_V_6_reg_1212_pp0_iter5_reg <= r_exp_V_6_reg_1212_pp0_iter4_reg;
        r_exp_V_6_reg_1212_pp0_iter6_reg <= r_exp_V_6_reg_1212_pp0_iter5_reg;
        r_exp_V_6_reg_1212_pp0_iter7_reg <= r_exp_V_6_reg_1212_pp0_iter6_reg;
        r_exp_V_6_reg_1212_pp0_iter8_reg <= r_exp_V_6_reg_1212_pp0_iter7_reg;
        r_exp_V_6_reg_1212_pp0_iter9_reg <= r_exp_V_6_reg_1212_pp0_iter8_reg;
        ret_V_26_reg_1266 <= ret_V_26_fu_655_p2;
        ret_V_26_reg_1266_pp0_iter10_reg <= ret_V_26_reg_1266;
        ret_V_26_reg_1266_pp0_iter11_reg <= ret_V_26_reg_1266_pp0_iter10_reg;
        ret_V_28_reg_1365 <= ret_V_28_fu_829_p2;
        select_ln253_reg_1149_pp0_iter10_reg <= select_ln253_reg_1149_pp0_iter9_reg;
        select_ln253_reg_1149_pp0_iter11_reg <= select_ln253_reg_1149_pp0_iter10_reg;
        select_ln253_reg_1149_pp0_iter12_reg <= select_ln253_reg_1149_pp0_iter11_reg;
        select_ln253_reg_1149_pp0_iter13_reg <= select_ln253_reg_1149_pp0_iter12_reg;
        select_ln253_reg_1149_pp0_iter14_reg <= select_ln253_reg_1149_pp0_iter13_reg;
        select_ln253_reg_1149_pp0_iter15_reg <= select_ln253_reg_1149_pp0_iter14_reg;
        select_ln253_reg_1149_pp0_iter16_reg <= select_ln253_reg_1149_pp0_iter15_reg;
        select_ln253_reg_1149_pp0_iter17_reg <= select_ln253_reg_1149_pp0_iter16_reg;
        select_ln253_reg_1149_pp0_iter18_reg <= select_ln253_reg_1149_pp0_iter17_reg;
        select_ln253_reg_1149_pp0_iter2_reg <= select_ln253_reg_1149_pp0_iter1_reg;
        select_ln253_reg_1149_pp0_iter3_reg <= select_ln253_reg_1149_pp0_iter2_reg;
        select_ln253_reg_1149_pp0_iter4_reg <= select_ln253_reg_1149_pp0_iter3_reg;
        select_ln253_reg_1149_pp0_iter5_reg <= select_ln253_reg_1149_pp0_iter4_reg;
        select_ln253_reg_1149_pp0_iter6_reg <= select_ln253_reg_1149_pp0_iter5_reg;
        select_ln253_reg_1149_pp0_iter7_reg <= select_ln253_reg_1149_pp0_iter6_reg;
        select_ln253_reg_1149_pp0_iter8_reg <= select_ln253_reg_1149_pp0_iter7_reg;
        select_ln253_reg_1149_pp0_iter9_reg <= select_ln253_reg_1149_pp0_iter8_reg;
        tmp_12_reg_1292 <= {{grp_fu_676_p2[78:59]}};
        tmp_13_reg_1308 <= {{table_f_Z2_array_V_q0[41:2]}};
        tmp_13_reg_1308_pp0_iter13_reg <= tmp_13_reg_1308;
        tmp_13_reg_1308_pp0_iter14_reg <= tmp_13_reg_1308_pp0_iter13_reg;
        tmp_14_reg_1329 <= {{grp_fu_742_p2[92:57]}};
        tmp_24_reg_1370 <= add_ln1146_2_fu_850_p2[32'd106];
        tmp_i_reg_1277[25 : 0] <= tmp_i_fu_661_p4[25 : 0];
tmp_i_reg_1277[42 : 35] <= tmp_i_fu_661_p4[42 : 35];
        tmp_i_reg_1277_pp0_iter11_reg[25 : 0] <= tmp_i_reg_1277[25 : 0];
tmp_i_reg_1277_pp0_iter11_reg[42 : 35] <= tmp_i_reg_1277[42 : 35];
        tmp_s_reg_1229 <= {{grp_fu_548_p2[83:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln18_reg_1162 <= and_ln18_fu_331_p2;
        and_ln209_reg_1155 <= and_ln209_fu_326_p2;
        icmp_ln338_reg_1204 <= icmp_ln338_fu_445_p2;
        icmp_ln833_6_reg_1144 <= icmp_ln833_6_fu_293_p2;
        icmp_ln837_reg_1139 <= icmp_ln837_fu_287_p2;
        isNeg_reg_1173 <= m_exp_fu_339_p2[32'd11];
        m_fix_hi_V_reg_1194 <= {{r_V_49_fu_409_p3[70:55]}};
        m_fix_l_V_reg_1188 <= {{r_V_49_fu_409_p3[70:7]}};
        p_Result_64_reg_1127 <= p_Val2_s_fu_261_p1[32'd63];
        p_Result_64_reg_1127_pp0_iter1_reg <= p_Result_64_reg_1127;
        p_Result_65_reg_1199 <= r_V_49_fu_409_p3[32'd70];
        r_V_49_reg_1183 <= r_V_49_fu_409_p3;
        select_ln253_reg_1149 <= select_ln253_fu_313_p3;
        select_ln253_reg_1149_pp0_iter1_reg <= select_ln253_reg_1149;
        sext_ln1311_1_reg_1178 <= sext_ln1311_1_fu_381_p1;
        sext_ln682_reg_1168[70 : 7] <= sext_ln682_fu_352_p1[70 : 7];
        tmp_V_reg_1132 <= {{p_Val2_s_fu_261_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_112_reg_1272 <= table_f_Z3_array_V_q1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to18 = 1'b1;
    end else begin
        ap_idle_pp0_0to18 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to18 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        table_exp_Z1_array_s_ce0 = 1'b1;
    end else begin
        table_exp_Z1_array_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        table_f_Z2_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z2_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        table_f_Z3_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        table_f_Z3_array_V_ce1 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Z3_V_fu_604_p4 = {{ret_V_25_fu_578_p2[42:35]}};

assign Z4_V_fu_614_p1 = ret_V_25_fu_578_p2[34:0];

assign Z4_ind_V_fu_618_p4 = {{ret_V_25_fu_578_p2[34:27]}};

assign add_ln1146_2_fu_850_p2 = (trunc_ln_fu_842_p3 + zext_ln1146_fu_835_p1);

assign add_ln657_12_fu_779_p2 = (zext_ln657_15_fu_776_p1 + exp_Z2P_m_1_V_reg_1302_pp0_iter14_reg);

assign add_ln657_fu_702_p2 = (zext_ln657_fu_699_p1 + ret_V_26_reg_1266_pp0_iter11_reg);

assign add_ln805_fu_503_p2 = (13'd1 + tmp_6_fu_478_p4);

assign and_ln18_fu_331_p2 = (icmp_ln833_fu_321_p2 & icmp_ln833_6_reg_1144);

assign and_ln209_fu_326_p2 = (icmp_ln837_reg_1139 & icmp_ln833_fu_321_p2);

assign and_ln338_1_fu_1074_p2 = (xor_ln338_1_fu_1068_p2 & icmp_ln338_reg_1204_pp0_iter18_reg);

assign and_ln338_fu_1024_p2 = (or_ln338_fu_941_p2 & icmp_ln338_reg_1204_pp0_iter18_reg);

assign and_ln849_fu_1034_p2 = (xor_ln338_fu_1029_p2 & icmp_ln849_fu_935_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((sel_tmp16_fu_1102_p2[0:0] === 1'b1) ? 64'd0 : select_ln214_2_fu_1060_p3);

assign bitcast_ln512_fu_1014_p1 = p_Result_66_fu_1004_p4;

assign e_frac_V_fu_307_p2 = (54'd0 - p_Result_s_fu_299_p3);

assign exp_Z1P_m_1_l_V_fu_788_p2 = (zext_ln682_fu_772_p1 + zext_ln657_16_fu_784_p1);

assign exp_Z2P_m_1_V_fu_711_p2 = (ret_V_27_fu_696_p1 + zext_ln657_14_fu_707_p1);

assign f_Z4_V_fu_638_p4 = {{table_f_Z3_array_V_q0[25:16]}};

assign grp_fu_1116_p0 = 31'd23637;

assign grp_fu_548_p0 = 84'd1636647506585939924452;

assign grp_fu_676_p0 = grp_fu_676_p00;

assign grp_fu_676_p00 = ret_V_26_reg_1266;

assign grp_fu_676_p1 = grp_fu_676_p10;

assign grp_fu_676_p10 = tmp_i_fu_661_p4;

assign grp_fu_742_p0 = grp_fu_742_p00;

assign grp_fu_742_p00 = exp_Z2P_m_1_V_reg_1302;

assign grp_fu_742_p1 = grp_fu_742_p10;

assign grp_fu_742_p10 = lshr_ln662_s_fu_727_p4;

assign grp_fu_820_p0 = grp_fu_820_p00;

assign grp_fu_820_p00 = exp_Z1P_m_1_V_reg_1339;

assign grp_fu_820_p1 = grp_fu_820_p10;

assign grp_fu_820_p10 = exp_Z1_hi_V_reg_1344;

assign icmp_ln338_1_fu_540_p2 = ((shl_ln_fu_532_p3 != sext_ln682_reg_1168) ? 1'b1 : 1'b0);

assign icmp_ln338_fu_445_p2 = (($signed(m_exp_fu_339_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln805_fu_497_p2 = ((trunc_ln805_fu_494_p1 == 18'd0) ? 1'b1 : 1'b0);

assign icmp_ln833_6_fu_293_p2 = ((tmp_V_7_fu_283_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_321_p2 = ((tmp_V_reg_1132 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln837_fu_287_p2 = ((tmp_V_7_fu_283_p1 != 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_935_p2 = (($signed(tmp_25_fu_925_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln853_fu_961_p2 = (($signed(r_exp_V_5_fu_919_p3) < $signed(13'd7170)) ? 1'b1 : 1'b0);

assign isNeg_fu_356_p3 = m_exp_fu_339_p2[32'd11];

assign lhs_V_19_fu_648_p1 = Z4_V_reg_1251;

assign lhs_V_20_fu_762_p5 = {{{{Z2_V_reg_1239_pp0_iter14_reg}, {1'd0}}, {tmp_13_reg_1308_pp0_iter14_reg}}, {2'd0}};

assign lhs_V_21_fu_826_p1 = exp_Z1_V_reg_1334_pp0_iter17_reg;

assign lhs_V_22_fu_898_p3 = {{ret_V_28_reg_1365}, {49'd0}};

assign lhs_V_fu_564_p1 = r_V_49_reg_1183_pp0_iter7_reg;

assign lshr_ln662_s_fu_727_p4 = {{{Z2_V_reg_1239_pp0_iter12_reg}, {1'd0}}, {tmp_13_reg_1308}};

assign m_exp_2_fu_373_p3 = ((isNeg_fu_356_p3[0:0] === 1'b1) ? sext_ln1311_fu_369_p1 : m_exp_fu_339_p2);

assign m_exp_fu_339_p2 = ($signed(12'd3073) + $signed(zext_ln502_fu_336_p1));

assign m_frac_l_V_fu_345_p3 = {{select_ln253_reg_1149}, {7'd0}};

assign or_ln214_1_fu_886_p2 = (and_ln209_reg_1155_pp0_iter18_reg | and_ln18_reg_1162_pp0_iter18_reg);

assign or_ln214_fu_874_p2 = (x_is_pinf_fu_869_p2 | and_ln209_reg_1155_pp0_iter18_reg);

assign or_ln338_fu_941_p2 = (icmp_ln849_fu_935_p2 | icmp_ln338_1_reg_1219_pp0_iter18_reg);

assign or_ln849_1_fu_1079_p2 = (icmp_ln849_fu_935_p2 | icmp_ln338_reg_1204_pp0_iter18_reg);

assign or_ln849_2_fu_1090_p2 = (xor_ln849_fu_1084_p2 | and_ln338_1_fu_1074_p2);

assign or_ln849_fu_1040_p2 = (and_ln849_fu_1034_p2 | and_ln338_fu_1024_p2);

assign out_exp_V_fu_998_p2 = (11'd1023 + trunc_ln168_fu_994_p1);

assign p_Result_56_fu_487_p3 = grp_fu_1116_p3[32'd30];

assign p_Result_64_fu_265_p3 = p_Val2_s_fu_261_p1[32'd63];

assign p_Result_66_fu_1004_p4 = {{{{1'd0}, {out_exp_V_fu_998_p2}}}, {tmp_V_8_fu_987_p3}};

assign p_Result_s_fu_299_p3 = {{2'd1}, {tmp_V_7_fu_283_p1}};

assign p_Val2_s_fu_261_p1 = x;

assign r_V_37_fu_403_p2 = sext_ln682_fu_352_p1 << zext_ln1287_fu_385_p1;

assign r_V_39_fu_454_p2 = m_fix_l_V_reg_1188 << zext_ln1253_fu_451_p1;

assign r_V_40_fu_459_p2 = $signed(m_fix_l_V_reg_1188) >>> zext_ln1253_fu_451_p1;

assign r_V_49_fu_409_p3 = ((isNeg_fu_356_p3[0:0] === 1'b1) ? sext_ln1287_fu_399_p1 : r_V_37_fu_403_p2);

assign r_V_fu_393_p2 = $signed(m_frac_l_V_fu_345_p3) >>> zext_ln1285_fu_389_p1;

assign r_exp_V_5_fu_919_p3 = ((tmp_24_reg_1370[0:0] === 1'b1) ? r_exp_V_6_reg_1212_pp0_iter18_reg : r_exp_V_fu_914_p2);

assign r_exp_V_6_fu_517_p3 = ((p_Result_56_fu_487_p3[0:0] === 1'b1) ? select_ln805_fu_509_p3 : tmp_6_fu_478_p4);

assign r_exp_V_fu_914_p2 = ($signed(13'd8191) + $signed(r_exp_V_6_reg_1212_pp0_iter18_reg));

assign ret_V_25_fu_578_p2 = ($signed(lhs_V_fu_564_p1) - $signed(sext_ln682_2_fu_574_p1));

assign ret_V_26_fu_655_p2 = (rhs_V_17_fu_651_p1 + lhs_V_19_fu_648_p1);

assign ret_V_27_fu_696_p1 = tmp_i_reg_1277_pp0_iter11_reg;

assign ret_V_28_fu_829_p2 = (59'd16 + lhs_V_21_fu_826_p1);

assign ret_V_29_fu_908_p2 = (zext_ln657_18_fu_905_p1 + lhs_V_22_fu_898_p3);

assign rhs_V_16_fu_567_p3 = {{tmp_s_reg_1229}, {1'd0}};

assign rhs_V_17_fu_651_p1 = f_Z4_V_fu_638_p4;

assign rhs_V_fu_467_p3 = {{p_Result_65_reg_1199}, {18'd131072}};

assign sel_tmp16_fu_1102_p2 = (tmp19_fu_1096_p2 & icmp_ln853_fu_961_p2);

assign sel_tmp5_fu_1046_p2 = (xor_ln214_fu_1018_p2 & or_ln849_fu_1040_p2);

assign sel_tmp6_fu_1052_p3 = ((sel_tmp5_fu_1046_p2[0:0] === 1'b1) ? select_ln339_fu_953_p3 : bitcast_ln512_fu_1014_p1);

assign select_ln1322_fu_525_p3 = ((isNeg_reg_1173[0:0] === 1'b1) ? r_V_39_fu_454_p2 : r_V_40_fu_459_p2);

assign select_ln214_1_fu_890_p3 = ((or_ln214_fu_874_p2[0:0] === 1'b1) ? select_ln214_fu_879_p3 : 64'd0);

assign select_ln214_2_fu_1060_p3 = ((or_ln214_1_fu_886_p2[0:0] === 1'b1) ? select_ln214_1_fu_890_p3 : sel_tmp6_fu_1052_p3);

assign select_ln214_fu_879_p3 = ((and_ln209_reg_1155_pp0_iter18_reg[0:0] === 1'b1) ? 64'd9223372036854775807 : 64'd9218868437227405312);

assign select_ln253_fu_313_p3 = ((p_Result_64_fu_265_p3[0:0] === 1'b1) ? e_frac_V_fu_307_p2 : p_Result_s_fu_299_p3);

assign select_ln339_fu_953_p3 = ((tmp_26_fu_946_p3[0:0] === 1'b1) ? 64'd0 : 64'd9218868437227405312);

assign select_ln805_fu_509_p3 = ((icmp_ln805_fu_497_p2[0:0] === 1'b1) ? tmp_6_fu_478_p4 : add_ln805_fu_503_p2);

assign sext_ln1287_fu_399_p1 = $signed(r_V_fu_393_p2);

assign sext_ln1311_1_fu_381_p1 = $signed(m_exp_2_fu_373_p3);

assign sext_ln1311_fu_369_p1 = $signed(sub_ln1311_fu_364_p2);

assign sext_ln682_2_fu_574_p1 = $signed(rhs_V_16_fu_567_p3);

assign sext_ln682_fu_352_p1 = m_frac_l_V_fu_345_p3;

assign shl_ln_fu_532_p3 = {{select_ln1322_fu_525_p3}, {7'd0}};

assign sub_ln1311_fu_364_p2 = (11'd1023 - tmp_V_reg_1132);

assign table_exp_Z1_array_s_address0 = zext_ln498_fu_748_p1;

assign table_f_Z2_array_V_address0 = zext_ln498_12_fu_692_p1;

assign table_f_Z3_array_V_address0 = zext_ln498_10_fu_628_p1;

assign table_f_Z3_array_V_address1 = zext_ln498_11_fu_633_p1;

assign tmp19_fu_1096_p2 = (xor_ln214_fu_1018_p2 & or_ln849_2_fu_1090_p2);

assign tmp_25_fu_925_p4 = {{r_exp_V_5_fu_919_p3[12:10]}};

assign tmp_26_fu_946_p3 = select_ln253_reg_1149_pp0_iter18_reg[32'd53];

assign tmp_6_fu_478_p4 = {{grp_fu_1116_p3[30:18]}};

assign tmp_7_fu_977_p4 = {{ret_V_29_fu_908_p2[104:53]}};

assign tmp_V_7_fu_283_p1 = p_Val2_s_fu_261_p1[51:0];

assign tmp_V_8_fu_987_p3 = ((tmp_24_reg_1370[0:0] === 1'b1) ? tmp_fu_967_p4 : tmp_7_fu_977_p4);

assign tmp_fu_967_p4 = {{ret_V_29_fu_908_p2[105:54]}};

assign tmp_i_fu_661_p4 = {{{Z3_V_reg_1246_pp0_iter9_reg}, {9'd0}}, {p_Val2_112_reg_1272}};

assign trunc_ln1146_fu_838_p1 = ret_V_28_fu_829_p2[57:0];

assign trunc_ln168_fu_994_p1 = r_exp_V_5_fu_919_p3[10:0];

assign trunc_ln805_fu_494_p1 = grp_fu_1116_p3[17:0];

assign trunc_ln_fu_842_p3 = {{trunc_ln1146_fu_838_p1}, {49'd0}};

assign x_is_pinf_fu_869_p2 = (xor_ln936_fu_864_p2 & and_ln18_reg_1162_pp0_iter18_reg);

assign xor_ln214_fu_1018_p2 = (or_ln214_1_fu_886_p2 ^ 1'd1);

assign xor_ln338_1_fu_1068_p2 = (or_ln338_fu_941_p2 ^ 1'd1);

assign xor_ln338_fu_1029_p2 = (icmp_ln338_reg_1204_pp0_iter18_reg ^ 1'd1);

assign xor_ln849_fu_1084_p2 = (or_ln849_1_fu_1079_p2 ^ 1'd1);

assign xor_ln936_fu_864_p2 = (p_Result_64_reg_1127_pp0_iter18_reg ^ 1'd1);

assign zext_ln1146_fu_835_p1 = r_V_54_reg_1359;

assign zext_ln1253_fu_451_p1 = $unsigned(sext_ln1311_1_reg_1178);

assign zext_ln1285_fu_389_p1 = $unsigned(sext_ln1311_1_fu_381_p1);

assign zext_ln1287_fu_385_p1 = $unsigned(sext_ln1311_1_fu_381_p1);

assign zext_ln498_10_fu_628_p1 = Z4_ind_V_fu_618_p4;

assign zext_ln498_11_fu_633_p1 = Z3_V_fu_604_p4;

assign zext_ln498_12_fu_692_p1 = Z2_V_reg_1239_pp0_iter10_reg;

assign zext_ln498_fu_748_p1 = m_diff_hi_V_reg_1234_pp0_iter13_reg;

assign zext_ln502_fu_336_p1 = tmp_V_reg_1132;

assign zext_ln657_14_fu_707_p1 = add_ln657_fu_702_p2;

assign zext_ln657_15_fu_776_p1 = tmp_14_reg_1329;

assign zext_ln657_16_fu_784_p1 = add_ln657_12_fu_779_p2;

assign zext_ln657_18_fu_905_p1 = r_V_54_reg_1359_pp0_iter18_reg;

assign zext_ln657_fu_699_p1 = tmp_12_reg_1292;

assign zext_ln682_fu_772_p1 = lhs_V_20_fu_762_p5;

always @ (posedge ap_clk) begin
    sext_ln682_reg_1168[6:0] <= 7'b0000000;
    tmp_i_reg_1277[34:26] <= 9'b000000000;
    tmp_i_reg_1277_pp0_iter11_reg[34:26] <= 9'b000000000;
end

endmodule //exp_generic_double_s
