// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _init_block_A_proc638_HH_
#define _init_block_A_proc638_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct init_block_A_proc638 : public sc_module {
    // Port declarations 79
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > A_0_address0;
    sc_out< sc_logic > A_0_ce0;
    sc_in< sc_lv<32> > A_0_q0;
    sc_out< sc_lv<32> > block_A_loader_0_V_din;
    sc_in< sc_logic > block_A_loader_0_V_full_n;
    sc_out< sc_logic > block_A_loader_0_V_write;
    sc_out< sc_lv<12> > A_1_address0;
    sc_out< sc_logic > A_1_ce0;
    sc_in< sc_lv<32> > A_1_q0;
    sc_out< sc_lv<32> > block_A_loader_1_V_din;
    sc_in< sc_logic > block_A_loader_1_V_full_n;
    sc_out< sc_logic > block_A_loader_1_V_write;
    sc_out< sc_lv<12> > A_2_address0;
    sc_out< sc_logic > A_2_ce0;
    sc_in< sc_lv<32> > A_2_q0;
    sc_out< sc_lv<32> > block_A_loader_2_V_din;
    sc_in< sc_logic > block_A_loader_2_V_full_n;
    sc_out< sc_logic > block_A_loader_2_V_write;
    sc_out< sc_lv<12> > A_3_address0;
    sc_out< sc_logic > A_3_ce0;
    sc_in< sc_lv<32> > A_3_q0;
    sc_out< sc_lv<32> > block_A_loader_3_V_din;
    sc_in< sc_logic > block_A_loader_3_V_full_n;
    sc_out< sc_logic > block_A_loader_3_V_write;
    sc_out< sc_lv<12> > A_4_address0;
    sc_out< sc_logic > A_4_ce0;
    sc_in< sc_lv<32> > A_4_q0;
    sc_out< sc_lv<32> > block_A_loader_4_V_din;
    sc_in< sc_logic > block_A_loader_4_V_full_n;
    sc_out< sc_logic > block_A_loader_4_V_write;
    sc_out< sc_lv<12> > A_5_address0;
    sc_out< sc_logic > A_5_ce0;
    sc_in< sc_lv<32> > A_5_q0;
    sc_out< sc_lv<32> > block_A_loader_5_V_din;
    sc_in< sc_logic > block_A_loader_5_V_full_n;
    sc_out< sc_logic > block_A_loader_5_V_write;
    sc_out< sc_lv<12> > A_6_address0;
    sc_out< sc_logic > A_6_ce0;
    sc_in< sc_lv<32> > A_6_q0;
    sc_out< sc_lv<32> > block_A_loader_6_V_din;
    sc_in< sc_logic > block_A_loader_6_V_full_n;
    sc_out< sc_logic > block_A_loader_6_V_write;
    sc_out< sc_lv<12> > A_7_address0;
    sc_out< sc_logic > A_7_ce0;
    sc_in< sc_lv<32> > A_7_q0;
    sc_out< sc_lv<32> > block_A_loader_7_V_din;
    sc_in< sc_logic > block_A_loader_7_V_full_n;
    sc_out< sc_logic > block_A_loader_7_V_write;
    sc_out< sc_lv<12> > A_8_address0;
    sc_out< sc_logic > A_8_ce0;
    sc_in< sc_lv<32> > A_8_q0;
    sc_out< sc_lv<32> > block_A_loader_8_V_din;
    sc_in< sc_logic > block_A_loader_8_V_full_n;
    sc_out< sc_logic > block_A_loader_8_V_write;
    sc_out< sc_lv<12> > A_9_address0;
    sc_out< sc_logic > A_9_ce0;
    sc_in< sc_lv<32> > A_9_q0;
    sc_out< sc_lv<32> > block_A_loader_9_V_din;
    sc_in< sc_logic > block_A_loader_9_V_full_n;
    sc_out< sc_logic > block_A_loader_9_V_write;
    sc_out< sc_lv<12> > A_10_address0;
    sc_out< sc_logic > A_10_ce0;
    sc_in< sc_lv<32> > A_10_q0;
    sc_out< sc_lv<32> > block_A_loader_10_V_din;
    sc_in< sc_logic > block_A_loader_10_V_full_n;
    sc_out< sc_logic > block_A_loader_10_V_write;
    sc_out< sc_lv<12> > A_11_address0;
    sc_out< sc_logic > A_11_ce0;
    sc_in< sc_lv<32> > A_11_q0;
    sc_out< sc_lv<32> > block_A_loader_11_V_din;
    sc_in< sc_logic > block_A_loader_11_V_full_n;
    sc_out< sc_logic > block_A_loader_11_V_write;


    // Module declarations
    init_block_A_proc638(sc_module_name name);
    SC_HAS_PROCESS(init_block_A_proc638);

    ~init_block_A_proc638();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > block_A_loader_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > block_A_loader_1_V_blk_n;
    sc_signal< sc_logic > block_A_loader_2_V_blk_n;
    sc_signal< sc_logic > block_A_loader_3_V_blk_n;
    sc_signal< sc_logic > block_A_loader_4_V_blk_n;
    sc_signal< sc_logic > block_A_loader_5_V_blk_n;
    sc_signal< sc_logic > block_A_loader_6_V_blk_n;
    sc_signal< sc_logic > block_A_loader_7_V_blk_n;
    sc_signal< sc_logic > block_A_loader_8_V_blk_n;
    sc_signal< sc_logic > block_A_loader_9_V_blk_n;
    sc_signal< sc_logic > block_A_loader_10_V_blk_n;
    sc_signal< sc_logic > block_A_loader_11_V_blk_n;
    sc_signal< sc_lv<12> > add_ln334_fu_489_p2;
    sc_signal< sc_lv<12> > add_ln334_reg_514;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln334_fu_483_p2;
    sc_signal< sc_lv<12> > k_0_i_0_reg_472;
    sc_signal< bool > ap_block_state3;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln337_fu_495_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_C00;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_0_address0();
    void thread_A_0_ce0();
    void thread_A_10_address0();
    void thread_A_10_ce0();
    void thread_A_11_address0();
    void thread_A_11_ce0();
    void thread_A_1_address0();
    void thread_A_1_ce0();
    void thread_A_2_address0();
    void thread_A_2_ce0();
    void thread_A_3_address0();
    void thread_A_3_ce0();
    void thread_A_4_address0();
    void thread_A_4_ce0();
    void thread_A_5_address0();
    void thread_A_5_ce0();
    void thread_A_6_address0();
    void thread_A_6_ce0();
    void thread_A_7_address0();
    void thread_A_7_ce0();
    void thread_A_8_address0();
    void thread_A_8_ce0();
    void thread_A_9_address0();
    void thread_A_9_ce0();
    void thread_add_ln334_fu_489_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_block_A_loader_0_V_blk_n();
    void thread_block_A_loader_0_V_din();
    void thread_block_A_loader_0_V_write();
    void thread_block_A_loader_10_V_blk_n();
    void thread_block_A_loader_10_V_din();
    void thread_block_A_loader_10_V_write();
    void thread_block_A_loader_11_V_blk_n();
    void thread_block_A_loader_11_V_din();
    void thread_block_A_loader_11_V_write();
    void thread_block_A_loader_1_V_blk_n();
    void thread_block_A_loader_1_V_din();
    void thread_block_A_loader_1_V_write();
    void thread_block_A_loader_2_V_blk_n();
    void thread_block_A_loader_2_V_din();
    void thread_block_A_loader_2_V_write();
    void thread_block_A_loader_3_V_blk_n();
    void thread_block_A_loader_3_V_din();
    void thread_block_A_loader_3_V_write();
    void thread_block_A_loader_4_V_blk_n();
    void thread_block_A_loader_4_V_din();
    void thread_block_A_loader_4_V_write();
    void thread_block_A_loader_5_V_blk_n();
    void thread_block_A_loader_5_V_din();
    void thread_block_A_loader_5_V_write();
    void thread_block_A_loader_6_V_blk_n();
    void thread_block_A_loader_6_V_din();
    void thread_block_A_loader_6_V_write();
    void thread_block_A_loader_7_V_blk_n();
    void thread_block_A_loader_7_V_din();
    void thread_block_A_loader_7_V_write();
    void thread_block_A_loader_8_V_blk_n();
    void thread_block_A_loader_8_V_din();
    void thread_block_A_loader_8_V_write();
    void thread_block_A_loader_9_V_blk_n();
    void thread_block_A_loader_9_V_din();
    void thread_block_A_loader_9_V_write();
    void thread_icmp_ln334_fu_483_p2();
    void thread_zext_ln337_fu_495_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
