// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "init_block_B_proc637_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic init_block_B_proc637_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic init_block_B_proc637_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> init_block_B_proc637_1::ap_ST_fsm_state1 = "1";
const sc_lv<3> init_block_B_proc637_1::ap_ST_fsm_state2 = "10";
const sc_lv<3> init_block_B_proc637_1::ap_ST_fsm_state3 = "100";
const sc_lv<32> init_block_B_proc637_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> init_block_B_proc637_1::ap_const_lv32_2 = "10";
const sc_lv<32> init_block_B_proc637_1::ap_const_lv32_1 = "1";
const sc_lv<7> init_block_B_proc637_1::ap_const_lv7_0 = "0000000";
const sc_lv<6> init_block_B_proc637_1::ap_const_lv6_0 = "000000";
const sc_lv<7> init_block_B_proc637_1::ap_const_lv7_40 = "1000000";
const sc_lv<7> init_block_B_proc637_1::ap_const_lv7_1 = "1";
const sc_lv<1> init_block_B_proc637_1::ap_const_lv1_1 = "1";
const bool init_block_B_proc637_1::ap_const_boolean_1 = true;

init_block_B_proc637_1::init_block_B_proc637_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_B_0_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln105_1_fu_246_p1 );

    SC_METHOD(thread_B_0_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_B_1_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln105_1_fu_246_p1 );

    SC_METHOD(thread_B_1_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_B_2_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln105_1_fu_246_p1 );

    SC_METHOD(thread_B_2_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_B_3_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln105_1_fu_246_p1 );

    SC_METHOD(thread_B_3_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_add_ln105_fu_241_p2);
    sensitive << ( zext_ln105_cast_reg_254 );
    sensitive << ( zext_ln105_fu_237_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( jj_0_i_empty_n );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln102_fu_225_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln102_fu_225_p2 );

    SC_METHOD(thread_block_B_loader_0_V_blk_n);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_0_V_din);
    sensitive << ( B_0_q0 );
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_0_V_write);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_1_V_blk_n);
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_1_V_din);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( B_1_q0 );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_1_V_write);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_2_V_blk_n);
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_2_V_din);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( B_2_q0 );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_2_V_write);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_3_V_blk_n);
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_3_V_din);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( B_3_q0 );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_block_B_loader_3_V_write);
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln102_fu_225_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( k3_0_i_i_reg_202 );

    SC_METHOD(thread_jj_0_i_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jj_0_i_empty_n );

    SC_METHOD(thread_jj_0_i_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jj_0_i_empty_n );

    SC_METHOD(thread_k_fu_231_p2);
    sensitive << ( k3_0_i_i_reg_202 );

    SC_METHOD(thread_tmp_s_fu_213_p3);
    sensitive << ( jj_0_i_dout );

    SC_METHOD(thread_zext_ln105_1_fu_246_p1);
    sensitive << ( add_ln105_fu_241_p2 );

    SC_METHOD(thread_zext_ln105_cast_fu_221_p1);
    sensitive << ( tmp_s_fu_213_p3 );

    SC_METHOD(thread_zext_ln105_fu_237_p1);
    sensitive << ( k3_0_i_i_reg_202 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( jj_0_i_empty_n );
    sensitive << ( block_B_loader_0_V_full_n );
    sensitive << ( block_B_loader_1_V_full_n );
    sensitive << ( block_B_loader_2_V_full_n );
    sensitive << ( block_B_loader_3_V_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln102_fu_225_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "init_block_B_proc637_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, jj_0_i_dout, "(port)jj_0_i_dout");
    sc_trace(mVcdFile, jj_0_i_empty_n, "(port)jj_0_i_empty_n");
    sc_trace(mVcdFile, jj_0_i_read, "(port)jj_0_i_read");
    sc_trace(mVcdFile, B_0_address0, "(port)B_0_address0");
    sc_trace(mVcdFile, B_0_ce0, "(port)B_0_ce0");
    sc_trace(mVcdFile, B_0_q0, "(port)B_0_q0");
    sc_trace(mVcdFile, block_B_loader_0_V_din, "(port)block_B_loader_0_V_din");
    sc_trace(mVcdFile, block_B_loader_0_V_full_n, "(port)block_B_loader_0_V_full_n");
    sc_trace(mVcdFile, block_B_loader_0_V_write, "(port)block_B_loader_0_V_write");
    sc_trace(mVcdFile, B_1_address0, "(port)B_1_address0");
    sc_trace(mVcdFile, B_1_ce0, "(port)B_1_ce0");
    sc_trace(mVcdFile, B_1_q0, "(port)B_1_q0");
    sc_trace(mVcdFile, block_B_loader_1_V_din, "(port)block_B_loader_1_V_din");
    sc_trace(mVcdFile, block_B_loader_1_V_full_n, "(port)block_B_loader_1_V_full_n");
    sc_trace(mVcdFile, block_B_loader_1_V_write, "(port)block_B_loader_1_V_write");
    sc_trace(mVcdFile, B_2_address0, "(port)B_2_address0");
    sc_trace(mVcdFile, B_2_ce0, "(port)B_2_ce0");
    sc_trace(mVcdFile, B_2_q0, "(port)B_2_q0");
    sc_trace(mVcdFile, block_B_loader_2_V_din, "(port)block_B_loader_2_V_din");
    sc_trace(mVcdFile, block_B_loader_2_V_full_n, "(port)block_B_loader_2_V_full_n");
    sc_trace(mVcdFile, block_B_loader_2_V_write, "(port)block_B_loader_2_V_write");
    sc_trace(mVcdFile, B_3_address0, "(port)B_3_address0");
    sc_trace(mVcdFile, B_3_ce0, "(port)B_3_ce0");
    sc_trace(mVcdFile, B_3_q0, "(port)B_3_q0");
    sc_trace(mVcdFile, block_B_loader_3_V_din, "(port)block_B_loader_3_V_din");
    sc_trace(mVcdFile, block_B_loader_3_V_full_n, "(port)block_B_loader_3_V_full_n");
    sc_trace(mVcdFile, block_B_loader_3_V_write, "(port)block_B_loader_3_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, jj_0_i_blk_n, "jj_0_i_blk_n");
    sc_trace(mVcdFile, block_B_loader_0_V_blk_n, "block_B_loader_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, block_B_loader_1_V_blk_n, "block_B_loader_1_V_blk_n");
    sc_trace(mVcdFile, block_B_loader_2_V_blk_n, "block_B_loader_2_V_blk_n");
    sc_trace(mVcdFile, block_B_loader_3_V_blk_n, "block_B_loader_3_V_blk_n");
    sc_trace(mVcdFile, zext_ln105_cast_fu_221_p1, "zext_ln105_cast_fu_221_p1");
    sc_trace(mVcdFile, zext_ln105_cast_reg_254, "zext_ln105_cast_reg_254");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, k_fu_231_p2, "k_fu_231_p2");
    sc_trace(mVcdFile, k_reg_262, "k_reg_262");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln102_fu_225_p2, "icmp_ln102_fu_225_p2");
    sc_trace(mVcdFile, k3_0_i_i_reg_202, "k3_0_i_i_reg_202");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, zext_ln105_1_fu_246_p1, "zext_ln105_1_fu_246_p1");
    sc_trace(mVcdFile, tmp_s_fu_213_p3, "tmp_s_fu_213_p3");
    sc_trace(mVcdFile, zext_ln105_fu_237_p1, "zext_ln105_fu_237_p1");
    sc_trace(mVcdFile, add_ln105_fu_241_p2, "add_ln105_fu_241_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

init_block_B_proc637_1::~init_block_B_proc637_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void init_block_B_proc637_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln102_fu_225_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, jj_0_i_empty_n.read())))) {
        k3_0_i_i_reg_202 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
        k3_0_i_i_reg_202 = k_reg_262.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        k_reg_262 = k_fu_231_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, jj_0_i_empty_n.read())))) {
        zext_ln105_cast_reg_254 = zext_ln105_cast_fu_221_p1.read();
    }
}

void init_block_B_proc637_1::thread_B_0_address0() {
    B_0_address0 =  (sc_lv<8>) (zext_ln105_1_fu_246_p1.read());
}

void init_block_B_proc637_1::thread_B_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        B_0_ce0 = ap_const_logic_1;
    } else {
        B_0_ce0 = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_B_1_address0() {
    B_1_address0 =  (sc_lv<8>) (zext_ln105_1_fu_246_p1.read());
}

void init_block_B_proc637_1::thread_B_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        B_1_ce0 = ap_const_logic_1;
    } else {
        B_1_ce0 = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_B_2_address0() {
    B_2_address0 =  (sc_lv<8>) (zext_ln105_1_fu_246_p1.read());
}

void init_block_B_proc637_1::thread_B_2_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        B_2_ce0 = ap_const_logic_1;
    } else {
        B_2_ce0 = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_B_3_address0() {
    B_3_address0 =  (sc_lv<8>) (zext_ln105_1_fu_246_p1.read());
}

void init_block_B_proc637_1::thread_B_3_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        B_3_ce0 = ap_const_logic_1;
    } else {
        B_3_ce0 = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_add_ln105_fu_241_p2() {
    add_ln105_fu_241_p2 = (!zext_ln105_cast_reg_254.read().is_01() || !zext_ln105_fu_237_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln105_cast_reg_254.read()) + sc_biguint<9>(zext_ln105_fu_237_p1.read()));
}

void init_block_B_proc637_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void init_block_B_proc637_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void init_block_B_proc637_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void init_block_B_proc637_1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, jj_0_i_empty_n.read()));
}

void init_block_B_proc637_1::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read()));
}

void init_block_B_proc637_1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln102_fu_225_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void init_block_B_proc637_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln102_fu_225_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_0_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        block_B_loader_0_V_blk_n = block_B_loader_0_V_full_n.read();
    } else {
        block_B_loader_0_V_blk_n = ap_const_logic_1;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_0_V_din() {
    block_B_loader_0_V_din = B_0_q0.read();
}

void init_block_B_proc637_1::thread_block_B_loader_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
        block_B_loader_0_V_write = ap_const_logic_1;
    } else {
        block_B_loader_0_V_write = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_1_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        block_B_loader_1_V_blk_n = block_B_loader_1_V_full_n.read();
    } else {
        block_B_loader_1_V_blk_n = ap_const_logic_1;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_1_V_din() {
    block_B_loader_1_V_din = B_1_q0.read();
}

void init_block_B_proc637_1::thread_block_B_loader_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
        block_B_loader_1_V_write = ap_const_logic_1;
    } else {
        block_B_loader_1_V_write = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_2_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        block_B_loader_2_V_blk_n = block_B_loader_2_V_full_n.read();
    } else {
        block_B_loader_2_V_blk_n = ap_const_logic_1;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_2_V_din() {
    block_B_loader_2_V_din = B_2_q0.read();
}

void init_block_B_proc637_1::thread_block_B_loader_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
        block_B_loader_2_V_write = ap_const_logic_1;
    } else {
        block_B_loader_2_V_write = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_3_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        block_B_loader_3_V_blk_n = block_B_loader_3_V_full_n.read();
    } else {
        block_B_loader_3_V_blk_n = ap_const_logic_1;
    }
}

void init_block_B_proc637_1::thread_block_B_loader_3_V_din() {
    block_B_loader_3_V_din = B_3_q0.read();
}

void init_block_B_proc637_1::thread_block_B_loader_3_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
        block_B_loader_3_V_write = ap_const_logic_1;
    } else {
        block_B_loader_3_V_write = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_icmp_ln102_fu_225_p2() {
    icmp_ln102_fu_225_p2 = (!k3_0_i_i_reg_202.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(k3_0_i_i_reg_202.read() == ap_const_lv7_40);
}

void init_block_B_proc637_1::thread_jj_0_i_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        jj_0_i_blk_n = jj_0_i_empty_n.read();
    } else {
        jj_0_i_blk_n = ap_const_logic_1;
    }
}

void init_block_B_proc637_1::thread_jj_0_i_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, jj_0_i_empty_n.read())))) {
        jj_0_i_read = ap_const_logic_1;
    } else {
        jj_0_i_read = ap_const_logic_0;
    }
}

void init_block_B_proc637_1::thread_k_fu_231_p2() {
    k_fu_231_p2 = (!k3_0_i_i_reg_202.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(k3_0_i_i_reg_202.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void init_block_B_proc637_1::thread_tmp_s_fu_213_p3() {
    tmp_s_fu_213_p3 = esl_concat<2,6>(jj_0_i_dout.read(), ap_const_lv6_0);
}

void init_block_B_proc637_1::thread_zext_ln105_1_fu_246_p1() {
    zext_ln105_1_fu_246_p1 = esl_zext<64,9>(add_ln105_fu_241_p2.read());
}

void init_block_B_proc637_1::thread_zext_ln105_cast_fu_221_p1() {
    zext_ln105_cast_fu_221_p1 = esl_zext<9,8>(tmp_s_fu_213_p3.read());
}

void init_block_B_proc637_1::thread_zext_ln105_fu_237_p1() {
    zext_ln105_fu_237_p1 = esl_zext<9,7>(k3_0_i_i_reg_202.read());
}

void init_block_B_proc637_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, jj_0_i_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln102_fu_225_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_2_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, block_B_loader_3_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

