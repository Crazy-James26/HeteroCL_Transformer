-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_j2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp_sumRow_load : IN STD_LOGIC_VECTOR (31 downto 0);
    inp_sumRow_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    inp_sumRow_ce0 : OUT STD_LOGIC;
    inp_sumRow_we0 : OUT STD_LOGIC;
    inp_sumRow_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln68 : IN STD_LOGIC_VECTOR (3 downto 0);
    sub_ln71 : IN STD_LOGIC_VECTOR (5 downto 0);
    v84_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_ce0 : OUT STD_LOGIC;
    v84_we0 : OUT STD_LOGIC;
    v84_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v84_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_ce1 : OUT STD_LOGIC;
    v84_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v84_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_1_ce0 : OUT STD_LOGIC;
    v84_1_we0 : OUT STD_LOGIC;
    v84_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v84_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_1_ce1 : OUT STD_LOGIC;
    v84_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v84_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_2_ce0 : OUT STD_LOGIC;
    v84_2_we0 : OUT STD_LOGIC;
    v84_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v84_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_2_ce1 : OUT STD_LOGIC;
    v84_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    v84_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_3_ce0 : OUT STD_LOGIC;
    v84_3_we0 : OUT STD_LOGIC;
    v84_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v84_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v84_3_ce1 : OUT STD_LOGIC;
    v84_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln11 : IN STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_637_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_637_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_637_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_637_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_637_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_j2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln69_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln11_read_reg_276 : STD_LOGIC_VECTOR (1 downto 0);
    signal inp_sumRow_addr_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal inp_sumRow_addr_reg_281_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inp_sumRow_addr_reg_281_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inp_sumRow_addr_reg_281_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal inp_sumRow_addr_reg_281_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln69_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_286_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_286_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_286_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v84_addr_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_addr_reg_290_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_addr_reg_290_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_1_addr_reg_296 : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_1_addr_reg_296_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_1_addr_reg_296_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_2_addr_reg_302 : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_2_addr_reg_302_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_2_addr_reg_302_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_3_addr_reg_308 : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_3_addr_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v84_3_addr_reg_308_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln69_1_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_reg_314_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_reg_314_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_reg_314_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_1_reg_314_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v44_fu_240_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal v44_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v46_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal v48_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln68_cast_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln71_1_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v47_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_v47_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j2_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln69_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j2_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln71_fu_211_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_fu_215_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fexp_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fexp_32ns_32ns_32_10_full_dsp_1_U2855 : component Bert_layer_fexp_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => v44_reg_318,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    mux_42_32_1_1_U2856 : component Bert_layer_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => v84_q1,
        din1 => v84_1_q1,
        din2 => v84_2_q1,
        din3 => v84_3_q1,
        din4 => trunc_ln11,
        dout => v44_fu_240_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    j2_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_fu_199_p2 = ap_const_lv1_0))) then 
                    j2_fu_64 <= add_ln69_fu_205_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j2_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v47_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    v47_fu_60 <= inp_sumRow_load;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    v47_fu_60 <= grp_fu_637_p_dout0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_fu_199_p2 = ap_const_lv1_0))) then
                icmp_ln69_1_reg_314 <= icmp_ln69_1_fu_229_p2;
                v84_1_addr_reg_296 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);
                v84_2_addr_reg_302 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);
                v84_3_addr_reg_308 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);
                v84_addr_reg_290 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln69_1_reg_314_pp0_iter1_reg <= icmp_ln69_1_reg_314;
                icmp_ln69_1_reg_314_pp0_iter2_reg <= icmp_ln69_1_reg_314_pp0_iter1_reg;
                icmp_ln69_1_reg_314_pp0_iter3_reg <= icmp_ln69_1_reg_314_pp0_iter2_reg;
                icmp_ln69_1_reg_314_pp0_iter4_reg <= icmp_ln69_1_reg_314_pp0_iter3_reg;
                icmp_ln69_reg_286 <= icmp_ln69_fu_199_p2;
                icmp_ln69_reg_286_pp0_iter1_reg <= icmp_ln69_reg_286;
                icmp_ln69_reg_286_pp0_iter2_reg <= icmp_ln69_reg_286_pp0_iter1_reg;
                icmp_ln69_reg_286_pp0_iter3_reg <= icmp_ln69_reg_286_pp0_iter2_reg;
                inp_sumRow_addr_reg_281 <= zext_ln68_cast_fu_181_p1(4 - 1 downto 0);
                inp_sumRow_addr_reg_281_pp0_iter1_reg <= inp_sumRow_addr_reg_281;
                inp_sumRow_addr_reg_281_pp0_iter2_reg <= inp_sumRow_addr_reg_281_pp0_iter1_reg;
                inp_sumRow_addr_reg_281_pp0_iter3_reg <= inp_sumRow_addr_reg_281_pp0_iter2_reg;
                inp_sumRow_addr_reg_281_pp0_iter4_reg <= inp_sumRow_addr_reg_281_pp0_iter3_reg;
                v48_reg_337 <= grp_fu_637_p_dout0;
                v84_1_addr_reg_296_pp0_iter1_reg <= v84_1_addr_reg_296;
                v84_1_addr_reg_296_pp0_iter2_reg <= v84_1_addr_reg_296_pp0_iter1_reg;
                v84_2_addr_reg_302_pp0_iter1_reg <= v84_2_addr_reg_302;
                v84_2_addr_reg_302_pp0_iter2_reg <= v84_2_addr_reg_302_pp0_iter1_reg;
                v84_3_addr_reg_308_pp0_iter1_reg <= v84_3_addr_reg_308;
                v84_3_addr_reg_308_pp0_iter2_reg <= v84_3_addr_reg_308_pp0_iter1_reg;
                v84_addr_reg_290_pp0_iter1_reg <= v84_addr_reg_290;
                v84_addr_reg_290_pp0_iter2_reg <= v84_addr_reg_290_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_reg_286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                v44_reg_318 <= v44_fu_240_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                v46_reg_323 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter3_stage1, ap_idle_pp0_0to2, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln69_fu_205_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j2_1) + unsigned(ap_const_lv4_1));
    add_ln71_fu_215_p2 <= std_logic_vector(unsigned(sub_ln71) + unsigned(zext_ln71_fu_211_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln69_reg_286)
    begin
        if (((icmp_ln69_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage1_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln69_reg_286_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_286_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j2_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j2_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j2_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j2_1 <= j2_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_v47_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, v47_fu_60, grp_fu_637_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_v47_load <= grp_fu_637_p_dout0;
        else 
            ap_sig_allocacmp_v47_load <= v47_fu_60;
        end if; 
    end process;

    grp_fu_637_p_ce <= ap_const_logic_1;
    grp_fu_637_p_din0 <= ap_sig_allocacmp_v47_load;
    grp_fu_637_p_din1 <= v46_reg_323;
    grp_fu_637_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    icmp_ln69_1_fu_229_p2 <= "1" when (add_ln69_fu_205_p2 = ap_const_lv4_C) else "0";
    icmp_ln69_fu_199_p2 <= "1" when (ap_sig_allocacmp_j2_1 = ap_const_lv4_C) else "0";
    inp_sumRow_address0 <= inp_sumRow_addr_reg_281_pp0_iter4_reg;

    inp_sumRow_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            inp_sumRow_ce0 <= ap_const_logic_1;
        else 
            inp_sumRow_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inp_sumRow_d0 <= v48_reg_337;

    inp_sumRow_we0_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln69_1_reg_314_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_1_reg_314_pp0_iter4_reg = ap_const_lv1_1))) then 
            inp_sumRow_we0 <= ap_const_logic_1;
        else 
            inp_sumRow_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln11_read_reg_276 <= trunc_ln11;
    v84_1_address0 <= v84_1_addr_reg_296_pp0_iter2_reg;
    v84_1_address1 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);

    v84_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_1_ce0 <= ap_const_logic_1;
        else 
            v84_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v84_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_1_ce1 <= ap_const_logic_1;
        else 
            v84_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v84_1_d0 <= v46_reg_323;

    v84_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln11_read_reg_276)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln11_read_reg_276 = ap_const_lv2_1))) then 
            v84_1_we0 <= ap_const_logic_1;
        else 
            v84_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v84_2_address0 <= v84_2_addr_reg_302_pp0_iter2_reg;
    v84_2_address1 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);

    v84_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_2_ce0 <= ap_const_logic_1;
        else 
            v84_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v84_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_2_ce1 <= ap_const_logic_1;
        else 
            v84_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v84_2_d0 <= v46_reg_323;

    v84_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln11_read_reg_276)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln11_read_reg_276 = ap_const_lv2_2))) then 
            v84_2_we0 <= ap_const_logic_1;
        else 
            v84_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v84_3_address0 <= v84_3_addr_reg_308_pp0_iter2_reg;
    v84_3_address1 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);

    v84_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_3_ce0 <= ap_const_logic_1;
        else 
            v84_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v84_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_3_ce1 <= ap_const_logic_1;
        else 
            v84_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v84_3_d0 <= v46_reg_323;

    v84_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln11_read_reg_276)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln11_read_reg_276 = ap_const_lv2_3))) then 
            v84_3_we0 <= ap_const_logic_1;
        else 
            v84_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v84_address0 <= v84_addr_reg_290_pp0_iter2_reg;
    v84_address1 <= zext_ln71_1_fu_221_p1(6 - 1 downto 0);

    v84_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_ce0 <= ap_const_logic_1;
        else 
            v84_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v84_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v84_ce1 <= ap_const_logic_1;
        else 
            v84_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    v84_d0 <= v46_reg_323;

    v84_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, trunc_ln11_read_reg_276)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln11_read_reg_276 = ap_const_lv2_0))) then 
            v84_we0 <= ap_const_logic_1;
        else 
            v84_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln68_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln68),64));
    zext_ln71_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_fu_215_p2),64));
    zext_ln71_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j2_1),6));
end behav;
