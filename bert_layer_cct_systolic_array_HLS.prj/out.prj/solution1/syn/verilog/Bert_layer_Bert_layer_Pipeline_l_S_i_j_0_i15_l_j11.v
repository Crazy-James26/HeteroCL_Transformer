// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i15_l_j11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v237_address0,
        v237_ce0,
        v237_we0,
        v237_d0,
        v236_address0,
        v236_ce0,
        v236_q0,
        v236_1_address0,
        v236_1_ce0,
        v236_1_q0,
        v236_2_address0,
        v236_2_ce0,
        v236_2_q0,
        v236_3_address0,
        v236_3_ce0,
        v236_3_q0,
        v236_4_address0,
        v236_4_ce0,
        v236_4_q0,
        v236_5_address0,
        v236_5_ce0,
        v236_5_q0,
        v236_6_address0,
        v236_6_ce0,
        v236_6_q0,
        v236_7_address0,
        v236_7_ce0,
        v236_7_q0,
        v236_8_address0,
        v236_8_ce0,
        v236_8_q0,
        v236_9_address0,
        v236_9_ce0,
        v236_9_q0,
        v236_10_address0,
        v236_10_ce0,
        v236_10_q0,
        v236_11_address0,
        v236_11_ce0,
        v236_11_q0,
        v233_address0,
        v233_ce0,
        v233_q0,
        v233_1_address0,
        v233_1_ce0,
        v233_1_q0,
        v233_2_address0,
        v233_2_ce0,
        v233_2_q0,
        v233_3_address0,
        v233_3_ce0,
        v233_3_q0,
        v233_4_address0,
        v233_4_ce0,
        v233_4_q0,
        v233_5_address0,
        v233_5_ce0,
        v233_5_q0,
        v233_6_address0,
        v233_6_ce0,
        v233_6_q0,
        v233_7_address0,
        v233_7_ce0,
        v233_7_q0,
        v233_8_address0,
        v233_8_ce0,
        v233_8_q0,
        v233_9_address0,
        v233_9_ce0,
        v233_9_q0,
        v233_10_address0,
        v233_10_ce0,
        v233_10_q0,
        v233_11_address0,
        v233_11_ce0,
        v233_11_q0,
        grp_fu_1394_p_din0,
        grp_fu_1394_p_din1,
        grp_fu_1394_p_opcode,
        grp_fu_1394_p_dout0,
        grp_fu_1394_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v237_address0;
output   v237_ce0;
output   v237_we0;
output  [31:0] v237_d0;
output  [9:0] v236_address0;
output   v236_ce0;
input  [31:0] v236_q0;
output  [9:0] v236_1_address0;
output   v236_1_ce0;
input  [31:0] v236_1_q0;
output  [9:0] v236_2_address0;
output   v236_2_ce0;
input  [31:0] v236_2_q0;
output  [9:0] v236_3_address0;
output   v236_3_ce0;
input  [31:0] v236_3_q0;
output  [9:0] v236_4_address0;
output   v236_4_ce0;
input  [31:0] v236_4_q0;
output  [9:0] v236_5_address0;
output   v236_5_ce0;
input  [31:0] v236_5_q0;
output  [9:0] v236_6_address0;
output   v236_6_ce0;
input  [31:0] v236_6_q0;
output  [9:0] v236_7_address0;
output   v236_7_ce0;
input  [31:0] v236_7_q0;
output  [9:0] v236_8_address0;
output   v236_8_ce0;
input  [31:0] v236_8_q0;
output  [9:0] v236_9_address0;
output   v236_9_ce0;
input  [31:0] v236_9_q0;
output  [9:0] v236_10_address0;
output   v236_10_ce0;
input  [31:0] v236_10_q0;
output  [9:0] v236_11_address0;
output   v236_11_ce0;
input  [31:0] v236_11_q0;
output  [9:0] v233_address0;
output   v233_ce0;
input  [31:0] v233_q0;
output  [9:0] v233_1_address0;
output   v233_1_ce0;
input  [31:0] v233_1_q0;
output  [9:0] v233_2_address0;
output   v233_2_ce0;
input  [31:0] v233_2_q0;
output  [9:0] v233_3_address0;
output   v233_3_ce0;
input  [31:0] v233_3_q0;
output  [9:0] v233_4_address0;
output   v233_4_ce0;
input  [31:0] v233_4_q0;
output  [9:0] v233_5_address0;
output   v233_5_ce0;
input  [31:0] v233_5_q0;
output  [9:0] v233_6_address0;
output   v233_6_ce0;
input  [31:0] v233_6_q0;
output  [9:0] v233_7_address0;
output   v233_7_ce0;
input  [31:0] v233_7_q0;
output  [9:0] v233_8_address0;
output   v233_8_ce0;
input  [31:0] v233_8_q0;
output  [9:0] v233_9_address0;
output   v233_9_ce0;
input  [31:0] v233_9_q0;
output  [9:0] v233_10_address0;
output   v233_10_ce0;
input  [31:0] v233_10_q0;
output  [9:0] v233_11_address0;
output   v233_11_ce0;
input  [31:0] v233_11_q0;
output  [31:0] grp_fu_1394_p_din0;
output  [31:0] grp_fu_1394_p_din1;
output  [0:0] grp_fu_1394_p_opcode;
input  [31:0] grp_fu_1394_p_dout0;
output   grp_fu_1394_p_ce;

reg ap_idle;
reg v237_ce0;
reg v237_we0;
reg v236_ce0;
reg v236_1_ce0;
reg v236_2_ce0;
reg v236_3_ce0;
reg v236_4_ce0;
reg v236_5_ce0;
reg v236_6_ce0;
reg v236_7_ce0;
reg v236_8_ce0;
reg v236_9_ce0;
reg v236_10_ce0;
reg v236_11_ce0;
reg v233_ce0;
reg v233_1_ce0;
reg v233_2_ce0;
reg v233_3_ce0;
reg v233_4_ce0;
reg v233_5_ce0;
reg v233_6_ce0;
reg v233_7_ce0;
reg v233_8_ce0;
reg v233_9_ce0;
reg v233_10_ce0;
reg v233_11_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln344_fu_453_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln345_fu_468_p2;
reg   [0:0] icmp_ln345_reg_670;
wire   [9:0] select_ln344_fu_474_p3;
reg   [9:0] select_ln344_reg_675;
reg   [9:0] select_ln344_reg_675_pp0_iter1_reg;
reg   [9:0] select_ln344_reg_675_pp0_iter2_reg;
reg   [9:0] select_ln344_reg_675_pp0_iter3_reg;
reg   [9:0] select_ln344_reg_675_pp0_iter4_reg;
reg   [9:0] select_ln344_reg_675_pp0_iter5_reg;
reg   [9:0] select_ln344_reg_675_pp0_iter6_reg;
wire   [3:0] select_ln344_1_fu_535_p3;
reg   [3:0] select_ln344_1_reg_800;
reg   [3:0] select_ln344_1_reg_800_pp0_iter2_reg;
reg   [3:0] select_ln344_1_reg_800_pp0_iter3_reg;
reg   [3:0] select_ln344_1_reg_800_pp0_iter4_reg;
reg   [3:0] select_ln344_1_reg_800_pp0_iter5_reg;
reg   [3:0] select_ln344_1_reg_800_pp0_iter6_reg;
wire   [31:0] v206_fu_542_p14;
reg   [31:0] v206_reg_806;
wire   [31:0] v207_fu_572_p14;
reg   [31:0] v207_reg_811;
reg   [31:0] v208_reg_816;
wire   [63:0] zext_ln345_fu_482_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln350_2_fu_640_p1;
reg   [9:0] j11_fu_94;
wire   [9:0] add_ln345_fu_510_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j11_load;
reg   [3:0] i15_fu_98;
reg   [13:0] indvar_flatten55_fu_102;
wire   [13:0] add_ln344_1_fu_459_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten55_load;
wire   [3:0] add_ln344_fu_529_p2;
wire   [11:0] tmp_38_fu_614_p3;
wire   [13:0] tmp_s_fu_607_p3;
wire   [13:0] zext_ln350_fu_621_p1;
wire   [13:0] sub_ln350_fu_625_p2;
wire   [13:0] zext_ln350_1_fu_631_p1;
wire   [13:0] add_ln350_fu_634_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U10630(
    .din0(v236_q0),
    .din1(v236_1_q0),
    .din2(v236_2_q0),
    .din3(v236_3_q0),
    .din4(v236_4_q0),
    .din5(v236_5_q0),
    .din6(v236_6_q0),
    .din7(v236_7_q0),
    .din8(v236_8_q0),
    .din9(v236_9_q0),
    .din10(v236_10_q0),
    .din11(v236_11_q0),
    .din12(select_ln344_1_fu_535_p3),
    .dout(v206_fu_542_p14)
);

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U10631(
    .din0(v233_q0),
    .din1(v233_1_q0),
    .din2(v233_2_q0),
    .din3(v233_3_q0),
    .din4(v233_4_q0),
    .din5(v233_5_q0),
    .din6(v233_6_q0),
    .din7(v233_7_q0),
    .din8(v233_8_q0),
    .din9(v233_9_q0),
    .din10(v233_10_q0),
    .din11(v233_11_q0),
    .din12(select_ln344_1_fu_535_p3),
    .dout(v207_fu_572_p14)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i15_fu_98 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i15_fu_98 <= select_ln344_1_fu_535_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln344_fu_453_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten55_fu_102 <= add_ln344_1_fu_459_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten55_fu_102 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln344_fu_453_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j11_fu_94 <= add_ln345_fu_510_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j11_fu_94 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln344_1_reg_800 <= select_ln344_1_fu_535_p3;
        select_ln344_reg_675_pp0_iter1_reg <= select_ln344_reg_675;
        v206_reg_806 <= v206_fu_542_p14;
        v207_reg_811 <= v207_fu_572_p14;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        select_ln344_1_reg_800_pp0_iter2_reg <= select_ln344_1_reg_800;
        select_ln344_1_reg_800_pp0_iter3_reg <= select_ln344_1_reg_800_pp0_iter2_reg;
        select_ln344_1_reg_800_pp0_iter4_reg <= select_ln344_1_reg_800_pp0_iter3_reg;
        select_ln344_1_reg_800_pp0_iter5_reg <= select_ln344_1_reg_800_pp0_iter4_reg;
        select_ln344_1_reg_800_pp0_iter6_reg <= select_ln344_1_reg_800_pp0_iter5_reg;
        select_ln344_reg_675_pp0_iter2_reg <= select_ln344_reg_675_pp0_iter1_reg;
        select_ln344_reg_675_pp0_iter3_reg <= select_ln344_reg_675_pp0_iter2_reg;
        select_ln344_reg_675_pp0_iter4_reg <= select_ln344_reg_675_pp0_iter3_reg;
        select_ln344_reg_675_pp0_iter5_reg <= select_ln344_reg_675_pp0_iter4_reg;
        select_ln344_reg_675_pp0_iter6_reg <= select_ln344_reg_675_pp0_iter5_reg;
        v208_reg_816 <= grp_fu_1394_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln344_fu_453_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln345_reg_670 <= icmp_ln345_fu_468_p2;
        select_ln344_reg_675 <= select_ln344_fu_474_p3;
    end
end

always @ (*) begin
    if (((icmp_ln344_fu_453_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten55_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten55_load = indvar_flatten55_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j11_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j11_load = j11_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_10_ce0 = 1'b1;
    end else begin
        v233_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_11_ce0 = 1'b1;
    end else begin
        v233_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_1_ce0 = 1'b1;
    end else begin
        v233_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_2_ce0 = 1'b1;
    end else begin
        v233_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_3_ce0 = 1'b1;
    end else begin
        v233_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_4_ce0 = 1'b1;
    end else begin
        v233_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_5_ce0 = 1'b1;
    end else begin
        v233_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_6_ce0 = 1'b1;
    end else begin
        v233_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_7_ce0 = 1'b1;
    end else begin
        v233_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_8_ce0 = 1'b1;
    end else begin
        v233_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_9_ce0 = 1'b1;
    end else begin
        v233_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v233_ce0 = 1'b1;
    end else begin
        v233_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_10_ce0 = 1'b1;
    end else begin
        v236_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_11_ce0 = 1'b1;
    end else begin
        v236_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_1_ce0 = 1'b1;
    end else begin
        v236_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_2_ce0 = 1'b1;
    end else begin
        v236_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_3_ce0 = 1'b1;
    end else begin
        v236_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_4_ce0 = 1'b1;
    end else begin
        v236_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_5_ce0 = 1'b1;
    end else begin
        v236_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_6_ce0 = 1'b1;
    end else begin
        v236_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_7_ce0 = 1'b1;
    end else begin
        v236_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_8_ce0 = 1'b1;
    end else begin
        v236_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_9_ce0 = 1'b1;
    end else begin
        v236_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_ce0 = 1'b1;
    end else begin
        v236_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v237_ce0 = 1'b1;
    end else begin
        v237_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v237_we0 = 1'b1;
    end else begin
        v237_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln344_1_fu_459_p2 = (ap_sig_allocacmp_indvar_flatten55_load + 14'd1);

assign add_ln344_fu_529_p2 = (i15_fu_98 + 4'd1);

assign add_ln345_fu_510_p2 = (select_ln344_fu_474_p3 + 10'd1);

assign add_ln350_fu_634_p2 = (sub_ln350_fu_625_p2 + zext_ln350_1_fu_631_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_1394_p_ce = 1'b1;

assign grp_fu_1394_p_din0 = v206_reg_806;

assign grp_fu_1394_p_din1 = v207_reg_811;

assign grp_fu_1394_p_opcode = 2'd0;

assign icmp_ln344_fu_453_p2 = ((ap_sig_allocacmp_indvar_flatten55_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln345_fu_468_p2 = ((ap_sig_allocacmp_j11_load == 10'd768) ? 1'b1 : 1'b0);

assign select_ln344_1_fu_535_p3 = ((icmp_ln345_reg_670[0:0] == 1'b1) ? add_ln344_fu_529_p2 : i15_fu_98);

assign select_ln344_fu_474_p3 = ((icmp_ln345_fu_468_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j11_load);

assign sub_ln350_fu_625_p2 = (tmp_s_fu_607_p3 - zext_ln350_fu_621_p1);

assign tmp_38_fu_614_p3 = {{select_ln344_1_reg_800_pp0_iter6_reg}, {8'd0}};

assign tmp_s_fu_607_p3 = {{select_ln344_1_reg_800_pp0_iter6_reg}, {10'd0}};

assign v233_10_address0 = zext_ln345_fu_482_p1;

assign v233_11_address0 = zext_ln345_fu_482_p1;

assign v233_1_address0 = zext_ln345_fu_482_p1;

assign v233_2_address0 = zext_ln345_fu_482_p1;

assign v233_3_address0 = zext_ln345_fu_482_p1;

assign v233_4_address0 = zext_ln345_fu_482_p1;

assign v233_5_address0 = zext_ln345_fu_482_p1;

assign v233_6_address0 = zext_ln345_fu_482_p1;

assign v233_7_address0 = zext_ln345_fu_482_p1;

assign v233_8_address0 = zext_ln345_fu_482_p1;

assign v233_9_address0 = zext_ln345_fu_482_p1;

assign v233_address0 = zext_ln345_fu_482_p1;

assign v236_10_address0 = zext_ln345_fu_482_p1;

assign v236_11_address0 = zext_ln345_fu_482_p1;

assign v236_1_address0 = zext_ln345_fu_482_p1;

assign v236_2_address0 = zext_ln345_fu_482_p1;

assign v236_3_address0 = zext_ln345_fu_482_p1;

assign v236_4_address0 = zext_ln345_fu_482_p1;

assign v236_5_address0 = zext_ln345_fu_482_p1;

assign v236_6_address0 = zext_ln345_fu_482_p1;

assign v236_7_address0 = zext_ln345_fu_482_p1;

assign v236_8_address0 = zext_ln345_fu_482_p1;

assign v236_9_address0 = zext_ln345_fu_482_p1;

assign v236_address0 = zext_ln345_fu_482_p1;

assign v237_address0 = zext_ln350_2_fu_640_p1;

assign v237_d0 = v208_reg_816;

assign zext_ln345_fu_482_p1 = select_ln344_fu_474_p3;

assign zext_ln350_1_fu_631_p1 = select_ln344_reg_675_pp0_iter6_reg;

assign zext_ln350_2_fu_640_p1 = add_ln350_fu_634_p2;

assign zext_ln350_fu_621_p1 = tmp_38_fu_614_p3;

endmodule //Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i15_l_j11
