// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_block_B_proc637_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        jj_0_i_dout,
        jj_0_i_empty_n,
        jj_0_i_read,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        block_B_loader_0_V_din,
        block_B_loader_0_V_full_n,
        block_B_loader_0_V_write,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        block_B_loader_1_V_din,
        block_B_loader_1_V_full_n,
        block_B_loader_1_V_write,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        block_B_loader_2_V_din,
        block_B_loader_2_V_full_n,
        block_B_loader_2_V_write,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        block_B_loader_3_V_din,
        block_B_loader_3_V_full_n,
        block_B_loader_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1:0] jj_0_i_dout;
input   jj_0_i_empty_n;
output   jj_0_i_read;
output  [7:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [31:0] block_B_loader_0_V_din;
input   block_B_loader_0_V_full_n;
output   block_B_loader_0_V_write;
output  [7:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [31:0] block_B_loader_1_V_din;
input   block_B_loader_1_V_full_n;
output   block_B_loader_1_V_write;
output  [7:0] B_2_address0;
output   B_2_ce0;
input  [31:0] B_2_q0;
output  [31:0] block_B_loader_2_V_din;
input   block_B_loader_2_V_full_n;
output   block_B_loader_2_V_write;
output  [7:0] B_3_address0;
output   B_3_ce0;
input  [31:0] B_3_q0;
output  [31:0] block_B_loader_3_V_din;
input   block_B_loader_3_V_full_n;
output   block_B_loader_3_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg jj_0_i_read;
reg B_0_ce0;
reg block_B_loader_0_V_write;
reg B_1_ce0;
reg block_B_loader_1_V_write;
reg B_2_ce0;
reg block_B_loader_2_V_write;
reg B_3_ce0;
reg block_B_loader_3_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    jj_0_i_blk_n;
reg    block_B_loader_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    block_B_loader_1_V_blk_n;
reg    block_B_loader_2_V_blk_n;
reg    block_B_loader_3_V_blk_n;
wire   [8:0] zext_ln105_cast_fu_221_p1;
reg   [8:0] zext_ln105_cast_reg_254;
reg    ap_block_state1;
wire   [6:0] k_fu_231_p2;
reg   [6:0] k_reg_262;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln102_fu_225_p2;
reg   [6:0] k3_0_i_i_reg_202;
reg    ap_block_state3;
wire   [63:0] zext_ln105_1_fu_246_p1;
wire   [7:0] tmp_s_fu_213_p3;
wire   [8:0] zext_ln105_fu_237_p1;
wire   [8:0] add_ln105_fu_241_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln102_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k3_0_i_i_reg_202 <= 7'd0;
    end else if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        k3_0_i_i_reg_202 <= k_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_262 <= k_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln105_cast_reg_254[7 : 6] <= zext_ln105_cast_fu_221_p1[7 : 6];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_2_ce0 = 1'b1;
    end else begin
        B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_3_ce0 = 1'b1;
    end else begin
        B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln102_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_0_V_blk_n = block_B_loader_0_V_full_n;
    end else begin
        block_B_loader_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_0_V_write = 1'b1;
    end else begin
        block_B_loader_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_1_V_blk_n = block_B_loader_1_V_full_n;
    end else begin
        block_B_loader_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_1_V_write = 1'b1;
    end else begin
        block_B_loader_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_2_V_blk_n = block_B_loader_2_V_full_n;
    end else begin
        block_B_loader_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_2_V_write = 1'b1;
    end else begin
        block_B_loader_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_3_V_blk_n = block_B_loader_3_V_full_n;
    end else begin
        block_B_loader_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_3_V_write = 1'b1;
    end else begin
        block_B_loader_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_blk_n = jj_0_i_empty_n;
    end else begin
        jj_0_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_read = 1'b1;
    end else begin
        jj_0_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (jj_0_i_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln102_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_0_address0 = zext_ln105_1_fu_246_p1;

assign B_1_address0 = zext_ln105_1_fu_246_p1;

assign B_2_address0 = zext_ln105_1_fu_246_p1;

assign B_3_address0 = zext_ln105_1_fu_246_p1;

assign add_ln105_fu_241_p2 = (zext_ln105_cast_reg_254 + zext_ln105_fu_237_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (jj_0_i_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0));
end

assign block_B_loader_0_V_din = B_0_q0;

assign block_B_loader_1_V_din = B_1_q0;

assign block_B_loader_2_V_din = B_2_q0;

assign block_B_loader_3_V_din = B_3_q0;

assign icmp_ln102_fu_225_p2 = ((k3_0_i_i_reg_202 == 7'd64) ? 1'b1 : 1'b0);

assign k_fu_231_p2 = (k3_0_i_i_reg_202 + 7'd1);

assign tmp_s_fu_213_p3 = {{jj_0_i_dout}, {6'd0}};

assign zext_ln105_1_fu_246_p1 = add_ln105_fu_241_p2;

assign zext_ln105_cast_fu_221_p1 = tmp_s_fu_213_p3;

assign zext_ln105_fu_237_p1 = k3_0_i_i_reg_202;

always @ (posedge ap_clk) begin
    zext_ln105_cast_reg_254[5:0] <= 6'b000000;
    zext_ln105_cast_reg_254[8] <= 1'b0;
end

endmodule //init_block_B_proc637_1
