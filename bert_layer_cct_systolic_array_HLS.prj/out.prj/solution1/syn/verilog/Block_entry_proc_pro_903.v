// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_entry_proc_pro_903 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        C_2_0_address0,
        C_2_0_ce0,
        C_2_0_we0,
        C_2_0_d0,
        C_2_0_q0,
        ii_0_i_dout,
        ii_0_i_empty_n,
        ii_0_i_read,
        jj_0_i_dout,
        jj_0_i_empty_n,
        jj_0_i_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] C_2_0_address0;
output   C_2_0_ce0;
output   C_2_0_we0;
output  [31:0] C_2_0_d0;
input  [31:0] C_2_0_q0;
input  [1:0] ii_0_i_dout;
input   ii_0_i_empty_n;
output   ii_0_i_read;
input  [1:0] jj_0_i_dout;
input   jj_0_i_empty_n;
output   jj_0_i_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] C_2_0_address0;
reg C_2_0_ce0;
reg C_2_0_we0;
reg ii_0_i_read;
reg jj_0_i_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ii_0_i_blk_n;
reg    jj_0_i_blk_n;
reg   [1:0] ii_0_i_read_reg_112;
reg    ap_block_state1;
reg   [1:0] jj_0_i_read_reg_118;
reg   [3:0] C_2_0_addr_reg_123;
wire    ap_CS_fsm_state2;
reg   [31:0] C_2_0_load_reg_128;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_73_p2;
reg   [31:0] tmp_i_2_i_reg_133;
wire    ap_CS_fsm_state8;
wire  signed [63:0] sext_ln116_fu_107_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_fu_81_p3;
wire   [4:0] zext_ln116_17_fu_88_p1;
wire   [4:0] zext_ln116_fu_78_p1;
wire   [4:0] sub_ln116_fu_92_p2;
wire   [4:0] zext_ln116_18_fu_98_p1;
wire   [4:0] add_ln116_fu_101_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
end

Bert_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3bkb_U3469(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_2_0_load_reg_128),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_73_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        C_2_0_addr_reg_123 <= sext_ln116_fu_107_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        C_2_0_load_reg_128 <= C_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((jj_0_i_empty_n == 1'b0) | (ii_0_i_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_0_i_read_reg_112 <= ii_0_i_dout;
        jj_0_i_read_reg_118 <= jj_0_i_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_i_2_i_reg_133 <= grp_fu_73_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_2_0_address0 = C_2_0_addr_reg_123;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        C_2_0_address0 = sext_ln116_fu_107_p1;
    end else begin
        C_2_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        C_2_0_ce0 = 1'b1;
    end else begin
        C_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_2_0_we0 = 1'b1;
    end else begin
        C_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_0_i_blk_n = ii_0_i_empty_n;
    end else begin
        ii_0_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((jj_0_i_empty_n == 1'b0) | (ii_0_i_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_0_i_read = 1'b1;
    end else begin
        ii_0_i_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_blk_n = jj_0_i_empty_n;
    end else begin
        jj_0_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((jj_0_i_empty_n == 1'b0) | (ii_0_i_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_read = 1'b1;
    end else begin
        jj_0_i_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((jj_0_i_empty_n == 1'b0) | (ii_0_i_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_2_0_d0 = tmp_i_2_i_reg_133;

assign add_ln116_fu_101_p2 = (sub_ln116_fu_92_p2 + zext_ln116_18_fu_98_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((jj_0_i_empty_n == 1'b0) | (ii_0_i_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign sext_ln116_fu_107_p1 = $signed(add_ln116_fu_101_p2);

assign sub_ln116_fu_92_p2 = (zext_ln116_17_fu_88_p1 - zext_ln116_fu_78_p1);

assign tmp_fu_81_p3 = {{ii_0_i_read_reg_112}, {2'd0}};

assign zext_ln116_17_fu_88_p1 = tmp_fu_81_p3;

assign zext_ln116_18_fu_98_p1 = jj_0_i_read_reg_118;

assign zext_ln116_fu_78_p1 = ii_0_i_read_reg_112;

endmodule //Block_entry_proc_pro_903
