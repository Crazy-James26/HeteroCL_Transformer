-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v86_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_ce0 : OUT STD_LOGIC;
    v86_we0 : OUT STD_LOGIC;
    v86_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_1_ce0 : OUT STD_LOGIC;
    v86_1_we0 : OUT STD_LOGIC;
    v86_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_2_ce0 : OUT STD_LOGIC;
    v86_2_we0 : OUT STD_LOGIC;
    v86_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_3_ce0 : OUT STD_LOGIC;
    v86_3_we0 : OUT STD_LOGIC;
    v86_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_4_ce0 : OUT STD_LOGIC;
    v86_4_we0 : OUT STD_LOGIC;
    v86_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_5_ce0 : OUT STD_LOGIC;
    v86_5_we0 : OUT STD_LOGIC;
    v86_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_6_ce0 : OUT STD_LOGIC;
    v86_6_we0 : OUT STD_LOGIC;
    v86_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_7_ce0 : OUT STD_LOGIC;
    v86_7_we0 : OUT STD_LOGIC;
    v86_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_8_ce0 : OUT STD_LOGIC;
    v86_8_we0 : OUT STD_LOGIC;
    v86_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_9_ce0 : OUT STD_LOGIC;
    v86_9_we0 : OUT STD_LOGIC;
    v86_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_10_ce0 : OUT STD_LOGIC;
    v86_10_we0 : OUT STD_LOGIC;
    v86_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_11_ce0 : OUT STD_LOGIC;
    v86_11_we0 : OUT STD_LOGIC;
    v86_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_12_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_12_ce0 : OUT STD_LOGIC;
    v86_12_we0 : OUT STD_LOGIC;
    v86_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_13_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_13_ce0 : OUT STD_LOGIC;
    v86_13_we0 : OUT STD_LOGIC;
    v86_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_14_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_14_ce0 : OUT STD_LOGIC;
    v86_14_we0 : OUT STD_LOGIC;
    v86_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v86_15_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v86_15_ce0 : OUT STD_LOGIC;
    v86_15_we0 : OUT STD_LOGIC;
    v86_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln106_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln108_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v58_fu_90 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln107_fu_446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_v58_load : STD_LOGIC_VECTOR (6 downto 0);
    signal v57_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln106_1_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_v57_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten40_fu_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_1_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten40_load : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln106_fu_400_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln108_fu_442_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln107_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln106_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln106_fu_374_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_390_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln5_fu_404_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_414_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten40_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln106_fu_344_p2 = ap_const_lv1_0)) then 
                    indvar_flatten40_fu_98 <= add_ln106_1_fu_350_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten40_fu_98 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    v57_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln106_fu_344_p2 = ap_const_lv1_0)) then 
                    v57_fu_94 <= select_ln106_1_fu_382_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    v57_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v58_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln106_fu_344_p2 = ap_const_lv1_0)) then 
                    v58_fu_90 <= add_ln107_fu_446_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    v58_fu_90 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln106_1_fu_350_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten40_load) + unsigned(ap_const_lv10_1));
    add_ln106_fu_362_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_v57_load) + unsigned(ap_const_lv4_1));
    add_ln107_fu_446_p2 <= std_logic_vector(unsigned(select_ln106_fu_374_p3) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln106_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten40_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten40_fu_98)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten40_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten40_load <= indvar_flatten40_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_v57_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, v57_fu_94)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_v57_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_v57_load <= v57_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_v58_load_assign_proc : process(ap_CS_fsm_state1, v58_fu_90, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_v58_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_v58_load <= v58_fu_90;
        end if; 
    end process;

    icmp_ln106_fu_344_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten40_load = ap_const_lv10_300) else "0";
    icmp_ln107_fu_368_p2 <= "1" when (ap_sig_allocacmp_v58_load = ap_const_lv7_40) else "0";
    lshr_ln5_fu_404_p4 <= select_ln106_fu_374_p3(5 downto 2);
    select_ln106_1_fu_382_p3 <= 
        add_ln106_fu_362_p2 when (icmp_ln107_fu_368_p2(0) = '1') else 
        ap_sig_allocacmp_v57_load;
    select_ln106_fu_374_p3 <= 
        ap_const_lv7_0 when (icmp_ln107_fu_368_p2(0) = '1') else 
        ap_sig_allocacmp_v58_load;
    tmp_42_fu_414_p3 <= (tmp_s_fu_390_p4 & lshr_ln5_fu_404_p4);
    tmp_s_fu_390_p4 <= select_ln106_1_fu_382_p3(3 downto 2);
    trunc_ln106_fu_400_p1 <= select_ln106_1_fu_382_p3(2 - 1 downto 0);
    trunc_ln108_fu_442_p1 <= select_ln106_fu_374_p3(2 - 1 downto 0);
    v86_10_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_10_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_10_ce0 <= ap_const_logic_1;
        else 
            v86_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_10_d0 <= ap_const_lv32_0;

    v86_10_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_2) and (trunc_ln106_fu_400_p1 = ap_const_lv2_2) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_10_we0 <= ap_const_logic_1;
        else 
            v86_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_11_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_11_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_11_ce0 <= ap_const_logic_1;
        else 
            v86_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_11_d0 <= ap_const_lv32_0;

    v86_11_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_3) and (trunc_ln106_fu_400_p1 = ap_const_lv2_2) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_11_we0 <= ap_const_logic_1;
        else 
            v86_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_12_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_12_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_12_ce0 <= ap_const_logic_1;
        else 
            v86_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_12_d0 <= ap_const_lv32_0;

    v86_12_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_0) and (trunc_ln106_fu_400_p1 = ap_const_lv2_3) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_12_we0 <= ap_const_logic_1;
        else 
            v86_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_13_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_13_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_13_ce0 <= ap_const_logic_1;
        else 
            v86_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_13_d0 <= ap_const_lv32_0;

    v86_13_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_1) and (trunc_ln106_fu_400_p1 = ap_const_lv2_3) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_13_we0 <= ap_const_logic_1;
        else 
            v86_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_14_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_14_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_14_ce0 <= ap_const_logic_1;
        else 
            v86_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_14_d0 <= ap_const_lv32_0;

    v86_14_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_2) and (trunc_ln106_fu_400_p1 = ap_const_lv2_3) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_14_we0 <= ap_const_logic_1;
        else 
            v86_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_15_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_15_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_15_ce0 <= ap_const_logic_1;
        else 
            v86_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_15_d0 <= ap_const_lv32_0;

    v86_15_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_3) and (trunc_ln106_fu_400_p1 = ap_const_lv2_3) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_15_we0 <= ap_const_logic_1;
        else 
            v86_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_1_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_1_ce0 <= ap_const_logic_1;
        else 
            v86_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_1_d0 <= ap_const_lv32_0;

    v86_1_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_1) and (trunc_ln106_fu_400_p1 = ap_const_lv2_0) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_1_we0 <= ap_const_logic_1;
        else 
            v86_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_2_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_2_ce0 <= ap_const_logic_1;
        else 
            v86_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_2_d0 <= ap_const_lv32_0;

    v86_2_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_2) and (trunc_ln106_fu_400_p1 = ap_const_lv2_0) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_2_we0 <= ap_const_logic_1;
        else 
            v86_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_3_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_3_ce0 <= ap_const_logic_1;
        else 
            v86_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_3_d0 <= ap_const_lv32_0;

    v86_3_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_3) and (trunc_ln106_fu_400_p1 = ap_const_lv2_0) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_3_we0 <= ap_const_logic_1;
        else 
            v86_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_4_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_4_ce0 <= ap_const_logic_1;
        else 
            v86_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_4_d0 <= ap_const_lv32_0;

    v86_4_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_0) and (trunc_ln106_fu_400_p1 = ap_const_lv2_1) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_4_we0 <= ap_const_logic_1;
        else 
            v86_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_5_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_5_ce0 <= ap_const_logic_1;
        else 
            v86_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_5_d0 <= ap_const_lv32_0;

    v86_5_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_1) and (trunc_ln106_fu_400_p1 = ap_const_lv2_1) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_5_we0 <= ap_const_logic_1;
        else 
            v86_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_6_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_6_ce0 <= ap_const_logic_1;
        else 
            v86_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_6_d0 <= ap_const_lv32_0;

    v86_6_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_2) and (trunc_ln106_fu_400_p1 = ap_const_lv2_1) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_6_we0 <= ap_const_logic_1;
        else 
            v86_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_7_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_7_ce0 <= ap_const_logic_1;
        else 
            v86_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_7_d0 <= ap_const_lv32_0;

    v86_7_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_3) and (trunc_ln106_fu_400_p1 = ap_const_lv2_1) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_7_we0 <= ap_const_logic_1;
        else 
            v86_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_8_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_8_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_8_ce0 <= ap_const_logic_1;
        else 
            v86_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_8_d0 <= ap_const_lv32_0;

    v86_8_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_0) and (trunc_ln106_fu_400_p1 = ap_const_lv2_2) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_8_we0 <= ap_const_logic_1;
        else 
            v86_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_9_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_9_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_9_ce0 <= ap_const_logic_1;
        else 
            v86_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_9_d0 <= ap_const_lv32_0;

    v86_9_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_1) and (trunc_ln106_fu_400_p1 = ap_const_lv2_2) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_9_we0 <= ap_const_logic_1;
        else 
            v86_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_address0 <= zext_ln108_fu_422_p1(6 - 1 downto 0);

    v86_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_ce0 <= ap_const_logic_1;
        else 
            v86_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v86_d0 <= ap_const_lv32_0;

    v86_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln106_fu_344_p2, trunc_ln106_fu_400_p1, trunc_ln108_fu_442_p1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (trunc_ln108_fu_442_p1 = ap_const_lv2_0) and (trunc_ln106_fu_400_p1 = ap_const_lv2_0) and (icmp_ln106_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            v86_we0 <= ap_const_logic_1;
        else 
            v86_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln108_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_414_p3),64));
end behav;
