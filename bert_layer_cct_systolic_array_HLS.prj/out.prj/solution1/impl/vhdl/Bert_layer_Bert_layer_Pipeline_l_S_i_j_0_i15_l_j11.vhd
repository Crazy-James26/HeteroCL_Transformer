-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i15_l_j11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v237_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v237_ce0 : OUT STD_LOGIC;
    v237_we0 : OUT STD_LOGIC;
    v237_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v236_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_ce0 : OUT STD_LOGIC;
    v236_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_1_ce0 : OUT STD_LOGIC;
    v236_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_2_ce0 : OUT STD_LOGIC;
    v236_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_3_ce0 : OUT STD_LOGIC;
    v236_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_4_ce0 : OUT STD_LOGIC;
    v236_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_5_ce0 : OUT STD_LOGIC;
    v236_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_6_ce0 : OUT STD_LOGIC;
    v236_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_7_ce0 : OUT STD_LOGIC;
    v236_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_8_ce0 : OUT STD_LOGIC;
    v236_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_9_ce0 : OUT STD_LOGIC;
    v236_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_10_ce0 : OUT STD_LOGIC;
    v236_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v236_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v236_11_ce0 : OUT STD_LOGIC;
    v236_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_ce0 : OUT STD_LOGIC;
    v233_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_1_ce0 : OUT STD_LOGIC;
    v233_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_2_ce0 : OUT STD_LOGIC;
    v233_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_3_ce0 : OUT STD_LOGIC;
    v233_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_4_ce0 : OUT STD_LOGIC;
    v233_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_5_ce0 : OUT STD_LOGIC;
    v233_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_6_ce0 : OUT STD_LOGIC;
    v233_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_7_ce0 : OUT STD_LOGIC;
    v233_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_8_ce0 : OUT STD_LOGIC;
    v233_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_9_ce0 : OUT STD_LOGIC;
    v233_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_10_ce0 : OUT STD_LOGIC;
    v233_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v233_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v233_11_ce0 : OUT STD_LOGIC;
    v233_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1394_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1394_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1394_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1394_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1394_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i15_l_j11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln344_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln345_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln345_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln344_fu_474_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_reg_675_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln344_1_fu_535_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln344_1_reg_800_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal v206_fu_542_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal v206_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal v207_fu_572_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal v207_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal v208_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln345_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln350_2_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j11_fu_94 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln345_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j11_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i15_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten55_fu_102 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln344_1_fu_459_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten55_load : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln344_fu_529_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_fu_614_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_607_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln350_fu_621_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln350_fu_625_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln350_1_fu_631_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln350_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_124_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_124_32_1_1_U10630 : component Bert_layer_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => v236_q0,
        din1 => v236_1_q0,
        din2 => v236_2_q0,
        din3 => v236_3_q0,
        din4 => v236_4_q0,
        din5 => v236_5_q0,
        din6 => v236_6_q0,
        din7 => v236_7_q0,
        din8 => v236_8_q0,
        din9 => v236_9_q0,
        din10 => v236_10_q0,
        din11 => v236_11_q0,
        din12 => select_ln344_1_fu_535_p3,
        dout => v206_fu_542_p14);

    mux_124_32_1_1_U10631 : component Bert_layer_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => v233_q0,
        din1 => v233_1_q0,
        din2 => v233_2_q0,
        din3 => v233_3_q0,
        din4 => v233_4_q0,
        din5 => v233_5_q0,
        din6 => v233_6_q0,
        din7 => v233_7_q0,
        din8 => v233_8_q0,
        din9 => v233_9_q0,
        din10 => v233_10_q0,
        din11 => v233_11_q0,
        din12 => select_ln344_1_fu_535_p3,
        dout => v207_fu_572_p14);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i15_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i15_fu_98 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i15_fu_98 <= select_ln344_1_fu_535_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln344_fu_453_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten55_fu_102 <= add_ln344_1_fu_459_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_102 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j11_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln344_fu_453_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j11_fu_94 <= add_ln345_fu_510_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j11_fu_94 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln344_1_reg_800 <= select_ln344_1_fu_535_p3;
                select_ln344_reg_675_pp0_iter1_reg <= select_ln344_reg_675;
                v206_reg_806 <= v206_fu_542_p14;
                v207_reg_811 <= v207_fu_572_p14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                select_ln344_1_reg_800_pp0_iter2_reg <= select_ln344_1_reg_800;
                select_ln344_1_reg_800_pp0_iter3_reg <= select_ln344_1_reg_800_pp0_iter2_reg;
                select_ln344_1_reg_800_pp0_iter4_reg <= select_ln344_1_reg_800_pp0_iter3_reg;
                select_ln344_1_reg_800_pp0_iter5_reg <= select_ln344_1_reg_800_pp0_iter4_reg;
                select_ln344_1_reg_800_pp0_iter6_reg <= select_ln344_1_reg_800_pp0_iter5_reg;
                select_ln344_reg_675_pp0_iter2_reg <= select_ln344_reg_675_pp0_iter1_reg;
                select_ln344_reg_675_pp0_iter3_reg <= select_ln344_reg_675_pp0_iter2_reg;
                select_ln344_reg_675_pp0_iter4_reg <= select_ln344_reg_675_pp0_iter3_reg;
                select_ln344_reg_675_pp0_iter5_reg <= select_ln344_reg_675_pp0_iter4_reg;
                select_ln344_reg_675_pp0_iter6_reg <= select_ln344_reg_675_pp0_iter5_reg;
                v208_reg_816 <= grp_fu_1394_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln344_fu_453_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln345_reg_670 <= icmp_ln345_fu_468_p2;
                select_ln344_reg_675 <= select_ln344_fu_474_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln344_1_fu_459_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten55_load) + unsigned(ap_const_lv14_1));
    add_ln344_fu_529_p2 <= std_logic_vector(unsigned(i15_fu_98) + unsigned(ap_const_lv4_1));
    add_ln345_fu_510_p2 <= std_logic_vector(unsigned(select_ln344_fu_474_p3) + unsigned(ap_const_lv10_1));
    add_ln350_fu_634_p2 <= std_logic_vector(unsigned(sub_ln350_fu_625_p2) + unsigned(zext_ln350_1_fu_631_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln344_fu_453_p2)
    begin
        if (((icmp_ln344_fu_453_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten55_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten55_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten55_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten55_load <= indvar_flatten55_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j11_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j11_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j11_load <= j11_fu_94;
        end if; 
    end process;

    grp_fu_1394_p_ce <= ap_const_logic_1;
    grp_fu_1394_p_din0 <= v206_reg_806;
    grp_fu_1394_p_din1 <= v207_reg_811;
    grp_fu_1394_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    icmp_ln344_fu_453_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten55_load = ap_const_lv14_2400) else "0";
    icmp_ln345_fu_468_p2 <= "1" when (ap_sig_allocacmp_j11_load = ap_const_lv10_300) else "0";
    select_ln344_1_fu_535_p3 <= 
        add_ln344_fu_529_p2 when (icmp_ln345_reg_670(0) = '1') else 
        i15_fu_98;
    select_ln344_fu_474_p3 <= 
        ap_const_lv10_0 when (icmp_ln345_fu_468_p2(0) = '1') else 
        ap_sig_allocacmp_j11_load;
    sub_ln350_fu_625_p2 <= std_logic_vector(unsigned(tmp_s_fu_607_p3) - unsigned(zext_ln350_fu_621_p1));
    tmp_38_fu_614_p3 <= (select_ln344_1_reg_800_pp0_iter6_reg & ap_const_lv8_0);
    tmp_s_fu_607_p3 <= (select_ln344_1_reg_800_pp0_iter6_reg & ap_const_lv10_0);
    v233_10_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_10_ce0 <= ap_const_logic_1;
        else 
            v233_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_11_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_11_ce0 <= ap_const_logic_1;
        else 
            v233_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_1_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_1_ce0 <= ap_const_logic_1;
        else 
            v233_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_2_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_2_ce0 <= ap_const_logic_1;
        else 
            v233_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_3_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_3_ce0 <= ap_const_logic_1;
        else 
            v233_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_4_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_4_ce0 <= ap_const_logic_1;
        else 
            v233_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_5_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_5_ce0 <= ap_const_logic_1;
        else 
            v233_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_6_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_6_ce0 <= ap_const_logic_1;
        else 
            v233_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_7_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_7_ce0 <= ap_const_logic_1;
        else 
            v233_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_8_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_8_ce0 <= ap_const_logic_1;
        else 
            v233_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_9_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_9_ce0 <= ap_const_logic_1;
        else 
            v233_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v233_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v233_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v233_ce0 <= ap_const_logic_1;
        else 
            v233_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_10_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_10_ce0 <= ap_const_logic_1;
        else 
            v236_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_11_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_11_ce0 <= ap_const_logic_1;
        else 
            v236_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_1_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_1_ce0 <= ap_const_logic_1;
        else 
            v236_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_2_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_2_ce0 <= ap_const_logic_1;
        else 
            v236_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_3_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_3_ce0 <= ap_const_logic_1;
        else 
            v236_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_4_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_4_ce0 <= ap_const_logic_1;
        else 
            v236_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_5_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_5_ce0 <= ap_const_logic_1;
        else 
            v236_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_6_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_6_ce0 <= ap_const_logic_1;
        else 
            v236_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_7_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_7_ce0 <= ap_const_logic_1;
        else 
            v236_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_8_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_8_ce0 <= ap_const_logic_1;
        else 
            v236_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_9_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_9_ce0 <= ap_const_logic_1;
        else 
            v236_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v236_address0 <= zext_ln345_fu_482_p1(10 - 1 downto 0);

    v236_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v236_ce0 <= ap_const_logic_1;
        else 
            v236_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v237_address0 <= zext_ln350_2_fu_640_p1(14 - 1 downto 0);

    v237_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            v237_ce0 <= ap_const_logic_1;
        else 
            v237_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v237_d0 <= v208_reg_816;

    v237_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            v237_we0 <= ap_const_logic_1;
        else 
            v237_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln345_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln344_fu_474_p3),64));
    zext_ln350_1_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln344_reg_675_pp0_iter6_reg),14));
    zext_ln350_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln350_fu_634_p2),64));
    zext_ln350_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_614_p3),14));
end behav;
