// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_bias_i13_l_j10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v221_address0,
        v221_ce0,
        v221_q0,
        v236_address0,
        v236_ce0,
        v236_we0,
        v236_d0,
        v236_1_address0,
        v236_1_ce0,
        v236_1_we0,
        v236_1_d0,
        v236_2_address0,
        v236_2_ce0,
        v236_2_we0,
        v236_2_d0,
        v236_3_address0,
        v236_3_ce0,
        v236_3_we0,
        v236_3_d0,
        v236_4_address0,
        v236_4_ce0,
        v236_4_we0,
        v236_4_d0,
        v236_5_address0,
        v236_5_ce0,
        v236_5_we0,
        v236_5_d0,
        v236_6_address0,
        v236_6_ce0,
        v236_6_we0,
        v236_6_d0,
        v236_7_address0,
        v236_7_ce0,
        v236_7_we0,
        v236_7_d0,
        v236_8_address0,
        v236_8_ce0,
        v236_8_we0,
        v236_8_d0,
        v236_9_address0,
        v236_9_ce0,
        v236_9_we0,
        v236_9_d0,
        v236_10_address0,
        v236_10_ce0,
        v236_10_we0,
        v236_10_d0,
        v236_11_address0,
        v236_11_ce0,
        v236_11_we0,
        v236_11_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v221_address0;
output   v221_ce0;
input  [31:0] v221_q0;
output  [9:0] v236_address0;
output   v236_ce0;
output   v236_we0;
output  [31:0] v236_d0;
output  [9:0] v236_1_address0;
output   v236_1_ce0;
output   v236_1_we0;
output  [31:0] v236_1_d0;
output  [9:0] v236_2_address0;
output   v236_2_ce0;
output   v236_2_we0;
output  [31:0] v236_2_d0;
output  [9:0] v236_3_address0;
output   v236_3_ce0;
output   v236_3_we0;
output  [31:0] v236_3_d0;
output  [9:0] v236_4_address0;
output   v236_4_ce0;
output   v236_4_we0;
output  [31:0] v236_4_d0;
output  [9:0] v236_5_address0;
output   v236_5_ce0;
output   v236_5_we0;
output  [31:0] v236_5_d0;
output  [9:0] v236_6_address0;
output   v236_6_ce0;
output   v236_6_we0;
output  [31:0] v236_6_d0;
output  [9:0] v236_7_address0;
output   v236_7_ce0;
output   v236_7_we0;
output  [31:0] v236_7_d0;
output  [9:0] v236_8_address0;
output   v236_8_ce0;
output   v236_8_we0;
output  [31:0] v236_8_d0;
output  [9:0] v236_9_address0;
output   v236_9_ce0;
output   v236_9_we0;
output  [31:0] v236_9_d0;
output  [9:0] v236_10_address0;
output   v236_10_ce0;
output   v236_10_we0;
output  [31:0] v236_10_d0;
output  [9:0] v236_11_address0;
output   v236_11_ce0;
output   v236_11_we0;
output  [31:0] v236_11_d0;

reg ap_idle;
reg v221_ce0;
reg v236_ce0;
reg v236_we0;
reg v236_1_ce0;
reg v236_1_we0;
reg v236_2_ce0;
reg v236_2_we0;
reg v236_3_ce0;
reg v236_3_we0;
reg v236_4_ce0;
reg v236_4_we0;
reg v236_5_ce0;
reg v236_5_we0;
reg v236_6_ce0;
reg v236_6_we0;
reg v236_7_ce0;
reg v236_7_we0;
reg v236_8_ce0;
reg v236_8_we0;
reg v236_9_ce0;
reg v236_9_we0;
reg v236_10_ce0;
reg v236_10_we0;
reg v236_11_ce0;
reg v236_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln323_fu_285_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln323_1_fu_323_p3;
reg   [3:0] select_ln323_1_reg_397;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln324_fu_331_p1;
reg   [63:0] zext_ln324_reg_401;
wire    ap_block_pp0_stage0;
reg   [9:0] j10_fu_86;
wire   [9:0] add_ln324_fu_336_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j10_load;
reg   [3:0] i13_fu_90;
reg   [3:0] ap_sig_allocacmp_i13_load;
reg   [13:0] indvar_flatten48_fu_94;
wire   [13:0] add_ln323_1_fu_291_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten48_load;
wire   [31:0] v190_fu_357_p1;
wire   [0:0] icmp_ln324_fu_309_p2;
wire   [3:0] add_ln323_fu_303_p2;
wire   [9:0] select_ln323_fu_315_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln323_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i13_fu_90 <= select_ln323_1_fu_323_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i13_fu_90 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln323_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten48_fu_94 <= add_ln323_1_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten48_fu_94 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln323_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j10_fu_86 <= add_ln324_fu_336_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j10_fu_86 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln323_fu_285_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln323_1_reg_397 <= select_ln323_1_fu_323_p3;
        zext_ln324_reg_401[9 : 0] <= zext_ln324_fu_331_p1[9 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln323_fu_285_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i13_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i13_load = i13_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten48_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten48_load = indvar_flatten48_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j10_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j10_load = j10_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v221_ce0 = 1'b1;
    end else begin
        v221_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_10_ce0 = 1'b1;
    end else begin
        v236_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd10))) begin
        v236_10_we0 = 1'b1;
    end else begin
        v236_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_11_ce0 = 1'b1;
    end else begin
        v236_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((select_ln323_1_reg_397 == 4'd11) | ((select_ln323_1_reg_397 == 4'd12) | ((select_ln323_1_reg_397 == 4'd13) | ((select_ln323_1_reg_397 == 4'd14) | (select_ln323_1_reg_397 == 4'd15))))))) begin
        v236_11_we0 = 1'b1;
    end else begin
        v236_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_1_ce0 = 1'b1;
    end else begin
        v236_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd1))) begin
        v236_1_we0 = 1'b1;
    end else begin
        v236_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_2_ce0 = 1'b1;
    end else begin
        v236_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd2))) begin
        v236_2_we0 = 1'b1;
    end else begin
        v236_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_3_ce0 = 1'b1;
    end else begin
        v236_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd3))) begin
        v236_3_we0 = 1'b1;
    end else begin
        v236_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_4_ce0 = 1'b1;
    end else begin
        v236_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd4))) begin
        v236_4_we0 = 1'b1;
    end else begin
        v236_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_5_ce0 = 1'b1;
    end else begin
        v236_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd5))) begin
        v236_5_we0 = 1'b1;
    end else begin
        v236_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_6_ce0 = 1'b1;
    end else begin
        v236_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd6))) begin
        v236_6_we0 = 1'b1;
    end else begin
        v236_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_7_ce0 = 1'b1;
    end else begin
        v236_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd7))) begin
        v236_7_we0 = 1'b1;
    end else begin
        v236_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_8_ce0 = 1'b1;
    end else begin
        v236_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd8))) begin
        v236_8_we0 = 1'b1;
    end else begin
        v236_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_9_ce0 = 1'b1;
    end else begin
        v236_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd9))) begin
        v236_9_we0 = 1'b1;
    end else begin
        v236_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v236_ce0 = 1'b1;
    end else begin
        v236_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln323_1_reg_397 == 4'd0))) begin
        v236_we0 = 1'b1;
    end else begin
        v236_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln323_1_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten48_load + 14'd1);

assign add_ln323_fu_303_p2 = (ap_sig_allocacmp_i13_load + 4'd1);

assign add_ln324_fu_336_p2 = (select_ln323_fu_315_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln323_fu_285_p2 = ((ap_sig_allocacmp_indvar_flatten48_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln324_fu_309_p2 = ((ap_sig_allocacmp_j10_load == 10'd768) ? 1'b1 : 1'b0);

assign select_ln323_1_fu_323_p3 = ((icmp_ln324_fu_309_p2[0:0] == 1'b1) ? add_ln323_fu_303_p2 : ap_sig_allocacmp_i13_load);

assign select_ln323_fu_315_p3 = ((icmp_ln324_fu_309_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j10_load);

assign v190_fu_357_p1 = v221_q0;

assign v221_address0 = zext_ln324_fu_331_p1;

assign v236_10_address0 = zext_ln324_reg_401;

assign v236_10_d0 = v190_fu_357_p1;

assign v236_11_address0 = zext_ln324_reg_401;

assign v236_11_d0 = v190_fu_357_p1;

assign v236_1_address0 = zext_ln324_reg_401;

assign v236_1_d0 = v190_fu_357_p1;

assign v236_2_address0 = zext_ln324_reg_401;

assign v236_2_d0 = v190_fu_357_p1;

assign v236_3_address0 = zext_ln324_reg_401;

assign v236_3_d0 = v190_fu_357_p1;

assign v236_4_address0 = zext_ln324_reg_401;

assign v236_4_d0 = v190_fu_357_p1;

assign v236_5_address0 = zext_ln324_reg_401;

assign v236_5_d0 = v190_fu_357_p1;

assign v236_6_address0 = zext_ln324_reg_401;

assign v236_6_d0 = v190_fu_357_p1;

assign v236_7_address0 = zext_ln324_reg_401;

assign v236_7_d0 = v190_fu_357_p1;

assign v236_8_address0 = zext_ln324_reg_401;

assign v236_8_d0 = v190_fu_357_p1;

assign v236_9_address0 = zext_ln324_reg_401;

assign v236_9_d0 = v190_fu_357_p1;

assign v236_address0 = zext_ln324_reg_401;

assign v236_d0 = v190_fu_357_p1;

assign zext_ln324_fu_331_p1 = select_ln323_fu_315_p3;

always @ (posedge ap_clk) begin
    zext_ln324_reg_401[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_Bert_layer_Pipeline_l_bias_i13_l_j10
