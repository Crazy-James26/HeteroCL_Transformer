// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v86_address0,
        v86_ce0,
        v86_we0,
        v86_d0,
        v86_1_address0,
        v86_1_ce0,
        v86_1_we0,
        v86_1_d0,
        v86_2_address0,
        v86_2_ce0,
        v86_2_we0,
        v86_2_d0,
        v86_3_address0,
        v86_3_ce0,
        v86_3_we0,
        v86_3_d0,
        v86_4_address0,
        v86_4_ce0,
        v86_4_we0,
        v86_4_d0,
        v86_5_address0,
        v86_5_ce0,
        v86_5_we0,
        v86_5_d0,
        v86_6_address0,
        v86_6_ce0,
        v86_6_we0,
        v86_6_d0,
        v86_7_address0,
        v86_7_ce0,
        v86_7_we0,
        v86_7_d0,
        v86_8_address0,
        v86_8_ce0,
        v86_8_we0,
        v86_8_d0,
        v86_9_address0,
        v86_9_ce0,
        v86_9_we0,
        v86_9_d0,
        v86_10_address0,
        v86_10_ce0,
        v86_10_we0,
        v86_10_d0,
        v86_11_address0,
        v86_11_ce0,
        v86_11_we0,
        v86_11_d0,
        v86_12_address0,
        v86_12_ce0,
        v86_12_we0,
        v86_12_d0,
        v86_13_address0,
        v86_13_ce0,
        v86_13_we0,
        v86_13_d0,
        v86_14_address0,
        v86_14_ce0,
        v86_14_we0,
        v86_14_d0,
        v86_15_address0,
        v86_15_ce0,
        v86_15_we0,
        v86_15_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] v86_address0;
output   v86_ce0;
output   v86_we0;
output  [31:0] v86_d0;
output  [5:0] v86_1_address0;
output   v86_1_ce0;
output   v86_1_we0;
output  [31:0] v86_1_d0;
output  [5:0] v86_2_address0;
output   v86_2_ce0;
output   v86_2_we0;
output  [31:0] v86_2_d0;
output  [5:0] v86_3_address0;
output   v86_3_ce0;
output   v86_3_we0;
output  [31:0] v86_3_d0;
output  [5:0] v86_4_address0;
output   v86_4_ce0;
output   v86_4_we0;
output  [31:0] v86_4_d0;
output  [5:0] v86_5_address0;
output   v86_5_ce0;
output   v86_5_we0;
output  [31:0] v86_5_d0;
output  [5:0] v86_6_address0;
output   v86_6_ce0;
output   v86_6_we0;
output  [31:0] v86_6_d0;
output  [5:0] v86_7_address0;
output   v86_7_ce0;
output   v86_7_we0;
output  [31:0] v86_7_d0;
output  [5:0] v86_8_address0;
output   v86_8_ce0;
output   v86_8_we0;
output  [31:0] v86_8_d0;
output  [5:0] v86_9_address0;
output   v86_9_ce0;
output   v86_9_we0;
output  [31:0] v86_9_d0;
output  [5:0] v86_10_address0;
output   v86_10_ce0;
output   v86_10_we0;
output  [31:0] v86_10_d0;
output  [5:0] v86_11_address0;
output   v86_11_ce0;
output   v86_11_we0;
output  [31:0] v86_11_d0;
output  [5:0] v86_12_address0;
output   v86_12_ce0;
output   v86_12_we0;
output  [31:0] v86_12_d0;
output  [5:0] v86_13_address0;
output   v86_13_ce0;
output   v86_13_we0;
output  [31:0] v86_13_d0;
output  [5:0] v86_14_address0;
output   v86_14_ce0;
output   v86_14_we0;
output  [31:0] v86_14_d0;
output  [5:0] v86_15_address0;
output   v86_15_ce0;
output   v86_15_we0;
output  [31:0] v86_15_d0;

reg ap_idle;
reg v86_ce0;
reg v86_we0;
reg v86_1_ce0;
reg v86_1_we0;
reg v86_2_ce0;
reg v86_2_we0;
reg v86_3_ce0;
reg v86_3_we0;
reg v86_4_ce0;
reg v86_4_we0;
reg v86_5_ce0;
reg v86_5_we0;
reg v86_6_ce0;
reg v86_6_we0;
reg v86_7_ce0;
reg v86_7_we0;
reg v86_8_ce0;
reg v86_8_we0;
reg v86_9_ce0;
reg v86_9_we0;
reg v86_10_ce0;
reg v86_10_we0;
reg v86_11_ce0;
reg v86_11_we0;
reg v86_12_ce0;
reg v86_12_we0;
reg v86_13_ce0;
reg v86_13_we0;
reg v86_14_ce0;
reg v86_14_we0;
reg v86_15_ce0;
reg v86_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln106_fu_344_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln108_fu_422_p1;
reg   [6:0] v58_fu_90;
wire   [6:0] add_ln107_fu_446_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_v58_load;
reg   [3:0] v57_fu_94;
wire   [3:0] select_ln106_1_fu_382_p3;
reg   [3:0] ap_sig_allocacmp_v57_load;
reg   [9:0] indvar_flatten40_fu_98;
wire   [9:0] add_ln106_1_fu_350_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten40_load;
wire   [1:0] trunc_ln106_fu_400_p1;
wire   [1:0] trunc_ln108_fu_442_p1;
wire   [0:0] icmp_ln107_fu_368_p2;
wire   [3:0] add_ln106_fu_362_p2;
wire   [6:0] select_ln106_fu_374_p3;
wire   [1:0] tmp_s_fu_390_p4;
wire   [3:0] lshr_ln5_fu_404_p4;
wire   [5:0] tmp_42_fu_414_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln106_fu_344_p2 == 1'd0)) begin
            indvar_flatten40_fu_98 <= add_ln106_1_fu_350_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten40_fu_98 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln106_fu_344_p2 == 1'd0)) begin
            v57_fu_94 <= select_ln106_1_fu_382_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            v57_fu_94 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln106_fu_344_p2 == 1'd0)) begin
            v58_fu_90 <= add_ln107_fu_446_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            v58_fu_90 <= 7'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln106_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten40_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten40_load = indvar_flatten40_fu_98;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_v57_load = 4'd0;
    end else begin
        ap_sig_allocacmp_v57_load = v57_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_v58_load = 7'd0;
    end else begin
        ap_sig_allocacmp_v58_load = v58_fu_90;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_10_ce0 = 1'b1;
    end else begin
        v86_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd2) & (trunc_ln106_fu_400_p1 == 2'd2) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_10_we0 = 1'b1;
    end else begin
        v86_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_11_ce0 = 1'b1;
    end else begin
        v86_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd3) & (trunc_ln106_fu_400_p1 == 2'd2) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_11_we0 = 1'b1;
    end else begin
        v86_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_12_ce0 = 1'b1;
    end else begin
        v86_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd0) & (trunc_ln106_fu_400_p1 == 2'd3) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_12_we0 = 1'b1;
    end else begin
        v86_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_13_ce0 = 1'b1;
    end else begin
        v86_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd1) & (trunc_ln106_fu_400_p1 == 2'd3) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_13_we0 = 1'b1;
    end else begin
        v86_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_14_ce0 = 1'b1;
    end else begin
        v86_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd2) & (trunc_ln106_fu_400_p1 == 2'd3) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_14_we0 = 1'b1;
    end else begin
        v86_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_15_ce0 = 1'b1;
    end else begin
        v86_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd3) & (trunc_ln106_fu_400_p1 == 2'd3) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_15_we0 = 1'b1;
    end else begin
        v86_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_1_ce0 = 1'b1;
    end else begin
        v86_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd1) & (trunc_ln106_fu_400_p1 == 2'd0) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_1_we0 = 1'b1;
    end else begin
        v86_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_2_ce0 = 1'b1;
    end else begin
        v86_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd2) & (trunc_ln106_fu_400_p1 == 2'd0) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_2_we0 = 1'b1;
    end else begin
        v86_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_3_ce0 = 1'b1;
    end else begin
        v86_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd3) & (trunc_ln106_fu_400_p1 == 2'd0) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_3_we0 = 1'b1;
    end else begin
        v86_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_4_ce0 = 1'b1;
    end else begin
        v86_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd0) & (trunc_ln106_fu_400_p1 == 2'd1) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_4_we0 = 1'b1;
    end else begin
        v86_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_5_ce0 = 1'b1;
    end else begin
        v86_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd1) & (trunc_ln106_fu_400_p1 == 2'd1) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_5_we0 = 1'b1;
    end else begin
        v86_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_6_ce0 = 1'b1;
    end else begin
        v86_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd2) & (trunc_ln106_fu_400_p1 == 2'd1) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_6_we0 = 1'b1;
    end else begin
        v86_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_7_ce0 = 1'b1;
    end else begin
        v86_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd3) & (trunc_ln106_fu_400_p1 == 2'd1) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_7_we0 = 1'b1;
    end else begin
        v86_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_8_ce0 = 1'b1;
    end else begin
        v86_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd0) & (trunc_ln106_fu_400_p1 == 2'd2) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_8_we0 = 1'b1;
    end else begin
        v86_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_9_ce0 = 1'b1;
    end else begin
        v86_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd1) & (trunc_ln106_fu_400_p1 == 2'd2) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_9_we0 = 1'b1;
    end else begin
        v86_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_ce0 = 1'b1;
    end else begin
        v86_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (trunc_ln108_fu_442_p1 == 2'd0) & (trunc_ln106_fu_400_p1 == 2'd0) & (icmp_ln106_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        v86_we0 = 1'b1;
    end else begin
        v86_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_1_fu_350_p2 = (ap_sig_allocacmp_indvar_flatten40_load + 10'd1);

assign add_ln106_fu_362_p2 = (ap_sig_allocacmp_v57_load + 4'd1);

assign add_ln107_fu_446_p2 = (select_ln106_fu_374_p3 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln106_fu_344_p2 = ((ap_sig_allocacmp_indvar_flatten40_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_368_p2 = ((ap_sig_allocacmp_v58_load == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln5_fu_404_p4 = {{select_ln106_fu_374_p3[5:2]}};

assign select_ln106_1_fu_382_p3 = ((icmp_ln107_fu_368_p2[0:0] == 1'b1) ? add_ln106_fu_362_p2 : ap_sig_allocacmp_v57_load);

assign select_ln106_fu_374_p3 = ((icmp_ln107_fu_368_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_v58_load);

assign tmp_42_fu_414_p3 = {{tmp_s_fu_390_p4}, {lshr_ln5_fu_404_p4}};

assign tmp_s_fu_390_p4 = {{select_ln106_1_fu_382_p3[3:2]}};

assign trunc_ln106_fu_400_p1 = select_ln106_1_fu_382_p3[1:0];

assign trunc_ln108_fu_442_p1 = select_ln106_fu_374_p3[1:0];

assign v86_10_address0 = zext_ln108_fu_422_p1;

assign v86_10_d0 = 32'd0;

assign v86_11_address0 = zext_ln108_fu_422_p1;

assign v86_11_d0 = 32'd0;

assign v86_12_address0 = zext_ln108_fu_422_p1;

assign v86_12_d0 = 32'd0;

assign v86_13_address0 = zext_ln108_fu_422_p1;

assign v86_13_d0 = 32'd0;

assign v86_14_address0 = zext_ln108_fu_422_p1;

assign v86_14_d0 = 32'd0;

assign v86_15_address0 = zext_ln108_fu_422_p1;

assign v86_15_d0 = 32'd0;

assign v86_1_address0 = zext_ln108_fu_422_p1;

assign v86_1_d0 = 32'd0;

assign v86_2_address0 = zext_ln108_fu_422_p1;

assign v86_2_d0 = 32'd0;

assign v86_3_address0 = zext_ln108_fu_422_p1;

assign v86_3_d0 = 32'd0;

assign v86_4_address0 = zext_ln108_fu_422_p1;

assign v86_4_d0 = 32'd0;

assign v86_5_address0 = zext_ln108_fu_422_p1;

assign v86_5_d0 = 32'd0;

assign v86_6_address0 = zext_ln108_fu_422_p1;

assign v86_6_d0 = 32'd0;

assign v86_7_address0 = zext_ln108_fu_422_p1;

assign v86_7_d0 = 32'd0;

assign v86_8_address0 = zext_ln108_fu_422_p1;

assign v86_8_d0 = 32'd0;

assign v86_9_address0 = zext_ln108_fu_422_p1;

assign v86_9_d0 = 32'd0;

assign v86_address0 = zext_ln108_fu_422_p1;

assign v86_d0 = 32'd0;

assign zext_ln108_fu_422_p1 = tmp_42_fu_414_p3;

endmodule //Bert_layer_Self_attention_Pipeline_VITIS_LOOP_106_1_VITIS_LOOP_107_2
