// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Context_layer_Pipeline_l_k2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v68_3_3_load,
        v68_3_2_load,
        v68_3_1_load,
        v68_3_0_load,
        v68_2_3_load,
        v68_2_2_load,
        v68_2_1_load,
        v68_2_0_load,
        v68_1_3_load,
        v68_1_2_load,
        v68_1_1_load,
        v68_1_0_load,
        v68_0_3_load,
        v68_0_2_load,
        v68_0_1_load,
        v68_0_0_load,
        v68_3_3_address0,
        v68_3_3_ce0,
        v68_3_3_we0,
        v68_3_3_d0,
        empty_109,
        v68_3_2_address0,
        v68_3_2_ce0,
        v68_3_2_we0,
        v68_3_2_d0,
        v68_3_1_address0,
        v68_3_1_ce0,
        v68_3_1_we0,
        v68_3_1_d0,
        v68_3_0_address0,
        v68_3_0_ce0,
        v68_3_0_we0,
        v68_3_0_d0,
        v68_2_3_address0,
        v68_2_3_ce0,
        v68_2_3_we0,
        v68_2_3_d0,
        v68_2_2_address0,
        v68_2_2_ce0,
        v68_2_2_we0,
        v68_2_2_d0,
        v68_2_1_address0,
        v68_2_1_ce0,
        v68_2_1_we0,
        v68_2_1_d0,
        v68_2_0_address0,
        v68_2_0_ce0,
        v68_2_0_we0,
        v68_2_0_d0,
        v68_1_3_address0,
        v68_1_3_ce0,
        v68_1_3_we0,
        v68_1_3_d0,
        v68_1_2_address0,
        v68_1_2_ce0,
        v68_1_2_we0,
        v68_1_2_d0,
        v68_1_1_address0,
        v68_1_1_ce0,
        v68_1_1_we0,
        v68_1_1_d0,
        v68_1_0_address0,
        v68_1_0_ce0,
        v68_1_0_we0,
        v68_1_0_d0,
        v68_0_3_address0,
        v68_0_3_ce0,
        v68_0_3_we0,
        v68_0_3_d0,
        v68_0_2_address0,
        v68_0_2_ce0,
        v68_0_2_we0,
        v68_0_2_d0,
        v68_0_1_address0,
        v68_0_1_ce0,
        v68_0_1_we0,
        v68_0_1_d0,
        v68_0_0_address0,
        v68_0_0_ce0,
        v68_0_0_we0,
        v68_0_0_d0,
        empty,
        v66_0_address0,
        v66_0_ce0,
        v66_0_q0,
        v66_1_address0,
        v66_1_ce0,
        v66_1_q0,
        v66_2_address0,
        v66_2_ce0,
        v66_2_q0,
        v66_3_address0,
        v66_3_ce0,
        v66_3_q0,
        zext_ln170,
        v67_0_address0,
        v67_0_ce0,
        v67_0_q0,
        v67_1_address0,
        v67_1_ce0,
        v67_1_q0,
        v67_2_address0,
        v67_2_ce0,
        v67_2_q0,
        v67_3_address0,
        v67_3_ce0,
        v67_3_q0,
        grp_fu_759_p_din0,
        grp_fu_759_p_din1,
        grp_fu_759_p_dout0,
        grp_fu_759_p_ce,
        grp_fu_763_p_din0,
        grp_fu_763_p_din1,
        grp_fu_763_p_dout0,
        grp_fu_763_p_ce,
        grp_fu_767_p_din0,
        grp_fu_767_p_din1,
        grp_fu_767_p_dout0,
        grp_fu_767_p_ce,
        grp_fu_771_p_din0,
        grp_fu_771_p_din1,
        grp_fu_771_p_dout0,
        grp_fu_771_p_ce,
        grp_fu_775_p_din0,
        grp_fu_775_p_din1,
        grp_fu_775_p_dout0,
        grp_fu_775_p_ce,
        grp_fu_779_p_din0,
        grp_fu_779_p_din1,
        grp_fu_779_p_dout0,
        grp_fu_779_p_ce,
        grp_fu_783_p_din0,
        grp_fu_783_p_din1,
        grp_fu_783_p_dout0,
        grp_fu_783_p_ce,
        grp_fu_787_p_din0,
        grp_fu_787_p_din1,
        grp_fu_787_p_dout0,
        grp_fu_787_p_ce,
        grp_fu_791_p_din0,
        grp_fu_791_p_din1,
        grp_fu_791_p_dout0,
        grp_fu_791_p_ce,
        grp_fu_795_p_din0,
        grp_fu_795_p_din1,
        grp_fu_795_p_dout0,
        grp_fu_795_p_ce,
        grp_fu_799_p_din0,
        grp_fu_799_p_din1,
        grp_fu_799_p_dout0,
        grp_fu_799_p_ce,
        grp_fu_803_p_din0,
        grp_fu_803_p_din1,
        grp_fu_803_p_dout0,
        grp_fu_803_p_ce,
        grp_fu_807_p_din0,
        grp_fu_807_p_din1,
        grp_fu_807_p_dout0,
        grp_fu_807_p_ce,
        grp_fu_811_p_din0,
        grp_fu_811_p_din1,
        grp_fu_811_p_dout0,
        grp_fu_811_p_ce,
        grp_fu_815_p_din0,
        grp_fu_815_p_din1,
        grp_fu_815_p_dout0,
        grp_fu_815_p_ce,
        grp_fu_819_p_din0,
        grp_fu_819_p_din1,
        grp_fu_819_p_dout0,
        grp_fu_819_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] v68_3_3_load;
input  [23:0] v68_3_2_load;
input  [23:0] v68_3_1_load;
input  [23:0] v68_3_0_load;
input  [23:0] v68_2_3_load;
input  [23:0] v68_2_2_load;
input  [23:0] v68_2_1_load;
input  [23:0] v68_2_0_load;
input  [23:0] v68_1_3_load;
input  [23:0] v68_1_2_load;
input  [23:0] v68_1_1_load;
input  [23:0] v68_1_0_load;
input  [23:0] v68_0_3_load;
input  [23:0] v68_0_2_load;
input  [23:0] v68_0_1_load;
input  [23:0] v68_0_0_load;
output  [5:0] v68_3_3_address0;
output   v68_3_3_ce0;
output   v68_3_3_we0;
output  [23:0] v68_3_3_d0;
input  [5:0] empty_109;
output  [5:0] v68_3_2_address0;
output   v68_3_2_ce0;
output   v68_3_2_we0;
output  [23:0] v68_3_2_d0;
output  [5:0] v68_3_1_address0;
output   v68_3_1_ce0;
output   v68_3_1_we0;
output  [23:0] v68_3_1_d0;
output  [5:0] v68_3_0_address0;
output   v68_3_0_ce0;
output   v68_3_0_we0;
output  [23:0] v68_3_0_d0;
output  [5:0] v68_2_3_address0;
output   v68_2_3_ce0;
output   v68_2_3_we0;
output  [23:0] v68_2_3_d0;
output  [5:0] v68_2_2_address0;
output   v68_2_2_ce0;
output   v68_2_2_we0;
output  [23:0] v68_2_2_d0;
output  [5:0] v68_2_1_address0;
output   v68_2_1_ce0;
output   v68_2_1_we0;
output  [23:0] v68_2_1_d0;
output  [5:0] v68_2_0_address0;
output   v68_2_0_ce0;
output   v68_2_0_we0;
output  [23:0] v68_2_0_d0;
output  [5:0] v68_1_3_address0;
output   v68_1_3_ce0;
output   v68_1_3_we0;
output  [23:0] v68_1_3_d0;
output  [5:0] v68_1_2_address0;
output   v68_1_2_ce0;
output   v68_1_2_we0;
output  [23:0] v68_1_2_d0;
output  [5:0] v68_1_1_address0;
output   v68_1_1_ce0;
output   v68_1_1_we0;
output  [23:0] v68_1_1_d0;
output  [5:0] v68_1_0_address0;
output   v68_1_0_ce0;
output   v68_1_0_we0;
output  [23:0] v68_1_0_d0;
output  [5:0] v68_0_3_address0;
output   v68_0_3_ce0;
output   v68_0_3_we0;
output  [23:0] v68_0_3_d0;
output  [5:0] v68_0_2_address0;
output   v68_0_2_ce0;
output   v68_0_2_we0;
output  [23:0] v68_0_2_d0;
output  [5:0] v68_0_1_address0;
output   v68_0_1_ce0;
output   v68_0_1_we0;
output  [23:0] v68_0_1_d0;
output  [5:0] v68_0_0_address0;
output   v68_0_0_ce0;
output   v68_0_0_we0;
output  [23:0] v68_0_0_d0;
input  [5:0] empty;
output  [5:0] v66_0_address0;
output   v66_0_ce0;
input  [23:0] v66_0_q0;
output  [5:0] v66_1_address0;
output   v66_1_ce0;
input  [23:0] v66_1_q0;
output  [5:0] v66_2_address0;
output   v66_2_ce0;
input  [23:0] v66_2_q0;
output  [5:0] v66_3_address0;
output   v66_3_ce0;
input  [23:0] v66_3_q0;
input  [4:0] zext_ln170;
output  [7:0] v67_0_address0;
output   v67_0_ce0;
input  [23:0] v67_0_q0;
output  [7:0] v67_1_address0;
output   v67_1_ce0;
input  [23:0] v67_1_q0;
output  [7:0] v67_2_address0;
output   v67_2_ce0;
input  [23:0] v67_2_q0;
output  [7:0] v67_3_address0;
output   v67_3_ce0;
input  [23:0] v67_3_q0;
output  [39:0] grp_fu_759_p_din0;
output  [39:0] grp_fu_759_p_din1;
input  [71:0] grp_fu_759_p_dout0;
output   grp_fu_759_p_ce;
output  [39:0] grp_fu_763_p_din0;
output  [39:0] grp_fu_763_p_din1;
input  [71:0] grp_fu_763_p_dout0;
output   grp_fu_763_p_ce;
output  [39:0] grp_fu_767_p_din0;
output  [39:0] grp_fu_767_p_din1;
input  [71:0] grp_fu_767_p_dout0;
output   grp_fu_767_p_ce;
output  [39:0] grp_fu_771_p_din0;
output  [39:0] grp_fu_771_p_din1;
input  [71:0] grp_fu_771_p_dout0;
output   grp_fu_771_p_ce;
output  [39:0] grp_fu_775_p_din0;
output  [39:0] grp_fu_775_p_din1;
input  [71:0] grp_fu_775_p_dout0;
output   grp_fu_775_p_ce;
output  [39:0] grp_fu_779_p_din0;
output  [39:0] grp_fu_779_p_din1;
input  [71:0] grp_fu_779_p_dout0;
output   grp_fu_779_p_ce;
output  [39:0] grp_fu_783_p_din0;
output  [39:0] grp_fu_783_p_din1;
input  [71:0] grp_fu_783_p_dout0;
output   grp_fu_783_p_ce;
output  [39:0] grp_fu_787_p_din0;
output  [39:0] grp_fu_787_p_din1;
input  [71:0] grp_fu_787_p_dout0;
output   grp_fu_787_p_ce;
output  [39:0] grp_fu_791_p_din0;
output  [39:0] grp_fu_791_p_din1;
input  [71:0] grp_fu_791_p_dout0;
output   grp_fu_791_p_ce;
output  [39:0] grp_fu_795_p_din0;
output  [39:0] grp_fu_795_p_din1;
input  [71:0] grp_fu_795_p_dout0;
output   grp_fu_795_p_ce;
output  [39:0] grp_fu_799_p_din0;
output  [39:0] grp_fu_799_p_din1;
input  [71:0] grp_fu_799_p_dout0;
output   grp_fu_799_p_ce;
output  [39:0] grp_fu_803_p_din0;
output  [39:0] grp_fu_803_p_din1;
input  [71:0] grp_fu_803_p_dout0;
output   grp_fu_803_p_ce;
output  [39:0] grp_fu_807_p_din0;
output  [39:0] grp_fu_807_p_din1;
input  [71:0] grp_fu_807_p_dout0;
output   grp_fu_807_p_ce;
output  [39:0] grp_fu_811_p_din0;
output  [39:0] grp_fu_811_p_din1;
input  [71:0] grp_fu_811_p_dout0;
output   grp_fu_811_p_ce;
output  [39:0] grp_fu_815_p_din0;
output  [39:0] grp_fu_815_p_din1;
input  [71:0] grp_fu_815_p_dout0;
output   grp_fu_815_p_ce;
output  [39:0] grp_fu_819_p_din0;
output  [39:0] grp_fu_819_p_din1;
input  [71:0] grp_fu_819_p_dout0;
output   grp_fu_819_p_ce;

reg ap_idle;
reg v68_3_3_ce0;
reg v68_3_3_we0;
reg v68_3_2_ce0;
reg v68_3_2_we0;
reg v68_3_1_ce0;
reg v68_3_1_we0;
reg v68_3_0_ce0;
reg v68_3_0_we0;
reg v68_2_3_ce0;
reg v68_2_3_we0;
reg v68_2_2_ce0;
reg v68_2_2_we0;
reg v68_2_1_ce0;
reg v68_2_1_we0;
reg v68_2_0_ce0;
reg v68_2_0_we0;
reg v68_1_3_ce0;
reg v68_1_3_we0;
reg v68_1_2_ce0;
reg v68_1_2_we0;
reg v68_1_1_ce0;
reg v68_1_1_we0;
reg v68_1_0_ce0;
reg v68_1_0_we0;
reg v68_0_3_ce0;
reg v68_0_3_we0;
reg v68_0_2_ce0;
reg v68_0_2_we0;
reg v68_0_1_ce0;
reg v68_0_1_we0;
reg v68_0_0_ce0;
reg v68_0_0_we0;
reg v66_0_ce0;
reg v66_1_ce0;
reg v66_2_ce0;
reg v66_3_ce0;
reg v67_0_ce0;
reg v67_1_ce0;
reg v67_2_ce0;
reg v67_3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln171_fu_702_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] p_cast_fu_606_p1;
reg   [63:0] p_cast_reg_1452;
reg   [0:0] icmp_ln171_reg_1472;
reg   [0:0] icmp_ln171_reg_1472_pp0_iter1_reg;
reg   [0:0] icmp_ln171_reg_1472_pp0_iter2_reg;
wire   [0:0] icmp_ln171_1_fu_754_p2;
reg   [0:0] icmp_ln171_1_reg_1516;
reg   [0:0] icmp_ln171_1_reg_1516_pp0_iter1_reg;
reg   [0:0] icmp_ln171_1_reg_1516_pp0_iter2_reg;
reg   [0:0] icmp_ln171_1_reg_1516_pp0_iter3_reg;
reg   [23:0] v79_V_reg_1520;
reg   [23:0] v80_V_reg_1525;
reg   [23:0] v80_V_1_reg_1530;
reg   [23:0] v80_V_2_reg_1535;
reg   [23:0] v80_V_3_reg_1540;
reg   [23:0] v79_V_1_reg_1545;
reg   [23:0] v79_V_2_reg_1550;
reg   [23:0] v79_V_3_reg_1555;
wire  signed [71:0] sext_ln1316_fu_779_p1;
wire  signed [71:0] sext_ln1319_fu_783_p1;
wire  signed [71:0] sext_ln1319_45_fu_800_p1;
wire  signed [71:0] sext_ln1319_46_fu_817_p1;
wire  signed [71:0] sext_ln1319_47_fu_834_p1;
wire  signed [71:0] sext_ln1316_45_fu_851_p1;
wire  signed [71:0] sext_ln1316_46_fu_886_p1;
wire  signed [71:0] sext_ln1316_47_fu_921_p1;
reg   [5:0] v68_3_3_addr_reg_1624;
reg   [5:0] v68_3_2_addr_reg_1629;
reg   [5:0] v68_3_1_addr_reg_1634;
reg   [5:0] v68_3_0_addr_reg_1639;
reg   [5:0] v68_2_3_addr_reg_1644;
reg   [5:0] v68_2_2_addr_reg_1649;
reg   [5:0] v68_2_1_addr_reg_1654;
reg   [5:0] v68_2_0_addr_reg_1659;
reg   [5:0] v68_1_3_addr_reg_1664;
reg   [5:0] v68_1_2_addr_reg_1669;
reg   [5:0] v68_1_1_addr_reg_1674;
reg   [5:0] v68_1_0_addr_reg_1679;
reg   [5:0] v68_0_3_addr_reg_1684;
reg   [5:0] v68_0_2_addr_reg_1689;
reg   [5:0] v68_0_1_addr_reg_1694;
reg   [5:0] v68_0_0_addr_reg_1699;
reg   [23:0] v85_reg_1704;
reg   [23:0] v85_1_reg_1709;
reg   [23:0] v85_2_reg_1714;
reg   [23:0] v85_3_reg_1719;
reg   [23:0] v85_4_reg_1724;
reg   [23:0] v85_5_reg_1729;
reg   [23:0] v85_6_reg_1734;
reg   [23:0] v85_7_reg_1739;
reg   [23:0] v85_8_reg_1744;
reg   [23:0] v85_9_reg_1749;
reg   [23:0] v85_10_reg_1754;
reg   [23:0] v85_11_reg_1759;
reg   [23:0] v85_12_reg_1764;
reg   [23:0] v85_13_reg_1769;
reg   [23:0] v85_14_reg_1774;
reg   [23:0] v85_15_reg_1779;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] p_cast1_fu_724_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln178_fu_746_p1;
reg   [3:0] k2_fu_128;
wire   [3:0] add_ln171_fu_708_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k2_1;
reg   [23:0] v84_V_fu_132;
wire   [23:0] v86_V_fu_1157_p2;
reg   [23:0] v84_V_1_fu_136;
wire   [23:0] v86_V_1_fu_1163_p2;
reg   [23:0] v84_V_2_fu_140;
wire   [23:0] v86_V_2_fu_1169_p2;
reg   [23:0] v84_V_3_fu_144;
wire   [23:0] v86_V_3_fu_1175_p2;
reg   [23:0] v84_V_4_fu_148;
wire   [23:0] v86_V_4_fu_1181_p2;
reg   [23:0] v84_V_5_fu_152;
wire   [23:0] v86_V_5_fu_1187_p2;
reg   [23:0] v84_V_6_fu_156;
wire   [23:0] v86_V_6_fu_1193_p2;
reg   [23:0] v84_V_7_fu_160;
wire   [23:0] v86_V_7_fu_1199_p2;
reg   [23:0] v84_V_8_fu_164;
wire   [23:0] v86_V_8_fu_1205_p2;
reg   [23:0] v84_V_9_fu_168;
wire   [23:0] v86_V_9_fu_1211_p2;
reg   [23:0] v84_V_10_fu_172;
wire   [23:0] v86_V_10_fu_1217_p2;
reg   [23:0] v84_V_11_fu_176;
wire   [23:0] v86_V_11_fu_1223_p2;
reg   [23:0] v84_V_12_fu_180;
wire   [23:0] v86_V_12_fu_1229_p2;
reg   [23:0] v84_V_13_fu_184;
wire   [23:0] v86_V_13_fu_1235_p2;
reg   [23:0] v84_V_14_fu_188;
wire   [23:0] v86_V_14_fu_1241_p2;
reg   [23:0] v84_V_15_fu_192;
wire   [23:0] v86_V_15_fu_1247_p2;
wire   [5:0] k2_cast_fu_714_p1;
wire   [5:0] empty_415_fu_718_p2;
wire   [7:0] tmp_s_fu_732_p3;
wire   [7:0] zext_ln170_cast_fu_610_p1;
wire   [7:0] add_ln178_fu_740_p2;
wire   [39:0] v81_7_fu_765_p3;
wire   [39:0] v82_1_fu_772_p3;
wire   [39:0] v82_3_fu_793_p3;
wire   [39:0] v82_5_fu_810_p3;
wire   [39:0] v82_7_fu_827_p3;
wire   [39:0] v81_8_fu_844_p3;
wire   [39:0] v81_fu_879_p3;
wire   [39:0] v81_9_fu_914_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln171_fu_702_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k2_fu_128 <= add_ln171_fu_708_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k2_fu_128 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_10_fu_172 <= v68_2_2_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_10_fu_172 <= v86_V_10_fu_1217_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_11_fu_176 <= v68_2_3_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_11_fu_176 <= v86_V_11_fu_1223_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_12_fu_180 <= v68_3_0_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_12_fu_180 <= v86_V_12_fu_1229_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_13_fu_184 <= v68_3_1_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_13_fu_184 <= v86_V_13_fu_1235_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_14_fu_188 <= v68_3_2_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_14_fu_188 <= v86_V_14_fu_1241_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_15_fu_192 <= v68_3_3_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_15_fu_192 <= v86_V_15_fu_1247_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_1_fu_136 <= v68_0_1_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_1_fu_136 <= v86_V_1_fu_1163_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_2_fu_140 <= v68_0_2_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_2_fu_140 <= v86_V_2_fu_1169_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_3_fu_144 <= v68_0_3_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_3_fu_144 <= v86_V_3_fu_1175_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_4_fu_148 <= v68_1_0_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_4_fu_148 <= v86_V_4_fu_1181_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_5_fu_152 <= v68_1_1_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_5_fu_152 <= v86_V_5_fu_1187_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_6_fu_156 <= v68_1_2_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_6_fu_156 <= v86_V_6_fu_1193_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_7_fu_160 <= v68_1_3_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_7_fu_160 <= v86_V_7_fu_1199_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_8_fu_164 <= v68_2_0_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_8_fu_164 <= v86_V_8_fu_1205_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_9_fu_168 <= v68_2_1_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_9_fu_168 <= v86_V_9_fu_1211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v84_V_fu_132 <= v68_0_0_load;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v84_V_fu_132 <= v86_V_fu_1157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln171_1_reg_1516_pp0_iter1_reg <= icmp_ln171_1_reg_1516;
        icmp_ln171_reg_1472 <= icmp_ln171_fu_702_p2;
        icmp_ln171_reg_1472_pp0_iter1_reg <= icmp_ln171_reg_1472;
        p_cast_reg_1452[5 : 0] <= p_cast_fu_606_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln171_1_reg_1516_pp0_iter2_reg <= icmp_ln171_1_reg_1516_pp0_iter1_reg;
        icmp_ln171_1_reg_1516_pp0_iter3_reg <= icmp_ln171_1_reg_1516_pp0_iter2_reg;
        icmp_ln171_reg_1472_pp0_iter2_reg <= icmp_ln171_reg_1472_pp0_iter1_reg;
        v68_0_0_addr_reg_1699 <= p_cast_reg_1452;
        v68_0_1_addr_reg_1694 <= p_cast_reg_1452;
        v68_0_2_addr_reg_1689 <= p_cast_reg_1452;
        v68_0_3_addr_reg_1684 <= p_cast_reg_1452;
        v68_1_0_addr_reg_1679 <= p_cast_reg_1452;
        v68_1_1_addr_reg_1674 <= p_cast_reg_1452;
        v68_1_2_addr_reg_1669 <= p_cast_reg_1452;
        v68_1_3_addr_reg_1664 <= p_cast_reg_1452;
        v68_2_0_addr_reg_1659 <= p_cast_reg_1452;
        v68_2_1_addr_reg_1654 <= p_cast_reg_1452;
        v68_2_2_addr_reg_1649 <= p_cast_reg_1452;
        v68_2_3_addr_reg_1644 <= p_cast_reg_1452;
        v68_3_0_addr_reg_1639 <= p_cast_reg_1452;
        v68_3_1_addr_reg_1634 <= p_cast_reg_1452;
        v68_3_2_addr_reg_1629 <= p_cast_reg_1452;
        v68_3_3_addr_reg_1624 <= p_cast_reg_1452;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_702_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln171_1_reg_1516 <= icmp_ln171_1_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_reg_1472 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v79_V_1_reg_1545 <= v66_1_q0;
        v79_V_2_reg_1550 <= v66_2_q0;
        v79_V_3_reg_1555 <= v66_3_q0;
        v79_V_reg_1520 <= v66_0_q0;
        v80_V_1_reg_1530 <= v67_1_q0;
        v80_V_2_reg_1535 <= v67_2_q0;
        v80_V_3_reg_1540 <= v67_3_q0;
        v80_V_reg_1525 <= v67_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_reg_1472_pp0_iter2_reg == 1'd0))) begin
        v85_10_reg_1754 <= {{grp_fu_799_p_dout0[71:48]}};
        v85_11_reg_1759 <= {{grp_fu_803_p_dout0[71:48]}};
        v85_12_reg_1764 <= {{grp_fu_807_p_dout0[71:48]}};
        v85_13_reg_1769 <= {{grp_fu_811_p_dout0[71:48]}};
        v85_14_reg_1774 <= {{grp_fu_815_p_dout0[71:48]}};
        v85_15_reg_1779 <= {{grp_fu_819_p_dout0[71:48]}};
        v85_1_reg_1709 <= {{grp_fu_763_p_dout0[71:48]}};
        v85_2_reg_1714 <= {{grp_fu_767_p_dout0[71:48]}};
        v85_3_reg_1719 <= {{grp_fu_771_p_dout0[71:48]}};
        v85_4_reg_1724 <= {{grp_fu_775_p_dout0[71:48]}};
        v85_5_reg_1729 <= {{grp_fu_779_p_dout0[71:48]}};
        v85_6_reg_1734 <= {{grp_fu_783_p_dout0[71:48]}};
        v85_7_reg_1739 <= {{grp_fu_787_p_dout0[71:48]}};
        v85_8_reg_1744 <= {{grp_fu_791_p_dout0[71:48]}};
        v85_9_reg_1749 <= {{grp_fu_795_p_dout0[71:48]}};
        v85_reg_1704 <= {{grp_fu_759_p_dout0[71:48]}};
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_702_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln171_reg_1472_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k2_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_k2_1 = k2_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v66_0_ce0 = 1'b1;
    end else begin
        v66_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v66_1_ce0 = 1'b1;
    end else begin
        v66_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v66_2_ce0 = 1'b1;
    end else begin
        v66_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v66_3_ce0 = 1'b1;
    end else begin
        v66_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v67_0_ce0 = 1'b1;
    end else begin
        v67_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v67_1_ce0 = 1'b1;
    end else begin
        v67_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v67_2_ce0 = 1'b1;
    end else begin
        v67_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v67_3_ce0 = 1'b1;
    end else begin
        v67_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_0_ce0 = 1'b1;
    end else begin
        v68_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_0_we0 = 1'b1;
    end else begin
        v68_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_1_ce0 = 1'b1;
    end else begin
        v68_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_1_we0 = 1'b1;
    end else begin
        v68_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_2_ce0 = 1'b1;
    end else begin
        v68_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_2_we0 = 1'b1;
    end else begin
        v68_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_3_ce0 = 1'b1;
    end else begin
        v68_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_0_3_we0 = 1'b1;
    end else begin
        v68_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_0_ce0 = 1'b1;
    end else begin
        v68_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_0_we0 = 1'b1;
    end else begin
        v68_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_1_ce0 = 1'b1;
    end else begin
        v68_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_1_we0 = 1'b1;
    end else begin
        v68_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_2_ce0 = 1'b1;
    end else begin
        v68_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_2_we0 = 1'b1;
    end else begin
        v68_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_3_ce0 = 1'b1;
    end else begin
        v68_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_1_3_we0 = 1'b1;
    end else begin
        v68_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_0_ce0 = 1'b1;
    end else begin
        v68_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_0_we0 = 1'b1;
    end else begin
        v68_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_1_ce0 = 1'b1;
    end else begin
        v68_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_1_we0 = 1'b1;
    end else begin
        v68_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_2_ce0 = 1'b1;
    end else begin
        v68_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_2_we0 = 1'b1;
    end else begin
        v68_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_3_ce0 = 1'b1;
    end else begin
        v68_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_2_3_we0 = 1'b1;
    end else begin
        v68_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_0_ce0 = 1'b1;
    end else begin
        v68_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_0_we0 = 1'b1;
    end else begin
        v68_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_1_ce0 = 1'b1;
    end else begin
        v68_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_1_we0 = 1'b1;
    end else begin
        v68_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_2_ce0 = 1'b1;
    end else begin
        v68_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_2_we0 = 1'b1;
    end else begin
        v68_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_3_ce0 = 1'b1;
    end else begin
        v68_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln171_1_reg_1516_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        v68_3_3_we0 = 1'b1;
    end else begin
        v68_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln171_fu_708_p2 = (ap_sig_allocacmp_k2_1 + 4'd1);

assign add_ln178_fu_740_p2 = (tmp_s_fu_732_p3 + zext_ln170_cast_fu_610_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_415_fu_718_p2 = (empty + k2_cast_fu_714_p1);

assign grp_fu_759_p_ce = 1'b1;

assign grp_fu_759_p_din0 = sext_ln1319_fu_783_p1;

assign grp_fu_759_p_din1 = sext_ln1316_fu_779_p1;

assign grp_fu_763_p_ce = 1'b1;

assign grp_fu_763_p_din0 = sext_ln1319_45_fu_800_p1;

assign grp_fu_763_p_din1 = sext_ln1316_fu_779_p1;

assign grp_fu_767_p_ce = 1'b1;

assign grp_fu_767_p_din0 = sext_ln1319_46_fu_817_p1;

assign grp_fu_767_p_din1 = sext_ln1316_fu_779_p1;

assign grp_fu_771_p_ce = 1'b1;

assign grp_fu_771_p_din0 = sext_ln1319_47_fu_834_p1;

assign grp_fu_771_p_din1 = sext_ln1316_fu_779_p1;

assign grp_fu_775_p_ce = 1'b1;

assign grp_fu_775_p_din0 = sext_ln1316_45_fu_851_p1;

assign grp_fu_775_p_din1 = sext_ln1319_fu_783_p1;

assign grp_fu_779_p_ce = 1'b1;

assign grp_fu_779_p_din0 = sext_ln1316_45_fu_851_p1;

assign grp_fu_779_p_din1 = sext_ln1319_45_fu_800_p1;

assign grp_fu_783_p_ce = 1'b1;

assign grp_fu_783_p_din0 = sext_ln1316_45_fu_851_p1;

assign grp_fu_783_p_din1 = sext_ln1319_46_fu_817_p1;

assign grp_fu_787_p_ce = 1'b1;

assign grp_fu_787_p_din0 = sext_ln1316_45_fu_851_p1;

assign grp_fu_787_p_din1 = sext_ln1319_47_fu_834_p1;

assign grp_fu_791_p_ce = 1'b1;

assign grp_fu_791_p_din0 = sext_ln1316_46_fu_886_p1;

assign grp_fu_791_p_din1 = sext_ln1319_fu_783_p1;

assign grp_fu_795_p_ce = 1'b1;

assign grp_fu_795_p_din0 = sext_ln1316_46_fu_886_p1;

assign grp_fu_795_p_din1 = sext_ln1319_45_fu_800_p1;

assign grp_fu_799_p_ce = 1'b1;

assign grp_fu_799_p_din0 = sext_ln1316_46_fu_886_p1;

assign grp_fu_799_p_din1 = sext_ln1319_46_fu_817_p1;

assign grp_fu_803_p_ce = 1'b1;

assign grp_fu_803_p_din0 = sext_ln1316_46_fu_886_p1;

assign grp_fu_803_p_din1 = sext_ln1319_47_fu_834_p1;

assign grp_fu_807_p_ce = 1'b1;

assign grp_fu_807_p_din0 = sext_ln1316_47_fu_921_p1;

assign grp_fu_807_p_din1 = sext_ln1319_fu_783_p1;

assign grp_fu_811_p_ce = 1'b1;

assign grp_fu_811_p_din0 = sext_ln1316_47_fu_921_p1;

assign grp_fu_811_p_din1 = sext_ln1319_45_fu_800_p1;

assign grp_fu_815_p_ce = 1'b1;

assign grp_fu_815_p_din0 = sext_ln1316_47_fu_921_p1;

assign grp_fu_815_p_din1 = sext_ln1319_46_fu_817_p1;

assign grp_fu_819_p_ce = 1'b1;

assign grp_fu_819_p_din0 = sext_ln1316_47_fu_921_p1;

assign grp_fu_819_p_din1 = sext_ln1319_47_fu_834_p1;

assign icmp_ln171_1_fu_754_p2 = ((add_ln171_fu_708_p2 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_702_p2 = ((ap_sig_allocacmp_k2_1 == 4'd12) ? 1'b1 : 1'b0);

assign k2_cast_fu_714_p1 = ap_sig_allocacmp_k2_1;

assign p_cast1_fu_724_p1 = empty_415_fu_718_p2;

assign p_cast_fu_606_p1 = empty_109;

assign sext_ln1316_45_fu_851_p1 = $signed(v81_8_fu_844_p3);

assign sext_ln1316_46_fu_886_p1 = $signed(v81_fu_879_p3);

assign sext_ln1316_47_fu_921_p1 = $signed(v81_9_fu_914_p3);

assign sext_ln1316_fu_779_p1 = $signed(v81_7_fu_765_p3);

assign sext_ln1319_45_fu_800_p1 = $signed(v82_3_fu_793_p3);

assign sext_ln1319_46_fu_817_p1 = $signed(v82_5_fu_810_p3);

assign sext_ln1319_47_fu_834_p1 = $signed(v82_7_fu_827_p3);

assign sext_ln1319_fu_783_p1 = $signed(v82_1_fu_772_p3);

assign tmp_s_fu_732_p3 = {{ap_sig_allocacmp_k2_1}, {4'd0}};

assign v66_0_address0 = p_cast1_fu_724_p1;

assign v66_1_address0 = p_cast1_fu_724_p1;

assign v66_2_address0 = p_cast1_fu_724_p1;

assign v66_3_address0 = p_cast1_fu_724_p1;

assign v67_0_address0 = zext_ln178_fu_746_p1;

assign v67_1_address0 = zext_ln178_fu_746_p1;

assign v67_2_address0 = zext_ln178_fu_746_p1;

assign v67_3_address0 = zext_ln178_fu_746_p1;

assign v68_0_0_address0 = v68_0_0_addr_reg_1699;

assign v68_0_0_d0 = (v85_reg_1704 + v84_V_fu_132);

assign v68_0_1_address0 = v68_0_1_addr_reg_1694;

assign v68_0_1_d0 = (v85_1_reg_1709 + v84_V_1_fu_136);

assign v68_0_2_address0 = v68_0_2_addr_reg_1689;

assign v68_0_2_d0 = (v85_2_reg_1714 + v84_V_2_fu_140);

assign v68_0_3_address0 = v68_0_3_addr_reg_1684;

assign v68_0_3_d0 = (v85_3_reg_1719 + v84_V_3_fu_144);

assign v68_1_0_address0 = v68_1_0_addr_reg_1679;

assign v68_1_0_d0 = (v85_4_reg_1724 + v84_V_4_fu_148);

assign v68_1_1_address0 = v68_1_1_addr_reg_1674;

assign v68_1_1_d0 = (v85_5_reg_1729 + v84_V_5_fu_152);

assign v68_1_2_address0 = v68_1_2_addr_reg_1669;

assign v68_1_2_d0 = (v85_6_reg_1734 + v84_V_6_fu_156);

assign v68_1_3_address0 = v68_1_3_addr_reg_1664;

assign v68_1_3_d0 = (v85_7_reg_1739 + v84_V_7_fu_160);

assign v68_2_0_address0 = v68_2_0_addr_reg_1659;

assign v68_2_0_d0 = (v85_8_reg_1744 + v84_V_8_fu_164);

assign v68_2_1_address0 = v68_2_1_addr_reg_1654;

assign v68_2_1_d0 = (v85_9_reg_1749 + v84_V_9_fu_168);

assign v68_2_2_address0 = v68_2_2_addr_reg_1649;

assign v68_2_2_d0 = (v85_10_reg_1754 + v84_V_10_fu_172);

assign v68_2_3_address0 = v68_2_3_addr_reg_1644;

assign v68_2_3_d0 = (v85_11_reg_1759 + v84_V_11_fu_176);

assign v68_3_0_address0 = v68_3_0_addr_reg_1639;

assign v68_3_0_d0 = (v85_12_reg_1764 + v84_V_12_fu_180);

assign v68_3_1_address0 = v68_3_1_addr_reg_1634;

assign v68_3_1_d0 = (v85_13_reg_1769 + v84_V_13_fu_184);

assign v68_3_2_address0 = v68_3_2_addr_reg_1629;

assign v68_3_2_d0 = (v85_14_reg_1774 + v84_V_14_fu_188);

assign v68_3_3_address0 = v68_3_3_addr_reg_1624;

assign v68_3_3_d0 = (v85_15_reg_1779 + v84_V_15_fu_192);

assign v81_7_fu_765_p3 = {{v79_V_reg_1520}, {16'd0}};

assign v81_8_fu_844_p3 = {{v79_V_1_reg_1545}, {16'd0}};

assign v81_9_fu_914_p3 = {{v79_V_3_reg_1555}, {16'd0}};

assign v81_fu_879_p3 = {{v79_V_2_reg_1550}, {16'd0}};

assign v82_1_fu_772_p3 = {{v80_V_reg_1525}, {16'd0}};

assign v82_3_fu_793_p3 = {{v80_V_1_reg_1530}, {16'd0}};

assign v82_5_fu_810_p3 = {{v80_V_2_reg_1535}, {16'd0}};

assign v82_7_fu_827_p3 = {{v80_V_3_reg_1540}, {16'd0}};

assign v86_V_10_fu_1217_p2 = (v85_10_reg_1754 + v84_V_10_fu_172);

assign v86_V_11_fu_1223_p2 = (v85_11_reg_1759 + v84_V_11_fu_176);

assign v86_V_12_fu_1229_p2 = (v85_12_reg_1764 + v84_V_12_fu_180);

assign v86_V_13_fu_1235_p2 = (v85_13_reg_1769 + v84_V_13_fu_184);

assign v86_V_14_fu_1241_p2 = (v85_14_reg_1774 + v84_V_14_fu_188);

assign v86_V_15_fu_1247_p2 = (v85_15_reg_1779 + v84_V_15_fu_192);

assign v86_V_1_fu_1163_p2 = (v85_1_reg_1709 + v84_V_1_fu_136);

assign v86_V_2_fu_1169_p2 = (v85_2_reg_1714 + v84_V_2_fu_140);

assign v86_V_3_fu_1175_p2 = (v85_3_reg_1719 + v84_V_3_fu_144);

assign v86_V_4_fu_1181_p2 = (v85_4_reg_1724 + v84_V_4_fu_148);

assign v86_V_5_fu_1187_p2 = (v85_5_reg_1729 + v84_V_5_fu_152);

assign v86_V_6_fu_1193_p2 = (v85_6_reg_1734 + v84_V_6_fu_156);

assign v86_V_7_fu_1199_p2 = (v85_7_reg_1739 + v84_V_7_fu_160);

assign v86_V_8_fu_1205_p2 = (v85_8_reg_1744 + v84_V_8_fu_164);

assign v86_V_9_fu_1211_p2 = (v85_9_reg_1749 + v84_V_9_fu_168);

assign v86_V_fu_1157_p2 = (v85_reg_1704 + v84_V_fu_132);

assign zext_ln170_cast_fu_610_p1 = zext_ln170;

assign zext_ln178_fu_746_p1 = add_ln178_fu_740_p2;

always @ (posedge ap_clk) begin
    p_cast_reg_1452[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_Context_layer_Pipeline_l_k2
