// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Attention_layer_Pipeline_VITIS_LOOP_76_3_VITIS_LOOP_77_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v22_0_0_address0,
        v22_0_0_ce0,
        v22_0_0_we0,
        v22_0_0_d0,
        v22_0_1_address0,
        v22_0_1_ce0,
        v22_0_1_we0,
        v22_0_1_d0,
        v22_0_2_address0,
        v22_0_2_ce0,
        v22_0_2_we0,
        v22_0_2_d0,
        v22_0_3_address0,
        v22_0_3_ce0,
        v22_0_3_we0,
        v22_0_3_d0,
        v22_1_0_address0,
        v22_1_0_ce0,
        v22_1_0_we0,
        v22_1_0_d0,
        v22_1_1_address0,
        v22_1_1_ce0,
        v22_1_1_we0,
        v22_1_1_d0,
        v22_1_2_address0,
        v22_1_2_ce0,
        v22_1_2_we0,
        v22_1_2_d0,
        v22_1_3_address0,
        v22_1_3_ce0,
        v22_1_3_we0,
        v22_1_3_d0,
        v22_2_0_address0,
        v22_2_0_ce0,
        v22_2_0_we0,
        v22_2_0_d0,
        v22_2_1_address0,
        v22_2_1_ce0,
        v22_2_1_we0,
        v22_2_1_d0,
        v22_2_2_address0,
        v22_2_2_ce0,
        v22_2_2_we0,
        v22_2_2_d0,
        v22_2_3_address0,
        v22_2_3_ce0,
        v22_2_3_we0,
        v22_2_3_d0,
        v22_3_0_address0,
        v22_3_0_ce0,
        v22_3_0_we0,
        v22_3_0_d0,
        v22_3_1_address0,
        v22_3_1_ce0,
        v22_3_1_we0,
        v22_3_1_d0,
        v22_3_2_address0,
        v22_3_2_ce0,
        v22_3_2_we0,
        v22_3_2_d0,
        v22_3_3_address0,
        v22_3_3_ce0,
        v22_3_3_we0,
        v22_3_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] v22_0_0_address0;
output   v22_0_0_ce0;
output   v22_0_0_we0;
output  [31:0] v22_0_0_d0;
output  [3:0] v22_0_1_address0;
output   v22_0_1_ce0;
output   v22_0_1_we0;
output  [31:0] v22_0_1_d0;
output  [3:0] v22_0_2_address0;
output   v22_0_2_ce0;
output   v22_0_2_we0;
output  [31:0] v22_0_2_d0;
output  [3:0] v22_0_3_address0;
output   v22_0_3_ce0;
output   v22_0_3_we0;
output  [31:0] v22_0_3_d0;
output  [3:0] v22_1_0_address0;
output   v22_1_0_ce0;
output   v22_1_0_we0;
output  [31:0] v22_1_0_d0;
output  [3:0] v22_1_1_address0;
output   v22_1_1_ce0;
output   v22_1_1_we0;
output  [31:0] v22_1_1_d0;
output  [3:0] v22_1_2_address0;
output   v22_1_2_ce0;
output   v22_1_2_we0;
output  [31:0] v22_1_2_d0;
output  [3:0] v22_1_3_address0;
output   v22_1_3_ce0;
output   v22_1_3_we0;
output  [31:0] v22_1_3_d0;
output  [3:0] v22_2_0_address0;
output   v22_2_0_ce0;
output   v22_2_0_we0;
output  [31:0] v22_2_0_d0;
output  [3:0] v22_2_1_address0;
output   v22_2_1_ce0;
output   v22_2_1_we0;
output  [31:0] v22_2_1_d0;
output  [3:0] v22_2_2_address0;
output   v22_2_2_ce0;
output   v22_2_2_we0;
output  [31:0] v22_2_2_d0;
output  [3:0] v22_2_3_address0;
output   v22_2_3_ce0;
output   v22_2_3_we0;
output  [31:0] v22_2_3_d0;
output  [3:0] v22_3_0_address0;
output   v22_3_0_ce0;
output   v22_3_0_we0;
output  [31:0] v22_3_0_d0;
output  [3:0] v22_3_1_address0;
output   v22_3_1_ce0;
output   v22_3_1_we0;
output  [31:0] v22_3_1_d0;
output  [3:0] v22_3_2_address0;
output   v22_3_2_ce0;
output   v22_3_2_we0;
output  [31:0] v22_3_2_d0;
output  [3:0] v22_3_3_address0;
output   v22_3_3_ce0;
output   v22_3_3_we0;
output  [31:0] v22_3_3_d0;

reg ap_idle;
reg v22_0_0_ce0;
reg v22_0_0_we0;
reg v22_0_1_ce0;
reg v22_0_1_we0;
reg v22_0_2_ce0;
reg v22_0_2_we0;
reg v22_0_3_ce0;
reg v22_0_3_we0;
reg v22_1_0_ce0;
reg v22_1_0_we0;
reg v22_1_1_ce0;
reg v22_1_1_we0;
reg v22_1_2_ce0;
reg v22_1_2_we0;
reg v22_1_3_ce0;
reg v22_1_3_we0;
reg v22_2_0_ce0;
reg v22_2_0_we0;
reg v22_2_1_ce0;
reg v22_2_1_we0;
reg v22_2_2_ce0;
reg v22_2_2_we0;
reg v22_2_3_ce0;
reg v22_2_3_we0;
reg v22_3_0_ce0;
reg v22_3_0_we0;
reg v22_3_1_ce0;
reg v22_3_1_we0;
reg v22_3_2_ce0;
reg v22_3_2_we0;
reg v22_3_3_ce0;
reg v22_3_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln76_fu_336_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln76_fu_410_p1;
reg   [1:0] trunc_ln76_reg_502;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln78_fu_428_p2;
reg   [3:0] add_ln78_reg_506;
wire   [1:0] trunc_ln78_fu_434_p1;
reg   [1:0] trunc_ln78_reg_511;
wire   [63:0] zext_ln78_2_fu_459_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] v28_fu_82;
wire   [3:0] add_ln77_fu_438_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_v28_load;
reg   [3:0] v27_fu_86;
wire   [3:0] select_ln76_1_fu_374_p3;
reg   [3:0] ap_sig_allocacmp_v27_load;
reg   [7:0] indvar_flatten6_fu_90;
wire   [7:0] add_ln76_1_fu_342_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [0:0] icmp_ln77_fu_360_p2;
wire   [3:0] add_ln76_fu_354_p2;
wire   [1:0] p_cast_mid2_v_fu_382_p4;
wire   [3:0] tmp_s_fu_396_p3;
wire   [3:0] zext_ln78_fu_392_p1;
wire   [3:0] select_ln76_fu_366_p3;
wire   [1:0] lshr_ln_fu_414_p4;
wire   [3:0] sub_ln78_fu_404_p2;
wire   [3:0] zext_ln78_1_fu_424_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln76_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_90 <= add_ln76_1_fu_342_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_90 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln76_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            v27_fu_86 <= select_ln76_1_fu_374_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            v27_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln76_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            v28_fu_82 <= add_ln77_fu_438_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            v28_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_336_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln78_reg_506 <= add_ln78_fu_428_p2;
        trunc_ln76_reg_502 <= trunc_ln76_fu_410_p1;
        trunc_ln78_reg_511 <= trunc_ln78_fu_434_p1;
    end
end

always @ (*) begin
    if (((icmp_ln76_fu_336_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_v27_load = 4'd0;
    end else begin
        ap_sig_allocacmp_v27_load = v27_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_v28_load = 4'd0;
    end else begin
        ap_sig_allocacmp_v28_load = v28_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_0_0_ce0 = 1'b1;
    end else begin
        v22_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd0) & (trunc_ln76_reg_502 == 2'd0))) begin
        v22_0_0_we0 = 1'b1;
    end else begin
        v22_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_0_1_ce0 = 1'b1;
    end else begin
        v22_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd1) & (trunc_ln76_reg_502 == 2'd0))) begin
        v22_0_1_we0 = 1'b1;
    end else begin
        v22_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_0_2_ce0 = 1'b1;
    end else begin
        v22_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd2) & (trunc_ln76_reg_502 == 2'd0))) begin
        v22_0_2_we0 = 1'b1;
    end else begin
        v22_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_0_3_ce0 = 1'b1;
    end else begin
        v22_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd3) & (trunc_ln76_reg_502 == 2'd0))) begin
        v22_0_3_we0 = 1'b1;
    end else begin
        v22_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_1_0_ce0 = 1'b1;
    end else begin
        v22_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd0) & (trunc_ln76_reg_502 == 2'd1))) begin
        v22_1_0_we0 = 1'b1;
    end else begin
        v22_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_1_1_ce0 = 1'b1;
    end else begin
        v22_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd1) & (trunc_ln76_reg_502 == 2'd1))) begin
        v22_1_1_we0 = 1'b1;
    end else begin
        v22_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_1_2_ce0 = 1'b1;
    end else begin
        v22_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd2) & (trunc_ln76_reg_502 == 2'd1))) begin
        v22_1_2_we0 = 1'b1;
    end else begin
        v22_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_1_3_ce0 = 1'b1;
    end else begin
        v22_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd3) & (trunc_ln76_reg_502 == 2'd1))) begin
        v22_1_3_we0 = 1'b1;
    end else begin
        v22_1_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_2_0_ce0 = 1'b1;
    end else begin
        v22_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd0) & (trunc_ln76_reg_502 == 2'd2))) begin
        v22_2_0_we0 = 1'b1;
    end else begin
        v22_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_2_1_ce0 = 1'b1;
    end else begin
        v22_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd1) & (trunc_ln76_reg_502 == 2'd2))) begin
        v22_2_1_we0 = 1'b1;
    end else begin
        v22_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_2_2_ce0 = 1'b1;
    end else begin
        v22_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd2) & (trunc_ln76_reg_502 == 2'd2))) begin
        v22_2_2_we0 = 1'b1;
    end else begin
        v22_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_2_3_ce0 = 1'b1;
    end else begin
        v22_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd3) & (trunc_ln76_reg_502 == 2'd2))) begin
        v22_2_3_we0 = 1'b1;
    end else begin
        v22_2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_3_0_ce0 = 1'b1;
    end else begin
        v22_3_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd0) & (trunc_ln76_reg_502 == 2'd3))) begin
        v22_3_0_we0 = 1'b1;
    end else begin
        v22_3_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_3_1_ce0 = 1'b1;
    end else begin
        v22_3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd1) & (trunc_ln76_reg_502 == 2'd3))) begin
        v22_3_1_we0 = 1'b1;
    end else begin
        v22_3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_3_2_ce0 = 1'b1;
    end else begin
        v22_3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd2) & (trunc_ln76_reg_502 == 2'd3))) begin
        v22_3_2_we0 = 1'b1;
    end else begin
        v22_3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v22_3_3_ce0 = 1'b1;
    end else begin
        v22_3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln78_reg_511 == 2'd3) & (trunc_ln76_reg_502 == 2'd3))) begin
        v22_3_3_we0 = 1'b1;
    end else begin
        v22_3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln76_1_fu_342_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 8'd1);

assign add_ln76_fu_354_p2 = (ap_sig_allocacmp_v27_load + 4'd1);

assign add_ln77_fu_438_p2 = (select_ln76_fu_366_p3 + 4'd1);

assign add_ln78_fu_428_p2 = (sub_ln78_fu_404_p2 + zext_ln78_1_fu_424_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln76_fu_336_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_360_p2 = ((ap_sig_allocacmp_v28_load == 4'd12) ? 1'b1 : 1'b0);

assign lshr_ln_fu_414_p4 = {{select_ln76_fu_366_p3[3:2]}};

assign p_cast_mid2_v_fu_382_p4 = {{select_ln76_1_fu_374_p3[3:2]}};

assign select_ln76_1_fu_374_p3 = ((icmp_ln77_fu_360_p2[0:0] == 1'b1) ? add_ln76_fu_354_p2 : ap_sig_allocacmp_v27_load);

assign select_ln76_fu_366_p3 = ((icmp_ln77_fu_360_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_v28_load);

assign sub_ln78_fu_404_p2 = (tmp_s_fu_396_p3 - zext_ln78_fu_392_p1);

assign tmp_s_fu_396_p3 = {{p_cast_mid2_v_fu_382_p4}, {2'd0}};

assign trunc_ln76_fu_410_p1 = select_ln76_1_fu_374_p3[1:0];

assign trunc_ln78_fu_434_p1 = select_ln76_fu_366_p3[1:0];

assign v22_0_0_address0 = zext_ln78_2_fu_459_p1;

assign v22_0_0_d0 = 32'd0;

assign v22_0_1_address0 = zext_ln78_2_fu_459_p1;

assign v22_0_1_d0 = 32'd0;

assign v22_0_2_address0 = zext_ln78_2_fu_459_p1;

assign v22_0_2_d0 = 32'd0;

assign v22_0_3_address0 = zext_ln78_2_fu_459_p1;

assign v22_0_3_d0 = 32'd0;

assign v22_1_0_address0 = zext_ln78_2_fu_459_p1;

assign v22_1_0_d0 = 32'd0;

assign v22_1_1_address0 = zext_ln78_2_fu_459_p1;

assign v22_1_1_d0 = 32'd0;

assign v22_1_2_address0 = zext_ln78_2_fu_459_p1;

assign v22_1_2_d0 = 32'd0;

assign v22_1_3_address0 = zext_ln78_2_fu_459_p1;

assign v22_1_3_d0 = 32'd0;

assign v22_2_0_address0 = zext_ln78_2_fu_459_p1;

assign v22_2_0_d0 = 32'd0;

assign v22_2_1_address0 = zext_ln78_2_fu_459_p1;

assign v22_2_1_d0 = 32'd0;

assign v22_2_2_address0 = zext_ln78_2_fu_459_p1;

assign v22_2_2_d0 = 32'd0;

assign v22_2_3_address0 = zext_ln78_2_fu_459_p1;

assign v22_2_3_d0 = 32'd0;

assign v22_3_0_address0 = zext_ln78_2_fu_459_p1;

assign v22_3_0_d0 = 32'd0;

assign v22_3_1_address0 = zext_ln78_2_fu_459_p1;

assign v22_3_1_d0 = 32'd0;

assign v22_3_2_address0 = zext_ln78_2_fu_459_p1;

assign v22_3_2_d0 = 32'd0;

assign v22_3_3_address0 = zext_ln78_2_fu_459_p1;

assign v22_3_3_d0 = 32'd0;

assign zext_ln78_1_fu_424_p1 = lshr_ln_fu_414_p4;

assign zext_ln78_2_fu_459_p1 = add_ln78_reg_506;

assign zext_ln78_fu_392_p1 = p_cast_mid2_v_fu_382_p4;

endmodule //Bert_layer_Attention_layer_Pipeline_VITIS_LOOP_76_3_VITIS_LOOP_77_4
