-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Layer_norm_Pipeline_l_j7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln352 : IN STD_LOGIC_VECTOR (13 downto 0);
    v137_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v137_ce0 : OUT STD_LOGIC;
    v137_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v260_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v260_ce0 : OUT STD_LOGIC;
    v260_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v167 : IN STD_LOGIC_VECTOR (31 downto 0);
    v172 : IN STD_LOGIC_VECTOR (31 downto 0);
    v261_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v261_ce0 : OUT STD_LOGIC;
    v261_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v140_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_0_ce0 : OUT STD_LOGIC;
    v140_0_we0 : OUT STD_LOGIC;
    v140_0_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_1_ce0 : OUT STD_LOGIC;
    v140_1_we0 : OUT STD_LOGIC;
    v140_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_2_ce0 : OUT STD_LOGIC;
    v140_2_we0 : OUT STD_LOGIC;
    v140_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_3_ce0 : OUT STD_LOGIC;
    v140_3_we0 : OUT STD_LOGIC;
    v140_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_4_ce0 : OUT STD_LOGIC;
    v140_4_we0 : OUT STD_LOGIC;
    v140_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_5_ce0 : OUT STD_LOGIC;
    v140_5_we0 : OUT STD_LOGIC;
    v140_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_6_ce0 : OUT STD_LOGIC;
    v140_6_we0 : OUT STD_LOGIC;
    v140_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_7_ce0 : OUT STD_LOGIC;
    v140_7_we0 : OUT STD_LOGIC;
    v140_7_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_8_ce0 : OUT STD_LOGIC;
    v140_8_we0 : OUT STD_LOGIC;
    v140_8_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_9_ce0 : OUT STD_LOGIC;
    v140_9_we0 : OUT STD_LOGIC;
    v140_9_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_10_ce0 : OUT STD_LOGIC;
    v140_10_we0 : OUT STD_LOGIC;
    v140_10_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v140_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v140_11_ce0 : OUT STD_LOGIC;
    v140_11_we0 : OUT STD_LOGIC;
    v140_11_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    i9 : IN STD_LOGIC_VECTOR (3 downto 0);
    grp_fu_437_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_437_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_437_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_437_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_437_p_ce : OUT STD_LOGIC;
    grp_fu_449_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_449_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_449_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_449_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_449_p_ce : OUT STD_LOGIC;
    grp_fu_441_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_441_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_441_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_441_p_ce : OUT STD_LOGIC;
    grp_fu_445_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_445_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_445_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_445_p_ce : OUT STD_LOGIC;
    grp_fu_211_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_211_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_211_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Layer_norm_Pipeline_l_j7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln349_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i9_read_reg_653 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j7_1_reg_667 : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_1_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_1_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_1_reg_667_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_1_reg_667_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal v166_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln349_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln349_reg_686_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v260_load_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal v168_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal v165_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v169_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal v173_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal v261_load_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v175_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal v175_reg_748_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v175_reg_748_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v175_reg_748_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v175_reg_748_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_759 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln600_fu_452_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln600_reg_764 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln606_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_769_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_769_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_4_fu_482_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_776 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_776_pp0_iter35_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_513_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_781 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln617_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln617_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln618_fu_527_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln618_reg_793 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln616_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_799_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln616_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln620_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln617_fu_588_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln617_reg_814 : STD_LOGIC_VECTOR (23 downto 0);
    signal v176_V_fu_639_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v176_V_reg_819 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln352_1_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j7_fu_132 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln349_fu_388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j7_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln352_fu_394_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln352_fu_398_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ireg_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln590_fu_430_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_43_fu_465_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln604_fu_472_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_fu_476_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln501_fu_462_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_489_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln616_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln616_fu_501_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln616_fu_507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln617_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln617_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616cast_fu_561_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln638_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln639_fu_565_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln606_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln617_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln638_fu_570_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln621_fu_595_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln621_fu_598_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln768_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln621_fu_603_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln623_fu_618_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln620_fu_626_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln616_fu_633_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter36_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j7_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln349_fu_382_p2 = ap_const_lv1_0))) then 
                    j7_fu_132 <= add_ln349_fu_388_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j7_fu_132 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_769 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln616_reg_799 <= and_ln616_fu_542_p2;
                icmp_ln617_reg_788 <= icmp_ln617_fu_521_p2;
                man_V_4_reg_776 <= man_V_4_fu_482_p3;
                sh_amt_reg_781 <= sh_amt_fu_513_p3;
                trunc_ln618_reg_793 <= trunc_ln618_fu_527_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln616_reg_799_pp0_iter35_reg <= and_ln616_reg_799;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                exp_tmp_reg_759 <= ireg_fu_426_p1(62 downto 52);
                icmp_ln606_reg_769 <= icmp_ln606_fu_456_p2;
                icmp_ln606_reg_769_pp0_iter34_reg <= icmp_ln606_reg_769;
                icmp_ln606_reg_769_pp0_iter35_reg <= icmp_ln606_reg_769_pp0_iter34_reg;
                j7_1_reg_667_pp0_iter2_reg <= j7_1_reg_667_pp0_iter1_reg;
                j7_1_reg_667_pp0_iter3_reg <= j7_1_reg_667_pp0_iter2_reg;
                j7_1_reg_667_pp0_iter4_reg <= j7_1_reg_667_pp0_iter3_reg;
                man_V_4_reg_776_pp0_iter35_reg <= man_V_4_reg_776;
                p_Result_s_reg_754 <= ireg_fu_426_p1(63 downto 63);
                trunc_ln600_reg_764 <= trunc_ln600_fu_452_p1;
                v168_reg_713 <= grp_fu_437_p_dout0;
                v169_reg_723 <= grp_fu_441_p_dout0;
                v173_reg_733 <= grp_fu_445_p_dout0;
                v175_reg_748 <= grp_fu_449_p_dout0;
                v175_reg_748_pp0_iter32_reg <= v175_reg_748;
                v175_reg_748_pp0_iter33_reg <= v175_reg_748_pp0_iter32_reg;
                v175_reg_748_pp0_iter34_reg <= v175_reg_748_pp0_iter33_reg;
                v175_reg_748_pp0_iter35_reg <= v175_reg_748_pp0_iter34_reg;
                v176_V_reg_819 <= v176_V_fu_639_p3;
                v260_load_reg_708 <= v260_q0;
                v261_load_reg_738 <= v261_q0;
                    zext_ln349_reg_686(9 downto 0) <= zext_ln349_fu_414_p1(9 downto 0);
                    zext_ln349_reg_686_pp0_iter10_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter9_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter11_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter10_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter12_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter11_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter13_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter12_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter14_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter13_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter15_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter14_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter16_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter15_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter17_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter16_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter18_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter17_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter19_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter18_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter20_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter19_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter21_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter20_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter22_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter21_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter23_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter22_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter24_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter23_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter25_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter24_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter26_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter25_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter27_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter26_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter28_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter27_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter29_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter28_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter30_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter29_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter31_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter30_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter32_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter31_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter33_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter32_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter34_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter33_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter35_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter34_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter36_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter35_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter6_reg(9 downto 0) <= zext_ln349_reg_686(9 downto 0);
                    zext_ln349_reg_686_pp0_iter7_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter6_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter8_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter7_reg(9 downto 0);
                    zext_ln349_reg_686_pp0_iter9_reg(9 downto 0) <= zext_ln349_reg_686_pp0_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                j7_1_reg_667 <= ap_sig_allocacmp_j7_1;
                j7_1_reg_667_pp0_iter1_reg <= j7_1_reg_667;
                v166_reg_681 <= v137_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_769_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln616_reg_799) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln620_reg_809 <= icmp_ln620_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_769_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln616_reg_799) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln617_reg_814 <= select_ln617_fu_588_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_769_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln616_reg_804 <= sext_ln616_fu_548_p1;
            end if;
        end if;
    end process;
    zext_ln349_reg_686(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter20_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter21_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter22_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter23_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter24_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter25_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter26_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter27_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter28_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter29_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter30_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter31_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter32_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter33_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter34_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter35_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln349_reg_686_pp0_iter36_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_fu_462_p1));
    add_ln349_fu_388_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j7_1) + unsigned(ap_const_lv10_1));
    add_ln352_fu_398_p2 <= std_logic_vector(unsigned(sub_ln352) + unsigned(zext_ln352_fu_394_p1));
    add_ln616_fu_501_p2 <= std_logic_vector(unsigned(F2_fu_489_p2) + unsigned(ap_const_lv12_FF0));
    and_ln616_fu_542_p2 <= (xor_ln617_fu_536_p2 and icmp_ln616_fu_495_p2);
    and_ln617_fu_583_p2 <= (xor_ln606_fu_578_p2 and icmp_ln617_reg_788);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln349_fu_382_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln349_fu_382_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter36_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter36_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j7_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j7_fu_132, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j7_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j7_1 <= j7_fu_132;
        end if; 
    end process;

    ashr_ln621_fu_598_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_776_pp0_iter35_reg),to_integer(unsigned('0' & zext_ln621_fu_595_p1(31-1 downto 0)))));
    bitcast_ln768_fu_607_p1 <= v175_reg_748_pp0_iter35_reg;
    grp_fu_211_p_ce <= ap_const_logic_1;
    grp_fu_211_p_din0 <= v175_reg_748;
    grp_fu_437_p_ce <= ap_const_logic_1;
    grp_fu_437_p_din0 <= v166_reg_681;
    grp_fu_437_p_din1 <= v167;
    grp_fu_437_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_441_p_ce <= ap_const_logic_1;
    grp_fu_441_p_din0 <= v165_fu_418_p1;
    grp_fu_441_p_din1 <= v168_reg_713;
    grp_fu_445_p_ce <= ap_const_logic_1;
    grp_fu_445_p_din0 <= v169_reg_723;
    grp_fu_445_p_din1 <= v172;
    grp_fu_449_p_ce <= ap_const_logic_1;
    grp_fu_449_p_din0 <= v173_reg_733;
    grp_fu_449_p_din1 <= v174_fu_422_p1;
    grp_fu_449_p_opcode <= ap_const_lv2_0;
    i9_read_reg_653 <= i9;
    icmp_ln349_fu_382_p2 <= "1" when (ap_sig_allocacmp_j7_1 = ap_const_lv10_300) else "0";
    icmp_ln606_fu_456_p2 <= "1" when (trunc_ln590_fu_430_p1 = ap_const_lv63_0) else "0";
    icmp_ln616_fu_495_p2 <= "1" when (signed(F2_fu_489_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln617_fu_521_p2 <= "1" when (F2_fu_489_p2 = ap_const_lv12_10) else "0";
    icmp_ln620_fu_551_p2 <= "1" when (unsigned(sh_amt_reg_781) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln638_fu_556_p2 <= "1" when (unsigned(sh_amt_reg_781) < unsigned(ap_const_lv12_18)) else "0";
    ireg_fu_426_p1 <= grp_fu_211_p_dout0;
    man_V_3_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln604_fu_472_p1));
    man_V_4_fu_482_p3 <= 
        man_V_3_fu_476_p2 when (p_Result_s_reg_754(0) = '1') else 
        zext_ln604_fu_472_p1;
    or_ln617_fu_531_p2 <= (icmp_ln617_fu_521_p2 or icmp_ln606_reg_769);
    p_Result_43_fu_465_p3 <= (ap_const_lv1_1 & trunc_ln600_reg_764);
    select_ln616_fu_633_p3 <= 
        select_ln620_fu_626_p3 when (and_ln616_reg_799_pp0_iter35_reg(0) = '1') else 
        select_ln617_reg_814;
    select_ln617_fu_588_p3 <= 
        trunc_ln618_reg_793 when (and_ln617_fu_583_p2(0) = '1') else 
        select_ln638_fu_570_p3;
    select_ln620_fu_626_p3 <= 
        trunc_ln621_fu_603_p1 when (icmp_ln620_reg_809(0) = '1') else 
        select_ln623_fu_618_p3;
    select_ln623_fu_618_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_fu_610_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln638_fu_570_p3 <= 
        shl_ln639_fu_565_p2 when (icmp_ln638_fu_556_p2(0) = '1') else 
        ap_const_lv24_0;
        sext_ln616_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_781),32));

    sext_ln616cast_fu_561_p1 <= sext_ln616_fu_548_p1(24 - 1 downto 0);
    sh_amt_fu_513_p3 <= 
        add_ln616_fu_501_p2 when (icmp_ln616_fu_495_p2(0) = '1') else 
        sub_ln616_fu_507_p2;
    shl_ln639_fu_565_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln618_reg_793),to_integer(unsigned('0' & sext_ln616cast_fu_561_p1(24-1 downto 0)))));
    sub_ln616_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_489_p2));
    tmp_fu_610_p3 <= bitcast_ln768_fu_607_p1(31 downto 31);
    trunc_ln590_fu_430_p1 <= ireg_fu_426_p1(63 - 1 downto 0);
    trunc_ln600_fu_452_p1 <= ireg_fu_426_p1(52 - 1 downto 0);
    trunc_ln618_fu_527_p1 <= man_V_4_fu_482_p3(24 - 1 downto 0);
    trunc_ln621_fu_603_p1 <= ashr_ln621_fu_598_p2(24 - 1 downto 0);
    v137_address0 <= zext_ln352_1_fu_404_p1(14 - 1 downto 0);

    v137_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v137_ce0 <= ap_const_logic_1;
        else 
            v137_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_0_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_0_ce0 <= ap_const_logic_1;
        else 
            v140_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_0_d0 <= v176_V_reg_819;

    v140_0_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_0_we0 <= ap_const_logic_1;
        else 
            v140_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_10_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_10_ce0 <= ap_const_logic_1;
        else 
            v140_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_10_d0 <= v176_V_reg_819;

    v140_10_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_10_we0 <= ap_const_logic_1;
        else 
            v140_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_11_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_11_ce0 <= ap_const_logic_1;
        else 
            v140_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_11_d0 <= v176_V_reg_819;

    v140_11_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1) and ((i9_read_reg_653 = ap_const_lv4_B) or ((i9_read_reg_653 = ap_const_lv4_C) or ((i9_read_reg_653 = ap_const_lv4_D) or ((i9_read_reg_653 = ap_const_lv4_E) or (i9_read_reg_653 = ap_const_lv4_F))))))) then 
            v140_11_we0 <= ap_const_logic_1;
        else 
            v140_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_1_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_1_ce0 <= ap_const_logic_1;
        else 
            v140_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_1_d0 <= v176_V_reg_819;

    v140_1_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_1_we0 <= ap_const_logic_1;
        else 
            v140_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_2_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_2_ce0 <= ap_const_logic_1;
        else 
            v140_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_2_d0 <= v176_V_reg_819;

    v140_2_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_2_we0 <= ap_const_logic_1;
        else 
            v140_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_3_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_3_ce0 <= ap_const_logic_1;
        else 
            v140_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_3_d0 <= v176_V_reg_819;

    v140_3_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_3_we0 <= ap_const_logic_1;
        else 
            v140_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_4_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_4_ce0 <= ap_const_logic_1;
        else 
            v140_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_4_d0 <= v176_V_reg_819;

    v140_4_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_4_we0 <= ap_const_logic_1;
        else 
            v140_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_5_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_5_ce0 <= ap_const_logic_1;
        else 
            v140_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_5_d0 <= v176_V_reg_819;

    v140_5_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_5_we0 <= ap_const_logic_1;
        else 
            v140_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_6_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_6_ce0 <= ap_const_logic_1;
        else 
            v140_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_6_d0 <= v176_V_reg_819;

    v140_6_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_6_we0 <= ap_const_logic_1;
        else 
            v140_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_7_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_7_ce0 <= ap_const_logic_1;
        else 
            v140_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_7_d0 <= v176_V_reg_819;

    v140_7_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_7_we0 <= ap_const_logic_1;
        else 
            v140_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_8_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_8_ce0 <= ap_const_logic_1;
        else 
            v140_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_8_d0 <= v176_V_reg_819;

    v140_8_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_8_we0 <= ap_const_logic_1;
        else 
            v140_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_9_address0 <= zext_ln349_reg_686_pp0_iter36_reg(10 - 1 downto 0);

    v140_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_9_ce0 <= ap_const_logic_1;
        else 
            v140_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_9_d0 <= v176_V_reg_819;

    v140_9_we0_assign_proc : process(ap_enable_reg_pp0_iter37, i9_read_reg_653, ap_block_pp0_stage0_11001)
    begin
        if (((i9_read_reg_653 = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v140_9_we0 <= ap_const_logic_1;
        else 
            v140_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v165_fu_418_p1 <= v260_load_reg_708;
    v174_fu_422_p1 <= v261_load_reg_738;
    v176_V_fu_639_p3 <= 
        ap_const_lv24_0 when (icmp_ln606_reg_769_pp0_iter35_reg(0) = '1') else 
        select_ln616_fu_633_p3;
    v260_address0 <= zext_ln349_fu_414_p1(10 - 1 downto 0);

    v260_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v260_ce0 <= ap_const_logic_1;
        else 
            v260_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v261_address0 <= zext_ln349_reg_686_pp0_iter24_reg(10 - 1 downto 0);

    v261_ce0_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v261_ce0 <= ap_const_logic_1;
        else 
            v261_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln606_fu_578_p2 <= (icmp_ln606_reg_769_pp0_iter34_reg xor ap_const_lv1_1);
    xor_ln617_fu_536_p2 <= (or_ln617_fu_531_p2 xor ap_const_lv1_1);
    zext_ln349_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j7_1_reg_667_pp0_iter4_reg),64));
    zext_ln352_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln352_fu_398_p2),64));
    zext_ln352_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j7_1),14));
    zext_ln501_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_759),12));
    zext_ln604_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_43_fu_465_p3),54));
    zext_ln621_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln616_reg_804),54));
end behav;
