-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v102_0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_0_0_ce0 : OUT STD_LOGIC;
    v102_0_0_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_0_1_ce0 : OUT STD_LOGIC;
    v102_0_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_0_2_ce0 : OUT STD_LOGIC;
    v102_0_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_0_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_0_3_ce0 : OUT STD_LOGIC;
    v102_0_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_1_0_ce0 : OUT STD_LOGIC;
    v102_1_0_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_1_1_ce0 : OUT STD_LOGIC;
    v102_1_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_1_2_ce0 : OUT STD_LOGIC;
    v102_1_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_1_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_1_3_ce0 : OUT STD_LOGIC;
    v102_1_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_2_0_ce0 : OUT STD_LOGIC;
    v102_2_0_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_2_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_2_1_ce0 : OUT STD_LOGIC;
    v102_2_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_2_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_2_2_ce0 : OUT STD_LOGIC;
    v102_2_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_2_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_2_3_ce0 : OUT STD_LOGIC;
    v102_2_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_3_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_3_0_ce0 : OUT STD_LOGIC;
    v102_3_0_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_3_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_3_1_ce0 : OUT STD_LOGIC;
    v102_3_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_3_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_3_2_ce0 : OUT STD_LOGIC;
    v102_3_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_3_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v102_3_3_ce0 : OUT STD_LOGIC;
    v102_3_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    tmp_52 : IN STD_LOGIC_VECTOR (9 downto 0);
    v90_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_0_ce0 : OUT STD_LOGIC;
    v90_0_we0 : OUT STD_LOGIC;
    v90_0_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_1_ce0 : OUT STD_LOGIC;
    v90_1_we0 : OUT STD_LOGIC;
    v90_1_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_2_ce0 : OUT STD_LOGIC;
    v90_2_we0 : OUT STD_LOGIC;
    v90_2_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_3_ce0 : OUT STD_LOGIC;
    v90_3_we0 : OUT STD_LOGIC;
    v90_3_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_4_ce0 : OUT STD_LOGIC;
    v90_4_we0 : OUT STD_LOGIC;
    v90_4_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_5_ce0 : OUT STD_LOGIC;
    v90_5_we0 : OUT STD_LOGIC;
    v90_5_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_6_ce0 : OUT STD_LOGIC;
    v90_6_we0 : OUT STD_LOGIC;
    v90_6_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_7_ce0 : OUT STD_LOGIC;
    v90_7_we0 : OUT STD_LOGIC;
    v90_7_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_8_ce0 : OUT STD_LOGIC;
    v90_8_we0 : OUT STD_LOGIC;
    v90_8_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_9_ce0 : OUT STD_LOGIC;
    v90_9_we0 : OUT STD_LOGIC;
    v90_9_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_10_ce0 : OUT STD_LOGIC;
    v90_10_we0 : OUT STD_LOGIC;
    v90_10_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v90_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v90_11_ce0 : OUT STD_LOGIC;
    v90_11_we0 : OUT STD_LOGIC;
    v90_11_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln231_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln231_fu_558_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln231_reg_770 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln231_reg_770_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln231_1_fu_566_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln231_1_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln231_1_reg_775_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln231_fu_574_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln231_reg_779 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln232_fu_588_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln232_reg_784 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_46_fu_703_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_46_reg_872 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln234_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln235_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_m_fu_128 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln232_fu_630_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_m_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_m_fu_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_m_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten20_fu_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln231_1_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten20_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln232_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln231_fu_546_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_578_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln3_fu_592_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_602_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_651_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_43_fu_664_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_44_fu_677_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_45_fu_690_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln232_fu_716_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln235_fu_719_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mux_42_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_24_1_1_U1594 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => v102_0_0_q0,
        din1 => v102_0_1_q0,
        din2 => v102_0_2_q0,
        din3 => v102_0_3_q0,
        din4 => trunc_ln232_reg_784,
        dout => tmp_42_fu_651_p6);

    mux_42_24_1_1_U1595 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => v102_1_0_q0,
        din1 => v102_1_1_q0,
        din2 => v102_1_2_q0,
        din3 => v102_1_3_q0,
        din4 => trunc_ln232_reg_784,
        dout => tmp_43_fu_664_p6);

    mux_42_24_1_1_U1596 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => v102_2_0_q0,
        din1 => v102_2_1_q0,
        din2 => v102_2_2_q0,
        din3 => v102_2_3_q0,
        din4 => trunc_ln232_reg_784,
        dout => tmp_44_fu_677_p6);

    mux_42_24_1_1_U1597 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => v102_3_0_q0,
        din1 => v102_3_1_q0,
        din2 => v102_3_2_q0,
        din3 => v102_3_3_q0,
        din4 => trunc_ln232_reg_784,
        dout => tmp_45_fu_690_p6);

    mux_42_24_1_1_U1598 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_42_fu_651_p6,
        din1 => tmp_43_fu_664_p6,
        din2 => tmp_44_fu_677_p6,
        din3 => tmp_45_fu_690_p6,
        din4 => trunc_ln231_reg_779,
        dout => tmp_46_fu_703_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_m_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln231_fu_528_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_m_fu_132 <= select_ln231_1_fu_566_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_m_fu_132 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten20_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln231_fu_528_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten20_fu_136 <= add_ln231_1_fu_534_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten20_fu_136 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_m_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln231_fu_528_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_m_fu_128 <= add_ln232_fu_630_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_m_fu_128 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                select_ln231_1_reg_775_pp0_iter1_reg <= select_ln231_1_reg_775;
                select_ln231_reg_770_pp0_iter1_reg <= select_ln231_reg_770;
                tmp_46_reg_872 <= tmp_46_fu_703_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_528_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln231_1_reg_775 <= select_ln231_1_fu_566_p3;
                select_ln231_reg_770 <= select_ln231_fu_558_p3;
                trunc_ln231_reg_779 <= trunc_ln231_fu_574_p1;
                trunc_ln232_reg_784 <= trunc_ln232_fu_588_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln231_1_fu_534_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten20_load) + unsigned(ap_const_lv10_1));
    add_ln231_fu_546_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_m_load) + unsigned(ap_const_lv4_1));
    add_ln232_fu_630_p2 <= std_logic_vector(unsigned(select_ln231_fu_558_p3) + unsigned(ap_const_lv7_1));
    add_ln235_fu_719_p2 <= std_logic_vector(unsigned(zext_ln232_fu_716_p1) + unsigned(tmp_52));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln231_fu_528_p2)
    begin
        if (((icmp_ln231_fu_528_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_m_fu_132)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_m_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_m_load <= i_m_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten20_fu_136)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten20_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten20_load <= indvar_flatten20_fu_136;
        end if; 
    end process;


    ap_sig_allocacmp_j_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_m_fu_128, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_m_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_m_load <= j_m_fu_128;
        end if; 
    end process;

    icmp_ln231_fu_528_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten20_load = ap_const_lv10_300) else "0";
    icmp_ln232_fu_552_p2 <= "1" when (ap_sig_allocacmp_j_m_load = ap_const_lv7_40) else "0";
    lshr_ln3_fu_592_p4 <= select_ln231_fu_558_p3(5 downto 2);
    select_ln231_1_fu_566_p3 <= 
        add_ln231_fu_546_p2 when (icmp_ln232_fu_552_p2(0) = '1') else 
        ap_sig_allocacmp_i_m_load;
    select_ln231_fu_558_p3 <= 
        ap_const_lv7_0 when (icmp_ln232_fu_552_p2(0) = '1') else 
        ap_sig_allocacmp_j_m_load;
    tmp_41_fu_602_p3 <= (tmp_s_fu_578_p4 & lshr_ln3_fu_592_p4);
    tmp_s_fu_578_p4 <= select_ln231_1_fu_566_p3(3 downto 2);
    trunc_ln231_fu_574_p1 <= select_ln231_1_fu_566_p3(2 - 1 downto 0);
    trunc_ln232_fu_588_p1 <= select_ln231_fu_558_p3(2 - 1 downto 0);
    v102_0_0_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_0_0_ce0 <= ap_const_logic_1;
        else 
            v102_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_0_1_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_0_1_ce0 <= ap_const_logic_1;
        else 
            v102_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_0_2_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_0_2_ce0 <= ap_const_logic_1;
        else 
            v102_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_0_3_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_0_3_ce0 <= ap_const_logic_1;
        else 
            v102_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_1_0_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_1_0_ce0 <= ap_const_logic_1;
        else 
            v102_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_1_1_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_1_1_ce0 <= ap_const_logic_1;
        else 
            v102_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_1_2_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_1_2_ce0 <= ap_const_logic_1;
        else 
            v102_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_1_3_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_1_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_1_3_ce0 <= ap_const_logic_1;
        else 
            v102_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_2_0_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_2_0_ce0 <= ap_const_logic_1;
        else 
            v102_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_2_1_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_2_1_ce0 <= ap_const_logic_1;
        else 
            v102_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_2_2_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_2_2_ce0 <= ap_const_logic_1;
        else 
            v102_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_2_3_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_2_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_2_3_ce0 <= ap_const_logic_1;
        else 
            v102_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_3_0_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_3_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_3_0_ce0 <= ap_const_logic_1;
        else 
            v102_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_3_1_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_3_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_3_1_ce0 <= ap_const_logic_1;
        else 
            v102_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_3_2_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_3_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_3_2_ce0 <= ap_const_logic_1;
        else 
            v102_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_3_3_address0 <= zext_ln234_fu_610_p1(6 - 1 downto 0);

    v102_3_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v102_3_3_ce0 <= ap_const_logic_1;
        else 
            v102_3_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_0_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_0_ce0 <= ap_const_logic_1;
        else 
            v90_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_0_d0 <= tmp_46_reg_872;

    v90_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_0))) then 
            v90_0_we0 <= ap_const_logic_1;
        else 
            v90_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_10_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_10_ce0 <= ap_const_logic_1;
        else 
            v90_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_10_d0 <= tmp_46_reg_872;

    v90_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_A))) then 
            v90_10_we0 <= ap_const_logic_1;
        else 
            v90_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_11_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_11_ce0 <= ap_const_logic_1;
        else 
            v90_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_11_d0 <= tmp_46_reg_872;

    v90_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_B) or ((select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_C) or ((select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_D) or ((select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_E) or (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_F))))))) then 
            v90_11_we0 <= ap_const_logic_1;
        else 
            v90_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_1_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_1_ce0 <= ap_const_logic_1;
        else 
            v90_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_1_d0 <= tmp_46_reg_872;

    v90_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_1))) then 
            v90_1_we0 <= ap_const_logic_1;
        else 
            v90_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_2_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_2_ce0 <= ap_const_logic_1;
        else 
            v90_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_2_d0 <= tmp_46_reg_872;

    v90_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_2))) then 
            v90_2_we0 <= ap_const_logic_1;
        else 
            v90_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_3_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_3_ce0 <= ap_const_logic_1;
        else 
            v90_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_3_d0 <= tmp_46_reg_872;

    v90_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_3))) then 
            v90_3_we0 <= ap_const_logic_1;
        else 
            v90_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_4_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_4_ce0 <= ap_const_logic_1;
        else 
            v90_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_4_d0 <= tmp_46_reg_872;

    v90_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_4))) then 
            v90_4_we0 <= ap_const_logic_1;
        else 
            v90_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_5_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_5_ce0 <= ap_const_logic_1;
        else 
            v90_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_5_d0 <= tmp_46_reg_872;

    v90_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_5))) then 
            v90_5_we0 <= ap_const_logic_1;
        else 
            v90_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_6_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_6_ce0 <= ap_const_logic_1;
        else 
            v90_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_6_d0 <= tmp_46_reg_872;

    v90_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_6))) then 
            v90_6_we0 <= ap_const_logic_1;
        else 
            v90_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_7_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_7_ce0 <= ap_const_logic_1;
        else 
            v90_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_7_d0 <= tmp_46_reg_872;

    v90_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_7))) then 
            v90_7_we0 <= ap_const_logic_1;
        else 
            v90_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_8_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_8_ce0 <= ap_const_logic_1;
        else 
            v90_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_8_d0 <= tmp_46_reg_872;

    v90_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_8))) then 
            v90_8_we0 <= ap_const_logic_1;
        else 
            v90_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_9_address0 <= zext_ln235_fu_724_p1(10 - 1 downto 0);

    v90_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            v90_9_ce0 <= ap_const_logic_1;
        else 
            v90_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v90_9_d0 <= tmp_46_reg_872;

    v90_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln231_1_reg_775_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln231_1_reg_775_pp0_iter1_reg = ap_const_lv4_9))) then 
            v90_9_we0 <= ap_const_logic_1;
        else 
            v90_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln232_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln231_reg_770_pp0_iter1_reg),10));
    zext_ln234_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_602_p3),64));
    zext_ln235_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln235_fu_719_p2),64));
end behav;
