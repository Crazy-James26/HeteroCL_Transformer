// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_update_i5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v78_address0,
        v78_ce0,
        v78_q0,
        v78_address1,
        v78_ce1,
        v78_q1,
        inp_sumRow_address0,
        inp_sumRow_ce0,
        inp_sumRow_q0,
        v79_0_address0,
        v79_0_ce0,
        v79_0_we0,
        v79_0_d0,
        v79_1_address0,
        v79_1_ce0,
        v79_1_we0,
        v79_1_d0,
        v79_2_address0,
        v79_2_ce0,
        v79_2_we0,
        v79_2_d0,
        v79_3_address0,
        v79_3_ce0,
        v79_3_we0,
        v79_3_d0,
        v79_4_address0,
        v79_4_ce0,
        v79_4_we0,
        v79_4_d0,
        v79_5_address0,
        v79_5_ce0,
        v79_5_we0,
        v79_5_d0,
        v79_6_address0,
        v79_6_ce0,
        v79_6_we0,
        v79_6_d0,
        v79_7_address0,
        v79_7_ce0,
        v79_7_we0,
        v79_7_d0,
        v79_8_address0,
        v79_8_ce0,
        v79_8_we0,
        v79_8_d0,
        v79_9_address0,
        v79_9_ce0,
        v79_9_we0,
        v79_9_d0,
        v79_10_address0,
        v79_10_ce0,
        v79_10_we0,
        v79_10_d0,
        v79_11_address0,
        v79_11_ce0,
        v79_11_we0,
        v79_11_d0,
        grp_fu_363_p_din0,
        grp_fu_363_p_din1,
        grp_fu_363_p_dout0,
        grp_fu_363_p_ce,
        grp_fu_367_p_din0,
        grp_fu_367_p_din1,
        grp_fu_367_p_dout0,
        grp_fu_367_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v78_address0;
output   v78_ce0;
input  [31:0] v78_q0;
output  [7:0] v78_address1;
output   v78_ce1;
input  [31:0] v78_q1;
output  [3:0] inp_sumRow_address0;
output   inp_sumRow_ce0;
input  [31:0] inp_sumRow_q0;
output  [3:0] v79_0_address0;
output   v79_0_ce0;
output   v79_0_we0;
output  [31:0] v79_0_d0;
output  [3:0] v79_1_address0;
output   v79_1_ce0;
output   v79_1_we0;
output  [31:0] v79_1_d0;
output  [3:0] v79_2_address0;
output   v79_2_ce0;
output   v79_2_we0;
output  [31:0] v79_2_d0;
output  [3:0] v79_3_address0;
output   v79_3_ce0;
output   v79_3_we0;
output  [31:0] v79_3_d0;
output  [3:0] v79_4_address0;
output   v79_4_ce0;
output   v79_4_we0;
output  [31:0] v79_4_d0;
output  [3:0] v79_5_address0;
output   v79_5_ce0;
output   v79_5_we0;
output  [31:0] v79_5_d0;
output  [3:0] v79_6_address0;
output   v79_6_ce0;
output   v79_6_we0;
output  [31:0] v79_6_d0;
output  [3:0] v79_7_address0;
output   v79_7_ce0;
output   v79_7_we0;
output  [31:0] v79_7_d0;
output  [3:0] v79_8_address0;
output   v79_8_ce0;
output   v79_8_we0;
output  [31:0] v79_8_d0;
output  [3:0] v79_9_address0;
output   v79_9_ce0;
output   v79_9_we0;
output  [31:0] v79_9_d0;
output  [3:0] v79_10_address0;
output   v79_10_ce0;
output   v79_10_we0;
output  [31:0] v79_10_d0;
output  [3:0] v79_11_address0;
output   v79_11_ce0;
output   v79_11_we0;
output  [31:0] v79_11_d0;
output  [31:0] grp_fu_363_p_din0;
output  [31:0] grp_fu_363_p_din1;
input  [31:0] grp_fu_363_p_dout0;
output   grp_fu_363_p_ce;
output  [31:0] grp_fu_367_p_din0;
output  [31:0] grp_fu_367_p_din1;
input  [31:0] grp_fu_367_p_dout0;
output   grp_fu_367_p_ce;

reg ap_idle;
reg[7:0] v78_address0;
reg v78_ce0;
reg[7:0] v78_address1;
reg v78_ce1;
reg inp_sumRow_ce0;
reg v79_0_ce0;
reg v79_0_we0;
reg v79_1_ce0;
reg v79_1_we0;
reg v79_2_ce0;
reg v79_2_we0;
reg v79_3_ce0;
reg v79_3_we0;
reg v79_4_ce0;
reg v79_4_we0;
reg v79_5_ce0;
reg v79_5_we0;
reg v79_6_ce0;
reg v79_6_we0;
reg v79_7_ce0;
reg v79_7_we0;
reg v79_8_ce0;
reg v79_8_we0;
reg v79_9_ce0;
reg v79_9_we0;
reg v79_10_ce0;
reg v79_10_we0;
reg v79_11_ce0;
reg v79_11_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state12_pp0_stage5_iter1;
wire    ap_block_state18_pp0_stage5_iter2;
wire    ap_block_state24_pp0_stage5_iter3;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln99_reg_567;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] reg_368;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state13_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state14_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state15_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state16_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state17_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] reg_378;
wire   [0:0] icmp_ln99_fu_396_p2;
wire   [63:0] i5_cast_fu_408_p1;
reg   [63:0] i5_cast_reg_571;
reg   [63:0] i5_cast_reg_571_pp0_iter1_reg;
reg   [63:0] i5_cast_reg_571_pp0_iter2_reg;
reg   [63:0] i5_cast_reg_571_pp0_iter3_reg;
wire   [7:0] sub_ln101_fu_433_p2;
reg   [7:0] sub_ln101_reg_587;
reg   [31:0] v50_reg_626;
reg   [31:0] v78_load_reg_632;
reg   [31:0] v78_load_1_reg_637;
reg   [31:0] v78_load_2_reg_652;
reg   [31:0] v78_load_3_reg_657;
reg   [31:0] v78_load_4_reg_672;
reg   [31:0] v78_load_5_reg_677;
reg   [31:0] v78_load_6_reg_692;
reg   [31:0] v78_load_7_reg_697;
reg   [31:0] v78_load_8_reg_712;
reg   [31:0] v78_load_9_reg_717;
reg   [31:0] v78_load_10_reg_722;
reg   [31:0] v78_load_11_reg_727;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln101_1_fu_439_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln101_2_fu_450_p1;
wire   [63:0] zext_ln101_3_fu_465_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln101_4_fu_475_p1;
wire   [63:0] zext_ln101_5_fu_485_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln101_6_fu_495_p1;
wire   [63:0] zext_ln101_7_fu_505_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln101_8_fu_515_p1;
wire   [63:0] zext_ln101_9_fu_525_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln101_10_fu_535_p1;
wire   [63:0] zext_ln101_11_fu_545_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln101_12_fu_555_p1;
reg   [3:0] i5_fu_82;
wire   [3:0] add_ln99_fu_402_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i5_1;
reg   [31:0] grp_fu_360_p0;
reg   [31:0] grp_fu_364_p0;
wire   [5:0] tmp_19_fu_421_p3;
wire   [7:0] tmp_s_fu_413_p3;
wire   [7:0] zext_ln101_fu_429_p1;
wire   [7:0] or_ln101_fu_444_p2;
wire   [7:0] or_ln101_1_fu_460_p2;
wire   [7:0] or_ln101_2_fu_470_p2;
wire   [7:0] add_ln101_fu_480_p2;
wire   [7:0] add_ln101_1_fu_490_p2;
wire   [7:0] add_ln101_2_fu_500_p2;
wire   [7:0] add_ln101_3_fu_510_p2;
wire   [7:0] add_ln101_4_fu_520_p2;
wire   [7:0] add_ln101_5_fu_530_p2;
wire   [7:0] add_ln101_6_fu_540_p2;
wire   [7:0] add_ln101_7_fu_550_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln99_fu_396_p2 == 1'd0))) begin
            i5_fu_82 <= add_ln99_fu_402_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i5_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln99_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i5_cast_reg_571[3 : 0] <= i5_cast_fu_408_p1[3 : 0];
        sub_ln101_reg_587[7 : 2] <= sub_ln101_fu_433_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i5_cast_reg_571_pp0_iter1_reg[3 : 0] <= i5_cast_reg_571[3 : 0];
        i5_cast_reg_571_pp0_iter2_reg[3 : 0] <= i5_cast_reg_571_pp0_iter1_reg[3 : 0];
        i5_cast_reg_571_pp0_iter3_reg[3 : 0] <= i5_cast_reg_571_pp0_iter2_reg[3 : 0];
        icmp_ln99_reg_567 <= icmp_ln99_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        reg_368 <= grp_fu_363_p_dout0;
        reg_378 <= grp_fu_367_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v50_reg_626 <= inp_sumRow_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v78_load_10_reg_722 <= v78_q1;
        v78_load_11_reg_727 <= v78_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v78_load_1_reg_637 <= v78_q0;
        v78_load_reg_632 <= v78_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v78_load_2_reg_652 <= v78_q1;
        v78_load_3_reg_657 <= v78_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v78_load_4_reg_672 <= v78_q1;
        v78_load_5_reg_677 <= v78_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        v78_load_6_reg_692 <= v78_q1;
        v78_load_7_reg_697 <= v78_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        v78_load_8_reg_712 <= v78_q1;
        v78_load_9_reg_717 <= v78_q0;
    end
end

always @ (*) begin
    if (((icmp_ln99_reg_567 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i5_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i5_1 = i5_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_360_p0 = v78_load_10_reg_722;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_360_p0 = v78_load_8_reg_712;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_360_p0 = v78_load_6_reg_692;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_360_p0 = v78_load_4_reg_672;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_360_p0 = v78_load_2_reg_652;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_360_p0 = v78_load_reg_632;
    end else begin
        grp_fu_360_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_364_p0 = v78_load_11_reg_727;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_364_p0 = v78_load_9_reg_717;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_364_p0 = v78_load_7_reg_697;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_364_p0 = v78_load_5_reg_677;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_364_p0 = v78_load_3_reg_657;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_364_p0 = v78_load_1_reg_637;
    end else begin
        grp_fu_364_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inp_sumRow_ce0 = 1'b1;
    end else begin
        inp_sumRow_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            v78_address0 = zext_ln101_12_fu_555_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            v78_address0 = zext_ln101_10_fu_535_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            v78_address0 = zext_ln101_8_fu_515_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            v78_address0 = zext_ln101_6_fu_495_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            v78_address0 = zext_ln101_4_fu_475_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v78_address0 = zext_ln101_2_fu_450_p1;
        end else begin
            v78_address0 = 'bx;
        end
    end else begin
        v78_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            v78_address1 = zext_ln101_11_fu_545_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            v78_address1 = zext_ln101_9_fu_525_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            v78_address1 = zext_ln101_7_fu_505_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            v78_address1 = zext_ln101_5_fu_485_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            v78_address1 = zext_ln101_3_fu_465_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v78_address1 = zext_ln101_1_fu_439_p1;
        end else begin
            v78_address1 = 'bx;
        end
    end else begin
        v78_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        v78_ce0 = 1'b1;
    end else begin
        v78_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        v78_ce1 = 1'b1;
    end else begin
        v78_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v79_0_ce0 = 1'b1;
    end else begin
        v79_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v79_0_we0 = 1'b1;
    end else begin
        v79_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        v79_10_ce0 = 1'b1;
    end else begin
        v79_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        v79_10_we0 = 1'b1;
    end else begin
        v79_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        v79_11_ce0 = 1'b1;
    end else begin
        v79_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        v79_11_we0 = 1'b1;
    end else begin
        v79_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v79_1_ce0 = 1'b1;
    end else begin
        v79_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v79_1_we0 = 1'b1;
    end else begin
        v79_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v79_2_ce0 = 1'b1;
    end else begin
        v79_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v79_2_we0 = 1'b1;
    end else begin
        v79_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v79_3_ce0 = 1'b1;
    end else begin
        v79_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        v79_3_we0 = 1'b1;
    end else begin
        v79_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v79_4_ce0 = 1'b1;
    end else begin
        v79_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v79_4_we0 = 1'b1;
    end else begin
        v79_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v79_5_ce0 = 1'b1;
    end else begin
        v79_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        v79_5_we0 = 1'b1;
    end else begin
        v79_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v79_6_ce0 = 1'b1;
    end else begin
        v79_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v79_6_we0 = 1'b1;
    end else begin
        v79_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v79_7_ce0 = 1'b1;
    end else begin
        v79_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        v79_7_we0 = 1'b1;
    end else begin
        v79_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        v79_8_ce0 = 1'b1;
    end else begin
        v79_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        v79_8_we0 = 1'b1;
    end else begin
        v79_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        v79_9_ce0 = 1'b1;
    end else begin
        v79_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        v79_9_we0 = 1'b1;
    end else begin
        v79_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln101_1_fu_490_p2 = (sub_ln101_reg_587 + 8'd5);

assign add_ln101_2_fu_500_p2 = (sub_ln101_reg_587 + 8'd6);

assign add_ln101_3_fu_510_p2 = (sub_ln101_reg_587 + 8'd7);

assign add_ln101_4_fu_520_p2 = (sub_ln101_reg_587 + 8'd8);

assign add_ln101_5_fu_530_p2 = (sub_ln101_reg_587 + 8'd9);

assign add_ln101_6_fu_540_p2 = (sub_ln101_reg_587 + 8'd10);

assign add_ln101_7_fu_550_p2 = (sub_ln101_reg_587 + 8'd11);

assign add_ln101_fu_480_p2 = (sub_ln101_reg_587 + 8'd4);

assign add_ln99_fu_402_p2 = (ap_sig_allocacmp_i5_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign grp_fu_363_p_ce = 1'b1;

assign grp_fu_363_p_din0 = grp_fu_360_p0;

assign grp_fu_363_p_din1 = v50_reg_626;

assign grp_fu_367_p_ce = 1'b1;

assign grp_fu_367_p_din0 = grp_fu_364_p0;

assign grp_fu_367_p_din1 = v50_reg_626;

assign i5_cast_fu_408_p1 = ap_sig_allocacmp_i5_1;

assign icmp_ln99_fu_396_p2 = ((ap_sig_allocacmp_i5_1 == 4'd12) ? 1'b1 : 1'b0);

assign inp_sumRow_address0 = i5_cast_fu_408_p1;

assign or_ln101_1_fu_460_p2 = (sub_ln101_reg_587 | 8'd2);

assign or_ln101_2_fu_470_p2 = (sub_ln101_reg_587 | 8'd3);

assign or_ln101_fu_444_p2 = (sub_ln101_fu_433_p2 | 8'd1);

assign sub_ln101_fu_433_p2 = (tmp_s_fu_413_p3 - zext_ln101_fu_429_p1);

assign tmp_19_fu_421_p3 = {{ap_sig_allocacmp_i5_1}, {2'd0}};

assign tmp_s_fu_413_p3 = {{ap_sig_allocacmp_i5_1}, {4'd0}};

assign v79_0_address0 = i5_cast_reg_571_pp0_iter2_reg;

assign v79_0_d0 = reg_368;

assign v79_10_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_10_d0 = reg_368;

assign v79_11_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_11_d0 = reg_378;

assign v79_1_address0 = i5_cast_reg_571_pp0_iter2_reg;

assign v79_1_d0 = reg_378;

assign v79_2_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_2_d0 = reg_368;

assign v79_3_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_3_d0 = reg_378;

assign v79_4_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_4_d0 = reg_368;

assign v79_5_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_5_d0 = reg_378;

assign v79_6_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_6_d0 = reg_368;

assign v79_7_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_7_d0 = reg_378;

assign v79_8_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_8_d0 = reg_368;

assign v79_9_address0 = i5_cast_reg_571_pp0_iter3_reg;

assign v79_9_d0 = reg_378;

assign zext_ln101_10_fu_535_p1 = add_ln101_5_fu_530_p2;

assign zext_ln101_11_fu_545_p1 = add_ln101_6_fu_540_p2;

assign zext_ln101_12_fu_555_p1 = add_ln101_7_fu_550_p2;

assign zext_ln101_1_fu_439_p1 = sub_ln101_fu_433_p2;

assign zext_ln101_2_fu_450_p1 = or_ln101_fu_444_p2;

assign zext_ln101_3_fu_465_p1 = or_ln101_1_fu_460_p2;

assign zext_ln101_4_fu_475_p1 = or_ln101_2_fu_470_p2;

assign zext_ln101_5_fu_485_p1 = add_ln101_fu_480_p2;

assign zext_ln101_6_fu_495_p1 = add_ln101_1_fu_490_p2;

assign zext_ln101_7_fu_505_p1 = add_ln101_2_fu_500_p2;

assign zext_ln101_8_fu_515_p1 = add_ln101_3_fu_510_p2;

assign zext_ln101_9_fu_525_p1 = add_ln101_4_fu_520_p2;

assign zext_ln101_fu_429_p1 = tmp_19_fu_421_p3;

always @ (posedge ap_clk) begin
    i5_cast_reg_571[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i5_cast_reg_571_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i5_cast_reg_571_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i5_cast_reg_571_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    sub_ln101_reg_587[1:0] <= 2'b00;
end

endmodule //Bert_layer_Self_attention_Pipeline_l_update_i5
