-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Res_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v103_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v103_ce0 : OUT STD_LOGIC;
    v103_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v104_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v104_ce0 : OUT STD_LOGIC;
    v104_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v105_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v105_ce0 : OUT STD_LOGIC;
    v105_we0 : OUT STD_LOGIC;
    v105_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Res_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i11_fu_113_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i11_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln208_fu_143_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln208_reg_184 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln206_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j11_fu_155_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j11_reg_192 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln208_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln208_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln207_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v108_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v109_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v110_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i11_0_reg_81 : STD_LOGIC_VECTOR (3 downto 0);
    signal j11_0_reg_92 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_119_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_131_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln208_fu_127_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln208_1_fu_139_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln208_2_fu_161_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln208_fu_165_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component Bert_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Bert_layer_fadd_3bkb_U39 : component Bert_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v108_reg_212,
        din1 => v109_reg_217,
        ce => ap_const_logic_1,
        dout => grp_fu_103_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i11_0_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i11_0_reg_81 <= i11_reg_179;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i11_0_reg_81 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j11_0_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j11_0_reg_92 <= j11_reg_192;
            elsif (((icmp_ln206_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j11_0_reg_92 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i11_reg_179 <= i11_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j11_reg_192 <= j11_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln208_reg_197 <= sext_ln208_fu_170_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln206_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln208_reg_184(14 downto 8) <= sub_ln208_fu_143_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v108_reg_212 <= v103_q0;
                v109_reg_217 <= v104_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v110_reg_222 <= grp_fu_103_p2;
            end if;
        end if;
    end process;
    sub_ln208_reg_184(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln206_fu_107_p2, ap_CS_fsm_state3, icmp_ln207_fu_149_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln206_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln207_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln208_fu_165_p2 <= std_logic_vector(unsigned(sub_ln208_reg_184) + unsigned(zext_ln208_2_fu_161_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln206_fu_107_p2)
    begin
        if ((((icmp_ln206_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln206_fu_107_p2)
    begin
        if (((icmp_ln206_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i11_fu_113_p2 <= std_logic_vector(unsigned(i11_0_reg_81) + unsigned(ap_const_lv4_1));
    icmp_ln206_fu_107_p2 <= "1" when (i11_0_reg_81 = ap_const_lv4_C) else "0";
    icmp_ln207_fu_149_p2 <= "1" when (j11_0_reg_92 = ap_const_lv10_300) else "0";
    j11_fu_155_p2 <= std_logic_vector(unsigned(j11_0_reg_92) + unsigned(ap_const_lv10_1));
        sext_ln208_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln208_fu_165_p2),64));

    sub_ln208_fu_143_p2 <= std_logic_vector(unsigned(zext_ln208_fu_127_p1) - unsigned(zext_ln208_1_fu_139_p1));
    tmp_25_fu_131_p3 <= (i11_0_reg_81 & ap_const_lv8_0);
    tmp_s_fu_119_p3 <= (i11_0_reg_81 & ap_const_lv10_0);
    v103_address0 <= sext_ln208_fu_170_p1(14 - 1 downto 0);

    v103_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v103_ce0 <= ap_const_logic_1;
        else 
            v103_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v104_address0 <= sext_ln208_fu_170_p1(14 - 1 downto 0);

    v104_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v104_ce0 <= ap_const_logic_1;
        else 
            v104_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v105_address0 <= sext_ln208_reg_197(14 - 1 downto 0);

    v105_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v105_ce0 <= ap_const_logic_1;
        else 
            v105_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v105_d0 <= v110_reg_222;

    v105_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v105_we0 <= ap_const_logic_1;
        else 
            v105_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln208_1_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_131_p3),15));
    zext_ln208_2_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j11_0_reg_92),15));
    zext_ln208_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_119_p3),15));
end behav;
