-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Linear_layer_qkv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v0_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v0_ce0 : OUT STD_LOGIC;
    v0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    v1_ce0 : OUT STD_LOGIC;
    v1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_ce0 : OUT STD_LOGIC;
    v2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v3_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v3_ce0 : OUT STD_LOGIC;
    v3_we0 : OUT STD_LOGIC;
    v3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Linear_layer_qkv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal v4_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v4_reg_500 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln24_fu_255_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln24_reg_505 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln22_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v5_fu_267_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln30_fu_323_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln30_reg_526 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln27_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_335_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln31_fu_369_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln31_reg_540 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln28_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v3_addr_1_reg_545 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_553 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln30_fu_405_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln30_reg_558 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln29_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v9_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v10_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v11_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_reg_591 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal sub_ln42_fu_460_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln42_reg_596 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln39_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_fu_472_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j1_reg_604 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal v3_addr_2_reg_609 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln40_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v16_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal v4_0_reg_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v5_0_reg_135 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_0_reg_168 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i1_0_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal j1_0_reg_190 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sext_ln24_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_26_fu_231_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_243_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln24_fu_239_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_1_fu_251_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_2_fu_273_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln24_fu_277_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_299_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_311_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_fu_307_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln30_1_fu_319_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_32_fu_345_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_33_fu_357_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln31_1_fu_353_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln31_2_fu_365_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln31_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln33_fu_375_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln30_3_fu_401_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln30_2_fu_397_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln31_fu_410_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_30_fu_436_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_fu_448_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln42_fu_444_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln42_1_fu_456_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln42_2_fu_483_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln42_fu_487_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component Bert_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Bert_layer_fadd_3bkb_U1 : component Bert_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_209,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    Bert_layer_fmul_3cud_U2 : component Bert_layer_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v9_reg_573,
        din1 => v10_reg_578,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_fu_287_p2 = ap_const_lv1_1))) then 
                i1_0_reg_179 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln40_fu_466_p2 = ap_const_lv1_1))) then 
                i1_0_reg_179 <= i1_reg_591;
            end if; 
        end if;
    end process;

    i_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_219_p2 = ap_const_lv1_1))) then 
                i_0_reg_146 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln28_fu_329_p2 = ap_const_lv1_1))) then 
                i_0_reg_146 <= i_reg_521;
            end if; 
        end if;
    end process;

    j1_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                j1_0_reg_190 <= j1_reg_604;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln39_fu_424_p2 = ap_const_lv1_0))) then 
                j1_0_reg_190 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_385_p2 = ap_const_lv1_1))) then 
                j_0_reg_157 <= j_reg_535;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_fu_287_p2 = ap_const_lv1_0))) then 
                j_0_reg_157 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                k_0_reg_168 <= k_reg_553;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln28_fu_329_p2 = ap_const_lv1_0))) then 
                k_0_reg_168 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    v4_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v4_0_reg_124 <= v4_reg_500;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v4_0_reg_124 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v5_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_219_p2 = ap_const_lv1_0))) then 
                v5_0_reg_135 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln23_fu_261_p2 = ap_const_lv1_0))) then 
                v5_0_reg_135 <= v5_fu_267_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_385_p2 = ap_const_lv1_0))) then
                add_ln30_reg_558 <= add_ln30_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i1_reg_591 <= i1_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_521 <= i_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                j1_reg_604 <= j1_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_reg_535 <= j_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_reg_553 <= k_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_209 <= v3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_214 <= grp_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_219_p2 = ap_const_lv1_0))) then
                    sub_ln24_reg_505(14 downto 8) <= sub_ln24_fu_255_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_fu_287_p2 = ap_const_lv1_0))) then
                    sub_ln30_reg_526(14 downto 8) <= sub_ln30_fu_323_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln28_fu_329_p2 = ap_const_lv1_0))) then
                    sub_ln31_reg_540(20 downto 8) <= sub_ln31_fu_369_p2(20 downto 8);
                v3_addr_1_reg_545 <= sext_ln33_fu_380_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln39_fu_424_p2 = ap_const_lv1_0))) then
                    sub_ln42_reg_596(14 downto 8) <= sub_ln42_fu_460_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v10_reg_578 <= v1_q0;
                v9_reg_573 <= v0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                v11_reg_583 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                v16_reg_619 <= v2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln40_fu_466_p2 = ap_const_lv1_0))) then
                v3_addr_2_reg_609 <= sext_ln42_fu_492_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v4_reg_500 <= v4_fu_225_p2;
            end if;
        end if;
    end process;
    sub_ln24_reg_505(7 downto 0) <= "00000000";
    sub_ln30_reg_526(7 downto 0) <= "00000000";
    sub_ln31_reg_540(7 downto 0) <= "00000000";
    sub_ln42_reg_596(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_219_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln27_fu_287_p2, ap_CS_fsm_state5, icmp_ln28_fu_329_p2, ap_CS_fsm_state6, icmp_ln29_fu_385_p2, ap_CS_fsm_state20, icmp_ln39_fu_424_p2, ap_CS_fsm_state21, icmp_ln40_fu_466_p2, icmp_ln23_fu_261_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln22_fu_219_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln23_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln27_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln28_fu_329_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln29_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln39_fu_424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln40_fu_466_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_fu_277_p2 <= std_logic_vector(unsigned(sub_ln24_reg_505) + unsigned(zext_ln24_2_fu_273_p1));
    add_ln30_fu_405_p2 <= std_logic_vector(unsigned(sub_ln30_reg_526) + unsigned(zext_ln30_3_fu_401_p1));
    add_ln31_fu_410_p2 <= std_logic_vector(unsigned(sub_ln31_reg_540) + unsigned(zext_ln30_2_fu_397_p1));
    add_ln33_fu_375_p2 <= std_logic_vector(unsigned(sub_ln30_reg_526) + unsigned(zext_ln31_fu_341_p1));
    add_ln42_fu_487_p2 <= std_logic_vector(unsigned(sub_ln42_reg_596) + unsigned(zext_ln42_2_fu_483_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20, icmp_ln39_fu_424_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln39_fu_424_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20, icmp_ln39_fu_424_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln39_fu_424_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_201_p1_assign_proc : process(v11_reg_583, v16_reg_619, ap_CS_fsm_state14, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_201_p1 <= v16_reg_619;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_201_p1 <= v11_reg_583;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i1_fu_430_p2 <= std_logic_vector(unsigned(i1_0_reg_179) + unsigned(ap_const_lv4_1));
    i_fu_293_p2 <= std_logic_vector(unsigned(i_0_reg_146) + unsigned(ap_const_lv4_1));
    icmp_ln22_fu_219_p2 <= "1" when (v4_0_reg_124 = ap_const_lv4_C) else "0";
    icmp_ln23_fu_261_p2 <= "1" when (v5_0_reg_135 = ap_const_lv10_300) else "0";
    icmp_ln27_fu_287_p2 <= "1" when (i_0_reg_146 = ap_const_lv4_C) else "0";
    icmp_ln28_fu_329_p2 <= "1" when (j_0_reg_157 = ap_const_lv10_300) else "0";
    icmp_ln29_fu_385_p2 <= "1" when (k_0_reg_168 = ap_const_lv10_300) else "0";
    icmp_ln39_fu_424_p2 <= "1" when (i1_0_reg_179 = ap_const_lv4_C) else "0";
    icmp_ln40_fu_466_p2 <= "1" when (j1_0_reg_190 = ap_const_lv10_300) else "0";
    j1_fu_472_p2 <= std_logic_vector(unsigned(j1_0_reg_190) + unsigned(ap_const_lv10_1));
    j_fu_335_p2 <= std_logic_vector(unsigned(j_0_reg_157) + unsigned(ap_const_lv10_1));
    k_fu_391_p2 <= std_logic_vector(unsigned(k_0_reg_168) + unsigned(ap_const_lv10_1));
        sext_ln24_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln24_fu_277_p2),64));

        sext_ln30_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_reg_558),64));

        sext_ln31_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_fu_410_p2),64));

        sext_ln33_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln33_fu_375_p2),64));

        sext_ln42_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln42_fu_487_p2),64));

    sub_ln24_fu_255_p2 <= std_logic_vector(unsigned(zext_ln24_fu_239_p1) - unsigned(zext_ln24_1_fu_251_p1));
    sub_ln30_fu_323_p2 <= std_logic_vector(unsigned(zext_ln30_fu_307_p1) - unsigned(zext_ln30_1_fu_319_p1));
    sub_ln31_fu_369_p2 <= std_logic_vector(unsigned(zext_ln31_1_fu_353_p1) - unsigned(zext_ln31_2_fu_365_p1));
    sub_ln42_fu_460_p2 <= std_logic_vector(unsigned(zext_ln42_fu_444_p1) - unsigned(zext_ln42_1_fu_456_p1));
    tmp_26_fu_231_p3 <= (v4_0_reg_124 & ap_const_lv10_0);
    tmp_27_fu_243_p3 <= (v4_0_reg_124 & ap_const_lv8_0);
    tmp_28_fu_299_p3 <= (i_0_reg_146 & ap_const_lv10_0);
    tmp_29_fu_311_p3 <= (i_0_reg_146 & ap_const_lv8_0);
    tmp_30_fu_436_p3 <= (i1_0_reg_179 & ap_const_lv10_0);
    tmp_31_fu_448_p3 <= (i1_0_reg_179 & ap_const_lv8_0);
    tmp_32_fu_345_p3 <= (j_0_reg_157 & ap_const_lv10_0);
    tmp_33_fu_357_p3 <= (j_0_reg_157 & ap_const_lv8_0);
    v0_address0 <= sext_ln30_fu_420_p1(14 - 1 downto 0);

    v0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v0_ce0 <= ap_const_logic_1;
        else 
            v0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_address0 <= sext_ln31_fu_415_p1(20 - 1 downto 0);

    v1_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            v1_ce0 <= ap_const_logic_1;
        else 
            v1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_address0 <= zext_ln41_fu_478_p1(10 - 1 downto 0);

    v2_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            v2_ce0 <= ap_const_logic_1;
        else 
            v2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v3_address0_assign_proc : process(ap_CS_fsm_state3, v3_addr_1_reg_545, ap_CS_fsm_state21, v3_addr_2_reg_609, ap_CS_fsm_state19, ap_CS_fsm_state28, sext_ln24_fu_282_p1, sext_ln42_fu_492_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            v3_address0 <= v3_addr_2_reg_609;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            v3_address0 <= sext_ln42_fu_492_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            v3_address0 <= v3_addr_1_reg_545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v3_address0 <= sext_ln24_fu_282_p1(14 - 1 downto 0);
        else 
            v3_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    v3_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state21, ap_CS_fsm_state19, ap_CS_fsm_state28, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            v3_ce0 <= ap_const_logic_1;
        else 
            v3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v3_d0_assign_proc : process(reg_214, ap_CS_fsm_state3, ap_CS_fsm_state19, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            v3_d0 <= reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v3_d0 <= ap_const_lv32_0;
        else 
            v3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v3_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln23_fu_261_p2, ap_CS_fsm_state19, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln23_fu_261_p2 = ap_const_lv1_0)))) then 
            v3_we0 <= ap_const_logic_1;
        else 
            v3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v4_fu_225_p2 <= std_logic_vector(unsigned(v4_0_reg_124) + unsigned(ap_const_lv4_1));
    v5_fu_267_p2 <= std_logic_vector(unsigned(v5_0_reg_135) + unsigned(ap_const_lv10_1));
    zext_ln24_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_243_p3),15));
    zext_ln24_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v5_0_reg_135),15));
    zext_ln24_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_231_p3),15));
    zext_ln30_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_311_p3),15));
    zext_ln30_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_168),21));
    zext_ln30_3_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_168),15));
    zext_ln30_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_299_p3),15));
    zext_ln31_1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_345_p3),21));
    zext_ln31_2_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_357_p3),21));
    zext_ln31_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_157),15));
    zext_ln41_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_190),64));
    zext_ln42_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_448_p3),15));
    zext_ln42_2_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_190),15));
    zext_ln42_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_436_p3),15));
end behav;
