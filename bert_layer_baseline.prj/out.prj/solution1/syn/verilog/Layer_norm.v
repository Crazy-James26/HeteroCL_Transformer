// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Layer_norm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v111_address0,
        v111_ce0,
        v111_q0,
        v112_address0,
        v112_ce0,
        v112_q0,
        v113_address0,
        v113_ce0,
        v113_q0,
        v114_address0,
        v114_ce0,
        v114_we0,
        v114_d0
);

parameter    ap_ST_fsm_state1 = 87'd1;
parameter    ap_ST_fsm_state2 = 87'd2;
parameter    ap_ST_fsm_state3 = 87'd4;
parameter    ap_ST_fsm_state4 = 87'd8;
parameter    ap_ST_fsm_state5 = 87'd16;
parameter    ap_ST_fsm_state6 = 87'd32;
parameter    ap_ST_fsm_state7 = 87'd64;
parameter    ap_ST_fsm_state8 = 87'd128;
parameter    ap_ST_fsm_state9 = 87'd256;
parameter    ap_ST_fsm_state10 = 87'd512;
parameter    ap_ST_fsm_state11 = 87'd1024;
parameter    ap_ST_fsm_state12 = 87'd2048;
parameter    ap_ST_fsm_state13 = 87'd4096;
parameter    ap_ST_fsm_state14 = 87'd8192;
parameter    ap_ST_fsm_state15 = 87'd16384;
parameter    ap_ST_fsm_state16 = 87'd32768;
parameter    ap_ST_fsm_state17 = 87'd65536;
parameter    ap_ST_fsm_state18 = 87'd131072;
parameter    ap_ST_fsm_state19 = 87'd262144;
parameter    ap_ST_fsm_state20 = 87'd524288;
parameter    ap_ST_fsm_state21 = 87'd1048576;
parameter    ap_ST_fsm_state22 = 87'd2097152;
parameter    ap_ST_fsm_state23 = 87'd4194304;
parameter    ap_ST_fsm_state24 = 87'd8388608;
parameter    ap_ST_fsm_state25 = 87'd16777216;
parameter    ap_ST_fsm_state26 = 87'd33554432;
parameter    ap_ST_fsm_state27 = 87'd67108864;
parameter    ap_ST_fsm_state28 = 87'd134217728;
parameter    ap_ST_fsm_state29 = 87'd268435456;
parameter    ap_ST_fsm_state30 = 87'd536870912;
parameter    ap_ST_fsm_state31 = 87'd1073741824;
parameter    ap_ST_fsm_state32 = 87'd2147483648;
parameter    ap_ST_fsm_state33 = 87'd4294967296;
parameter    ap_ST_fsm_state34 = 87'd8589934592;
parameter    ap_ST_fsm_state35 = 87'd17179869184;
parameter    ap_ST_fsm_state36 = 87'd34359738368;
parameter    ap_ST_fsm_state37 = 87'd68719476736;
parameter    ap_ST_fsm_state38 = 87'd137438953472;
parameter    ap_ST_fsm_state39 = 87'd274877906944;
parameter    ap_ST_fsm_state40 = 87'd549755813888;
parameter    ap_ST_fsm_state41 = 87'd1099511627776;
parameter    ap_ST_fsm_state42 = 87'd2199023255552;
parameter    ap_ST_fsm_state43 = 87'd4398046511104;
parameter    ap_ST_fsm_state44 = 87'd8796093022208;
parameter    ap_ST_fsm_state45 = 87'd17592186044416;
parameter    ap_ST_fsm_state46 = 87'd35184372088832;
parameter    ap_ST_fsm_state47 = 87'd70368744177664;
parameter    ap_ST_fsm_state48 = 87'd140737488355328;
parameter    ap_ST_fsm_state49 = 87'd281474976710656;
parameter    ap_ST_fsm_state50 = 87'd562949953421312;
parameter    ap_ST_fsm_state51 = 87'd1125899906842624;
parameter    ap_ST_fsm_state52 = 87'd2251799813685248;
parameter    ap_ST_fsm_state53 = 87'd4503599627370496;
parameter    ap_ST_fsm_state54 = 87'd9007199254740992;
parameter    ap_ST_fsm_state55 = 87'd18014398509481984;
parameter    ap_ST_fsm_state56 = 87'd36028797018963968;
parameter    ap_ST_fsm_state57 = 87'd72057594037927936;
parameter    ap_ST_fsm_state58 = 87'd144115188075855872;
parameter    ap_ST_fsm_state59 = 87'd288230376151711744;
parameter    ap_ST_fsm_state60 = 87'd576460752303423488;
parameter    ap_ST_fsm_state61 = 87'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 87'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 87'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 87'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 87'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 87'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 87'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 87'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 87'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 87'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 87'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 87'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 87'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 87'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 87'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 87'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 87'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 87'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 87'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 87'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 87'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 87'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 87'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 87'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 87'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 87'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 87'd77371252455336267181195264;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v111_address0;
output   v111_ce0;
input  [31:0] v111_q0;
output  [9:0] v112_address0;
output   v112_ce0;
input  [31:0] v112_q0;
output  [9:0] v113_address0;
output   v113_ce0;
input  [31:0] v113_q0;
output  [13:0] v114_address0;
output   v114_ce0;
output   v114_we0;
output  [31:0] v114_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] v111_address0;
reg v111_ce0;
reg v112_ce0;
reg v113_ce0;
reg v114_ce0;
reg v114_we0;

(* fsm_encoding = "none" *) reg   [86:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_323;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state56;
wire   [31:0] mean_q0;
reg   [31:0] reg_331;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] reg_338;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state65;
wire   [31:0] mean2_q0;
reg   [31:0] reg_344;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_289_p2;
reg   [31:0] reg_350;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state86;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] reg_359;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state81;
wire   [3:0] v116_fu_372_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] v118_fu_389_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i12_fu_406_p2;
reg   [3:0] i12_reg_590;
wire    ap_CS_fsm_state4;
wire   [14:0] sub_ln233_fu_442_p2;
reg   [14:0] sub_ln233_reg_595;
wire   [0:0] icmp_ln231_fu_400_p2;
reg   [3:0] mean_addr_1_reg_600;
reg   [3:0] mean2_addr_1_reg_605;
wire   [9:0] j12_fu_454_p2;
reg   [9:0] j12_reg_613;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln232_fu_448_p2;
wire   [3:0] i13_fu_480_p2;
reg   [3:0] i13_reg_626;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln245_fu_486_p1;
reg   [63:0] zext_ln245_reg_631;
wire   [0:0] icmp_ln244_fu_474_p2;
reg   [3:0] mean_addr_2_reg_637;
reg   [3:0] mean2_addr_2_reg_642;
wire    ap_CS_fsm_state21;
wire   [3:0] i14_fu_497_p2;
reg   [3:0] i14_reg_650;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln257_fu_491_p2;
wire   [31:0] var_q0;
wire   [63:0] grp_fu_309_p1;
reg   [63:0] tmp_reg_670;
wire    ap_CS_fsm_state46;
wire   [63:0] grp_fu_318_p2;
reg   [63:0] tmp_s_reg_675;
wire    ap_CS_fsm_state51;
wire   [14:0] sub_ln260_fu_533_p2;
reg   [14:0] sub_ln260_reg_680;
wire    ap_CS_fsm_state53;
wire   [31:0] grp_fu_306_p1;
reg   [31:0] v146_reg_685;
wire   [9:0] j13_fu_545_p2;
reg   [9:0] j13_reg_693;
wire    ap_CS_fsm_state54;
wire  signed [63:0] sext_ln260_fu_560_p1;
reg  signed [63:0] sext_ln260_reg_698;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
reg   [31:0] v140_reg_718;
reg   [31:0] v149_reg_723;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] v147_reg_728;
reg   [3:0] mean_address0;
reg    mean_ce0;
reg    mean_we0;
reg   [31:0] mean_d0;
reg   [3:0] mean2_address0;
reg    mean2_ce0;
reg    mean2_we0;
reg   [31:0] mean2_d0;
reg   [3:0] var_address0;
reg    var_ce0;
reg    var_we0;
reg   [3:0] v116_0_reg_210;
wire   [0:0] icmp_ln223_fu_366_p2;
reg   [3:0] v118_0_reg_221;
wire   [0:0] icmp_ln227_fu_383_p2;
reg   [3:0] i12_0_reg_232;
reg   [9:0] j12_0_reg_243;
wire    ap_CS_fsm_state16;
reg   [3:0] i13_0_reg_254;
wire    ap_CS_fsm_state43;
reg   [3:0] i14_0_reg_265;
wire   [0:0] icmp_ln258_fu_539_p2;
reg   [9:0] j13_0_reg_277;
wire    ap_CS_fsm_state87;
wire   [63:0] zext_ln224_fu_378_p1;
wire   [63:0] zext_ln228_fu_395_p1;
wire   [63:0] zext_ln233_fu_412_p1;
wire  signed [63:0] sext_ln233_fu_469_p1;
wire   [63:0] zext_ln260_fu_503_p1;
wire   [63:0] zext_ln259_fu_565_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_289_p0;
reg   [31:0] grp_fu_289_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state82;
reg   [31:0] grp_fu_293_p0;
reg   [31:0] grp_fu_293_p1;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state62;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state47;
wire   [13:0] tmp_60_fu_418_p3;
wire   [11:0] tmp_61_fu_430_p3;
wire   [14:0] zext_ln233_1_fu_426_p1;
wire   [14:0] zext_ln233_2_fu_438_p1;
wire   [14:0] zext_ln233_3_fu_460_p1;
wire   [14:0] add_ln233_fu_464_p2;
wire   [13:0] tmp_62_fu_509_p3;
wire   [11:0] tmp_63_fu_521_p3;
wire   [14:0] zext_ln260_1_fu_517_p1;
wire   [14:0] zext_ln260_2_fu_529_p1;
wire   [14:0] zext_ln260_3_fu_551_p1;
wire   [14:0] add_ln260_fu_555_p2;
reg   [1:0] grp_fu_289_opcode;
reg   [86:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 87'd1;
end

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mean_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_address0),
    .ce0(mean_ce0),
    .we0(mean_we0),
    .d0(mean_d0),
    .q0(mean_q0)
);

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mean2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean2_address0),
    .ce0(mean2_ce0),
    .we0(mean2_we0),
    .d0(mean2_d0),
    .q0(mean2_q0)
);

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
var_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(var_address0),
    .ce0(var_ce0),
    .we0(var_we0),
    .d0(reg_350),
    .q0(var_q0)
);

Bert_layer_faddfsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_faddfsg8j_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_289_p0),
    .din1(grp_fu_289_p1),
    .opcode(grp_fu_289_opcode),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

Bert_layer_fdiv_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3eOg_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

Bert_layer_fptrunhbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Bert_layer_fptrunhbi_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_675),
    .ce(1'b1),
    .dout(grp_fu_306_p1)
);

Bert_layer_fpext_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Bert_layer_fpext_ibs_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(var_q0),
    .ce(1'b1),
    .dout(grp_fu_309_p1)
);

Bert_layer_fsqrt_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fsqrt_jbC_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(v146_reg_685),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

Bert_layer_dadd_6kbM #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Bert_layer_dadd_6kbM_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_670),
    .din1(64'd4532020583610935537),
    .ce(1'b1),
    .dout(grp_fu_318_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln227_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i12_0_reg_232 <= 4'd0;
    end else if (((icmp_ln232_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i12_0_reg_232 <= i12_reg_590;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i13_0_reg_254 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i13_0_reg_254 <= i13_reg_626;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i14_0_reg_265 <= 4'd0;
    end else if (((icmp_ln258_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        i14_0_reg_265 <= i14_reg_650;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j12_0_reg_243 <= j12_reg_613;
    end else if (((icmp_ln231_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j12_0_reg_243 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        j13_0_reg_277 <= j13_reg_693;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        j13_0_reg_277 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln223_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v116_0_reg_210 <= v116_fu_372_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v116_0_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln223_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v118_0_reg_221 <= 4'd0;
    end else if (((icmp_ln227_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v118_0_reg_221 <= v118_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i12_reg_590 <= i12_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i13_reg_626 <= i13_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i14_reg_650 <= i14_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j12_reg_613 <= j12_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j13_reg_693 <= j13_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln231_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mean2_addr_1_reg_605 <= zext_ln233_fu_412_p1;
        mean_addr_1_reg_600 <= zext_ln233_fu_412_p1;
        sub_ln233_reg_595[14 : 8] <= sub_ln233_fu_442_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        mean2_addr_2_reg_642 <= zext_ln245_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        mean_addr_2_reg_637 <= zext_ln245_fu_486_p1;
        zext_ln245_reg_631[3 : 0] <= zext_ln245_fu_486_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_323 <= v111_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_331 <= mean_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_338 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_344 <= mean2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_350 <= grp_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_359 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        sext_ln260_reg_698 <= sext_ln260_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        sub_ln260_reg_680[14 : 8] <= sub_ln260_fu_533_p2[14 : 8];
        v146_reg_685 <= grp_fu_306_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_reg_670 <= grp_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_s_reg_675 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        v140_reg_718 <= v112_q0;
        v149_reg_723 <= v113_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        v147_reg_728 <= grp_fu_313_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln257_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln257_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_289_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_289_opcode = 2'd0;
    end else begin
        grp_fu_289_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_289_p0 = reg_323;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_289_p0 = reg_359;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_289_p0 = reg_344;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_289_p0 = reg_331;
    end else begin
        grp_fu_289_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_289_p1 = v149_reg_723;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_289_p1 = reg_331;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_289_p1 = reg_338;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_289_p1 = reg_323;
    end else begin
        grp_fu_289_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_293_p0 = v140_reg_718;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_293_p0 = reg_359;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_293_p0 = reg_323;
    end else begin
        grp_fu_293_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_293_p1 = reg_350;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_293_p1 = reg_359;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_293_p1 = reg_323;
    end else begin
        grp_fu_293_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_297_p0 = reg_338;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_297_p0 = mean2_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_297_p0 = mean_q0;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_297_p1 = v147_reg_728;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_297_p1 = 32'd1145044992;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mean2_address0 = mean2_addr_2_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        mean2_address0 = zext_ln245_reg_631;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        mean2_address0 = mean2_addr_1_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mean2_address0 = zext_ln228_fu_395_p1;
    end else begin
        mean2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37))) begin
        mean2_ce0 = 1'b1;
    end else begin
        mean2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mean2_d0 = grp_fu_297_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mean2_d0 = reg_350;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mean2_d0 = 32'd0;
    end else begin
        mean2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state37) | ((icmp_ln227_fu_383_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        mean2_we0 = 1'b1;
    end else begin
        mean2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        mean_address0 = zext_ln260_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        mean_address0 = mean_addr_2_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        mean_address0 = zext_ln245_fu_486_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        mean_address0 = mean_addr_1_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mean_address0 = zext_ln224_fu_378_p1;
    end else begin
        mean_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33))) begin
        mean_ce0 = 1'b1;
    end else begin
        mean_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        mean_d0 = grp_fu_297_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mean_d0 = reg_350;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mean_d0 = 32'd0;
    end else begin
        mean_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33) | ((icmp_ln223_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        mean_we0 = 1'b1;
    end else begin
        mean_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        v111_address0 = sext_ln260_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v111_address0 = sext_ln233_fu_469_p1;
    end else begin
        v111_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state5))) begin
        v111_ce0 = 1'b1;
    end else begin
        v111_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        v112_ce0 = 1'b1;
    end else begin
        v112_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        v113_ce0 = 1'b1;
    end else begin
        v113_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        v114_ce0 = 1'b1;
    end else begin
        v114_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        v114_we0 = 1'b1;
    end else begin
        v114_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        var_address0 = zext_ln260_fu_503_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        var_address0 = zext_ln245_reg_631;
    end else begin
        var_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44))) begin
        var_ce0 = 1'b1;
    end else begin
        var_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        var_we0 = 1'b1;
    end else begin
        var_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln223_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln227_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln231_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln232_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln244_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln257_fu_491_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln258_fu_539_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln233_fu_464_p2 = (sub_ln233_reg_595 + zext_ln233_3_fu_460_p1);

assign add_ln260_fu_555_p2 = (sub_ln260_reg_680 + zext_ln260_3_fu_551_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i12_fu_406_p2 = (i12_0_reg_232 + 4'd1);

assign i13_fu_480_p2 = (i13_0_reg_254 + 4'd1);

assign i14_fu_497_p2 = (i14_0_reg_265 + 4'd1);

assign icmp_ln223_fu_366_p2 = ((v116_0_reg_210 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_383_p2 = ((v118_0_reg_221 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_400_p2 = ((i12_0_reg_232 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_448_p2 = ((j12_0_reg_243 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_474_p2 = ((i13_0_reg_254 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln257_fu_491_p2 = ((i14_0_reg_265 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_539_p2 = ((j13_0_reg_277 == 10'd768) ? 1'b1 : 1'b0);

assign j12_fu_454_p2 = (j12_0_reg_243 + 10'd1);

assign j13_fu_545_p2 = (j13_0_reg_277 + 10'd1);

assign sext_ln233_fu_469_p1 = $signed(add_ln233_fu_464_p2);

assign sext_ln260_fu_560_p1 = $signed(add_ln260_fu_555_p2);

assign sub_ln233_fu_442_p2 = (zext_ln233_1_fu_426_p1 - zext_ln233_2_fu_438_p1);

assign sub_ln260_fu_533_p2 = (zext_ln260_1_fu_517_p1 - zext_ln260_2_fu_529_p1);

assign tmp_60_fu_418_p3 = {{i12_0_reg_232}, {10'd0}};

assign tmp_61_fu_430_p3 = {{i12_0_reg_232}, {8'd0}};

assign tmp_62_fu_509_p3 = {{i14_0_reg_265}, {10'd0}};

assign tmp_63_fu_521_p3 = {{i14_0_reg_265}, {8'd0}};

assign v112_address0 = zext_ln259_fu_565_p1;

assign v113_address0 = zext_ln259_fu_565_p1;

assign v114_address0 = sext_ln260_reg_698;

assign v114_d0 = reg_350;

assign v116_fu_372_p2 = (v116_0_reg_210 + 4'd1);

assign v118_fu_389_p2 = (v118_0_reg_221 + 4'd1);

assign zext_ln224_fu_378_p1 = v116_0_reg_210;

assign zext_ln228_fu_395_p1 = v118_0_reg_221;

assign zext_ln233_1_fu_426_p1 = tmp_60_fu_418_p3;

assign zext_ln233_2_fu_438_p1 = tmp_61_fu_430_p3;

assign zext_ln233_3_fu_460_p1 = j12_0_reg_243;

assign zext_ln233_fu_412_p1 = i12_0_reg_232;

assign zext_ln245_fu_486_p1 = i13_0_reg_254;

assign zext_ln259_fu_565_p1 = j13_0_reg_277;

assign zext_ln260_1_fu_517_p1 = tmp_62_fu_509_p3;

assign zext_ln260_2_fu_529_p1 = tmp_63_fu_521_p3;

assign zext_ln260_3_fu_551_p1 = j13_0_reg_277;

assign zext_ln260_fu_503_p1 = i14_0_reg_265;

always @ (posedge ap_clk) begin
    sub_ln233_reg_595[7:0] <= 8'b00000000;
    zext_ln245_reg_631[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    sub_ln260_reg_680[7:0] <= 8'b00000000;
end

endmodule //Layer_norm
