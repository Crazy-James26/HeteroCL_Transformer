// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v125_address0,
        v125_ce0,
        v125_q0,
        v125_1_address0,
        v125_1_ce0,
        v125_1_q0,
        v125_2_address0,
        v125_2_ce0,
        v125_2_q0,
        v125_3_address0,
        v125_3_ce0,
        v125_3_q0,
        tmp_45,
        v113_0_address0,
        v113_0_ce0,
        v113_0_we0,
        v113_0_d0,
        v113_1_address0,
        v113_1_ce0,
        v113_1_we0,
        v113_1_d0,
        v113_2_address0,
        v113_2_ce0,
        v113_2_we0,
        v113_2_d0,
        v113_3_address0,
        v113_3_ce0,
        v113_3_we0,
        v113_3_d0,
        v113_4_address0,
        v113_4_ce0,
        v113_4_we0,
        v113_4_d0,
        v113_5_address0,
        v113_5_ce0,
        v113_5_we0,
        v113_5_d0,
        v113_6_address0,
        v113_6_ce0,
        v113_6_we0,
        v113_6_d0,
        v113_7_address0,
        v113_7_ce0,
        v113_7_we0,
        v113_7_d0,
        v113_8_address0,
        v113_8_ce0,
        v113_8_we0,
        v113_8_d0,
        v113_9_address0,
        v113_9_ce0,
        v113_9_we0,
        v113_9_d0,
        v113_10_address0,
        v113_10_ce0,
        v113_10_we0,
        v113_10_d0,
        v113_11_address0,
        v113_11_ce0,
        v113_11_we0,
        v113_11_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v125_address0;
output   v125_ce0;
input  [7:0] v125_q0;
output  [7:0] v125_1_address0;
output   v125_1_ce0;
input  [7:0] v125_1_q0;
output  [7:0] v125_2_address0;
output   v125_2_ce0;
input  [7:0] v125_2_q0;
output  [7:0] v125_3_address0;
output   v125_3_ce0;
input  [7:0] v125_3_q0;
input  [9:0] tmp_45;
output  [9:0] v113_0_address0;
output   v113_0_ce0;
output   v113_0_we0;
output  [7:0] v113_0_d0;
output  [9:0] v113_1_address0;
output   v113_1_ce0;
output   v113_1_we0;
output  [7:0] v113_1_d0;
output  [9:0] v113_2_address0;
output   v113_2_ce0;
output   v113_2_we0;
output  [7:0] v113_2_d0;
output  [9:0] v113_3_address0;
output   v113_3_ce0;
output   v113_3_we0;
output  [7:0] v113_3_d0;
output  [9:0] v113_4_address0;
output   v113_4_ce0;
output   v113_4_we0;
output  [7:0] v113_4_d0;
output  [9:0] v113_5_address0;
output   v113_5_ce0;
output   v113_5_we0;
output  [7:0] v113_5_d0;
output  [9:0] v113_6_address0;
output   v113_6_ce0;
output   v113_6_we0;
output  [7:0] v113_6_d0;
output  [9:0] v113_7_address0;
output   v113_7_ce0;
output   v113_7_we0;
output  [7:0] v113_7_d0;
output  [9:0] v113_8_address0;
output   v113_8_ce0;
output   v113_8_we0;
output  [7:0] v113_8_d0;
output  [9:0] v113_9_address0;
output   v113_9_ce0;
output   v113_9_we0;
output  [7:0] v113_9_d0;
output  [9:0] v113_10_address0;
output   v113_10_ce0;
output   v113_10_we0;
output  [7:0] v113_10_d0;
output  [9:0] v113_11_address0;
output   v113_11_ce0;
output   v113_11_we0;
output  [7:0] v113_11_d0;

reg ap_idle;
reg v125_ce0;
reg v125_1_ce0;
reg v125_2_ce0;
reg v125_3_ce0;
reg v113_0_ce0;
reg v113_0_we0;
reg v113_1_ce0;
reg v113_1_we0;
reg v113_2_ce0;
reg v113_2_we0;
reg v113_3_ce0;
reg v113_3_we0;
reg v113_4_ce0;
reg v113_4_we0;
reg v113_5_ce0;
reg v113_5_we0;
reg v113_6_ce0;
reg v113_6_we0;
reg v113_7_ce0;
reg v113_7_we0;
reg v113_8_ce0;
reg v113_8_we0;
reg v113_9_ce0;
reg v113_9_we0;
reg v113_10_ce0;
reg v113_10_we0;
reg v113_11_ce0;
reg v113_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln261_fu_346_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln261_fu_376_p3;
reg   [6:0] select_ln261_reg_518;
reg   [6:0] select_ln261_reg_518_pp0_iter1_reg;
reg   [6:0] select_ln261_reg_518_pp0_iter2_reg;
wire   [3:0] select_ln261_1_fu_384_p3;
reg   [3:0] select_ln261_1_reg_524;
reg   [3:0] select_ln261_1_reg_524_pp0_iter1_reg;
reg   [3:0] select_ln261_1_reg_524_pp0_iter2_reg;
wire   [1:0] trunc_ln261_fu_392_p1;
reg   [1:0] trunc_ln261_reg_528;
reg   [1:0] trunc_ln261_reg_528_pp0_iter1_reg;
reg   [1:0] p_cast179_mid2_v_reg_533;
wire   [7:0] v128_fu_451_p6;
reg   [7:0] v128_reg_558;
wire   [63:0] zext_ln264_1_fu_443_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln265_fu_472_p1;
reg   [6:0] j_m_fu_102;
wire   [6:0] add_ln262_fu_406_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_m_load;
reg   [3:0] i_m_fu_106;
reg   [3:0] ap_sig_allocacmp_i_m_load;
reg   [9:0] indvar_flatten387_fu_110;
wire   [9:0] add_ln261_1_fu_352_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten387_load;
wire   [0:0] icmp_ln262_fu_370_p2;
wire   [3:0] add_ln261_fu_364_p2;
wire   [7:0] tmp_s_fu_427_p3;
wire   [7:0] zext_ln264_fu_434_p1;
wire   [7:0] add_ln264_fu_437_p2;
wire   [9:0] zext_ln262_fu_464_p1;
wire   [9:0] add_ln265_fu_467_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U441(
    .din0(v125_q0),
    .din1(v125_1_q0),
    .din2(v125_2_q0),
    .din3(v125_3_q0),
    .din4(trunc_ln261_reg_528_pp0_iter1_reg),
    .dout(v128_fu_451_p6)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln261_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_m_fu_106 <= select_ln261_1_fu_384_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_m_fu_106 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln261_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten387_fu_110 <= add_ln261_1_fu_352_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten387_fu_110 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln261_fu_346_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_m_fu_102 <= add_ln262_fu_406_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_m_fu_102 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln261_1_reg_524_pp0_iter1_reg <= select_ln261_1_reg_524;
        select_ln261_reg_518_pp0_iter1_reg <= select_ln261_reg_518;
        trunc_ln261_reg_528_pp0_iter1_reg <= trunc_ln261_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln261_fu_346_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_cast179_mid2_v_reg_533 <= {{select_ln261_1_fu_384_p3[3:2]}};
        select_ln261_1_reg_524 <= select_ln261_1_fu_384_p3;
        select_ln261_reg_518 <= select_ln261_fu_376_p3;
        trunc_ln261_reg_528 <= trunc_ln261_fu_392_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        select_ln261_1_reg_524_pp0_iter2_reg <= select_ln261_1_reg_524_pp0_iter1_reg;
        select_ln261_reg_518_pp0_iter2_reg <= select_ln261_reg_518_pp0_iter1_reg;
        v128_reg_558 <= v128_fu_451_p6;
    end
end

always @ (*) begin
    if (((icmp_ln261_fu_346_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_m_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_m_load = i_m_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten387_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten387_load = indvar_flatten387_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_m_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_m_load = j_m_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_0_ce0 = 1'b1;
    end else begin
        v113_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd0))) begin
        v113_0_we0 = 1'b1;
    end else begin
        v113_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_10_ce0 = 1'b1;
    end else begin
        v113_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd10))) begin
        v113_10_we0 = 1'b1;
    end else begin
        v113_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_11_ce0 = 1'b1;
    end else begin
        v113_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & ((select_ln261_1_reg_524_pp0_iter2_reg == 4'd11) | ((select_ln261_1_reg_524_pp0_iter2_reg == 4'd12) | ((select_ln261_1_reg_524_pp0_iter2_reg == 4'd13) | ((select_ln261_1_reg_524_pp0_iter2_reg == 4'd14) | (select_ln261_1_reg_524_pp0_iter2_reg == 4'd15))))))) begin
        v113_11_we0 = 1'b1;
    end else begin
        v113_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_1_ce0 = 1'b1;
    end else begin
        v113_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd1))) begin
        v113_1_we0 = 1'b1;
    end else begin
        v113_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_2_ce0 = 1'b1;
    end else begin
        v113_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd2))) begin
        v113_2_we0 = 1'b1;
    end else begin
        v113_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_3_ce0 = 1'b1;
    end else begin
        v113_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd3))) begin
        v113_3_we0 = 1'b1;
    end else begin
        v113_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_4_ce0 = 1'b1;
    end else begin
        v113_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd4))) begin
        v113_4_we0 = 1'b1;
    end else begin
        v113_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_5_ce0 = 1'b1;
    end else begin
        v113_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd5))) begin
        v113_5_we0 = 1'b1;
    end else begin
        v113_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_6_ce0 = 1'b1;
    end else begin
        v113_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd6))) begin
        v113_6_we0 = 1'b1;
    end else begin
        v113_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_7_ce0 = 1'b1;
    end else begin
        v113_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd7))) begin
        v113_7_we0 = 1'b1;
    end else begin
        v113_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_8_ce0 = 1'b1;
    end else begin
        v113_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd8))) begin
        v113_8_we0 = 1'b1;
    end else begin
        v113_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v113_9_ce0 = 1'b1;
    end else begin
        v113_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (select_ln261_1_reg_524_pp0_iter2_reg == 4'd9))) begin
        v113_9_we0 = 1'b1;
    end else begin
        v113_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v125_1_ce0 = 1'b1;
    end else begin
        v125_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v125_2_ce0 = 1'b1;
    end else begin
        v125_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v125_3_ce0 = 1'b1;
    end else begin
        v125_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v125_ce0 = 1'b1;
    end else begin
        v125_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln261_1_fu_352_p2 = (ap_sig_allocacmp_indvar_flatten387_load + 10'd1);

assign add_ln261_fu_364_p2 = (ap_sig_allocacmp_i_m_load + 4'd1);

assign add_ln262_fu_406_p2 = (select_ln261_fu_376_p3 + 7'd1);

assign add_ln264_fu_437_p2 = (tmp_s_fu_427_p3 + zext_ln264_fu_434_p1);

assign add_ln265_fu_467_p2 = (zext_ln262_fu_464_p1 + tmp_45);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln261_fu_346_p2 = ((ap_sig_allocacmp_indvar_flatten387_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln262_fu_370_p2 = ((ap_sig_allocacmp_j_m_load == 7'd64) ? 1'b1 : 1'b0);

assign select_ln261_1_fu_384_p3 = ((icmp_ln262_fu_370_p2[0:0] == 1'b1) ? add_ln261_fu_364_p2 : ap_sig_allocacmp_i_m_load);

assign select_ln261_fu_376_p3 = ((icmp_ln262_fu_370_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_m_load);

assign tmp_s_fu_427_p3 = {{p_cast179_mid2_v_reg_533}, {6'd0}};

assign trunc_ln261_fu_392_p1 = select_ln261_1_fu_384_p3[1:0];

assign v113_0_address0 = zext_ln265_fu_472_p1;

assign v113_0_d0 = v128_reg_558;

assign v113_10_address0 = zext_ln265_fu_472_p1;

assign v113_10_d0 = v128_reg_558;

assign v113_11_address0 = zext_ln265_fu_472_p1;

assign v113_11_d0 = v128_reg_558;

assign v113_1_address0 = zext_ln265_fu_472_p1;

assign v113_1_d0 = v128_reg_558;

assign v113_2_address0 = zext_ln265_fu_472_p1;

assign v113_2_d0 = v128_reg_558;

assign v113_3_address0 = zext_ln265_fu_472_p1;

assign v113_3_d0 = v128_reg_558;

assign v113_4_address0 = zext_ln265_fu_472_p1;

assign v113_4_d0 = v128_reg_558;

assign v113_5_address0 = zext_ln265_fu_472_p1;

assign v113_5_d0 = v128_reg_558;

assign v113_6_address0 = zext_ln265_fu_472_p1;

assign v113_6_d0 = v128_reg_558;

assign v113_7_address0 = zext_ln265_fu_472_p1;

assign v113_7_d0 = v128_reg_558;

assign v113_8_address0 = zext_ln265_fu_472_p1;

assign v113_8_d0 = v128_reg_558;

assign v113_9_address0 = zext_ln265_fu_472_p1;

assign v113_9_d0 = v128_reg_558;

assign v125_1_address0 = zext_ln264_1_fu_443_p1;

assign v125_2_address0 = zext_ln264_1_fu_443_p1;

assign v125_3_address0 = zext_ln264_1_fu_443_p1;

assign v125_address0 = zext_ln264_1_fu_443_p1;

assign zext_ln262_fu_464_p1 = select_ln261_reg_518_pp0_iter2_reg;

assign zext_ln264_1_fu_443_p1 = add_ln264_fu_437_p2;

assign zext_ln264_fu_434_p1 = select_ln261_reg_518;

assign zext_ln265_fu_472_p1 = add_ln265_fu_467_p2;

endmodule //Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m
