// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_k3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp,
        sub_ln299,
        v330_0_address0,
        v330_0_ce0,
        v330_0_q0,
        v330_1_address0,
        v330_1_ce0,
        v330_1_q0,
        v330_2_address0,
        v330_2_ce0,
        v330_2_q0,
        v330_3_address0,
        v330_3_ce0,
        v330_3_q0,
        v330_4_address0,
        v330_4_ce0,
        v330_4_q0,
        v330_5_address0,
        v330_5_ce0,
        v330_5_q0,
        v330_6_address0,
        v330_6_ce0,
        v330_6_q0,
        v330_7_address0,
        v330_7_ce0,
        v330_7_q0,
        v330_8_address0,
        v330_8_ce0,
        v330_8_q0,
        v330_9_address0,
        v330_9_ce0,
        v330_9_q0,
        v330_10_address0,
        v330_10_ce0,
        v330_10_q0,
        v330_11_address0,
        v330_11_ce0,
        v330_11_q0,
        v357_0_address0,
        v357_0_ce0,
        v357_0_q0,
        v357_1_address0,
        v357_1_ce0,
        v357_1_q0,
        v357_2_address0,
        v357_2_ce0,
        v357_2_q0,
        v357_3_address0,
        v357_3_ce0,
        v357_3_q0,
        v357_4_address0,
        v357_4_ce0,
        v357_4_q0,
        v357_5_address0,
        v357_5_ce0,
        v357_5_q0,
        v357_6_address0,
        v357_6_ce0,
        v357_6_q0,
        v357_7_address0,
        v357_7_ce0,
        v357_7_q0,
        v357_8_address0,
        v357_8_ce0,
        v357_8_q0,
        v357_9_address0,
        v357_9_ce0,
        v357_9_q0,
        v357_10_address0,
        v357_10_ce0,
        v357_10_q0,
        v357_11_address0,
        v357_11_ce0,
        v357_11_q0,
        select_ln295_1,
        empty,
        v147_V_out,
        v147_V_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [21:0] tmp;
input  [15:0] sub_ln299;
output  [15:0] v330_0_address0;
output   v330_0_ce0;
input  [3:0] v330_0_q0;
output  [15:0] v330_1_address0;
output   v330_1_ce0;
input  [3:0] v330_1_q0;
output  [15:0] v330_2_address0;
output   v330_2_ce0;
input  [3:0] v330_2_q0;
output  [15:0] v330_3_address0;
output   v330_3_ce0;
input  [3:0] v330_3_q0;
output  [15:0] v330_4_address0;
output   v330_4_ce0;
input  [3:0] v330_4_q0;
output  [15:0] v330_5_address0;
output   v330_5_ce0;
input  [3:0] v330_5_q0;
output  [15:0] v330_6_address0;
output   v330_6_ce0;
input  [3:0] v330_6_q0;
output  [15:0] v330_7_address0;
output   v330_7_ce0;
input  [3:0] v330_7_q0;
output  [15:0] v330_8_address0;
output   v330_8_ce0;
input  [3:0] v330_8_q0;
output  [15:0] v330_9_address0;
output   v330_9_ce0;
input  [3:0] v330_9_q0;
output  [15:0] v330_10_address0;
output   v330_10_ce0;
input  [3:0] v330_10_q0;
output  [15:0] v330_11_address0;
output   v330_11_ce0;
input  [3:0] v330_11_q0;
output  [9:0] v357_0_address0;
output   v357_0_ce0;
input  [7:0] v357_0_q0;
output  [9:0] v357_1_address0;
output   v357_1_ce0;
input  [7:0] v357_1_q0;
output  [9:0] v357_2_address0;
output   v357_2_ce0;
input  [7:0] v357_2_q0;
output  [9:0] v357_3_address0;
output   v357_3_ce0;
input  [7:0] v357_3_q0;
output  [9:0] v357_4_address0;
output   v357_4_ce0;
input  [7:0] v357_4_q0;
output  [9:0] v357_5_address0;
output   v357_5_ce0;
input  [7:0] v357_5_q0;
output  [9:0] v357_6_address0;
output   v357_6_ce0;
input  [7:0] v357_6_q0;
output  [9:0] v357_7_address0;
output   v357_7_ce0;
input  [7:0] v357_7_q0;
output  [9:0] v357_8_address0;
output   v357_8_ce0;
input  [7:0] v357_8_q0;
output  [9:0] v357_9_address0;
output   v357_9_ce0;
input  [7:0] v357_9_q0;
output  [9:0] v357_10_address0;
output   v357_10_ce0;
input  [7:0] v357_10_q0;
output  [9:0] v357_11_address0;
output   v357_11_ce0;
input  [7:0] v357_11_q0;
input  [3:0] select_ln295_1;
input  [3:0] empty;
output  [21:0] v147_V_out;
output   v147_V_out_ap_vld;

reg ap_idle;
reg v330_0_ce0;
reg v330_1_ce0;
reg v330_2_ce0;
reg v330_3_ce0;
reg v330_4_ce0;
reg v330_5_ce0;
reg v330_6_ce0;
reg v330_7_ce0;
reg v330_8_ce0;
reg v330_9_ce0;
reg v330_10_ce0;
reg v330_11_ce0;
reg v357_0_ce0;
reg v357_1_ce0;
reg v357_2_ce0;
reg v357_3_ce0;
reg v357_4_ce0;
reg v357_5_ce0;
reg v357_6_ce0;
reg v357_7_ce0;
reg v357_8_ce0;
reg v357_9_ce0;
reg v357_10_ce0;
reg v357_11_ce0;
reg v147_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln297_fu_466_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln297_reg_636;
reg   [0:0] icmp_ln297_reg_636_pp0_iter1_reg;
reg   [0:0] icmp_ln297_reg_636_pp0_iter2_reg;
wire   [63:0] zext_ln299_1_fu_504_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] k3_cast_fu_478_p1;
reg   [21:0] v147_V_fu_102;
wire  signed [21:0] grp_fu_602_p3;
reg  signed [21:0] ap_sig_allocacmp_v147_V_load;
wire    ap_loop_init;
reg   [9:0] k3_fu_106;
wire   [9:0] add_ln297_fu_472_p2;
reg   [9:0] ap_sig_allocacmp_k3_1;
wire    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln299_fu_494_p1;
wire   [15:0] add_ln299_fu_498_p2;
wire  signed [7:0] v142_fu_525_p14;
wire  signed [3:0] v143_V_fu_554_p14;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
mux_124_8_1_1_U536(
    .din0(v357_0_q0),
    .din1(v357_1_q0),
    .din2(v357_2_q0),
    .din3(v357_3_q0),
    .din4(v357_4_q0),
    .din5(v357_5_q0),
    .din6(v357_6_q0),
    .din7(v357_7_q0),
    .din8(v357_8_q0),
    .din9(v357_9_q0),
    .din10(v357_10_q0),
    .din11(v357_11_q0),
    .din12(select_ln295_1),
    .dout(v142_fu_525_p14)
);

Bert_layer_mux_124_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 4 ),
    .din5_WIDTH( 4 ),
    .din6_WIDTH( 4 ),
    .din7_WIDTH( 4 ),
    .din8_WIDTH( 4 ),
    .din9_WIDTH( 4 ),
    .din10_WIDTH( 4 ),
    .din11_WIDTH( 4 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
mux_124_4_1_1_U537(
    .din0(v330_0_q0),
    .din1(v330_1_q0),
    .din2(v330_2_q0),
    .din3(v330_3_q0),
    .din4(v330_4_q0),
    .din5(v330_5_q0),
    .din6(v330_6_q0),
    .din7(v330_7_q0),
    .din8(v330_8_q0),
    .din9(v330_9_q0),
    .din10(v330_10_q0),
    .din11(v330_11_q0),
    .din12(empty),
    .dout(v143_V_fu_554_p14)
);

Bert_layer_mac_muladd_8s_4s_22s_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
mac_muladd_8s_4s_22s_22_4_1_U538(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v142_fu_525_p14),
    .din1(v143_V_fu_554_p14),
    .din2(ap_sig_allocacmp_v147_V_load),
    .ce(1'b1),
    .dout(grp_fu_602_p3)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln297_fu_466_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k3_fu_106 <= add_ln297_fu_472_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k3_fu_106 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            v147_V_fu_102 <= tmp;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            v147_V_fu_102 <= grp_fu_602_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln297_reg_636 <= icmp_ln297_fu_466_p2;
        icmp_ln297_reg_636_pp0_iter1_reg <= icmp_ln297_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln297_reg_636_pp0_iter2_reg <= icmp_ln297_reg_636_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((icmp_ln297_fu_466_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k3_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_k3_1 = k3_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_v147_V_load = grp_fu_602_p3;
    end else begin
        ap_sig_allocacmp_v147_V_load = v147_V_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln297_reg_636_pp0_iter2_reg == 1'd1))) begin
        v147_V_out_ap_vld = 1'b1;
    end else begin
        v147_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_0_ce0 = 1'b1;
    end else begin
        v330_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_10_ce0 = 1'b1;
    end else begin
        v330_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_11_ce0 = 1'b1;
    end else begin
        v330_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_1_ce0 = 1'b1;
    end else begin
        v330_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_2_ce0 = 1'b1;
    end else begin
        v330_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_3_ce0 = 1'b1;
    end else begin
        v330_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_4_ce0 = 1'b1;
    end else begin
        v330_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_5_ce0 = 1'b1;
    end else begin
        v330_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_6_ce0 = 1'b1;
    end else begin
        v330_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_7_ce0 = 1'b1;
    end else begin
        v330_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_8_ce0 = 1'b1;
    end else begin
        v330_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v330_9_ce0 = 1'b1;
    end else begin
        v330_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_0_ce0 = 1'b1;
    end else begin
        v357_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_10_ce0 = 1'b1;
    end else begin
        v357_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_11_ce0 = 1'b1;
    end else begin
        v357_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_1_ce0 = 1'b1;
    end else begin
        v357_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_2_ce0 = 1'b1;
    end else begin
        v357_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_3_ce0 = 1'b1;
    end else begin
        v357_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_4_ce0 = 1'b1;
    end else begin
        v357_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_5_ce0 = 1'b1;
    end else begin
        v357_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_6_ce0 = 1'b1;
    end else begin
        v357_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_7_ce0 = 1'b1;
    end else begin
        v357_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_8_ce0 = 1'b1;
    end else begin
        v357_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v357_9_ce0 = 1'b1;
    end else begin
        v357_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln297_fu_472_p2 = (ap_sig_allocacmp_k3_1 + 10'd1);

assign add_ln299_fu_498_p2 = (sub_ln299 + zext_ln299_fu_494_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln297_fu_466_p2 = ((ap_sig_allocacmp_k3_1 == 10'd768) ? 1'b1 : 1'b0);

assign k3_cast_fu_478_p1 = ap_sig_allocacmp_k3_1;

assign v147_V_out = v147_V_fu_102;

assign v330_0_address0 = zext_ln299_1_fu_504_p1;

assign v330_10_address0 = zext_ln299_1_fu_504_p1;

assign v330_11_address0 = zext_ln299_1_fu_504_p1;

assign v330_1_address0 = zext_ln299_1_fu_504_p1;

assign v330_2_address0 = zext_ln299_1_fu_504_p1;

assign v330_3_address0 = zext_ln299_1_fu_504_p1;

assign v330_4_address0 = zext_ln299_1_fu_504_p1;

assign v330_5_address0 = zext_ln299_1_fu_504_p1;

assign v330_6_address0 = zext_ln299_1_fu_504_p1;

assign v330_7_address0 = zext_ln299_1_fu_504_p1;

assign v330_8_address0 = zext_ln299_1_fu_504_p1;

assign v330_9_address0 = zext_ln299_1_fu_504_p1;

assign v357_0_address0 = k3_cast_fu_478_p1;

assign v357_10_address0 = k3_cast_fu_478_p1;

assign v357_11_address0 = k3_cast_fu_478_p1;

assign v357_1_address0 = k3_cast_fu_478_p1;

assign v357_2_address0 = k3_cast_fu_478_p1;

assign v357_3_address0 = k3_cast_fu_478_p1;

assign v357_4_address0 = k3_cast_fu_478_p1;

assign v357_5_address0 = k3_cast_fu_478_p1;

assign v357_6_address0 = k3_cast_fu_478_p1;

assign v357_7_address0 = k3_cast_fu_478_p1;

assign v357_8_address0 = k3_cast_fu_478_p1;

assign v357_9_address0 = k3_cast_fu_478_p1;

assign zext_ln299_1_fu_504_p1 = add_ln299_fu_498_p2;

assign zext_ln299_fu_494_p1 = ap_sig_allocacmp_k3_1;

endmodule //Bert_layer_Bert_layer_Pipeline_l_k3
