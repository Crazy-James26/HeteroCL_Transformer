-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_float_to_int8_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_0_ce0 : OUT STD_LOGIC;
    v0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_1_ce0 : OUT STD_LOGIC;
    v0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_2_ce0 : OUT STD_LOGIC;
    v0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_3_ce0 : OUT STD_LOGIC;
    v0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_4_ce0 : OUT STD_LOGIC;
    v0_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_5_ce0 : OUT STD_LOGIC;
    v0_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_6_ce0 : OUT STD_LOGIC;
    v0_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_7_ce0 : OUT STD_LOGIC;
    v0_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_8_ce0 : OUT STD_LOGIC;
    v0_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_9_ce0 : OUT STD_LOGIC;
    v0_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_10_ce0 : OUT STD_LOGIC;
    v0_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v0_11_ce0 : OUT STD_LOGIC;
    v0_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_0_ce0 : OUT STD_LOGIC;
    v2_0_we0 : OUT STD_LOGIC;
    v2_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_1_ce0 : OUT STD_LOGIC;
    v2_1_we0 : OUT STD_LOGIC;
    v2_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_2_ce0 : OUT STD_LOGIC;
    v2_2_we0 : OUT STD_LOGIC;
    v2_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_3_ce0 : OUT STD_LOGIC;
    v2_3_we0 : OUT STD_LOGIC;
    v2_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_4_ce0 : OUT STD_LOGIC;
    v2_4_we0 : OUT STD_LOGIC;
    v2_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_5_ce0 : OUT STD_LOGIC;
    v2_5_we0 : OUT STD_LOGIC;
    v2_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_6_ce0 : OUT STD_LOGIC;
    v2_6_we0 : OUT STD_LOGIC;
    v2_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_7_ce0 : OUT STD_LOGIC;
    v2_7_we0 : OUT STD_LOGIC;
    v2_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_8_ce0 : OUT STD_LOGIC;
    v2_8_we0 : OUT STD_LOGIC;
    v2_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_9_ce0 : OUT STD_LOGIC;
    v2_9_we0 : OUT STD_LOGIC;
    v2_9_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_10_ce0 : OUT STD_LOGIC;
    v2_10_we0 : OUT STD_LOGIC;
    v2_10_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v2_11_ce0 : OUT STD_LOGIC;
    v2_11_we0 : OUT STD_LOGIC;
    v2_11_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_fu_4359_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4359_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4359_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_4359_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_float_to_int8_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln21_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln21_1_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_1_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_1_reg_978_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_2_fu_734_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_983_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_reg_988_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v5_fu_779_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal v5_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal v7_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1074_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_829_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_22_reg_1079 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_861_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1089 : STD_LOGIC_VECTOR (8 downto 0);
    signal val_fu_923_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_1094 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_fu_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_fu_758_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_170 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_1_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal result_V_fu_935_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_115_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_116_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_117_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_118_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_119_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_120_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_121_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_122_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_123_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_124_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_125_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_646_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v6_mid1_fu_666_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_fu_696_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_658_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_V_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_V_fu_819_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_833_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1512_fu_857_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_869_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1488_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_878_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln1488_fu_885_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_fu_889_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_fu_901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_33_fu_895_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln818_fu_909_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_913_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_2_fu_930_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_124_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_124_32_1_1_U700 : component Bert_layer_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => empty_fu_562_p1,
        din1 => empty_115_fu_566_p1,
        din2 => empty_116_fu_570_p1,
        din3 => empty_117_fu_574_p1,
        din4 => empty_118_fu_578_p1,
        din5 => empty_119_fu_582_p1,
        din6 => empty_120_fu_586_p1,
        din7 => empty_121_fu_590_p1,
        din8 => empty_122_fu_594_p1,
        din9 => empty_123_fu_598_p1,
        din10 => empty_124_fu_602_p1,
        din11 => empty_125_fu_606_p1,
        din12 => add_ln21_fu_646_p2,
        dout => v6_mid1_fu_666_p14);

    mux_124_32_1_1_U701 : component Bert_layer_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => empty_fu_562_p1,
        din1 => empty_115_fu_566_p1,
        din2 => empty_116_fu_570_p1,
        din3 => empty_117_fu_574_p1,
        din4 => empty_118_fu_578_p1,
        din5 => empty_119_fu_582_p1,
        din6 => empty_120_fu_586_p1,
        din7 => empty_121_fu_590_p1,
        din8 => empty_122_fu_594_p1,
        din9 => empty_123_fu_598_p1,
        din10 => empty_124_fu_602_p1,
        din11 => empty_125_fu_606_p1,
        din12 => ap_sig_allocacmp_i_load,
        dout => v_fu_696_p14);

    mux_124_32_1_1_U702 : component Bert_layer_mux_124_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => v0_0_q0,
        din1 => v0_1_q0,
        din2 => v0_2_q0,
        din3 => v0_3_q0,
        din4 => v0_4_q0,
        din5 => v0_5_q0,
        din6 => v0_6_q0,
        din7 => v0_7_q0,
        din8 => v0_8_q0,
        din9 => v0_9_q0,
        din10 => v0_10_q0,
        din11 => v0_11_q0,
        din12 => select_ln21_2_reg_983,
        dout => v5_fu_779_p14);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    i_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_628_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_166 <= select_ln21_2_fu_734_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_166 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_628_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_170 <= add_ln21_1_fu_634_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_170 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_628_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_162 <= add_ln22_fu_758_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_162 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln21_1_reg_978_pp0_iter1_reg <= select_ln21_1_reg_978;
                select_ln21_2_reg_983_pp0_iter1_reg <= select_ln21_2_reg_983;
                v5_reg_1064 <= v5_fu_779_p14;
                    zext_ln22_reg_988_pp0_iter1_reg(9 downto 0) <= zext_ln22_reg_988(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                isNeg_reg_1084 <= add_ln346_fu_837_p2(8 downto 8);
                p_Result_22_reg_1079 <= p_Result_22_fu_829_p1;
                p_Result_s_reg_1074 <= data_V_fu_808_p1(31 downto 31);
                p_Result_s_reg_1074_pp0_iter7_reg <= p_Result_s_reg_1074;
                select_ln21_2_reg_983_pp0_iter2_reg <= select_ln21_2_reg_983_pp0_iter1_reg;
                select_ln21_2_reg_983_pp0_iter3_reg <= select_ln21_2_reg_983_pp0_iter2_reg;
                select_ln21_2_reg_983_pp0_iter4_reg <= select_ln21_2_reg_983_pp0_iter3_reg;
                select_ln21_2_reg_983_pp0_iter5_reg <= select_ln21_2_reg_983_pp0_iter4_reg;
                select_ln21_2_reg_983_pp0_iter6_reg <= select_ln21_2_reg_983_pp0_iter5_reg;
                select_ln21_2_reg_983_pp0_iter7_reg <= select_ln21_2_reg_983_pp0_iter6_reg;
                ush_reg_1089 <= ush_fu_861_p3;
                v7_reg_1069 <= grp_fu_4359_p_dout0;
                val_reg_1094 <= val_fu_923_p3;
                    zext_ln22_reg_988_pp0_iter2_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter1_reg(9 downto 0);
                    zext_ln22_reg_988_pp0_iter3_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter2_reg(9 downto 0);
                    zext_ln22_reg_988_pp0_iter4_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter3_reg(9 downto 0);
                    zext_ln22_reg_988_pp0_iter5_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter4_reg(9 downto 0);
                    zext_ln22_reg_988_pp0_iter6_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter5_reg(9 downto 0);
                    zext_ln22_reg_988_pp0_iter7_reg(9 downto 0) <= zext_ln22_reg_988_pp0_iter6_reg(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_628_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln21_1_reg_978 <= select_ln21_1_fu_726_p3;
                select_ln21_2_reg_983 <= select_ln21_2_fu_734_p3;
                    zext_ln22_reg_988(9 downto 0) <= zext_ln22_fu_742_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln22_reg_988(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter1_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln22_reg_988_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln21_1_fu_634_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln21_fu_646_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln22_fu_758_p2 <= std_logic_vector(unsigned(select_ln21_fu_658_p3) + unsigned(ap_const_lv10_1));
    add_ln346_fu_837_p2 <= std_logic_vector(unsigned(zext_ln346_fu_833_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln21_fu_628_p2)
    begin
        if (((icmp_ln21_fu_628_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_166)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_166;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_170)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_170;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_162, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_162;
        end if; 
    end process;

    data_V_fu_808_p1 <= v7_reg_1069;
    empty_115_fu_566_p1 <= p_read1;
    empty_116_fu_570_p1 <= p_read2;
    empty_117_fu_574_p1 <= p_read3;
    empty_118_fu_578_p1 <= p_read4;
    empty_119_fu_582_p1 <= p_read5;
    empty_120_fu_586_p1 <= p_read6;
    empty_121_fu_590_p1 <= p_read7;
    empty_122_fu_594_p1 <= p_read8;
    empty_123_fu_598_p1 <= p_read9;
    empty_124_fu_602_p1 <= p_read10;
    empty_125_fu_606_p1 <= p_read11;
    empty_fu_562_p1 <= p_read;
    grp_fu_4359_p_ce <= ap_const_logic_1;
    grp_fu_4359_p_din0 <= v5_reg_1064;
    grp_fu_4359_p_din1 <= select_ln21_1_reg_978_pp0_iter1_reg;
    icmp_ln21_fu_628_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_2400) else "0";
    icmp_ln22_fu_652_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv10_300) else "0";
    isNeg_fu_843_p3 <= add_ln346_fu_837_p2(8 downto 8);
    mantissa_fu_869_p4 <= ((ap_const_lv1_1 & p_Result_22_reg_1079) & ap_const_lv1_0);
    p_Result_22_fu_829_p1 <= data_V_fu_808_p1(23 - 1 downto 0);
    r_V_33_fu_895_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_878_p1),to_integer(unsigned('0' & zext_ln1488_fu_885_p1(31-1 downto 0)))));
    r_V_fu_889_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_878_p1),to_integer(unsigned('0' & zext_ln1488_fu_885_p1(31-1 downto 0)))));
    result_V_2_fu_930_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_reg_1094));
    result_V_fu_935_p3 <= 
        result_V_2_fu_930_p2 when (p_Result_s_reg_1074_pp0_iter7_reg(0) = '1') else 
        val_reg_1094;
    select_ln21_1_fu_726_p3 <= 
        v6_mid1_fu_666_p14 when (icmp_ln22_fu_652_p2(0) = '1') else 
        v_fu_696_p14;
    select_ln21_2_fu_734_p3 <= 
        add_ln21_fu_646_p2 when (icmp_ln22_fu_652_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln21_fu_658_p3 <= 
        ap_const_lv10_0 when (icmp_ln22_fu_652_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln1488_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1089),32));

        sext_ln1512_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_851_p2),9));

    sub_ln1512_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_819_p4));
    tmp_fu_901_p3 <= r_V_fu_889_p2(24 downto 24);
    tmp_s_fu_913_p4 <= r_V_33_fu_895_p2(31 downto 24);
    ush_fu_861_p3 <= 
        sext_ln1512_fu_857_p1 when (isNeg_fu_843_p3(0) = '1') else 
        add_ln346_fu_837_p2;
    v0_0_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_0_ce0 <= ap_const_logic_1;
        else 
            v0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_10_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_10_ce0 <= ap_const_logic_1;
        else 
            v0_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_11_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_11_ce0 <= ap_const_logic_1;
        else 
            v0_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_1_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_1_ce0 <= ap_const_logic_1;
        else 
            v0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_2_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_2_ce0 <= ap_const_logic_1;
        else 
            v0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_3_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_3_ce0 <= ap_const_logic_1;
        else 
            v0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_4_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_4_ce0 <= ap_const_logic_1;
        else 
            v0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_5_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_5_ce0 <= ap_const_logic_1;
        else 
            v0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_6_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_6_ce0 <= ap_const_logic_1;
        else 
            v0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_7_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_7_ce0 <= ap_const_logic_1;
        else 
            v0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_8_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_8_ce0 <= ap_const_logic_1;
        else 
            v0_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_9_address0 <= zext_ln22_fu_742_p1(10 - 1 downto 0);

    v0_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v0_9_ce0 <= ap_const_logic_1;
        else 
            v0_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_0_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_0_ce0 <= ap_const_logic_1;
        else 
            v2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_0_d0 <= result_V_fu_935_p3;

    v2_0_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_0))) then 
            v2_0_we0 <= ap_const_logic_1;
        else 
            v2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_10_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_10_ce0 <= ap_const_logic_1;
        else 
            v2_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_10_d0 <= result_V_fu_935_p3;

    v2_10_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_A))) then 
            v2_10_we0 <= ap_const_logic_1;
        else 
            v2_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_11_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_11_ce0 <= ap_const_logic_1;
        else 
            v2_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_11_d0 <= result_V_fu_935_p3;

    v2_11_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and ((select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_B) or ((select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_C) or ((select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_D) or ((select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_E) or (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_F))))))) then 
            v2_11_we0 <= ap_const_logic_1;
        else 
            v2_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_1_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_1_ce0 <= ap_const_logic_1;
        else 
            v2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_1_d0 <= result_V_fu_935_p3;

    v2_1_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_1))) then 
            v2_1_we0 <= ap_const_logic_1;
        else 
            v2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_2_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_2_ce0 <= ap_const_logic_1;
        else 
            v2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_2_d0 <= result_V_fu_935_p3;

    v2_2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_2))) then 
            v2_2_we0 <= ap_const_logic_1;
        else 
            v2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_3_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_3_ce0 <= ap_const_logic_1;
        else 
            v2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_3_d0 <= result_V_fu_935_p3;

    v2_3_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_3))) then 
            v2_3_we0 <= ap_const_logic_1;
        else 
            v2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_4_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_4_ce0 <= ap_const_logic_1;
        else 
            v2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_4_d0 <= result_V_fu_935_p3;

    v2_4_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_4))) then 
            v2_4_we0 <= ap_const_logic_1;
        else 
            v2_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_5_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_5_ce0 <= ap_const_logic_1;
        else 
            v2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_5_d0 <= result_V_fu_935_p3;

    v2_5_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_5))) then 
            v2_5_we0 <= ap_const_logic_1;
        else 
            v2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_6_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_6_ce0 <= ap_const_logic_1;
        else 
            v2_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_6_d0 <= result_V_fu_935_p3;

    v2_6_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_6))) then 
            v2_6_we0 <= ap_const_logic_1;
        else 
            v2_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_7_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_7_ce0 <= ap_const_logic_1;
        else 
            v2_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_7_d0 <= result_V_fu_935_p3;

    v2_7_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_7))) then 
            v2_7_we0 <= ap_const_logic_1;
        else 
            v2_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_8_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_8_ce0 <= ap_const_logic_1;
        else 
            v2_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_8_d0 <= result_V_fu_935_p3;

    v2_8_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_8))) then 
            v2_8_we0 <= ap_const_logic_1;
        else 
            v2_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_9_address0 <= zext_ln22_reg_988_pp0_iter7_reg(10 - 1 downto 0);

    v2_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            v2_9_ce0 <= ap_const_logic_1;
        else 
            v2_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_9_d0 <= result_V_fu_935_p3;

    v2_9_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, select_ln21_2_reg_983_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (select_ln21_2_reg_983_pp0_iter7_reg = ap_const_lv4_9))) then 
            v2_9_we0 <= ap_const_logic_1;
        else 
            v2_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    val_fu_923_p3 <= 
        zext_ln818_fu_909_p1 when (isNeg_reg_1084(0) = '1') else 
        tmp_s_fu_913_p4;
    xs_exp_V_fu_819_p4 <= data_V_fu_808_p1(30 downto 23);
    zext_ln1488_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_882_p1),55));
    zext_ln15_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_869_p4),55));
    zext_ln22_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_658_p3),64));
    zext_ln346_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_819_p4),9));
    zext_ln818_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_901_p3),8));
end behav;
