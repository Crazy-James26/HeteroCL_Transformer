-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_norm_i5_l_j5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v344_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    v344_ce0 : OUT STD_LOGIC;
    v344_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    acc_outp1_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_outp1_V_ce0 : OUT STD_LOGIC;
    acc_outp1_V_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    acc_outp1_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_outp1_V_1_ce0 : OUT STD_LOGIC;
    acc_outp1_V_1_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    acc_outp1_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_outp1_V_2_ce0 : OUT STD_LOGIC;
    acc_outp1_V_2_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    acc_outp1_V_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_outp1_V_3_ce0 : OUT STD_LOGIC;
    acc_outp1_V_3_q0 : IN STD_LOGIC_VECTOR (21 downto 0);
    v123_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v123_ce0 : OUT STD_LOGIC;
    v123_we0 : OUT STD_LOGIC;
    v123_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v123_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v123_1_ce0 : OUT STD_LOGIC;
    v123_1_we0 : OUT STD_LOGIC;
    v123_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v123_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v123_2_ce0 : OUT STD_LOGIC;
    v123_2_we0 : OUT STD_LOGIC;
    v123_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v123_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v123_3_ce0 : OUT STD_LOGIC;
    v123_3_we0 : OUT STD_LOGIC;
    v123_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_705_p_ce : OUT STD_LOGIC;
    grp_fu_709_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_709_p_ce : OUT STD_LOGIC;
    grp_fu_713_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_713_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_713_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_norm_i5_l_j5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3E000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000000000000000000000000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln121_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln121_fu_261_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_fu_269_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln121_1_reg_412_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln121_fu_277_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln121_reg_417_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast161_mid2_v_reg_422 : STD_LOGIC_VECTOR (1 downto 0);
    signal v123_addr_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_addr_reg_448_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453 : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_1_addr_reg_453_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458 : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_2_addr_reg_458_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463 : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v123_3_addr_reg_463_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v57_V_fu_357_p6 : STD_LOGIC_VECTOR (21 downto 0);
    signal v57_V_reg_468 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln126_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v58_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal v344_load_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal v59_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln121_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v61_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln124_2_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln121_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j5_fu_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln122_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j5_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i5_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i5_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten286_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln121_1_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten286_load : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln122_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln121_fu_249_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_319_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_312_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln124_fu_326_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln124_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln124_1_fu_336_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln124_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_sitofp_32s_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_42_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        din3 : IN STD_LOGIC_VECTOR (21 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_22_1_1_U338 : component Bert_layer_mux_42_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 22,
        din1_WIDTH => 22,
        din2_WIDTH => 22,
        din3_WIDTH => 22,
        din4_WIDTH => 2,
        dout_WIDTH => 22)
    port map (
        din0 => acc_outp1_V_q0,
        din1 => acc_outp1_V_1_q0,
        din2 => acc_outp1_V_2_q0,
        din3 => acc_outp1_V_3_q0,
        din4 => trunc_ln121_reg_417_pp0_iter1_reg,
        dout => v57_V_fu_357_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i5_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_231_p2 = ap_const_lv1_0))) then 
                    i5_fu_80 <= select_ln121_1_fu_269_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i5_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten286_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_231_p2 = ap_const_lv1_0))) then 
                    indvar_flatten286_fu_84 <= add_ln121_1_fu_237_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten286_fu_84 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j5_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln121_fu_231_p2 = ap_const_lv1_0))) then 
                    j5_fu_76 <= add_ln122_fu_291_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j5_fu_76 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                select_ln121_1_reg_412_pp0_iter10_reg <= select_ln121_1_reg_412_pp0_iter9_reg;
                select_ln121_1_reg_412_pp0_iter2_reg <= select_ln121_1_reg_412_pp0_iter1_reg;
                select_ln121_1_reg_412_pp0_iter3_reg <= select_ln121_1_reg_412_pp0_iter2_reg;
                select_ln121_1_reg_412_pp0_iter4_reg <= select_ln121_1_reg_412_pp0_iter3_reg;
                select_ln121_1_reg_412_pp0_iter5_reg <= select_ln121_1_reg_412_pp0_iter4_reg;
                select_ln121_1_reg_412_pp0_iter6_reg <= select_ln121_1_reg_412_pp0_iter5_reg;
                select_ln121_1_reg_412_pp0_iter7_reg <= select_ln121_1_reg_412_pp0_iter6_reg;
                select_ln121_1_reg_412_pp0_iter8_reg <= select_ln121_1_reg_412_pp0_iter7_reg;
                select_ln121_1_reg_412_pp0_iter9_reg <= select_ln121_1_reg_412_pp0_iter8_reg;
                trunc_ln121_reg_417_pp0_iter10_reg <= trunc_ln121_reg_417_pp0_iter9_reg;
                trunc_ln121_reg_417_pp0_iter11_reg <= trunc_ln121_reg_417_pp0_iter10_reg;
                trunc_ln121_reg_417_pp0_iter12_reg <= trunc_ln121_reg_417_pp0_iter11_reg;
                trunc_ln121_reg_417_pp0_iter13_reg <= trunc_ln121_reg_417_pp0_iter12_reg;
                trunc_ln121_reg_417_pp0_iter14_reg <= trunc_ln121_reg_417_pp0_iter13_reg;
                trunc_ln121_reg_417_pp0_iter15_reg <= trunc_ln121_reg_417_pp0_iter14_reg;
                trunc_ln121_reg_417_pp0_iter16_reg <= trunc_ln121_reg_417_pp0_iter15_reg;
                trunc_ln121_reg_417_pp0_iter2_reg <= trunc_ln121_reg_417_pp0_iter1_reg;
                trunc_ln121_reg_417_pp0_iter3_reg <= trunc_ln121_reg_417_pp0_iter2_reg;
                trunc_ln121_reg_417_pp0_iter4_reg <= trunc_ln121_reg_417_pp0_iter3_reg;
                trunc_ln121_reg_417_pp0_iter5_reg <= trunc_ln121_reg_417_pp0_iter4_reg;
                trunc_ln121_reg_417_pp0_iter6_reg <= trunc_ln121_reg_417_pp0_iter5_reg;
                trunc_ln121_reg_417_pp0_iter7_reg <= trunc_ln121_reg_417_pp0_iter6_reg;
                trunc_ln121_reg_417_pp0_iter8_reg <= trunc_ln121_reg_417_pp0_iter7_reg;
                trunc_ln121_reg_417_pp0_iter9_reg <= trunc_ln121_reg_417_pp0_iter8_reg;
                v123_1_addr_reg_453_pp0_iter10_reg <= v123_1_addr_reg_453_pp0_iter9_reg;
                v123_1_addr_reg_453_pp0_iter11_reg <= v123_1_addr_reg_453_pp0_iter10_reg;
                v123_1_addr_reg_453_pp0_iter12_reg <= v123_1_addr_reg_453_pp0_iter11_reg;
                v123_1_addr_reg_453_pp0_iter13_reg <= v123_1_addr_reg_453_pp0_iter12_reg;
                v123_1_addr_reg_453_pp0_iter14_reg <= v123_1_addr_reg_453_pp0_iter13_reg;
                v123_1_addr_reg_453_pp0_iter15_reg <= v123_1_addr_reg_453_pp0_iter14_reg;
                v123_1_addr_reg_453_pp0_iter16_reg <= v123_1_addr_reg_453_pp0_iter15_reg;
                v123_1_addr_reg_453_pp0_iter2_reg <= v123_1_addr_reg_453;
                v123_1_addr_reg_453_pp0_iter3_reg <= v123_1_addr_reg_453_pp0_iter2_reg;
                v123_1_addr_reg_453_pp0_iter4_reg <= v123_1_addr_reg_453_pp0_iter3_reg;
                v123_1_addr_reg_453_pp0_iter5_reg <= v123_1_addr_reg_453_pp0_iter4_reg;
                v123_1_addr_reg_453_pp0_iter6_reg <= v123_1_addr_reg_453_pp0_iter5_reg;
                v123_1_addr_reg_453_pp0_iter7_reg <= v123_1_addr_reg_453_pp0_iter6_reg;
                v123_1_addr_reg_453_pp0_iter8_reg <= v123_1_addr_reg_453_pp0_iter7_reg;
                v123_1_addr_reg_453_pp0_iter9_reg <= v123_1_addr_reg_453_pp0_iter8_reg;
                v123_2_addr_reg_458_pp0_iter10_reg <= v123_2_addr_reg_458_pp0_iter9_reg;
                v123_2_addr_reg_458_pp0_iter11_reg <= v123_2_addr_reg_458_pp0_iter10_reg;
                v123_2_addr_reg_458_pp0_iter12_reg <= v123_2_addr_reg_458_pp0_iter11_reg;
                v123_2_addr_reg_458_pp0_iter13_reg <= v123_2_addr_reg_458_pp0_iter12_reg;
                v123_2_addr_reg_458_pp0_iter14_reg <= v123_2_addr_reg_458_pp0_iter13_reg;
                v123_2_addr_reg_458_pp0_iter15_reg <= v123_2_addr_reg_458_pp0_iter14_reg;
                v123_2_addr_reg_458_pp0_iter16_reg <= v123_2_addr_reg_458_pp0_iter15_reg;
                v123_2_addr_reg_458_pp0_iter2_reg <= v123_2_addr_reg_458;
                v123_2_addr_reg_458_pp0_iter3_reg <= v123_2_addr_reg_458_pp0_iter2_reg;
                v123_2_addr_reg_458_pp0_iter4_reg <= v123_2_addr_reg_458_pp0_iter3_reg;
                v123_2_addr_reg_458_pp0_iter5_reg <= v123_2_addr_reg_458_pp0_iter4_reg;
                v123_2_addr_reg_458_pp0_iter6_reg <= v123_2_addr_reg_458_pp0_iter5_reg;
                v123_2_addr_reg_458_pp0_iter7_reg <= v123_2_addr_reg_458_pp0_iter6_reg;
                v123_2_addr_reg_458_pp0_iter8_reg <= v123_2_addr_reg_458_pp0_iter7_reg;
                v123_2_addr_reg_458_pp0_iter9_reg <= v123_2_addr_reg_458_pp0_iter8_reg;
                v123_3_addr_reg_463_pp0_iter10_reg <= v123_3_addr_reg_463_pp0_iter9_reg;
                v123_3_addr_reg_463_pp0_iter11_reg <= v123_3_addr_reg_463_pp0_iter10_reg;
                v123_3_addr_reg_463_pp0_iter12_reg <= v123_3_addr_reg_463_pp0_iter11_reg;
                v123_3_addr_reg_463_pp0_iter13_reg <= v123_3_addr_reg_463_pp0_iter12_reg;
                v123_3_addr_reg_463_pp0_iter14_reg <= v123_3_addr_reg_463_pp0_iter13_reg;
                v123_3_addr_reg_463_pp0_iter15_reg <= v123_3_addr_reg_463_pp0_iter14_reg;
                v123_3_addr_reg_463_pp0_iter16_reg <= v123_3_addr_reg_463_pp0_iter15_reg;
                v123_3_addr_reg_463_pp0_iter2_reg <= v123_3_addr_reg_463;
                v123_3_addr_reg_463_pp0_iter3_reg <= v123_3_addr_reg_463_pp0_iter2_reg;
                v123_3_addr_reg_463_pp0_iter4_reg <= v123_3_addr_reg_463_pp0_iter3_reg;
                v123_3_addr_reg_463_pp0_iter5_reg <= v123_3_addr_reg_463_pp0_iter4_reg;
                v123_3_addr_reg_463_pp0_iter6_reg <= v123_3_addr_reg_463_pp0_iter5_reg;
                v123_3_addr_reg_463_pp0_iter7_reg <= v123_3_addr_reg_463_pp0_iter6_reg;
                v123_3_addr_reg_463_pp0_iter8_reg <= v123_3_addr_reg_463_pp0_iter7_reg;
                v123_3_addr_reg_463_pp0_iter9_reg <= v123_3_addr_reg_463_pp0_iter8_reg;
                v123_addr_reg_448_pp0_iter10_reg <= v123_addr_reg_448_pp0_iter9_reg;
                v123_addr_reg_448_pp0_iter11_reg <= v123_addr_reg_448_pp0_iter10_reg;
                v123_addr_reg_448_pp0_iter12_reg <= v123_addr_reg_448_pp0_iter11_reg;
                v123_addr_reg_448_pp0_iter13_reg <= v123_addr_reg_448_pp0_iter12_reg;
                v123_addr_reg_448_pp0_iter14_reg <= v123_addr_reg_448_pp0_iter13_reg;
                v123_addr_reg_448_pp0_iter15_reg <= v123_addr_reg_448_pp0_iter14_reg;
                v123_addr_reg_448_pp0_iter16_reg <= v123_addr_reg_448_pp0_iter15_reg;
                v123_addr_reg_448_pp0_iter2_reg <= v123_addr_reg_448;
                v123_addr_reg_448_pp0_iter3_reg <= v123_addr_reg_448_pp0_iter2_reg;
                v123_addr_reg_448_pp0_iter4_reg <= v123_addr_reg_448_pp0_iter3_reg;
                v123_addr_reg_448_pp0_iter5_reg <= v123_addr_reg_448_pp0_iter4_reg;
                v123_addr_reg_448_pp0_iter6_reg <= v123_addr_reg_448_pp0_iter5_reg;
                v123_addr_reg_448_pp0_iter7_reg <= v123_addr_reg_448_pp0_iter6_reg;
                v123_addr_reg_448_pp0_iter8_reg <= v123_addr_reg_448_pp0_iter7_reg;
                v123_addr_reg_448_pp0_iter9_reg <= v123_addr_reg_448_pp0_iter8_reg;
                v344_load_reg_488 <= v344_q0;
                v57_V_reg_468 <= v57_V_fu_357_p6;
                v58_reg_478 <= grp_fu_713_p_dout0;
                v59_reg_493 <= grp_fu_705_p_dout0;
                v61_reg_503 <= grp_fu_709_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln121_1_reg_412_pp0_iter1_reg <= select_ln121_1_reg_412;
                trunc_ln121_reg_417_pp0_iter1_reg <= trunc_ln121_reg_417;
                v123_1_addr_reg_453 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);
                v123_2_addr_reg_458 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);
                v123_3_addr_reg_463 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);
                v123_addr_reg_448 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_fu_231_p2 = ap_const_lv1_0))) then
                p_cast161_mid2_v_reg_422 <= select_ln121_1_fu_269_p3(3 downto 2);
                select_ln121_1_reg_412 <= select_ln121_1_fu_269_p3;
                select_ln121_reg_407 <= select_ln121_fu_261_p3;
                trunc_ln121_reg_417 <= trunc_ln121_fu_277_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    acc_outp1_V_1_address0 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);

    acc_outp1_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp1_V_1_ce0 <= ap_const_logic_1;
        else 
            acc_outp1_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp1_V_2_address0 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);

    acc_outp1_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp1_V_2_ce0 <= ap_const_logic_1;
        else 
            acc_outp1_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp1_V_3_address0 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);

    acc_outp1_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp1_V_3_ce0 <= ap_const_logic_1;
        else 
            acc_outp1_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_outp1_V_address0 <= zext_ln124_2_fu_345_p1(6 - 1 downto 0);

    acc_outp1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            acc_outp1_V_ce0 <= ap_const_logic_1;
        else 
            acc_outp1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln121_1_fu_237_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten286_load) + unsigned(ap_const_lv8_1));
    add_ln121_fu_249_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i5_load) + unsigned(ap_const_lv4_1));
    add_ln122_fu_291_p2 <= std_logic_vector(unsigned(select_ln121_fu_261_p3) + unsigned(ap_const_lv4_1));
    add_ln124_fu_339_p2 <= std_logic_vector(unsigned(sub_ln124_fu_330_p2) + unsigned(zext_ln124_1_fu_336_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln121_fu_231_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln121_fu_231_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i5_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i5_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i5_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i5_load <= i5_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten286_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten286_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten286_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten286_load <= indvar_flatten286_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_j5_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j5_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j5_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j5_load <= j5_fu_76;
        end if; 
    end process;

    bitcast_ln121_fu_378_p1 <= v344_load_reg_488;
    grp_fu_705_p_ce <= ap_const_logic_1;
    grp_fu_705_p_din0 <= v58_reg_478;
    grp_fu_705_p_din1 <= ap_const_lv32_3E000000;
    grp_fu_709_p_ce <= ap_const_logic_1;
    grp_fu_709_p_din0 <= v59_reg_493;
    grp_fu_709_p_din1 <= bitcast_ln121_fu_378_p1;
    grp_fu_713_p_ce <= ap_const_logic_1;
    grp_fu_713_p_din0 <= sext_ln126_fu_370_p1;
    icmp_ln121_fu_231_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten286_load = ap_const_lv8_90) else "0";
    icmp_ln122_fu_255_p2 <= "1" when (ap_sig_allocacmp_j5_load = ap_const_lv4_C) else "0";
    select_ln121_1_fu_269_p3 <= 
        add_ln121_fu_249_p2 when (icmp_ln122_fu_255_p2(0) = '1') else 
        ap_sig_allocacmp_i5_load;
    select_ln121_fu_261_p3 <= 
        ap_const_lv4_0 when (icmp_ln122_fu_255_p2(0) = '1') else 
        ap_sig_allocacmp_j5_load;
        sext_ln126_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v57_V_reg_468),32));

    sub_ln124_fu_330_p2 <= std_logic_vector(unsigned(tmp_s_fu_312_p3) - unsigned(zext_ln124_fu_326_p1));
    tmp_22_fu_319_p3 <= (p_cast161_mid2_v_reg_422 & ap_const_lv2_0);
    tmp_s_fu_312_p3 <= (p_cast161_mid2_v_reg_422 & ap_const_lv4_0);
    trunc_ln121_fu_277_p1 <= select_ln121_1_fu_269_p3(2 - 1 downto 0);
    v123_1_address0 <= v123_1_addr_reg_453_pp0_iter16_reg;

    v123_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            v123_1_ce0 <= ap_const_logic_1;
        else 
            v123_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_1_d0 <= v61_reg_503;

    v123_1_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln121_reg_417_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln121_reg_417_pp0_iter16_reg = ap_const_lv2_1))) then 
            v123_1_we0 <= ap_const_logic_1;
        else 
            v123_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_2_address0 <= v123_2_addr_reg_458_pp0_iter16_reg;

    v123_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            v123_2_ce0 <= ap_const_logic_1;
        else 
            v123_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_2_d0 <= v61_reg_503;

    v123_2_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln121_reg_417_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln121_reg_417_pp0_iter16_reg = ap_const_lv2_2))) then 
            v123_2_we0 <= ap_const_logic_1;
        else 
            v123_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_3_address0 <= v123_3_addr_reg_463_pp0_iter16_reg;

    v123_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            v123_3_ce0 <= ap_const_logic_1;
        else 
            v123_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_3_d0 <= v61_reg_503;

    v123_3_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln121_reg_417_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln121_reg_417_pp0_iter16_reg = ap_const_lv2_3))) then 
            v123_3_we0 <= ap_const_logic_1;
        else 
            v123_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_address0 <= v123_addr_reg_448_pp0_iter16_reg;

    v123_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            v123_ce0 <= ap_const_logic_1;
        else 
            v123_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v123_d0 <= v61_reg_503;

    v123_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001, trunc_ln121_reg_417_pp0_iter16_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (trunc_ln121_reg_417_pp0_iter16_reg = ap_const_lv2_0))) then 
            v123_we0 <= ap_const_logic_1;
        else 
            v123_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v344_address0 <= zext_ln121_fu_374_p1(4 - 1 downto 0);

    v344_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            v344_ce0 <= ap_const_logic_1;
        else 
            v344_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln121_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_1_reg_412_pp0_iter10_reg),64));
    zext_ln124_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln121_reg_407),6));
    zext_ln124_2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_339_p2),64));
    zext_ln124_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_319_p3),6));
end behav;
