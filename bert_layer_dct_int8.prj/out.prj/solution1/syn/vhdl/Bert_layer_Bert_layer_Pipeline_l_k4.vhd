-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Bert_layer_Pipeline_l_k4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp_s : IN STD_LOGIC_VECTOR (21 downto 0);
    sub_ln440 : IN STD_LOGIC_VECTOR (17 downto 0);
    v332_0_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_0_ce0 : OUT STD_LOGIC;
    v332_0_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_1_ce0 : OUT STD_LOGIC;
    v332_1_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_2_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_2_ce0 : OUT STD_LOGIC;
    v332_2_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_3_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_3_ce0 : OUT STD_LOGIC;
    v332_3_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_4_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_4_ce0 : OUT STD_LOGIC;
    v332_4_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_5_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_5_ce0 : OUT STD_LOGIC;
    v332_5_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_6_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_6_ce0 : OUT STD_LOGIC;
    v332_6_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_7_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_7_ce0 : OUT STD_LOGIC;
    v332_7_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_8_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_8_ce0 : OUT STD_LOGIC;
    v332_8_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_9_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_9_ce0 : OUT STD_LOGIC;
    v332_9_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_10_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_10_ce0 : OUT STD_LOGIC;
    v332_10_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v332_11_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v332_11_ce0 : OUT STD_LOGIC;
    v332_11_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    v361_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_0_ce0 : OUT STD_LOGIC;
    v361_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_1_ce0 : OUT STD_LOGIC;
    v361_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_2_ce0 : OUT STD_LOGIC;
    v361_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_3_ce0 : OUT STD_LOGIC;
    v361_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_4_ce0 : OUT STD_LOGIC;
    v361_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_5_ce0 : OUT STD_LOGIC;
    v361_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_6_ce0 : OUT STD_LOGIC;
    v361_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_7_ce0 : OUT STD_LOGIC;
    v361_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_8_ce0 : OUT STD_LOGIC;
    v361_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_9_ce0 : OUT STD_LOGIC;
    v361_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_10_ce0 : OUT STD_LOGIC;
    v361_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v361_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v361_11_ce0 : OUT STD_LOGIC;
    v361_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    select_ln436_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty : IN STD_LOGIC_VECTOR (3 downto 0);
    v222_V_out : OUT STD_LOGIC_VECTOR (21 downto 0);
    v222_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Bert_layer_Pipeline_l_k4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln438_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln438_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln438_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln440_1_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k4_cast_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v222_V_fu_102 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_602_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_sig_allocacmp_v222_V_load : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k4_fu_106 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln438_fu_472_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_k4_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln440_fu_494_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln440_fu_498_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal v217_fu_525_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal v218_V_fu_554_p14 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mux_124_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Bert_layer_mux_124_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (3 downto 0);
        din5 : IN STD_LOGIC_VECTOR (3 downto 0);
        din6 : IN STD_LOGIC_VECTOR (3 downto 0);
        din7 : IN STD_LOGIC_VECTOR (3 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        din11 : IN STD_LOGIC_VECTOR (3 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Bert_layer_mac_muladd_8s_4s_22s_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_124_8_1_1_U752 : component Bert_layer_mux_124_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => v361_0_q0,
        din1 => v361_1_q0,
        din2 => v361_2_q0,
        din3 => v361_3_q0,
        din4 => v361_4_q0,
        din5 => v361_5_q0,
        din6 => v361_6_q0,
        din7 => v361_7_q0,
        din8 => v361_8_q0,
        din9 => v361_9_q0,
        din10 => v361_10_q0,
        din11 => v361_11_q0,
        din12 => select_ln436_1,
        dout => v217_fu_525_p14);

    mux_124_4_1_1_U753 : component Bert_layer_mux_124_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 4,
        din5_WIDTH => 4,
        din6_WIDTH => 4,
        din7_WIDTH => 4,
        din8_WIDTH => 4,
        din9_WIDTH => 4,
        din10_WIDTH => 4,
        din11_WIDTH => 4,
        din12_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => v332_0_q0,
        din1 => v332_1_q0,
        din2 => v332_2_q0,
        din3 => v332_3_q0,
        din4 => v332_4_q0,
        din5 => v332_5_q0,
        din6 => v332_6_q0,
        din7 => v332_7_q0,
        din8 => v332_8_q0,
        din9 => v332_9_q0,
        din10 => v332_10_q0,
        din11 => v332_11_q0,
        din12 => empty,
        dout => v218_V_fu_554_p14);

    mac_muladd_8s_4s_22s_22_4_1_U754 : component Bert_layer_mac_muladd_8s_4s_22s_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v217_fu_525_p14,
        din1 => v218_V_fu_554_p14,
        din2 => ap_sig_allocacmp_v222_V_load,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p3);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    k4_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln438_fu_466_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k4_fu_106 <= add_ln438_fu_472_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k4_fu_106 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    v222_V_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v222_V_fu_102 <= tmp_s;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    v222_V_fu_102 <= grp_fu_602_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln438_reg_636 <= icmp_ln438_fu_466_p2;
                icmp_ln438_reg_636_pp0_iter1_reg <= icmp_ln438_reg_636;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln438_reg_636_pp0_iter2_reg <= icmp_ln438_reg_636_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln438_fu_472_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k4_1) + unsigned(ap_const_lv10_1));
    add_ln440_fu_498_p2 <= std_logic_vector(unsigned(sub_ln440) + unsigned(zext_ln440_fu_494_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln438_fu_466_p2)
    begin
        if (((icmp_ln438_fu_466_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k4_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k4_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k4_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_k4_1 <= k4_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_v222_V_load_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, v222_V_fu_102, grp_fu_602_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_v222_V_load <= grp_fu_602_p3;
        else 
            ap_sig_allocacmp_v222_V_load <= v222_V_fu_102;
        end if; 
    end process;

    icmp_ln438_fu_466_p2 <= "1" when (ap_sig_allocacmp_k4_1 = ap_const_lv10_300) else "0";
    k4_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k4_1),64));
    v222_V_out <= v222_V_fu_102;

    v222_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln438_reg_636_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln438_reg_636_pp0_iter2_reg = ap_const_lv1_1))) then 
            v222_V_out_ap_vld <= ap_const_logic_1;
        else 
            v222_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v332_0_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_0_ce0 <= ap_const_logic_1;
        else 
            v332_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_10_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_10_ce0 <= ap_const_logic_1;
        else 
            v332_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_11_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_11_ce0 <= ap_const_logic_1;
        else 
            v332_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_1_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_1_ce0 <= ap_const_logic_1;
        else 
            v332_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_2_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_2_ce0 <= ap_const_logic_1;
        else 
            v332_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_3_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_3_ce0 <= ap_const_logic_1;
        else 
            v332_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_4_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_4_ce0 <= ap_const_logic_1;
        else 
            v332_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_5_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_5_ce0 <= ap_const_logic_1;
        else 
            v332_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_6_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_6_ce0 <= ap_const_logic_1;
        else 
            v332_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_7_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_7_ce0 <= ap_const_logic_1;
        else 
            v332_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_8_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_8_ce0 <= ap_const_logic_1;
        else 
            v332_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v332_9_address0 <= zext_ln440_1_fu_504_p1(18 - 1 downto 0);

    v332_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v332_9_ce0 <= ap_const_logic_1;
        else 
            v332_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_0_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_0_ce0 <= ap_const_logic_1;
        else 
            v361_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_10_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_10_ce0 <= ap_const_logic_1;
        else 
            v361_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_11_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_11_ce0 <= ap_const_logic_1;
        else 
            v361_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_1_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_1_ce0 <= ap_const_logic_1;
        else 
            v361_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_2_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_2_ce0 <= ap_const_logic_1;
        else 
            v361_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_3_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_3_ce0 <= ap_const_logic_1;
        else 
            v361_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_4_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_4_ce0 <= ap_const_logic_1;
        else 
            v361_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_5_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_5_ce0 <= ap_const_logic_1;
        else 
            v361_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_6_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_6_ce0 <= ap_const_logic_1;
        else 
            v361_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_7_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_7_ce0 <= ap_const_logic_1;
        else 
            v361_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_8_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_8_ce0 <= ap_const_logic_1;
        else 
            v361_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v361_9_address0 <= k4_cast_fu_478_p1(10 - 1 downto 0);

    v361_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v361_9_ce0 <= ap_const_logic_1;
        else 
            v361_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln440_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln440_fu_498_p2),64));
    zext_ln440_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k4_1),18));
end behav;
