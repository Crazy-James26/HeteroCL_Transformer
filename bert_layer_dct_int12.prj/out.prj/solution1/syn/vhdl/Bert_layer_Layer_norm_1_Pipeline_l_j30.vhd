-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Layer_norm_1_Pipeline_l_j30 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln625 : IN STD_LOGIC_VECTOR (13 downto 0);
    v345_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v345_ce0 : OUT STD_LOGIC;
    v345_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v569_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v569_ce0 : OUT STD_LOGIC;
    v569_we0 : OUT STD_LOGIC;
    v569_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v567_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v567_ce0 : OUT STD_LOGIC;
    v567_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v376 : IN STD_LOGIC_VECTOR (31 downto 0);
    v381 : IN STD_LOGIC_VECTOR (31 downto 0);
    v568_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v568_ce0 : OUT STD_LOGIC;
    v568_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_399_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_ce : OUT STD_LOGIC;
    grp_fu_415_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_415_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_ce : OUT STD_LOGIC;
    grp_fu_403_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_ce : OUT STD_LOGIC;
    grp_fu_407_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Layer_norm_1_Pipeline_l_j30 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln623_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j30_2_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal j30_2_reg_213_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j30_2_reg_213_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j30_2_reg_213_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j30_2_reg_213_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln625_2_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln625_2_reg_222_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v375_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal j30_cast_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j30_cast_reg_237_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v567_load_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal v377_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal v374_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v378_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal v382_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal v568_load_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal v383_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v384_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j30_fu_50 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln623_fu_154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j30_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln625_fu_160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln625_fu_164_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter31_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j30_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln623_fu_148_p2 = ap_const_lv1_0))) then 
                    j30_fu_50 <= add_ln623_fu_154_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j30_fu_50 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                j30_2_reg_213_pp0_iter2_reg <= j30_2_reg_213_pp0_iter1_reg;
                j30_2_reg_213_pp0_iter3_reg <= j30_2_reg_213_pp0_iter2_reg;
                j30_2_reg_213_pp0_iter4_reg <= j30_2_reg_213_pp0_iter3_reg;
                    j30_cast_reg_237(9 downto 0) <= j30_cast_fu_180_p1(9 downto 0);
                    j30_cast_reg_237_pp0_iter10_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter9_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter11_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter10_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter12_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter11_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter13_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter12_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter14_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter13_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter15_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter14_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter16_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter15_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter17_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter16_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter18_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter17_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter19_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter18_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter20_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter19_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter21_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter20_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter22_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter21_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter23_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter22_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter24_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter23_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter6_reg(9 downto 0) <= j30_cast_reg_237(9 downto 0);
                    j30_cast_reg_237_pp0_iter7_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter6_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter8_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter7_reg(9 downto 0);
                    j30_cast_reg_237_pp0_iter9_reg(9 downto 0) <= j30_cast_reg_237_pp0_iter8_reg(9 downto 0);
                v377_reg_252 <= grp_fu_399_p_dout0;
                v378_reg_262 <= grp_fu_403_p_dout0;
                v382_reg_272 <= grp_fu_407_p_dout0;
                v384_reg_287 <= grp_fu_415_p_dout0;
                v567_load_reg_247 <= v567_q0;
                v568_load_reg_277 <= v568_q0;
                    zext_ln625_2_reg_222_pp0_iter10_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter9_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter11_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter10_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter12_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter11_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter13_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter12_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter14_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter13_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter15_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter14_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter16_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter15_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter17_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter16_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter18_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter17_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter19_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter18_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter20_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter19_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter21_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter20_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter22_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter21_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter23_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter22_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter24_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter23_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter25_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter24_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter26_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter25_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter27_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter26_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter28_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter27_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter29_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter28_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter2_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter1_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter30_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter29_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter31_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter30_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter3_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter2_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter4_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter3_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter5_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter4_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter6_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter5_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter7_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter6_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter8_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter7_reg(13 downto 0);
                    zext_ln625_2_reg_222_pp0_iter9_reg(13 downto 0) <= zext_ln625_2_reg_222_pp0_iter8_reg(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                j30_2_reg_213 <= ap_sig_allocacmp_j30_2;
                j30_2_reg_213_pp0_iter1_reg <= j30_2_reg_213;
                v375_reg_232 <= v345_q0;
                    zext_ln625_2_reg_222_pp0_iter1_reg(13 downto 0) <= zext_ln625_2_reg_222(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln623_fu_148_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln625_2_reg_222(13 downto 0) <= zext_ln625_2_fu_170_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln625_2_reg_222(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter2_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter3_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter4_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter5_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter6_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter7_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter8_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter9_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter10_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter11_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter12_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter13_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter14_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter15_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter16_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter17_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter18_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter19_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter20_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter21_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter22_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter23_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter24_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter25_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter26_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter27_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter28_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter29_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter30_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln625_2_reg_222_pp0_iter31_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    j30_cast_reg_237(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter20_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter21_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter22_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter23_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j30_cast_reg_237_pp0_iter24_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln623_fu_154_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j30_2) + unsigned(ap_const_lv10_1));
    add_ln625_fu_164_p2 <= std_logic_vector(unsigned(sub_ln625) + unsigned(zext_ln625_fu_160_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln623_fu_148_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln623_fu_148_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter31_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter31_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j30_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j30_fu_50, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j30_2 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j30_2 <= j30_fu_50;
        end if; 
    end process;

    grp_fu_399_p_ce <= ap_const_logic_1;
    grp_fu_399_p_din0 <= v375_reg_232;
    grp_fu_399_p_din1 <= v376;
    grp_fu_399_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_403_p_ce <= ap_const_logic_1;
    grp_fu_403_p_din0 <= v374_fu_184_p1;
    grp_fu_403_p_din1 <= v377_reg_252;
    grp_fu_407_p_ce <= ap_const_logic_1;
    grp_fu_407_p_din0 <= v378_reg_262;
    grp_fu_407_p_din1 <= v381;
    grp_fu_415_p_ce <= ap_const_logic_1;
    grp_fu_415_p_din0 <= v382_reg_272;
    grp_fu_415_p_din1 <= v383_fu_188_p1;
    grp_fu_415_p_opcode <= ap_const_lv2_0;
    icmp_ln623_fu_148_p2 <= "1" when (ap_sig_allocacmp_j30_2 = ap_const_lv10_300) else "0";
    j30_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j30_2_reg_213_pp0_iter4_reg),64));
    v345_address0 <= zext_ln625_2_fu_170_p1(14 - 1 downto 0);

    v345_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v345_ce0 <= ap_const_logic_1;
        else 
            v345_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v374_fu_184_p1 <= v567_load_reg_247;
    v383_fu_188_p1 <= v568_load_reg_277;
    v567_address0 <= j30_cast_fu_180_p1(10 - 1 downto 0);

    v567_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v567_ce0 <= ap_const_logic_1;
        else 
            v567_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v568_address0 <= j30_cast_reg_237_pp0_iter24_reg(10 - 1 downto 0);

    v568_ce0_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v568_ce0 <= ap_const_logic_1;
        else 
            v568_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v569_address0 <= zext_ln625_2_reg_222_pp0_iter31_reg(14 - 1 downto 0);

    v569_ce0_assign_proc : process(ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            v569_ce0 <= ap_const_logic_1;
        else 
            v569_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v569_d0 <= v384_reg_287;

    v569_we0_assign_proc : process(ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            v569_we0 <= ap_const_logic_1;
        else 
            v569_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln625_2_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln625_fu_164_p2),64));
    zext_ln625_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j30_2),14));
end behav;
