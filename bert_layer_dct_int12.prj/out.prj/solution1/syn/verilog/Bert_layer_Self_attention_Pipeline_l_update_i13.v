// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_update_i13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp_sumRow_address0,
        inp_sumRow_ce0,
        inp_sumRow_q0,
        v254_0_address0,
        v254_0_ce0,
        v254_0_q0,
        v255_0_address0,
        v255_0_ce0,
        v255_0_we0,
        v255_0_d0,
        v254_1_address0,
        v254_1_ce0,
        v254_1_q0,
        v255_1_address0,
        v255_1_ce0,
        v255_1_we0,
        v255_1_d0,
        v254_2_address0,
        v254_2_ce0,
        v254_2_q0,
        v255_2_address0,
        v255_2_ce0,
        v255_2_we0,
        v255_2_d0,
        v254_3_address0,
        v254_3_ce0,
        v254_3_q0,
        v255_3_address0,
        v255_3_ce0,
        v255_3_we0,
        v255_3_d0,
        v254_4_address0,
        v254_4_ce0,
        v254_4_q0,
        v255_4_address0,
        v255_4_ce0,
        v255_4_we0,
        v255_4_d0,
        v254_5_address0,
        v254_5_ce0,
        v254_5_q0,
        v255_5_address0,
        v255_5_ce0,
        v255_5_we0,
        v255_5_d0,
        v254_6_address0,
        v254_6_ce0,
        v254_6_q0,
        v255_6_address0,
        v255_6_ce0,
        v255_6_we0,
        v255_6_d0,
        v254_7_address0,
        v254_7_ce0,
        v254_7_q0,
        v255_7_address0,
        v255_7_ce0,
        v255_7_we0,
        v255_7_d0,
        v254_8_address0,
        v254_8_ce0,
        v254_8_q0,
        v255_8_address0,
        v255_8_ce0,
        v255_8_we0,
        v255_8_d0,
        v254_9_address0,
        v254_9_ce0,
        v254_9_q0,
        v255_9_address0,
        v255_9_ce0,
        v255_9_we0,
        v255_9_d0,
        v254_10_address0,
        v254_10_ce0,
        v254_10_q0,
        v255_10_address0,
        v255_10_ce0,
        v255_10_we0,
        v255_10_d0,
        v254_11_address0,
        v254_11_ce0,
        v254_11_q0,
        v255_11_address0,
        v255_11_ce0,
        v255_11_we0,
        v255_11_d0,
        grp_fu_739_p_din0,
        grp_fu_739_p_din1,
        grp_fu_739_p_dout0,
        grp_fu_739_p_ce,
        grp_fu_743_p_din0,
        grp_fu_743_p_din1,
        grp_fu_743_p_dout0,
        grp_fu_743_p_ce,
        grp_fu_747_p_din0,
        grp_fu_747_p_din1,
        grp_fu_747_p_dout0,
        grp_fu_747_p_ce,
        grp_fu_751_p_din0,
        grp_fu_751_p_din1,
        grp_fu_751_p_dout0,
        grp_fu_751_p_ce,
        grp_fu_755_p_din0,
        grp_fu_755_p_din1,
        grp_fu_755_p_dout0,
        grp_fu_755_p_ce,
        grp_fu_759_p_din0,
        grp_fu_759_p_din1,
        grp_fu_759_p_dout0,
        grp_fu_759_p_ce,
        grp_fu_763_p_din0,
        grp_fu_763_p_din1,
        grp_fu_763_p_dout0,
        grp_fu_763_p_ce,
        grp_fu_767_p_din0,
        grp_fu_767_p_din1,
        grp_fu_767_p_dout0,
        grp_fu_767_p_ce,
        grp_fu_771_p_din0,
        grp_fu_771_p_din1,
        grp_fu_771_p_dout0,
        grp_fu_771_p_ce,
        grp_fu_775_p_din0,
        grp_fu_775_p_din1,
        grp_fu_775_p_dout0,
        grp_fu_775_p_ce,
        grp_fu_779_p_din0,
        grp_fu_779_p_din1,
        grp_fu_779_p_dout0,
        grp_fu_779_p_ce,
        grp_fu_783_p_din0,
        grp_fu_783_p_din1,
        grp_fu_783_p_dout0,
        grp_fu_783_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] inp_sumRow_address0;
output   inp_sumRow_ce0;
input  [31:0] inp_sumRow_q0;
output  [3:0] v254_0_address0;
output   v254_0_ce0;
input  [31:0] v254_0_q0;
output  [3:0] v255_0_address0;
output   v255_0_ce0;
output   v255_0_we0;
output  [31:0] v255_0_d0;
output  [3:0] v254_1_address0;
output   v254_1_ce0;
input  [31:0] v254_1_q0;
output  [3:0] v255_1_address0;
output   v255_1_ce0;
output   v255_1_we0;
output  [31:0] v255_1_d0;
output  [3:0] v254_2_address0;
output   v254_2_ce0;
input  [31:0] v254_2_q0;
output  [3:0] v255_2_address0;
output   v255_2_ce0;
output   v255_2_we0;
output  [31:0] v255_2_d0;
output  [3:0] v254_3_address0;
output   v254_3_ce0;
input  [31:0] v254_3_q0;
output  [3:0] v255_3_address0;
output   v255_3_ce0;
output   v255_3_we0;
output  [31:0] v255_3_d0;
output  [3:0] v254_4_address0;
output   v254_4_ce0;
input  [31:0] v254_4_q0;
output  [3:0] v255_4_address0;
output   v255_4_ce0;
output   v255_4_we0;
output  [31:0] v255_4_d0;
output  [3:0] v254_5_address0;
output   v254_5_ce0;
input  [31:0] v254_5_q0;
output  [3:0] v255_5_address0;
output   v255_5_ce0;
output   v255_5_we0;
output  [31:0] v255_5_d0;
output  [3:0] v254_6_address0;
output   v254_6_ce0;
input  [31:0] v254_6_q0;
output  [3:0] v255_6_address0;
output   v255_6_ce0;
output   v255_6_we0;
output  [31:0] v255_6_d0;
output  [3:0] v254_7_address0;
output   v254_7_ce0;
input  [31:0] v254_7_q0;
output  [3:0] v255_7_address0;
output   v255_7_ce0;
output   v255_7_we0;
output  [31:0] v255_7_d0;
output  [3:0] v254_8_address0;
output   v254_8_ce0;
input  [31:0] v254_8_q0;
output  [3:0] v255_8_address0;
output   v255_8_ce0;
output   v255_8_we0;
output  [31:0] v255_8_d0;
output  [3:0] v254_9_address0;
output   v254_9_ce0;
input  [31:0] v254_9_q0;
output  [3:0] v255_9_address0;
output   v255_9_ce0;
output   v255_9_we0;
output  [31:0] v255_9_d0;
output  [3:0] v254_10_address0;
output   v254_10_ce0;
input  [31:0] v254_10_q0;
output  [3:0] v255_10_address0;
output   v255_10_ce0;
output   v255_10_we0;
output  [31:0] v255_10_d0;
output  [3:0] v254_11_address0;
output   v254_11_ce0;
input  [31:0] v254_11_q0;
output  [3:0] v255_11_address0;
output   v255_11_ce0;
output   v255_11_we0;
output  [31:0] v255_11_d0;
output  [31:0] grp_fu_739_p_din0;
output  [31:0] grp_fu_739_p_din1;
input  [31:0] grp_fu_739_p_dout0;
output   grp_fu_739_p_ce;
output  [31:0] grp_fu_743_p_din0;
output  [31:0] grp_fu_743_p_din1;
input  [31:0] grp_fu_743_p_dout0;
output   grp_fu_743_p_ce;
output  [31:0] grp_fu_747_p_din0;
output  [31:0] grp_fu_747_p_din1;
input  [31:0] grp_fu_747_p_dout0;
output   grp_fu_747_p_ce;
output  [31:0] grp_fu_751_p_din0;
output  [31:0] grp_fu_751_p_din1;
input  [31:0] grp_fu_751_p_dout0;
output   grp_fu_751_p_ce;
output  [31:0] grp_fu_755_p_din0;
output  [31:0] grp_fu_755_p_din1;
input  [31:0] grp_fu_755_p_dout0;
output   grp_fu_755_p_ce;
output  [31:0] grp_fu_759_p_din0;
output  [31:0] grp_fu_759_p_din1;
input  [31:0] grp_fu_759_p_dout0;
output   grp_fu_759_p_ce;
output  [31:0] grp_fu_763_p_din0;
output  [31:0] grp_fu_763_p_din1;
input  [31:0] grp_fu_763_p_dout0;
output   grp_fu_763_p_ce;
output  [31:0] grp_fu_767_p_din0;
output  [31:0] grp_fu_767_p_din1;
input  [31:0] grp_fu_767_p_dout0;
output   grp_fu_767_p_ce;
output  [31:0] grp_fu_771_p_din0;
output  [31:0] grp_fu_771_p_din1;
input  [31:0] grp_fu_771_p_dout0;
output   grp_fu_771_p_ce;
output  [31:0] grp_fu_775_p_din0;
output  [31:0] grp_fu_775_p_din1;
input  [31:0] grp_fu_775_p_dout0;
output   grp_fu_775_p_ce;
output  [31:0] grp_fu_779_p_din0;
output  [31:0] grp_fu_779_p_din1;
input  [31:0] grp_fu_779_p_dout0;
output   grp_fu_779_p_ce;
output  [31:0] grp_fu_783_p_din0;
output  [31:0] grp_fu_783_p_din1;
input  [31:0] grp_fu_783_p_dout0;
output   grp_fu_783_p_ce;

reg ap_idle;
reg inp_sumRow_ce0;
reg v254_0_ce0;
reg v255_0_ce0;
reg v255_0_we0;
reg v254_1_ce0;
reg v255_1_ce0;
reg v255_1_we0;
reg v254_2_ce0;
reg v255_2_ce0;
reg v255_2_we0;
reg v254_3_ce0;
reg v255_3_ce0;
reg v255_3_we0;
reg v254_4_ce0;
reg v255_4_ce0;
reg v255_4_we0;
reg v254_5_ce0;
reg v255_5_ce0;
reg v255_5_we0;
reg v254_6_ce0;
reg v255_6_ce0;
reg v255_6_we0;
reg v254_7_ce0;
reg v255_7_ce0;
reg v255_7_we0;
reg v254_8_ce0;
reg v255_8_ce0;
reg v255_8_we0;
reg v254_9_ce0;
reg v255_9_ce0;
reg v255_9_we0;
reg v254_10_ce0;
reg v255_10_ce0;
reg v255_10_we0;
reg v254_11_ce0;
reg v255_11_ce0;
reg v255_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln278_fu_461_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i13_cast_fu_473_p1;
reg   [63:0] i13_cast_reg_506;
reg   [63:0] i13_cast_reg_506_pp0_iter1_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter2_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter3_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter4_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter5_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter6_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter7_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter8_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter9_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter10_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter11_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter12_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter13_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter14_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter15_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter16_reg;
reg   [63:0] i13_cast_reg_506_pp0_iter17_reg;
reg   [31:0] v165_reg_587;
reg   [31:0] v254_0_load_reg_603;
reg   [31:0] v254_1_load_reg_608;
reg   [31:0] v254_2_load_reg_613;
reg   [31:0] v254_3_load_reg_618;
reg   [31:0] v254_4_load_reg_623;
reg   [31:0] v254_5_load_reg_628;
reg   [31:0] v254_6_load_reg_633;
reg   [31:0] v254_7_load_reg_638;
reg   [31:0] v254_8_load_reg_643;
reg   [31:0] v254_9_load_reg_648;
reg   [31:0] v254_10_load_reg_653;
reg   [31:0] v254_11_load_reg_658;
reg   [31:0] v2_reg_663;
reg   [31:0] v166_1_reg_668;
reg   [31:0] v166_2_reg_673;
reg   [31:0] v166_3_reg_678;
reg   [31:0] v166_4_reg_683;
reg   [31:0] v166_5_reg_688;
reg   [31:0] v166_6_reg_693;
reg   [31:0] v166_7_reg_698;
reg   [31:0] v166_8_reg_703;
reg   [31:0] v166_9_reg_708;
reg   [31:0] v166_s_reg_713;
reg   [31:0] v166_10_reg_718;
wire    ap_block_pp0_stage0;
reg   [3:0] i13_fu_76;
wire   [3:0] add_ln278_fu_467_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i13_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln278_fu_461_p2 == 1'd0))) begin
            i13_fu_76 <= add_ln278_fu_467_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i13_fu_76 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i13_cast_reg_506_pp0_iter10_reg[3 : 0] <= i13_cast_reg_506_pp0_iter9_reg[3 : 0];
        i13_cast_reg_506_pp0_iter11_reg[3 : 0] <= i13_cast_reg_506_pp0_iter10_reg[3 : 0];
        i13_cast_reg_506_pp0_iter12_reg[3 : 0] <= i13_cast_reg_506_pp0_iter11_reg[3 : 0];
        i13_cast_reg_506_pp0_iter13_reg[3 : 0] <= i13_cast_reg_506_pp0_iter12_reg[3 : 0];
        i13_cast_reg_506_pp0_iter14_reg[3 : 0] <= i13_cast_reg_506_pp0_iter13_reg[3 : 0];
        i13_cast_reg_506_pp0_iter15_reg[3 : 0] <= i13_cast_reg_506_pp0_iter14_reg[3 : 0];
        i13_cast_reg_506_pp0_iter16_reg[3 : 0] <= i13_cast_reg_506_pp0_iter15_reg[3 : 0];
        i13_cast_reg_506_pp0_iter17_reg[3 : 0] <= i13_cast_reg_506_pp0_iter16_reg[3 : 0];
        i13_cast_reg_506_pp0_iter2_reg[3 : 0] <= i13_cast_reg_506_pp0_iter1_reg[3 : 0];
        i13_cast_reg_506_pp0_iter3_reg[3 : 0] <= i13_cast_reg_506_pp0_iter2_reg[3 : 0];
        i13_cast_reg_506_pp0_iter4_reg[3 : 0] <= i13_cast_reg_506_pp0_iter3_reg[3 : 0];
        i13_cast_reg_506_pp0_iter5_reg[3 : 0] <= i13_cast_reg_506_pp0_iter4_reg[3 : 0];
        i13_cast_reg_506_pp0_iter6_reg[3 : 0] <= i13_cast_reg_506_pp0_iter5_reg[3 : 0];
        i13_cast_reg_506_pp0_iter7_reg[3 : 0] <= i13_cast_reg_506_pp0_iter6_reg[3 : 0];
        i13_cast_reg_506_pp0_iter8_reg[3 : 0] <= i13_cast_reg_506_pp0_iter7_reg[3 : 0];
        i13_cast_reg_506_pp0_iter9_reg[3 : 0] <= i13_cast_reg_506_pp0_iter8_reg[3 : 0];
        v166_10_reg_718 <= grp_fu_783_p_dout0;
        v166_1_reg_668 <= grp_fu_743_p_dout0;
        v166_2_reg_673 <= grp_fu_747_p_dout0;
        v166_3_reg_678 <= grp_fu_751_p_dout0;
        v166_4_reg_683 <= grp_fu_755_p_dout0;
        v166_5_reg_688 <= grp_fu_759_p_dout0;
        v166_6_reg_693 <= grp_fu_763_p_dout0;
        v166_7_reg_698 <= grp_fu_767_p_dout0;
        v166_8_reg_703 <= grp_fu_771_p_dout0;
        v166_9_reg_708 <= grp_fu_775_p_dout0;
        v166_s_reg_713 <= grp_fu_779_p_dout0;
        v2_reg_663 <= grp_fu_739_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i13_cast_reg_506_pp0_iter1_reg[3 : 0] <= i13_cast_reg_506[3 : 0];
        v165_reg_587 <= inp_sumRow_q0;
        v254_0_load_reg_603 <= v254_0_q0;
        v254_10_load_reg_653 <= v254_10_q0;
        v254_11_load_reg_658 <= v254_11_q0;
        v254_1_load_reg_608 <= v254_1_q0;
        v254_2_load_reg_613 <= v254_2_q0;
        v254_3_load_reg_618 <= v254_3_q0;
        v254_4_load_reg_623 <= v254_4_q0;
        v254_5_load_reg_628 <= v254_5_q0;
        v254_6_load_reg_633 <= v254_6_q0;
        v254_7_load_reg_638 <= v254_7_q0;
        v254_8_load_reg_643 <= v254_8_q0;
        v254_9_load_reg_648 <= v254_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln278_fu_461_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i13_cast_reg_506[3 : 0] <= i13_cast_fu_473_p1[3 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln278_fu_461_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i13_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i13_1 = i13_fu_76;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inp_sumRow_ce0 = 1'b1;
    end else begin
        inp_sumRow_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_0_ce0 = 1'b1;
    end else begin
        v254_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_10_ce0 = 1'b1;
    end else begin
        v254_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_11_ce0 = 1'b1;
    end else begin
        v254_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_1_ce0 = 1'b1;
    end else begin
        v254_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_2_ce0 = 1'b1;
    end else begin
        v254_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_3_ce0 = 1'b1;
    end else begin
        v254_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_4_ce0 = 1'b1;
    end else begin
        v254_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_5_ce0 = 1'b1;
    end else begin
        v254_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_6_ce0 = 1'b1;
    end else begin
        v254_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_7_ce0 = 1'b1;
    end else begin
        v254_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_8_ce0 = 1'b1;
    end else begin
        v254_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v254_9_ce0 = 1'b1;
    end else begin
        v254_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_0_ce0 = 1'b1;
    end else begin
        v255_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_0_we0 = 1'b1;
    end else begin
        v255_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_10_ce0 = 1'b1;
    end else begin
        v255_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_10_we0 = 1'b1;
    end else begin
        v255_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_11_ce0 = 1'b1;
    end else begin
        v255_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_11_we0 = 1'b1;
    end else begin
        v255_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_1_ce0 = 1'b1;
    end else begin
        v255_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_1_we0 = 1'b1;
    end else begin
        v255_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_2_ce0 = 1'b1;
    end else begin
        v255_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_2_we0 = 1'b1;
    end else begin
        v255_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_3_ce0 = 1'b1;
    end else begin
        v255_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_3_we0 = 1'b1;
    end else begin
        v255_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_4_ce0 = 1'b1;
    end else begin
        v255_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_4_we0 = 1'b1;
    end else begin
        v255_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_5_ce0 = 1'b1;
    end else begin
        v255_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_5_we0 = 1'b1;
    end else begin
        v255_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_6_ce0 = 1'b1;
    end else begin
        v255_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_6_we0 = 1'b1;
    end else begin
        v255_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_7_ce0 = 1'b1;
    end else begin
        v255_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_7_we0 = 1'b1;
    end else begin
        v255_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_8_ce0 = 1'b1;
    end else begin
        v255_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_8_we0 = 1'b1;
    end else begin
        v255_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_9_ce0 = 1'b1;
    end else begin
        v255_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        v255_9_we0 = 1'b1;
    end else begin
        v255_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln278_fu_467_p2 = (ap_sig_allocacmp_i13_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_739_p_ce = 1'b1;

assign grp_fu_739_p_din0 = v254_0_load_reg_603;

assign grp_fu_739_p_din1 = v165_reg_587;

assign grp_fu_743_p_ce = 1'b1;

assign grp_fu_743_p_din0 = v254_1_load_reg_608;

assign grp_fu_743_p_din1 = v165_reg_587;

assign grp_fu_747_p_ce = 1'b1;

assign grp_fu_747_p_din0 = v254_2_load_reg_613;

assign grp_fu_747_p_din1 = v165_reg_587;

assign grp_fu_751_p_ce = 1'b1;

assign grp_fu_751_p_din0 = v254_3_load_reg_618;

assign grp_fu_751_p_din1 = v165_reg_587;

assign grp_fu_755_p_ce = 1'b1;

assign grp_fu_755_p_din0 = v254_4_load_reg_623;

assign grp_fu_755_p_din1 = v165_reg_587;

assign grp_fu_759_p_ce = 1'b1;

assign grp_fu_759_p_din0 = v254_5_load_reg_628;

assign grp_fu_759_p_din1 = v165_reg_587;

assign grp_fu_763_p_ce = 1'b1;

assign grp_fu_763_p_din0 = v254_6_load_reg_633;

assign grp_fu_763_p_din1 = v165_reg_587;

assign grp_fu_767_p_ce = 1'b1;

assign grp_fu_767_p_din0 = v254_7_load_reg_638;

assign grp_fu_767_p_din1 = v165_reg_587;

assign grp_fu_771_p_ce = 1'b1;

assign grp_fu_771_p_din0 = v254_8_load_reg_643;

assign grp_fu_771_p_din1 = v165_reg_587;

assign grp_fu_775_p_ce = 1'b1;

assign grp_fu_775_p_din0 = v254_9_load_reg_648;

assign grp_fu_775_p_din1 = v165_reg_587;

assign grp_fu_779_p_ce = 1'b1;

assign grp_fu_779_p_din0 = v254_10_load_reg_653;

assign grp_fu_779_p_din1 = v165_reg_587;

assign grp_fu_783_p_ce = 1'b1;

assign grp_fu_783_p_din0 = v254_11_load_reg_658;

assign grp_fu_783_p_din1 = v165_reg_587;

assign i13_cast_fu_473_p1 = ap_sig_allocacmp_i13_1;

assign icmp_ln278_fu_461_p2 = ((ap_sig_allocacmp_i13_1 == 4'd12) ? 1'b1 : 1'b0);

assign inp_sumRow_address0 = i13_cast_fu_473_p1;

assign v254_0_address0 = i13_cast_fu_473_p1;

assign v254_10_address0 = i13_cast_fu_473_p1;

assign v254_11_address0 = i13_cast_fu_473_p1;

assign v254_1_address0 = i13_cast_fu_473_p1;

assign v254_2_address0 = i13_cast_fu_473_p1;

assign v254_3_address0 = i13_cast_fu_473_p1;

assign v254_4_address0 = i13_cast_fu_473_p1;

assign v254_5_address0 = i13_cast_fu_473_p1;

assign v254_6_address0 = i13_cast_fu_473_p1;

assign v254_7_address0 = i13_cast_fu_473_p1;

assign v254_8_address0 = i13_cast_fu_473_p1;

assign v254_9_address0 = i13_cast_fu_473_p1;

assign v255_0_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_0_d0 = v2_reg_663;

assign v255_10_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_10_d0 = v166_s_reg_713;

assign v255_11_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_11_d0 = v166_10_reg_718;

assign v255_1_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_1_d0 = v166_1_reg_668;

assign v255_2_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_2_d0 = v166_2_reg_673;

assign v255_3_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_3_d0 = v166_3_reg_678;

assign v255_4_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_4_d0 = v166_4_reg_683;

assign v255_5_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_5_d0 = v166_5_reg_688;

assign v255_6_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_6_d0 = v166_6_reg_693;

assign v255_7_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_7_d0 = v166_7_reg_698;

assign v255_8_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_8_d0 = v166_8_reg_703;

assign v255_9_address0 = i13_cast_reg_506_pp0_iter17_reg;

assign v255_9_d0 = v166_9_reg_708;

always @ (posedge ap_clk) begin
    i13_cast_reg_506[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter16_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i13_cast_reg_506_pp0_iter17_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_Self_attention_Pipeline_l_update_i13
