// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i28_l_j28 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v552_address0,
        v552_ce0,
        v552_q0,
        v574_address0,
        v574_ce0,
        v574_q0,
        v575_address0,
        v575_ce0,
        v575_we0,
        v575_d0,
        grp_fu_305_p_din0,
        grp_fu_305_p_din1,
        grp_fu_305_p_opcode,
        grp_fu_305_p_dout0,
        grp_fu_305_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v552_address0;
output   v552_ce0;
input  [31:0] v552_q0;
output  [13:0] v574_address0;
output   v574_ce0;
input  [31:0] v574_q0;
output  [13:0] v575_address0;
output   v575_ce0;
output   v575_we0;
output  [31:0] v575_d0;
output  [31:0] grp_fu_305_p_din0;
output  [31:0] grp_fu_305_p_din1;
output  [0:0] grp_fu_305_p_opcode;
input  [31:0] grp_fu_305_p_dout0;
output   grp_fu_305_p_ce;

reg ap_idle;
reg v552_ce0;
reg v574_ce0;
reg v575_ce0;
reg v575_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln571_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] add_ln574_fu_205_p2;
reg   [13:0] add_ln574_reg_266;
wire   [63:0] zext_ln574_4_fu_232_p1;
reg   [63:0] zext_ln574_4_reg_271;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter2_reg;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter3_reg;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter4_reg;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter5_reg;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter6_reg;
reg   [63:0] zext_ln574_4_reg_271_pp0_iter7_reg;
reg   [31:0] v342_reg_286;
reg   [31:0] v552_load_reg_291;
wire   [31:0] v343_fu_237_p1;
reg   [31:0] v344_reg_301;
wire    ap_block_pp0_stage0;
reg   [9:0] j28_fu_56;
wire   [9:0] add_ln572_fu_211_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j28_load;
reg   [3:0] i28_fu_60;
wire   [3:0] select_ln571_1_fu_167_p3;
reg   [3:0] ap_sig_allocacmp_i28_load;
reg   [13:0] indvar_flatten_fu_64;
wire   [13:0] add_ln571_2_fu_135_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln572_fu_153_p2;
wire   [3:0] add_ln571_fu_147_p2;
wire   [11:0] tmp_142_fu_183_p3;
wire   [13:0] tmp_s_fu_175_p3;
wire   [13:0] zext_ln574_fu_191_p1;
wire   [9:0] select_ln571_fu_159_p3;
wire   [13:0] sub_ln574_fu_195_p2;
wire   [13:0] zext_ln574_3_fu_201_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln571_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i28_fu_60 <= select_ln571_1_fu_167_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i28_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln571_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln571_2_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln571_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j28_fu_56 <= add_ln572_fu_211_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j28_fu_56 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_fu_129_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln574_reg_266 <= add_ln574_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln574_4_reg_271[13 : 0] <= zext_ln574_4_fu_232_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        v342_reg_286 <= v574_q0;
        v344_reg_301 <= grp_fu_305_p_dout0;
        v552_load_reg_291 <= v552_q0;
        zext_ln574_4_reg_271_pp0_iter2_reg[13 : 0] <= zext_ln574_4_reg_271[13 : 0];
        zext_ln574_4_reg_271_pp0_iter3_reg[13 : 0] <= zext_ln574_4_reg_271_pp0_iter2_reg[13 : 0];
        zext_ln574_4_reg_271_pp0_iter4_reg[13 : 0] <= zext_ln574_4_reg_271_pp0_iter3_reg[13 : 0];
        zext_ln574_4_reg_271_pp0_iter5_reg[13 : 0] <= zext_ln574_4_reg_271_pp0_iter4_reg[13 : 0];
        zext_ln574_4_reg_271_pp0_iter6_reg[13 : 0] <= zext_ln574_4_reg_271_pp0_iter5_reg[13 : 0];
        zext_ln574_4_reg_271_pp0_iter7_reg[13 : 0] <= zext_ln574_4_reg_271_pp0_iter6_reg[13 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln571_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i28_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i28_load = i28_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j28_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j28_load = j28_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v552_ce0 = 1'b1;
    end else begin
        v552_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v574_ce0 = 1'b1;
    end else begin
        v574_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v575_ce0 = 1'b1;
    end else begin
        v575_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v575_we0 = 1'b1;
    end else begin
        v575_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln571_2_fu_135_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln571_fu_147_p2 = (ap_sig_allocacmp_i28_load + 4'd1);

assign add_ln572_fu_211_p2 = (select_ln571_fu_159_p3 + 10'd1);

assign add_ln574_fu_205_p2 = (sub_ln574_fu_195_p2 + zext_ln574_3_fu_201_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_305_p_ce = 1'b1;

assign grp_fu_305_p_din0 = v342_reg_286;

assign grp_fu_305_p_din1 = v343_fu_237_p1;

assign grp_fu_305_p_opcode = 2'd0;

assign icmp_ln571_fu_129_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln572_fu_153_p2 = ((ap_sig_allocacmp_j28_load == 10'd768) ? 1'b1 : 1'b0);

assign select_ln571_1_fu_167_p3 = ((icmp_ln572_fu_153_p2[0:0] == 1'b1) ? add_ln571_fu_147_p2 : ap_sig_allocacmp_i28_load);

assign select_ln571_fu_159_p3 = ((icmp_ln572_fu_153_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j28_load);

assign sub_ln574_fu_195_p2 = (tmp_s_fu_175_p3 - zext_ln574_fu_191_p1);

assign tmp_142_fu_183_p3 = {{select_ln571_1_fu_167_p3}, {8'd0}};

assign tmp_s_fu_175_p3 = {{select_ln571_1_fu_167_p3}, {10'd0}};

assign v343_fu_237_p1 = v552_load_reg_291;

assign v552_address0 = zext_ln574_4_fu_232_p1;

assign v574_address0 = zext_ln574_4_fu_232_p1;

assign v575_address0 = zext_ln574_4_reg_271_pp0_iter7_reg;

assign v575_d0 = v344_reg_301;

assign zext_ln574_3_fu_201_p1 = select_ln571_fu_159_p3;

assign zext_ln574_4_fu_232_p1 = add_ln574_reg_266;

assign zext_ln574_fu_191_p1 = tmp_142_fu_183_p3;

always @ (posedge ap_clk) begin
    zext_ln574_4_reg_271[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter2_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter3_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter4_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter5_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter6_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln574_4_reg_271_pp0_iter7_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i28_l_j28
