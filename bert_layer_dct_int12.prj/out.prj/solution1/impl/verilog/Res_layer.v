// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Res_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v337_address0,
        v337_ce0,
        v337_q0,
        v338_address0,
        v338_ce0,
        v338_q0,
        v339_address0,
        v339_ce0,
        v339_we0,
        v339_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v337_address0;
output   v337_ce0;
input  [31:0] v337_q0;
output  [13:0] v338_address0;
output   v338_ce0;
input  [31:0] v338_q0;
output  [13:0] v339_address0;
output   v339_ce0;
output   v339_we0;
output  [31:0] v339_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v337_ce0;
reg v338_ce0;
reg v339_ce0;
reg v339_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i28_fu_113_p2;
reg   [3:0] i28_reg_179;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln573_fu_143_p2;
reg   [14:0] sub_ln573_reg_184;
wire   [0:0] icmp_ln571_fu_107_p2;
wire   [9:0] j28_fu_155_p2;
reg   [9:0] j28_reg_192;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln573_fu_170_p1;
reg  signed [63:0] sext_ln573_reg_197;
wire   [0:0] icmp_ln572_fu_149_p2;
reg   [31:0] v342_reg_212;
wire    ap_CS_fsm_state4;
reg   [31:0] v343_reg_217;
wire   [31:0] grp_fu_103_p2;
reg   [31:0] v344_reg_222;
wire    ap_CS_fsm_state9;
reg   [3:0] i28_0_reg_81;
reg   [9:0] j28_0_reg_92;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_s_fu_119_p3;
wire   [11:0] tmp_25_fu_131_p3;
wire   [14:0] zext_ln573_fu_127_p1;
wire   [14:0] zext_ln573_1_fu_139_p1;
wire   [14:0] zext_ln573_2_fu_161_p1;
wire   [14:0] add_ln573_fu_165_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

Bert_layer_fadd_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3g8j_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v342_reg_212),
    .din1(v343_reg_217),
    .ce(1'b1),
    .dout(grp_fu_103_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln572_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i28_0_reg_81 <= i28_reg_179;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i28_0_reg_81 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j28_0_reg_92 <= j28_reg_192;
    end else if (((icmp_ln571_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j28_0_reg_92 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i28_reg_179 <= i28_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j28_reg_192 <= j28_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln572_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln573_reg_197 <= sext_ln573_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln573_reg_184[14 : 8] <= sub_ln573_fu_143_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v342_reg_212 <= v337_q0;
        v343_reg_217 <= v338_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v344_reg_222 <= grp_fu_103_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln571_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln571_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v337_ce0 = 1'b1;
    end else begin
        v337_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v338_ce0 = 1'b1;
    end else begin
        v338_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v339_ce0 = 1'b1;
    end else begin
        v339_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v339_we0 = 1'b1;
    end else begin
        v339_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln571_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln572_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln573_fu_165_p2 = (sub_ln573_reg_184 + zext_ln573_2_fu_161_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i28_fu_113_p2 = (i28_0_reg_81 + 4'd1);

assign icmp_ln571_fu_107_p2 = ((i28_0_reg_81 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln572_fu_149_p2 = ((j28_0_reg_92 == 10'd768) ? 1'b1 : 1'b0);

assign j28_fu_155_p2 = (j28_0_reg_92 + 10'd1);

assign sext_ln573_fu_170_p1 = $signed(add_ln573_fu_165_p2);

assign sub_ln573_fu_143_p2 = (zext_ln573_fu_127_p1 - zext_ln573_1_fu_139_p1);

assign tmp_25_fu_131_p3 = {{i28_0_reg_81}, {8'd0}};

assign tmp_s_fu_119_p3 = {{i28_0_reg_81}, {10'd0}};

assign v337_address0 = sext_ln573_fu_170_p1;

assign v338_address0 = sext_ln573_fu_170_p1;

assign v339_address0 = sext_ln573_reg_197;

assign v339_d0 = v344_reg_222;

assign zext_ln573_1_fu_139_p1 = tmp_25_fu_131_p3;

assign zext_ln573_2_fu_161_p1 = j28_0_reg_92;

assign zext_ln573_fu_127_p1 = tmp_s_fu_119_p3;

always @ (posedge ap_clk) begin
    sub_ln573_reg_184[7:0] <= 8'b00000000;
end

endmodule //Res_layer
