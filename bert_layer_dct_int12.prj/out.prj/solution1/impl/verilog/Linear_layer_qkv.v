// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Linear_layer_qkv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0
);

parameter    ap_ST_fsm_state1 = 118'd1;
parameter    ap_ST_fsm_state2 = 118'd2;
parameter    ap_ST_fsm_state3 = 118'd4;
parameter    ap_ST_fsm_state4 = 118'd8;
parameter    ap_ST_fsm_state5 = 118'd16;
parameter    ap_ST_fsm_state6 = 118'd32;
parameter    ap_ST_fsm_state7 = 118'd64;
parameter    ap_ST_fsm_state8 = 118'd128;
parameter    ap_ST_fsm_state9 = 118'd256;
parameter    ap_ST_fsm_state10 = 118'd512;
parameter    ap_ST_fsm_state11 = 118'd1024;
parameter    ap_ST_fsm_state12 = 118'd2048;
parameter    ap_ST_fsm_state13 = 118'd4096;
parameter    ap_ST_fsm_state14 = 118'd8192;
parameter    ap_ST_fsm_state15 = 118'd16384;
parameter    ap_ST_fsm_state16 = 118'd32768;
parameter    ap_ST_fsm_state17 = 118'd65536;
parameter    ap_ST_fsm_state18 = 118'd131072;
parameter    ap_ST_fsm_state19 = 118'd262144;
parameter    ap_ST_fsm_state20 = 118'd524288;
parameter    ap_ST_fsm_state21 = 118'd1048576;
parameter    ap_ST_fsm_state22 = 118'd2097152;
parameter    ap_ST_fsm_state23 = 118'd4194304;
parameter    ap_ST_fsm_state24 = 118'd8388608;
parameter    ap_ST_fsm_state25 = 118'd16777216;
parameter    ap_ST_fsm_state26 = 118'd33554432;
parameter    ap_ST_fsm_state27 = 118'd67108864;
parameter    ap_ST_fsm_state28 = 118'd134217728;
parameter    ap_ST_fsm_state29 = 118'd268435456;
parameter    ap_ST_fsm_state30 = 118'd536870912;
parameter    ap_ST_fsm_state31 = 118'd1073741824;
parameter    ap_ST_fsm_state32 = 118'd2147483648;
parameter    ap_ST_fsm_state33 = 118'd4294967296;
parameter    ap_ST_fsm_state34 = 118'd8589934592;
parameter    ap_ST_fsm_state35 = 118'd17179869184;
parameter    ap_ST_fsm_state36 = 118'd34359738368;
parameter    ap_ST_fsm_state37 = 118'd68719476736;
parameter    ap_ST_fsm_state38 = 118'd137438953472;
parameter    ap_ST_fsm_state39 = 118'd274877906944;
parameter    ap_ST_fsm_state40 = 118'd549755813888;
parameter    ap_ST_fsm_state41 = 118'd1099511627776;
parameter    ap_ST_fsm_state42 = 118'd2199023255552;
parameter    ap_ST_fsm_state43 = 118'd4398046511104;
parameter    ap_ST_fsm_state44 = 118'd8796093022208;
parameter    ap_ST_fsm_state45 = 118'd17592186044416;
parameter    ap_ST_fsm_state46 = 118'd35184372088832;
parameter    ap_ST_fsm_state47 = 118'd70368744177664;
parameter    ap_ST_fsm_state48 = 118'd140737488355328;
parameter    ap_ST_fsm_state49 = 118'd281474976710656;
parameter    ap_ST_fsm_state50 = 118'd562949953421312;
parameter    ap_ST_fsm_state51 = 118'd1125899906842624;
parameter    ap_ST_fsm_state52 = 118'd2251799813685248;
parameter    ap_ST_fsm_state53 = 118'd4503599627370496;
parameter    ap_ST_fsm_state54 = 118'd9007199254740992;
parameter    ap_ST_fsm_state55 = 118'd18014398509481984;
parameter    ap_ST_fsm_state56 = 118'd36028797018963968;
parameter    ap_ST_fsm_state57 = 118'd72057594037927936;
parameter    ap_ST_fsm_state58 = 118'd144115188075855872;
parameter    ap_ST_fsm_state59 = 118'd288230376151711744;
parameter    ap_ST_fsm_state60 = 118'd576460752303423488;
parameter    ap_ST_fsm_state61 = 118'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 118'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 118'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 118'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 118'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 118'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 118'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 118'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 118'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 118'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 118'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 118'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 118'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 118'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 118'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 118'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 118'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 118'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 118'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 118'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 118'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 118'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 118'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 118'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 118'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 118'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 118'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 118'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 118'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 118'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 118'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 118'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 118'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 118'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 118'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 118'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 118'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 118'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 118'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 118'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 118'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 118'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 118'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 118'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 118'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 118'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 118'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 118'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 118'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 118'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 118'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 118'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 118'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 118'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 118'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 118'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 118'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 118'd166153499473114484112975882535043072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [9:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] v0_address0;
reg v0_ce0;
reg[19:0] v1_address0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v3_we0;

(* fsm_encoding = "none" *) reg   [117:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_551;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
wire   [31:0] max_inp_q0;
reg   [31:0] reg_559;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state80;
reg   [31:0] reg_566;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state50;
wire   [31:0] max_W_q0;
reg   [31:0] reg_574;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state92;
wire   [31:0] grp_fu_529_p2;
reg   [31:0] reg_581;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state96;
wire   [31:0] grp_fu_534_p2;
reg   [31:0] reg_587;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state112;
wire   [31:0] q_outp_q0;
reg   [31:0] reg_592;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state82;
wire   [3:0] v5_fu_603_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] v7_fu_620_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] v11_fu_637_p2;
reg   [3:0] v11_reg_2040;
wire    ap_CS_fsm_state4;
wire   [14:0] sub_ln35_fu_667_p2;
reg   [14:0] sub_ln35_reg_2045;
wire   [0:0] icmp_ln33_fu_631_p2;
wire   [9:0] v12_fu_679_p2;
wire    ap_CS_fsm_state5;
wire   [3:0] i_fu_705_p2;
reg   [3:0] i_reg_2061;
wire    ap_CS_fsm_state6;
wire   [14:0] sub_ln40_fu_740_p2;
reg   [14:0] sub_ln40_reg_2066;
wire   [0:0] icmp_ln38_fu_699_p2;
reg   [3:0] max_inp_addr_1_reg_2071;
wire   [9:0] j_fu_752_p2;
reg   [9:0] j_reg_2079;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln39_fu_746_p2;
wire   [0:0] icmp_ln41_1_fu_796_p2;
reg   [0:0] icmp_ln41_1_reg_2089;
wire   [0:0] and_ln41_fu_808_p2;
reg   [0:0] and_ln41_reg_2094;
wire   [31:0] v23_fu_820_p1;
reg   [31:0] v23_reg_2098;
wire   [0:0] icmp_ln54_fu_853_p2;
reg   [0:0] icmp_ln54_reg_2104;
wire   [0:0] icmp_ln54_1_fu_859_p2;
reg   [0:0] icmp_ln54_1_reg_2109;
wire   [0:0] icmp_ln54_2_fu_865_p2;
reg   [0:0] icmp_ln54_2_reg_2114;
wire   [0:0] icmp_ln45_fu_889_p2;
reg   [0:0] icmp_ln45_reg_2119;
wire   [0:0] icmp_ln45_1_fu_895_p2;
reg   [0:0] icmp_ln45_1_reg_2124;
wire   [9:0] i1_fu_937_p2;
reg   [9:0] i1_reg_2138;
wire    ap_CS_fsm_state11;
wire   [20:0] sub_ln65_fu_972_p2;
reg   [20:0] sub_ln65_reg_2143;
wire   [0:0] icmp_ln63_fu_931_p2;
reg   [9:0] max_W_addr_1_reg_2148;
wire   [9:0] j1_fu_984_p2;
reg   [9:0] j1_reg_2156;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln64_fu_978_p2;
wire   [0:0] icmp_ln66_1_fu_1028_p2;
reg   [0:0] icmp_ln66_1_reg_2166;
wire   [0:0] and_ln66_fu_1040_p2;
reg   [0:0] and_ln66_reg_2171;
wire   [31:0] v37_fu_1052_p1;
reg   [31:0] v37_reg_2175;
wire   [0:0] icmp_ln79_fu_1085_p2;
reg   [0:0] icmp_ln79_reg_2181;
wire   [0:0] icmp_ln79_1_fu_1091_p2;
reg   [0:0] icmp_ln79_1_reg_2186;
wire   [0:0] icmp_ln79_2_fu_1097_p2;
reg   [0:0] icmp_ln79_2_reg_2191;
wire   [0:0] icmp_ln70_fu_1121_p2;
reg   [0:0] icmp_ln70_reg_2196;
wire   [0:0] icmp_ln70_1_fu_1127_p2;
reg   [0:0] icmp_ln70_1_reg_2201;
wire   [3:0] i2_fu_1169_p2;
reg   [3:0] i2_reg_2215;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln88_fu_1163_p2;
wire   [14:0] sub_ln90_fu_1204_p2;
reg   [14:0] sub_ln90_reg_2225;
wire   [9:0] j2_fu_1216_p2;
reg   [9:0] j2_reg_2233;
wire    ap_CS_fsm_state20;
wire  signed [63:0] sext_ln90_fu_1231_p1;
reg  signed [63:0] sext_ln90_reg_2238;
wire   [0:0] icmp_ln89_fu_1210_p2;
wire   [31:0] reg_V_fu_1236_p1;
reg   [31:0] reg_V_reg_2248;
wire    ap_CS_fsm_state42;
reg   [0:0] p_Result_69_reg_2253;
wire   [11:0] v47_V_fu_1270_p1;
reg   [11:0] v47_V_reg_2258;
wire   [0:0] icmp_ln278_fu_1282_p2;
reg   [0:0] icmp_ln278_reg_2264;
wire   [0:0] icmp_ln282_fu_1298_p2;
reg   [0:0] icmp_ln282_reg_2270;
wire   [0:0] icmp_ln285_fu_1310_p2;
reg   [0:0] icmp_ln285_reg_2275;
wire  signed [8:0] sh_amt_1_fu_1316_p2;
reg  signed [8:0] sh_amt_1_reg_2280;
wire   [0:0] and_ln284_fu_1350_p2;
reg   [0:0] and_ln284_reg_2285;
wire   [11:0] v47_V_3_fu_1362_p3;
reg   [11:0] v47_V_3_reg_2290;
wire   [0:0] and_ln295_fu_1382_p2;
reg   [0:0] and_ln295_reg_2295;
wire   [11:0] v47_V_9_fu_1469_p3;
reg   [11:0] v47_V_9_reg_2300;
wire    ap_CS_fsm_state43;
wire   [9:0] i3_fu_1482_p2;
reg   [9:0] i3_reg_2308;
wire    ap_CS_fsm_state45;
wire   [0:0] icmp_ln98_fu_1476_p2;
wire   [20:0] sub_ln100_fu_1517_p2;
reg   [20:0] sub_ln100_reg_2318;
wire   [9:0] j3_fu_1529_p2;
reg   [9:0] j3_reg_2326;
wire    ap_CS_fsm_state47;
wire  signed [63:0] sext_ln100_fu_1544_p1;
reg  signed [63:0] sext_ln100_reg_2331;
wire   [0:0] icmp_ln99_fu_1523_p2;
wire   [31:0] reg_V_1_fu_1549_p1;
reg   [31:0] reg_V_1_reg_2341;
wire    ap_CS_fsm_state71;
reg   [0:0] p_Result_70_reg_2346;
wire   [11:0] v54_V_fu_1583_p1;
reg   [11:0] v54_V_reg_2351;
wire   [0:0] icmp_ln278_1_fu_1595_p2;
reg   [0:0] icmp_ln278_1_reg_2357;
wire   [0:0] icmp_ln282_1_fu_1611_p2;
reg   [0:0] icmp_ln282_1_reg_2363;
wire   [0:0] icmp_ln285_1_fu_1623_p2;
reg   [0:0] icmp_ln285_1_reg_2368;
wire  signed [8:0] sh_amt_3_fu_1629_p2;
reg  signed [8:0] sh_amt_3_reg_2373;
wire   [0:0] and_ln284_1_fu_1663_p2;
reg   [0:0] and_ln284_1_reg_2378;
wire   [11:0] v54_V_3_fu_1675_p3;
reg   [11:0] v54_V_3_reg_2383;
wire   [0:0] and_ln295_1_fu_1695_p2;
reg   [0:0] and_ln295_1_reg_2388;
wire   [11:0] v54_V_9_fu_1782_p3;
reg   [11:0] v54_V_9_reg_2393;
wire    ap_CS_fsm_state72;
wire   [3:0] i4_fu_1795_p2;
reg   [3:0] i4_reg_2401;
wire    ap_CS_fsm_state74;
wire   [14:0] sub_ln111_fu_1825_p2;
reg   [14:0] sub_ln111_reg_2406;
wire   [0:0] icmp_ln108_fu_1789_p2;
wire   [9:0] j4_fu_1837_p2;
reg   [9:0] j4_reg_2415;
wire    ap_CS_fsm_state75;
wire   [20:0] sub_ln112_fu_1871_p2;
reg   [20:0] sub_ln112_reg_2420;
wire   [0:0] icmp_ln109_fu_1831_p2;
reg   [13:0] q_outp_addr_1_reg_2425;
wire   [9:0] k_fu_1893_p2;
reg   [9:0] k_reg_2433;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln110_fu_1887_p2;
wire   [11:0] q_inp_V_q0;
reg  signed [11:0] v58_V_reg_2448;
wire   [11:0] q_W_V_q0;
reg  signed [11:0] v59_V_reg_2453;
wire   [3:0] i5_fu_1939_p2;
reg   [3:0] i5_reg_2461;
wire    ap_CS_fsm_state79;
wire   [0:0] icmp_ln123_fu_1933_p2;
wire   [14:0] sub_ln134_fu_1974_p2;
reg   [14:0] sub_ln134_reg_2471;
wire   [9:0] j5_fu_1986_p2;
reg   [9:0] j5_reg_2479;
wire    ap_CS_fsm_state81;
wire  signed [63:0] sext_ln134_fu_2001_p1;
reg  signed [63:0] sext_ln134_reg_2484;
wire   [0:0] icmp_ln124_fu_1980_p2;
wire   [31:0] grp_fu_539_p1;
reg   [31:0] v70_reg_2494;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state91;
reg   [31:0] v75_reg_2509;
wire   [31:0] grp_fu_525_p2;
reg   [31:0] v76_reg_2514;
wire    ap_CS_fsm_state117;
reg   [3:0] max_inp_address0;
reg    max_inp_ce0;
reg    max_inp_we0;
reg   [31:0] max_inp_d0;
reg   [9:0] max_W_address0;
reg    max_W_ce0;
reg    max_W_we0;
reg   [31:0] max_W_d0;
reg   [13:0] q_inp_V_address0;
reg    q_inp_V_ce0;
reg    q_inp_V_we0;
reg   [19:0] q_W_V_address0;
reg    q_W_V_ce0;
reg    q_W_V_we0;
reg   [13:0] q_outp_address0;
reg    q_outp_ce0;
reg    q_outp_we0;
reg   [31:0] q_outp_d0;
reg   [3:0] v5_0_reg_334;
wire   [0:0] icmp_ln23_fu_597_p2;
reg   [9:0] v7_0_reg_345;
wire   [0:0] icmp_ln27_fu_614_p2;
reg   [3:0] v11_0_reg_356;
wire   [0:0] icmp_ln34_fu_673_p2;
reg   [9:0] v12_0_reg_367;
reg   [3:0] i_0_reg_378;
reg   [9:0] j_0_reg_389;
wire    ap_CS_fsm_state10;
reg   [9:0] i1_0_reg_400;
reg   [9:0] j1_0_reg_411;
wire    ap_CS_fsm_state17;
reg   [3:0] i2_0_reg_422;
reg   [9:0] j2_0_reg_434;
wire    ap_CS_fsm_state44;
reg   [9:0] i3_0_reg_445;
reg   [9:0] j3_0_reg_457;
wire    ap_CS_fsm_state73;
reg   [3:0] i4_0_reg_468;
reg   [9:0] j4_0_reg_479;
reg   [9:0] k_0_reg_490;
wire    ap_CS_fsm_state78;
reg   [3:0] i5_0_reg_501;
reg   [9:0] j5_0_reg_513;
wire    ap_CS_fsm_state118;
wire   [63:0] zext_ln24_fu_609_p1;
wire   [63:0] zext_ln28_fu_626_p1;
wire  signed [63:0] sext_ln35_fu_694_p1;
wire   [63:0] zext_ln40_fu_711_p1;
wire  signed [63:0] sext_ln40_fu_767_p1;
wire   [63:0] zext_ln65_fu_943_p1;
wire  signed [63:0] sext_ln65_fu_999_p1;
wire   [63:0] zext_ln90_fu_1175_p1;
wire   [63:0] zext_ln100_fu_1488_p1;
wire  signed [63:0] sext_ln116_fu_1882_p1;
wire  signed [63:0] sext_ln111_fu_1912_p1;
wire  signed [63:0] sext_ln112_fu_1922_p1;
wire   [63:0] zext_ln125_fu_1945_p1;
wire   [63:0] zext_ln125_1_fu_2006_p1;
wire   [0:0] v24_fu_915_p2;
wire   [0:0] v19_fu_925_p2;
wire   [0:0] v38_fu_1147_p2;
wire   [0:0] v33_fu_1157_p2;
wire  signed [31:0] grp_fu_2012_p3;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state113;
reg   [31:0] grp_fu_529_p0;
reg   [31:0] grp_fu_529_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state93;
reg   [31:0] grp_fu_534_p1;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state83;
reg   [31:0] grp_fu_542_p0;
reg   [31:0] grp_fu_542_p1;
wire   [13:0] tmp_26_fu_643_p3;
wire   [11:0] tmp_27_fu_655_p3;
wire   [14:0] zext_ln35_fu_651_p1;
wire   [14:0] zext_ln35_1_fu_663_p1;
wire   [14:0] zext_ln35_2_fu_685_p1;
wire   [14:0] add_ln35_fu_689_p2;
wire   [13:0] tmp_28_fu_716_p3;
wire   [11:0] tmp_29_fu_728_p3;
wire   [14:0] zext_ln40_1_fu_724_p1;
wire   [14:0] zext_ln40_2_fu_736_p1;
wire   [14:0] zext_ln40_3_fu_758_p1;
wire   [14:0] add_ln40_fu_762_p2;
wire   [31:0] bitcast_ln41_fu_772_p1;
wire   [7:0] tmp_4_fu_776_p4;
wire   [22:0] trunc_ln41_fu_786_p1;
wire   [0:0] icmp_ln41_fu_790_p2;
wire   [0:0] or_ln41_fu_802_p2;
wire   [0:0] grp_fu_542_p2;
wire   [31:0] xor_ln53_fu_814_p2;
wire   [31:0] bitcast_ln54_fu_825_p1;
wire   [7:0] tmp_12_fu_829_p4;
wire   [22:0] trunc_ln54_fu_839_p1;
wire   [7:0] tmp_13_fu_843_p4;
wire   [31:0] bitcast_ln45_fu_871_p1;
wire   [7:0] tmp_10_fu_875_p4;
wire   [22:0] trunc_ln45_fu_885_p1;
wire   [0:0] or_ln54_fu_901_p2;
wire   [0:0] or_ln54_1_fu_905_p2;
wire   [0:0] and_ln54_fu_909_p2;
wire   [0:0] or_ln45_fu_921_p2;
wire   [19:0] tmp_30_fu_948_p3;
wire   [17:0] tmp_31_fu_960_p3;
wire   [20:0] zext_ln65_1_fu_956_p1;
wire   [20:0] zext_ln65_2_fu_968_p1;
wire   [20:0] zext_ln65_3_fu_990_p1;
wire   [20:0] add_ln65_fu_994_p2;
wire   [31:0] bitcast_ln66_fu_1004_p1;
wire   [7:0] tmp_15_fu_1008_p4;
wire   [22:0] trunc_ln66_fu_1018_p1;
wire   [0:0] icmp_ln66_fu_1022_p2;
wire   [0:0] or_ln66_fu_1034_p2;
wire   [31:0] xor_ln78_fu_1046_p2;
wire   [31:0] bitcast_ln79_fu_1057_p1;
wire   [7:0] tmp_19_fu_1061_p4;
wire   [22:0] trunc_ln79_fu_1071_p1;
wire   [7:0] tmp_20_fu_1075_p4;
wire   [31:0] bitcast_ln70_fu_1103_p1;
wire   [7:0] tmp_17_fu_1107_p4;
wire   [22:0] trunc_ln70_fu_1117_p1;
wire   [0:0] or_ln79_fu_1133_p2;
wire   [0:0] or_ln79_1_fu_1137_p2;
wire   [0:0] and_ln79_fu_1141_p2;
wire   [0:0] or_ln70_fu_1153_p2;
wire   [13:0] tmp_32_fu_1180_p3;
wire   [11:0] tmp_33_fu_1192_p3;
wire   [14:0] zext_ln90_1_fu_1188_p1;
wire   [14:0] zext_ln90_2_fu_1200_p1;
wire   [14:0] zext_ln90_3_fu_1222_p1;
wire   [14:0] add_ln90_fu_1226_p2;
wire   [7:0] p_Result_s_fu_1252_p4;
wire   [22:0] trunc_ln270_fu_1266_p1;
wire   [30:0] trunc_ln262_fu_1240_p1;
wire   [8:0] exp_V_fu_1262_p1;
wire  signed [8:0] sh_amt_fu_1288_p2;
wire   [23:0] tmp_8_fu_1274_p3;
wire  signed [23:0] sext_ln281_fu_1294_p1;
wire   [23:0] lshr_ln286_fu_1328_p2;
wire   [0:0] or_ln282_fu_1338_p2;
wire   [0:0] icmp_ln284_fu_1304_p2;
wire   [0:0] xor_ln282_fu_1344_p2;
wire   [0:0] and_ln285_fu_1356_p2;
wire   [11:0] v47_V_1_fu_1334_p1;
wire   [0:0] or_ln284_fu_1370_p2;
wire   [0:0] icmp_ln295_fu_1322_p2;
wire   [0:0] xor_ln284_fu_1376_p2;
wire   [0:0] tmp_37_fu_1391_p3;
wire  signed [31:0] sext_ln294_fu_1388_p1;
wire   [11:0] sext_ln294cast_fu_1406_p1;
wire   [11:0] shl_ln297_fu_1410_p2;
wire   [11:0] v47_V_4_fu_1415_p3;
wire   [0:0] xor_ln285_fu_1428_p2;
wire   [0:0] and_ln285_1_fu_1433_p2;
wire   [11:0] select_ln288_fu_1398_p3;
wire   [11:0] v47_V_5_fu_1421_p3;
wire   [0:0] xor_ln278_fu_1446_p2;
wire   [0:0] and_ln282_fu_1451_p2;
wire   [11:0] v47_V_6_fu_1438_p3;
wire   [11:0] v47_V_7_fu_1456_p3;
wire   [11:0] v47_V_8_fu_1463_p2;
wire   [19:0] tmp_34_fu_1493_p3;
wire   [17:0] tmp_35_fu_1505_p3;
wire   [20:0] zext_ln100_1_fu_1501_p1;
wire   [20:0] zext_ln100_2_fu_1513_p1;
wire   [20:0] zext_ln100_3_fu_1535_p1;
wire   [20:0] add_ln100_fu_1539_p2;
wire   [7:0] p_Result_5_fu_1565_p4;
wire   [22:0] trunc_ln270_1_fu_1579_p1;
wire   [30:0] trunc_ln262_1_fu_1553_p1;
wire   [8:0] exp_V_1_fu_1575_p1;
wire  signed [8:0] sh_amt_2_fu_1601_p2;
wire   [23:0] tmp_1_fu_1587_p3;
wire  signed [23:0] sext_ln281_1_fu_1607_p1;
wire   [23:0] lshr_ln286_1_fu_1641_p2;
wire   [0:0] or_ln282_1_fu_1651_p2;
wire   [0:0] icmp_ln284_1_fu_1617_p2;
wire   [0:0] xor_ln282_1_fu_1657_p2;
wire   [0:0] and_ln285_2_fu_1669_p2;
wire   [11:0] v54_V_1_fu_1647_p1;
wire   [0:0] or_ln284_1_fu_1683_p2;
wire   [0:0] icmp_ln295_1_fu_1635_p2;
wire   [0:0] xor_ln284_1_fu_1689_p2;
wire   [0:0] tmp_40_fu_1704_p3;
wire  signed [31:0] sext_ln294_1_fu_1701_p1;
wire   [11:0] sext_ln294_1cast_fu_1719_p1;
wire   [11:0] shl_ln297_1_fu_1723_p2;
wire   [11:0] v54_V_4_fu_1728_p3;
wire   [0:0] xor_ln285_1_fu_1741_p2;
wire   [0:0] and_ln285_3_fu_1746_p2;
wire   [11:0] select_ln288_1_fu_1711_p3;
wire   [11:0] v54_V_5_fu_1734_p3;
wire   [0:0] xor_ln278_1_fu_1759_p2;
wire   [0:0] and_ln282_1_fu_1764_p2;
wire   [11:0] v54_V_6_fu_1751_p3;
wire   [11:0] v54_V_7_fu_1769_p3;
wire   [11:0] v54_V_8_fu_1776_p2;
wire   [13:0] tmp_36_fu_1801_p3;
wire   [11:0] tmp_38_fu_1813_p3;
wire   [14:0] zext_ln111_fu_1809_p1;
wire   [14:0] zext_ln111_1_fu_1821_p1;
wire   [19:0] tmp_42_fu_1847_p3;
wire   [17:0] tmp_43_fu_1859_p3;
wire   [20:0] zext_ln112_1_fu_1855_p1;
wire   [20:0] zext_ln112_2_fu_1867_p1;
wire   [14:0] zext_ln112_fu_1843_p1;
wire   [14:0] add_ln116_fu_1877_p2;
wire   [14:0] zext_ln111_3_fu_1903_p1;
wire   [14:0] add_ln111_fu_1907_p2;
wire   [20:0] zext_ln111_2_fu_1899_p1;
wire   [20:0] add_ln112_fu_1917_p2;
wire   [13:0] tmp_39_fu_1950_p3;
wire   [11:0] tmp_41_fu_1962_p3;
wire   [14:0] zext_ln134_fu_1958_p1;
wire   [14:0] zext_ln134_1_fu_1970_p1;
wire   [14:0] zext_ln134_2_fu_1992_p1;
wire   [14:0] add_ln134_fu_1996_p2;
reg   [4:0] grp_fu_542_opcode;
reg   [117:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 118'd1;
end

Linear_layer_qkv_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
max_inp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(max_inp_address0),
    .ce0(max_inp_ce0),
    .we0(max_inp_we0),
    .d0(max_inp_d0),
    .q0(max_inp_q0)
);

Linear_layer_qkv_cud #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
max_W_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(max_W_address0),
    .ce0(max_W_ce0),
    .we0(max_W_we0),
    .d0(max_W_d0),
    .q0(max_W_q0)
);

Linear_layer_qkv_dEe #(
    .DataWidth( 12 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
q_inp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_inp_V_address0),
    .ce0(q_inp_V_ce0),
    .we0(q_inp_V_we0),
    .d0(v47_V_9_reg_2300),
    .q0(q_inp_V_q0)
);

Linear_layer_qkv_eOg #(
    .DataWidth( 12 ),
    .AddressRange( 589824 ),
    .AddressWidth( 20 ))
q_W_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_W_V_address0),
    .ce0(q_W_V_ce0),
    .we0(q_W_V_we0),
    .d0(v54_V_9_reg_2393),
    .q0(q_W_V_q0)
);

Linear_layer_qkv_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
q_outp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(q_outp_address0),
    .ce0(q_outp_ce0),
    .we0(q_outp_we0),
    .d0(q_outp_d0),
    .q0(q_outp_q0)
);

Bert_layer_fadd_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3g8j_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_587),
    .din1(v75_reg_2509),
    .ce(1'b1),
    .dout(grp_fu_525_p2)
);

Bert_layer_fmul_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3hbi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_529_p0),
    .din1(grp_fu_529_p1),
    .ce(1'b1),
    .dout(grp_fu_529_p2)
);

Bert_layer_fdiv_3ibs #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3ibs_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_581),
    .din1(grp_fu_534_p1),
    .ce(1'b1),
    .dout(grp_fu_534_p2)
);

Bert_layer_sitofpjbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_sitofpjbC_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_592),
    .ce(1'b1),
    .dout(grp_fu_539_p1)
);

Bert_layer_fcmp_3kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Bert_layer_fcmp_3kbM_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_542_p0),
    .din1(grp_fu_542_p1),
    .ce(1'b1),
    .opcode(grp_fu_542_opcode),
    .dout(grp_fu_542_p2)
);

Bert_layer_mac_mulbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_mac_mulbW_U6(
    .din0(v59_V_reg_2453),
    .din1(v58_V_reg_2448),
    .din2(reg_592),
    .dout(grp_fu_2012_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i1_0_reg_400 <= 10'd0;
    end else if (((icmp_ln64_fu_978_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i1_0_reg_400 <= i1_reg_2138;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_931_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i2_0_reg_422 <= 4'd0;
    end else if (((icmp_ln89_fu_1210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        i2_0_reg_422 <= i2_reg_2215;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln88_fu_1163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i3_0_reg_445 <= 10'd0;
    end else if (((icmp_ln99_fu_1523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i3_0_reg_445 <= i3_reg_2308;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_fu_1476_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i4_0_reg_468 <= 4'd0;
    end else if (((icmp_ln109_fu_1831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        i4_0_reg_468 <= i4_reg_2401;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_1789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
        i5_0_reg_501 <= 4'd0;
    end else if (((icmp_ln124_fu_1980_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        i5_0_reg_501 <= i5_reg_2461;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_378 <= 4'd0;
    end else if (((icmp_ln39_fu_746_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_378 <= i_reg_2061;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j1_0_reg_411 <= j1_reg_2156;
    end else if (((icmp_ln63_fu_931_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        j1_0_reg_411 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j2_0_reg_434 <= j2_reg_2233;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j2_0_reg_434 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        j3_0_reg_457 <= j3_reg_2326;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        j3_0_reg_457 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln110_fu_1887_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        j4_0_reg_479 <= j4_reg_2415;
    end else if (((icmp_ln108_fu_1789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        j4_0_reg_479 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        j5_0_reg_513 <= j5_reg_2479;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        j5_0_reg_513 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_389 <= j_reg_2079;
    end else if (((icmp_ln38_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_reg_389 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        k_0_reg_490 <= k_reg_2433;
    end else if (((icmp_ln109_fu_1831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        k_0_reg_490 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        v11_0_reg_356 <= 4'd0;
    end else if (((icmp_ln34_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        v11_0_reg_356 <= v11_reg_2040;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        v12_0_reg_367 <= 10'd0;
    end else if (((icmp_ln34_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v12_0_reg_367 <= v12_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v5_0_reg_334 <= v5_fu_603_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v5_0_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v7_0_reg_345 <= 10'd0;
    end else if (((icmp_ln27_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v7_0_reg_345 <= v7_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        and_ln284_1_reg_2378 <= and_ln284_1_fu_1663_p2;
        and_ln295_1_reg_2388 <= and_ln295_1_fu_1695_p2;
        icmp_ln278_1_reg_2357 <= icmp_ln278_1_fu_1595_p2;
        icmp_ln282_1_reg_2363 <= icmp_ln282_1_fu_1611_p2;
        icmp_ln285_1_reg_2368 <= icmp_ln285_1_fu_1623_p2;
        p_Result_70_reg_2346 <= reg_V_1_fu_1549_p1[32'd31];
        reg_V_1_reg_2341 <= reg_V_1_fu_1549_p1;
        sh_amt_3_reg_2373 <= sh_amt_3_fu_1629_p2;
        v54_V_3_reg_2383 <= v54_V_3_fu_1675_p3;
        v54_V_reg_2351 <= v54_V_fu_1583_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        and_ln284_reg_2285 <= and_ln284_fu_1350_p2;
        and_ln295_reg_2295 <= and_ln295_fu_1382_p2;
        icmp_ln278_reg_2264 <= icmp_ln278_fu_1282_p2;
        icmp_ln282_reg_2270 <= icmp_ln282_fu_1298_p2;
        icmp_ln285_reg_2275 <= icmp_ln285_fu_1310_p2;
        p_Result_69_reg_2253 <= reg_V_fu_1236_p1[32'd31];
        reg_V_reg_2248 <= reg_V_fu_1236_p1;
        sh_amt_1_reg_2280 <= sh_amt_1_fu_1316_p2;
        v47_V_3_reg_2290 <= v47_V_3_fu_1362_p3;
        v47_V_reg_2258 <= v47_V_fu_1270_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        and_ln41_reg_2094 <= and_ln41_fu_808_p2;
        icmp_ln41_1_reg_2089 <= icmp_ln41_1_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln66_reg_2171 <= and_ln66_fu_1040_p2;
        icmp_ln66_1_reg_2166 <= icmp_ln66_1_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_reg_2138 <= i1_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i2_reg_2215 <= i2_fu_1169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i3_reg_2308 <= i3_fu_1482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        i4_reg_2401 <= i4_fu_1795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        i5_reg_2461 <= i5_fu_1939_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_2061 <= i_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln45_1_reg_2124 <= icmp_ln45_1_fu_895_p2;
        icmp_ln45_reg_2119 <= icmp_ln45_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln54_1_reg_2109 <= icmp_ln54_1_fu_859_p2;
        icmp_ln54_2_reg_2114 <= icmp_ln54_2_fu_865_p2;
        icmp_ln54_reg_2104 <= icmp_ln54_fu_853_p2;
        v23_reg_2098 <= v23_fu_820_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        icmp_ln70_1_reg_2201 <= icmp_ln70_1_fu_1127_p2;
        icmp_ln70_reg_2196 <= icmp_ln70_fu_1121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        icmp_ln79_1_reg_2186 <= icmp_ln79_1_fu_1091_p2;
        icmp_ln79_2_reg_2191 <= icmp_ln79_2_fu_1097_p2;
        icmp_ln79_reg_2181 <= icmp_ln79_fu_1085_p2;
        v37_reg_2175 <= v37_fu_1052_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j1_reg_2156 <= j1_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j2_reg_2233 <= j2_fu_1216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        j3_reg_2326 <= j3_fu_1529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        j4_reg_2415 <= j4_fu_1837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        j5_reg_2479 <= j5_fu_1986_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_2079 <= j_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        k_reg_2433 <= k_fu_1893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_931_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        max_W_addr_1_reg_2148 <= zext_ln65_fu_943_p1;
        sub_ln65_reg_2143[20 : 8] <= sub_ln65_fu_972_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        max_inp_addr_1_reg_2071 <= zext_ln40_fu_711_p1;
        sub_ln40_reg_2066[14 : 8] <= sub_ln40_fu_740_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_1831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state75))) begin
        q_outp_addr_1_reg_2425 <= sext_ln116_fu_1882_p1;
        sub_ln112_reg_2420[20 : 8] <= sub_ln112_fu_1871_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_551 <= v0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_559 <= max_inp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_566 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_574 <= max_W_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state92))) begin
        reg_581 <= grp_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_587 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state77))) begin
        reg_592 <= q_outp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1523_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        sext_ln100_reg_2331 <= sext_ln100_fu_1544_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_1980_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        sext_ln134_reg_2484 <= sext_ln134_fu_2001_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_1210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        sext_ln90_reg_2238 <= sext_ln90_fu_1231_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        sub_ln100_reg_2318[20 : 8] <= sub_ln100_fu_1517_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_1789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state74))) begin
        sub_ln111_reg_2406[14 : 8] <= sub_ln111_fu_1825_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        sub_ln134_reg_2471[14 : 8] <= sub_ln134_fu_1974_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln35_reg_2045[14 : 8] <= sub_ln35_fu_667_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sub_ln90_reg_2225[14 : 8] <= sub_ln90_fu_1204_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v11_reg_2040 <= v11_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        v47_V_9_reg_2300 <= v47_V_9_fu_1469_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        v54_V_9_reg_2393 <= v54_V_9_fu_1782_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        v58_V_reg_2448 <= q_inp_V_q0;
        v59_V_reg_2453 <= q_W_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        v70_reg_2494 <= grp_fu_539_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        v75_reg_2509 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        v76_reg_2514 <= grp_fu_525_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln123_fu_1933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_1933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_529_p0 = reg_581;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_529_p0 = v70_reg_2494;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_529_p0 = reg_566;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_529_p0 = reg_551;
    end else begin
        grp_fu_529_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        grp_fu_529_p1 = reg_574;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        grp_fu_529_p1 = reg_559;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_529_p1 = 32'd1157619712;
    end else begin
        grp_fu_529_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_534_p1 = 32'd1249886212;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_534_p1 = reg_574;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_534_p1 = reg_559;
    end else begin
        grp_fu_534_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16)) | ((1'd0 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16)) | ((1'd1 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9)) | ((1'd0 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_542_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_542_opcode = 5'd3;
    end else begin
        grp_fu_542_opcode = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16)) | ((1'd0 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_542_p0 = max_W_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_542_p0 = v1_q0;
    end else if ((((1'd1 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9)) | ((1'd0 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_542_p0 = max_inp_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_542_p0 = v0_q0;
    end else begin
        grp_fu_542_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_542_p1 = reg_566;
    end else if (((1'd0 == and_ln66_fu_1040_p2) & (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_542_p1 = v37_fu_1052_p1;
    end else if (((1'd1 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_542_p1 = reg_551;
    end else if (((1'd0 == and_ln41_fu_808_p2) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_542_p1 = v23_fu_820_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_542_p1 = 32'd0;
    end else begin
        grp_fu_542_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        max_W_address0 = zext_ln125_1_fu_2006_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        max_W_address0 = zext_ln100_fu_1488_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | ((v33_fu_1157_p2 == 1'd1) & (1'd1 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)) | ((v38_fu_1147_p2 == 1'd1) & (1'd0 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)))) begin
        max_W_address0 = max_W_addr_1_reg_2148;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_W_address0 = zext_ln28_fu_626_p1;
    end else begin
        max_W_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state15) | ((v33_fu_1157_p2 == 1'd1) & (1'd1 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)) | ((v38_fu_1147_p2 == 1'd1) & (1'd0 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)))) begin
        max_W_ce0 = 1'b1;
    end else begin
        max_W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((v33_fu_1157_p2 == 1'd1) & (1'd1 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17))) begin
        max_W_d0 = reg_566;
    end else if (((v38_fu_1147_p2 == 1'd1) & (1'd0 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17))) begin
        max_W_d0 = v37_reg_2175;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_W_d0 = 32'd0;
    end else begin
        max_W_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((v33_fu_1157_p2 == 1'd1) & (1'd1 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)) | ((v38_fu_1147_p2 == 1'd1) & (1'd0 == and_ln66_reg_2171) & (1'b1 == ap_CS_fsm_state17)) | ((icmp_ln27_fu_614_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        max_W_we0 = 1'b1;
    end else begin
        max_W_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        max_inp_address0 = zext_ln125_fu_1945_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        max_inp_address0 = zext_ln90_fu_1175_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((v19_fu_925_p2 == 1'd1) & (1'd1 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)) | ((v24_fu_915_p2 == 1'd1) & (1'd0 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)))) begin
        max_inp_address0 = max_inp_addr_1_reg_2071;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        max_inp_address0 = zext_ln24_fu_609_p1;
    end else begin
        max_inp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | ((v19_fu_925_p2 == 1'd1) & (1'd1 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)) | ((v24_fu_915_p2 == 1'd1) & (1'd0 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)))) begin
        max_inp_ce0 = 1'b1;
    end else begin
        max_inp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((v19_fu_925_p2 == 1'd1) & (1'd1 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10))) begin
        max_inp_d0 = reg_551;
    end else if (((v24_fu_915_p2 == 1'd1) & (1'd0 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10))) begin
        max_inp_d0 = v23_reg_2098;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        max_inp_d0 = 32'd0;
    end else begin
        max_inp_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((v19_fu_925_p2 == 1'd1) & (1'd1 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)) | ((v24_fu_915_p2 == 1'd1) & (1'd0 == and_ln41_reg_2094) & (1'b1 == ap_CS_fsm_state10)) | ((icmp_ln23_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        max_inp_we0 = 1'b1;
    end else begin
        max_inp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        q_W_V_address0 = sext_ln112_fu_1922_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        q_W_V_address0 = sext_ln100_reg_2331;
    end else begin
        q_W_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state76))) begin
        q_W_V_ce0 = 1'b1;
    end else begin
        q_W_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        q_W_V_we0 = 1'b1;
    end else begin
        q_W_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        q_inp_V_address0 = sext_ln111_fu_1912_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        q_inp_V_address0 = sext_ln90_reg_2238;
    end else begin
        q_inp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state76))) begin
        q_inp_V_ce0 = 1'b1;
    end else begin
        q_inp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        q_inp_V_we0 = 1'b1;
    end else begin
        q_inp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        q_outp_address0 = sext_ln134_fu_2001_p1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state76))) begin
        q_outp_address0 = q_outp_addr_1_reg_2425;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        q_outp_address0 = sext_ln35_fu_694_p1;
    end else begin
        q_outp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state5))) begin
        q_outp_ce0 = 1'b1;
    end else begin
        q_outp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        q_outp_d0 = grp_fu_2012_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        q_outp_d0 = 32'd0;
    end else begin
        q_outp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | ((icmp_ln34_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        q_outp_we0 = 1'b1;
    end else begin
        q_outp_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v0_address0 = sext_ln90_fu_1231_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        v0_address0 = sext_ln40_fu_767_p1;
    end else begin
        v0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state7))) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        v1_address0 = sext_ln100_fu_1544_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        v1_address0 = sext_ln65_fu_999_p1;
    end else begin
        v1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state15))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln23_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln27_fu_614_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln33_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln34_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln38_fu_699_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln39_fu_746_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln63_fu_931_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln64_fu_978_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln88_fu_1163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln89_fu_1210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state45 : begin
            if (((icmp_ln98_fu_1476_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((icmp_ln99_fu_1523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state74 : begin
            if (((icmp_ln108_fu_1789_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((icmp_ln109_fu_1831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln110_fu_1887_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state79 : begin
            if (((icmp_ln123_fu_1933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((icmp_ln124_fu_1980_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_1539_p2 = (sub_ln100_reg_2318 + zext_ln100_3_fu_1535_p1);

assign add_ln111_fu_1907_p2 = (sub_ln111_reg_2406 + zext_ln111_3_fu_1903_p1);

assign add_ln112_fu_1917_p2 = (sub_ln112_reg_2420 + zext_ln111_2_fu_1899_p1);

assign add_ln116_fu_1877_p2 = (sub_ln111_reg_2406 + zext_ln112_fu_1843_p1);

assign add_ln134_fu_1996_p2 = (sub_ln134_reg_2471 + zext_ln134_2_fu_1992_p1);

assign add_ln35_fu_689_p2 = (sub_ln35_reg_2045 + zext_ln35_2_fu_685_p1);

assign add_ln40_fu_762_p2 = (sub_ln40_reg_2066 + zext_ln40_3_fu_758_p1);

assign add_ln65_fu_994_p2 = (sub_ln65_reg_2143 + zext_ln65_3_fu_990_p1);

assign add_ln90_fu_1226_p2 = (sub_ln90_reg_2225 + zext_ln90_3_fu_1222_p1);

assign and_ln282_1_fu_1764_p2 = (xor_ln278_1_fu_1759_p2 & icmp_ln282_1_reg_2363);

assign and_ln282_fu_1451_p2 = (xor_ln278_fu_1446_p2 & icmp_ln282_reg_2270);

assign and_ln284_1_fu_1663_p2 = (xor_ln282_1_fu_1657_p2 & icmp_ln284_1_fu_1617_p2);

assign and_ln284_fu_1350_p2 = (xor_ln282_fu_1344_p2 & icmp_ln284_fu_1304_p2);

assign and_ln285_1_fu_1433_p2 = (xor_ln285_fu_1428_p2 & and_ln284_reg_2285);

assign and_ln285_2_fu_1669_p2 = (icmp_ln285_1_fu_1623_p2 & and_ln284_1_fu_1663_p2);

assign and_ln285_3_fu_1746_p2 = (xor_ln285_1_fu_1741_p2 & and_ln284_1_reg_2378);

assign and_ln285_fu_1356_p2 = (icmp_ln285_fu_1310_p2 & and_ln284_fu_1350_p2);

assign and_ln295_1_fu_1695_p2 = (xor_ln284_1_fu_1689_p2 & icmp_ln295_1_fu_1635_p2);

assign and_ln295_fu_1382_p2 = (xor_ln284_fu_1376_p2 & icmp_ln295_fu_1322_p2);

assign and_ln41_fu_808_p2 = (or_ln41_fu_802_p2 & grp_fu_542_p2);

assign and_ln54_fu_909_p2 = (or_ln54_fu_901_p2 & or_ln54_1_fu_905_p2);

assign and_ln66_fu_1040_p2 = (or_ln66_fu_1034_p2 & grp_fu_542_p2);

assign and_ln79_fu_1141_p2 = (or_ln79_fu_1133_p2 & or_ln79_1_fu_1137_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign bitcast_ln41_fu_772_p1 = reg_551;

assign bitcast_ln45_fu_871_p1 = max_inp_q0;

assign bitcast_ln54_fu_825_p1 = max_inp_q0;

assign bitcast_ln66_fu_1004_p1 = reg_566;

assign bitcast_ln70_fu_1103_p1 = max_W_q0;

assign bitcast_ln79_fu_1057_p1 = max_W_q0;

assign exp_V_1_fu_1575_p1 = p_Result_5_fu_1565_p4;

assign exp_V_fu_1262_p1 = p_Result_s_fu_1252_p4;

assign i1_fu_937_p2 = (i1_0_reg_400 + 10'd1);

assign i2_fu_1169_p2 = (i2_0_reg_422 + 4'd1);

assign i3_fu_1482_p2 = (i3_0_reg_445 + 10'd1);

assign i4_fu_1795_p2 = (i4_0_reg_468 + 4'd1);

assign i5_fu_1939_p2 = (i5_0_reg_501 + 4'd1);

assign i_fu_705_p2 = (i_0_reg_378 + 4'd1);

assign icmp_ln108_fu_1789_p2 = ((i4_0_reg_468 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_1831_p2 = ((j4_0_reg_479 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_1887_p2 = ((k_0_reg_490 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1933_p2 = ((i5_0_reg_501 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_1980_p2 = ((j5_0_reg_513 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_597_p2 = ((v5_0_reg_334 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln278_1_fu_1595_p2 = ((trunc_ln262_1_fu_1553_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_1282_p2 = ((trunc_ln262_fu_1240_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_614_p2 = ((v7_0_reg_345 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_1611_p2 = ((p_Result_5_fu_1565_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_1298_p2 = ((p_Result_s_fu_1252_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_1_fu_1617_p2 = (($signed(sh_amt_2_fu_1601_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_1304_p2 = (($signed(sh_amt_fu_1288_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_1_fu_1623_p2 = (($signed(sh_amt_2_fu_1601_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_1310_p2 = (($signed(sh_amt_fu_1288_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_1635_p2 = (($signed(sh_amt_3_fu_1629_p2) < $signed(9'd12)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_1322_p2 = (($signed(sh_amt_1_fu_1316_p2) < $signed(9'd12)) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_631_p2 = ((v11_0_reg_356 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_673_p2 = ((v12_0_reg_367 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_699_p2 = ((i_0_reg_378 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_746_p2 = ((j_0_reg_389 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_796_p2 = ((trunc_ln41_fu_786_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_790_p2 = ((tmp_4_fu_776_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln45_1_fu_895_p2 = ((trunc_ln45_fu_885_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_889_p2 = ((tmp_10_fu_875_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_859_p2 = ((trunc_ln54_fu_839_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_865_p2 = ((tmp_13_fu_843_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_853_p2 = ((tmp_12_fu_829_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_931_p2 = ((i1_0_reg_400 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_978_p2 = ((j1_0_reg_411 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_1028_p2 = ((trunc_ln66_fu_1018_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1022_p2 = ((tmp_15_fu_1008_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_1127_p2 = ((trunc_ln70_fu_1117_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1121_p2 = ((tmp_17_fu_1107_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_1091_p2 = ((trunc_ln79_fu_1071_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_2_fu_1097_p2 = ((tmp_20_fu_1075_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1085_p2 = ((tmp_19_fu_1061_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_1163_p2 = ((i2_0_reg_422 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_1210_p2 = ((j2_0_reg_434 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1476_p2 = ((i3_0_reg_445 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1523_p2 = ((j3_0_reg_457 == 10'd768) ? 1'b1 : 1'b0);

assign j1_fu_984_p2 = (j1_0_reg_411 + 10'd1);

assign j2_fu_1216_p2 = (j2_0_reg_434 + 10'd1);

assign j3_fu_1529_p2 = (j3_0_reg_457 + 10'd1);

assign j4_fu_1837_p2 = (j4_0_reg_479 + 10'd1);

assign j5_fu_1986_p2 = (j5_0_reg_513 + 10'd1);

assign j_fu_752_p2 = (j_0_reg_389 + 10'd1);

assign k_fu_1893_p2 = (k_0_reg_490 + 10'd1);

assign lshr_ln286_1_fu_1641_p2 = tmp_1_fu_1587_p3 >> sext_ln281_1_fu_1607_p1;

assign lshr_ln286_fu_1328_p2 = tmp_8_fu_1274_p3 >> sext_ln281_fu_1294_p1;

assign or_ln282_1_fu_1651_p2 = (icmp_ln282_1_fu_1611_p2 | icmp_ln278_1_fu_1595_p2);

assign or_ln282_fu_1338_p2 = (icmp_ln282_fu_1298_p2 | icmp_ln278_fu_1282_p2);

assign or_ln284_1_fu_1683_p2 = (or_ln282_1_fu_1651_p2 | icmp_ln284_1_fu_1617_p2);

assign or_ln284_fu_1370_p2 = (or_ln282_fu_1338_p2 | icmp_ln284_fu_1304_p2);

assign or_ln41_fu_802_p2 = (icmp_ln41_fu_790_p2 | icmp_ln41_1_fu_796_p2);

assign or_ln45_fu_921_p2 = (icmp_ln45_reg_2119 | icmp_ln45_1_reg_2124);

assign or_ln54_1_fu_905_p2 = (icmp_ln54_2_reg_2114 | icmp_ln41_1_reg_2089);

assign or_ln54_fu_901_p2 = (icmp_ln54_reg_2104 | icmp_ln54_1_reg_2109);

assign or_ln66_fu_1034_p2 = (icmp_ln66_fu_1022_p2 | icmp_ln66_1_fu_1028_p2);

assign or_ln70_fu_1153_p2 = (icmp_ln70_reg_2196 | icmp_ln70_1_reg_2201);

assign or_ln79_1_fu_1137_p2 = (icmp_ln79_2_reg_2191 | icmp_ln66_1_reg_2166);

assign or_ln79_fu_1133_p2 = (icmp_ln79_reg_2181 | icmp_ln79_1_reg_2186);

assign p_Result_5_fu_1565_p4 = {{reg_V_1_fu_1549_p1[30:23]}};

assign p_Result_s_fu_1252_p4 = {{reg_V_fu_1236_p1[30:23]}};

assign reg_V_1_fu_1549_p1 = reg_587;

assign reg_V_fu_1236_p1 = reg_587;

assign select_ln288_1_fu_1711_p3 = ((tmp_40_fu_1704_p3[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign select_ln288_fu_1398_p3 = ((tmp_37_fu_1391_p3[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign sext_ln100_fu_1544_p1 = $signed(add_ln100_fu_1539_p2);

assign sext_ln111_fu_1912_p1 = $signed(add_ln111_fu_1907_p2);

assign sext_ln112_fu_1922_p1 = $signed(add_ln112_fu_1917_p2);

assign sext_ln116_fu_1882_p1 = $signed(add_ln116_fu_1877_p2);

assign sext_ln134_fu_2001_p1 = $signed(add_ln134_fu_1996_p2);

assign sext_ln281_1_fu_1607_p1 = sh_amt_2_fu_1601_p2;

assign sext_ln281_fu_1294_p1 = sh_amt_fu_1288_p2;

assign sext_ln294_1_fu_1701_p1 = sh_amt_3_reg_2373;

assign sext_ln294_1cast_fu_1719_p1 = sext_ln294_1_fu_1701_p1[11:0];

assign sext_ln294_fu_1388_p1 = sh_amt_1_reg_2280;

assign sext_ln294cast_fu_1406_p1 = sext_ln294_fu_1388_p1[11:0];

assign sext_ln35_fu_694_p1 = $signed(add_ln35_fu_689_p2);

assign sext_ln40_fu_767_p1 = $signed(add_ln40_fu_762_p2);

assign sext_ln65_fu_999_p1 = $signed(add_ln65_fu_994_p2);

assign sext_ln90_fu_1231_p1 = $signed(add_ln90_fu_1226_p2);

assign sh_amt_1_fu_1316_p2 = ($signed(9'd0) - $signed(sh_amt_fu_1288_p2));

assign sh_amt_2_fu_1601_p2 = (9'd150 - exp_V_1_fu_1575_p1);

assign sh_amt_3_fu_1629_p2 = ($signed(9'd0) - $signed(sh_amt_2_fu_1601_p2));

assign sh_amt_fu_1288_p2 = (9'd150 - exp_V_fu_1262_p1);

assign shl_ln297_1_fu_1723_p2 = v54_V_reg_2351 << sext_ln294_1cast_fu_1719_p1;

assign shl_ln297_fu_1410_p2 = v47_V_reg_2258 << sext_ln294cast_fu_1406_p1;

assign sub_ln100_fu_1517_p2 = (zext_ln100_1_fu_1501_p1 - zext_ln100_2_fu_1513_p1);

assign sub_ln111_fu_1825_p2 = (zext_ln111_fu_1809_p1 - zext_ln111_1_fu_1821_p1);

assign sub_ln112_fu_1871_p2 = (zext_ln112_1_fu_1855_p1 - zext_ln112_2_fu_1867_p1);

assign sub_ln134_fu_1974_p2 = (zext_ln134_fu_1958_p1 - zext_ln134_1_fu_1970_p1);

assign sub_ln35_fu_667_p2 = (zext_ln35_fu_651_p1 - zext_ln35_1_fu_663_p1);

assign sub_ln40_fu_740_p2 = (zext_ln40_1_fu_724_p1 - zext_ln40_2_fu_736_p1);

assign sub_ln65_fu_972_p2 = (zext_ln65_1_fu_956_p1 - zext_ln65_2_fu_968_p1);

assign sub_ln90_fu_1204_p2 = (zext_ln90_1_fu_1188_p1 - zext_ln90_2_fu_1200_p1);

assign tmp_10_fu_875_p4 = {{bitcast_ln45_fu_871_p1[30:23]}};

assign tmp_12_fu_829_p4 = {{bitcast_ln54_fu_825_p1[30:23]}};

assign tmp_13_fu_843_p4 = {{xor_ln53_fu_814_p2[30:23]}};

assign tmp_15_fu_1008_p4 = {{bitcast_ln66_fu_1004_p1[30:23]}};

assign tmp_17_fu_1107_p4 = {{bitcast_ln70_fu_1103_p1[30:23]}};

assign tmp_19_fu_1061_p4 = {{bitcast_ln79_fu_1057_p1[30:23]}};

assign tmp_1_fu_1587_p3 = {{1'd1}, {trunc_ln270_1_fu_1579_p1}};

assign tmp_20_fu_1075_p4 = {{xor_ln78_fu_1046_p2[30:23]}};

assign tmp_26_fu_643_p3 = {{v11_0_reg_356}, {10'd0}};

assign tmp_27_fu_655_p3 = {{v11_0_reg_356}, {8'd0}};

assign tmp_28_fu_716_p3 = {{i_0_reg_378}, {10'd0}};

assign tmp_29_fu_728_p3 = {{i_0_reg_378}, {8'd0}};

assign tmp_30_fu_948_p3 = {{i1_0_reg_400}, {10'd0}};

assign tmp_31_fu_960_p3 = {{i1_0_reg_400}, {8'd0}};

assign tmp_32_fu_1180_p3 = {{i2_0_reg_422}, {10'd0}};

assign tmp_33_fu_1192_p3 = {{i2_0_reg_422}, {8'd0}};

assign tmp_34_fu_1493_p3 = {{i3_0_reg_445}, {10'd0}};

assign tmp_35_fu_1505_p3 = {{i3_0_reg_445}, {8'd0}};

assign tmp_36_fu_1801_p3 = {{i4_0_reg_468}, {10'd0}};

assign tmp_37_fu_1391_p3 = reg_V_reg_2248[32'd31];

assign tmp_38_fu_1813_p3 = {{i4_0_reg_468}, {8'd0}};

assign tmp_39_fu_1950_p3 = {{i5_0_reg_501}, {10'd0}};

assign tmp_40_fu_1704_p3 = reg_V_1_reg_2341[32'd31];

assign tmp_41_fu_1962_p3 = {{i5_0_reg_501}, {8'd0}};

assign tmp_42_fu_1847_p3 = {{j4_0_reg_479}, {10'd0}};

assign tmp_43_fu_1859_p3 = {{j4_0_reg_479}, {8'd0}};

assign tmp_4_fu_776_p4 = {{bitcast_ln41_fu_772_p1[30:23]}};

assign tmp_8_fu_1274_p3 = {{1'd1}, {trunc_ln270_fu_1266_p1}};

assign trunc_ln262_1_fu_1553_p1 = reg_V_1_fu_1549_p1[30:0];

assign trunc_ln262_fu_1240_p1 = reg_V_fu_1236_p1[30:0];

assign trunc_ln270_1_fu_1579_p1 = reg_V_1_fu_1549_p1[22:0];

assign trunc_ln270_fu_1266_p1 = reg_V_fu_1236_p1[22:0];

assign trunc_ln41_fu_786_p1 = bitcast_ln41_fu_772_p1[22:0];

assign trunc_ln45_fu_885_p1 = bitcast_ln45_fu_871_p1[22:0];

assign trunc_ln54_fu_839_p1 = bitcast_ln54_fu_825_p1[22:0];

assign trunc_ln66_fu_1018_p1 = bitcast_ln66_fu_1004_p1[22:0];

assign trunc_ln70_fu_1117_p1 = bitcast_ln70_fu_1103_p1[22:0];

assign trunc_ln79_fu_1071_p1 = bitcast_ln79_fu_1057_p1[22:0];

assign v11_fu_637_p2 = (v11_0_reg_356 + 4'd1);

assign v12_fu_679_p2 = (v12_0_reg_367 + 10'd1);

assign v19_fu_925_p2 = (or_ln45_fu_921_p2 & grp_fu_542_p2);

assign v23_fu_820_p1 = xor_ln53_fu_814_p2;

assign v24_fu_915_p2 = (grp_fu_542_p2 & and_ln54_fu_909_p2);

assign v2_address0 = zext_ln125_1_fu_2006_p1;

assign v33_fu_1157_p2 = (or_ln70_fu_1153_p2 & grp_fu_542_p2);

assign v37_fu_1052_p1 = xor_ln78_fu_1046_p2;

assign v38_fu_1147_p2 = (grp_fu_542_p2 & and_ln79_fu_1141_p2);

assign v3_address0 = sext_ln134_reg_2484;

assign v3_d0 = v76_reg_2514;

assign v47_V_1_fu_1334_p1 = lshr_ln286_fu_1328_p2[11:0];

assign v47_V_3_fu_1362_p3 = ((and_ln285_fu_1356_p2[0:0] === 1'b1) ? v47_V_1_fu_1334_p1 : 12'd0);

assign v47_V_4_fu_1415_p3 = ((and_ln295_reg_2295[0:0] === 1'b1) ? shl_ln297_fu_1410_p2 : v47_V_3_reg_2290);

assign v47_V_5_fu_1421_p3 = ((icmp_ln278_reg_2264[0:0] === 1'b1) ? 12'd0 : v47_V_4_fu_1415_p3);

assign v47_V_6_fu_1438_p3 = ((and_ln285_1_fu_1433_p2[0:0] === 1'b1) ? select_ln288_fu_1398_p3 : v47_V_5_fu_1421_p3);

assign v47_V_7_fu_1456_p3 = ((and_ln282_fu_1451_p2[0:0] === 1'b1) ? v47_V_reg_2258 : v47_V_6_fu_1438_p3);

assign v47_V_8_fu_1463_p2 = (12'd0 - v47_V_7_fu_1456_p3);

assign v47_V_9_fu_1469_p3 = ((p_Result_69_reg_2253[0:0] === 1'b1) ? v47_V_8_fu_1463_p2 : v47_V_7_fu_1456_p3);

assign v47_V_fu_1270_p1 = reg_V_fu_1236_p1[11:0];

assign v54_V_1_fu_1647_p1 = lshr_ln286_1_fu_1641_p2[11:0];

assign v54_V_3_fu_1675_p3 = ((and_ln285_2_fu_1669_p2[0:0] === 1'b1) ? v54_V_1_fu_1647_p1 : 12'd0);

assign v54_V_4_fu_1728_p3 = ((and_ln295_1_reg_2388[0:0] === 1'b1) ? shl_ln297_1_fu_1723_p2 : v54_V_3_reg_2383);

assign v54_V_5_fu_1734_p3 = ((icmp_ln278_1_reg_2357[0:0] === 1'b1) ? 12'd0 : v54_V_4_fu_1728_p3);

assign v54_V_6_fu_1751_p3 = ((and_ln285_3_fu_1746_p2[0:0] === 1'b1) ? select_ln288_1_fu_1711_p3 : v54_V_5_fu_1734_p3);

assign v54_V_7_fu_1769_p3 = ((and_ln282_1_fu_1764_p2[0:0] === 1'b1) ? v54_V_reg_2351 : v54_V_6_fu_1751_p3);

assign v54_V_8_fu_1776_p2 = (12'd0 - v54_V_7_fu_1769_p3);

assign v54_V_9_fu_1782_p3 = ((p_Result_70_reg_2346[0:0] === 1'b1) ? v54_V_8_fu_1776_p2 : v54_V_7_fu_1769_p3);

assign v54_V_fu_1583_p1 = reg_V_1_fu_1549_p1[11:0];

assign v5_fu_603_p2 = (v5_0_reg_334 + 4'd1);

assign v7_fu_620_p2 = (v7_0_reg_345 + 10'd1);

assign xor_ln278_1_fu_1759_p2 = (icmp_ln278_1_reg_2357 ^ 1'd1);

assign xor_ln278_fu_1446_p2 = (icmp_ln278_reg_2264 ^ 1'd1);

assign xor_ln282_1_fu_1657_p2 = (or_ln282_1_fu_1651_p2 ^ 1'd1);

assign xor_ln282_fu_1344_p2 = (or_ln282_fu_1338_p2 ^ 1'd1);

assign xor_ln284_1_fu_1689_p2 = (or_ln284_1_fu_1683_p2 ^ 1'd1);

assign xor_ln284_fu_1376_p2 = (or_ln284_fu_1370_p2 ^ 1'd1);

assign xor_ln285_1_fu_1741_p2 = (icmp_ln285_1_reg_2368 ^ 1'd1);

assign xor_ln285_fu_1428_p2 = (icmp_ln285_reg_2275 ^ 1'd1);

assign xor_ln53_fu_814_p2 = (bitcast_ln41_fu_772_p1 ^ 32'd2147483648);

assign xor_ln78_fu_1046_p2 = (bitcast_ln66_fu_1004_p1 ^ 32'd2147483648);

assign zext_ln100_1_fu_1501_p1 = tmp_34_fu_1493_p3;

assign zext_ln100_2_fu_1513_p1 = tmp_35_fu_1505_p3;

assign zext_ln100_3_fu_1535_p1 = j3_0_reg_457;

assign zext_ln100_fu_1488_p1 = i3_0_reg_445;

assign zext_ln111_1_fu_1821_p1 = tmp_38_fu_1813_p3;

assign zext_ln111_2_fu_1899_p1 = k_0_reg_490;

assign zext_ln111_3_fu_1903_p1 = k_0_reg_490;

assign zext_ln111_fu_1809_p1 = tmp_36_fu_1801_p3;

assign zext_ln112_1_fu_1855_p1 = tmp_42_fu_1847_p3;

assign zext_ln112_2_fu_1867_p1 = tmp_43_fu_1859_p3;

assign zext_ln112_fu_1843_p1 = j4_0_reg_479;

assign zext_ln125_1_fu_2006_p1 = j5_0_reg_513;

assign zext_ln125_fu_1945_p1 = i5_0_reg_501;

assign zext_ln134_1_fu_1970_p1 = tmp_41_fu_1962_p3;

assign zext_ln134_2_fu_1992_p1 = j5_0_reg_513;

assign zext_ln134_fu_1958_p1 = tmp_39_fu_1950_p3;

assign zext_ln24_fu_609_p1 = v5_0_reg_334;

assign zext_ln28_fu_626_p1 = v7_0_reg_345;

assign zext_ln35_1_fu_663_p1 = tmp_27_fu_655_p3;

assign zext_ln35_2_fu_685_p1 = v12_0_reg_367;

assign zext_ln35_fu_651_p1 = tmp_26_fu_643_p3;

assign zext_ln40_1_fu_724_p1 = tmp_28_fu_716_p3;

assign zext_ln40_2_fu_736_p1 = tmp_29_fu_728_p3;

assign zext_ln40_3_fu_758_p1 = j_0_reg_389;

assign zext_ln40_fu_711_p1 = i_0_reg_378;

assign zext_ln65_1_fu_956_p1 = tmp_30_fu_948_p3;

assign zext_ln65_2_fu_968_p1 = tmp_31_fu_960_p3;

assign zext_ln65_3_fu_990_p1 = j1_0_reg_411;

assign zext_ln65_fu_943_p1 = i1_0_reg_400;

assign zext_ln90_1_fu_1188_p1 = tmp_32_fu_1180_p3;

assign zext_ln90_2_fu_1200_p1 = tmp_33_fu_1192_p3;

assign zext_ln90_3_fu_1222_p1 = j2_0_reg_434;

assign zext_ln90_fu_1175_p1 = i2_0_reg_422;

always @ (posedge ap_clk) begin
    sub_ln35_reg_2045[7:0] <= 8'b00000000;
    sub_ln40_reg_2066[7:0] <= 8'b00000000;
    sub_ln65_reg_2143[7:0] <= 8'b00000000;
    sub_ln90_reg_2225[7:0] <= 8'b00000000;
    sub_ln100_reg_2318[7:0] <= 8'b00000000;
    sub_ln111_reg_2406[7:0] <= 8'b00000000;
    sub_ln112_reg_2420[7:0] <= 8'b00000000;
    sub_ln134_reg_2471[7:0] <= 8'b00000000;
end

endmodule //Linear_layer_qkv
