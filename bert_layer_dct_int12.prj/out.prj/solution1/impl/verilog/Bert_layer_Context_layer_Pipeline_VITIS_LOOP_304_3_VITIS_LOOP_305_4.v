// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Context_layer_Pipeline_VITIS_LOOP_304_3_VITIS_LOOP_305_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        q_outp2_address0,
        q_outp2_ce0,
        q_outp2_we0,
        q_outp2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] q_outp2_address0;
output   q_outp2_ce0;
output   q_outp2_we0;
output  [31:0] q_outp2_d0;

reg ap_idle;
reg q_outp2_ce0;
reg q_outp2_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln304_fu_88_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] select_ln304_fu_118_p3;
reg   [6:0] select_ln304_reg_200;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln304_1_fu_126_p3;
reg   [3:0] select_ln304_1_reg_205;
wire   [63:0] zext_ln306_1_fu_171_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] v178_fu_44;
wire   [6:0] add_ln305_fu_134_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_v178_load;
reg   [3:0] v177_fu_48;
reg   [3:0] ap_sig_allocacmp_v177_load;
reg   [9:0] indvar_flatten_fu_52;
wire   [9:0] add_ln304_1_fu_94_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln305_fu_112_p2;
wire   [3:0] add_ln304_fu_106_p2;
wire   [9:0] tmp_119_fu_155_p3;
wire   [9:0] zext_ln306_fu_162_p1;
wire   [9:0] add_ln306_fu_165_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_88_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_52 <= add_ln304_1_fu_94_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_52 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_88_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            v177_fu_48 <= select_ln304_1_fu_126_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            v177_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln304_fu_88_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            v178_fu_44 <= add_ln305_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            v178_fu_44 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln304_fu_88_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln304_1_reg_205 <= select_ln304_1_fu_126_p3;
        select_ln304_reg_200 <= select_ln304_fu_118_p3;
    end
end

always @ (*) begin
    if (((icmp_ln304_fu_88_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_v177_load = 4'd0;
    end else begin
        ap_sig_allocacmp_v177_load = v177_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_v178_load = 7'd0;
    end else begin
        ap_sig_allocacmp_v178_load = v178_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_outp2_ce0 = 1'b1;
    end else begin
        q_outp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_outp2_we0 = 1'b1;
    end else begin
        q_outp2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_1_fu_94_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln304_fu_106_p2 = (ap_sig_allocacmp_v177_load + 4'd1);

assign add_ln305_fu_134_p2 = (select_ln304_fu_118_p3 + 7'd1);

assign add_ln306_fu_165_p2 = (tmp_119_fu_155_p3 + zext_ln306_fu_162_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln304_fu_88_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_112_p2 = ((ap_sig_allocacmp_v178_load == 7'd64) ? 1'b1 : 1'b0);

assign q_outp2_address0 = zext_ln306_1_fu_171_p1;

assign q_outp2_d0 = 32'd0;

assign select_ln304_1_fu_126_p3 = ((icmp_ln305_fu_112_p2[0:0] == 1'b1) ? add_ln304_fu_106_p2 : ap_sig_allocacmp_v177_load);

assign select_ln304_fu_118_p3 = ((icmp_ln305_fu_112_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_v178_load);

assign tmp_119_fu_155_p3 = {{select_ln304_1_reg_205}, {6'd0}};

assign zext_ln306_1_fu_171_p1 = add_ln306_fu_165_p2;

assign zext_ln306_fu_162_p1 = select_ln304_reg_200;

endmodule //Bert_layer_Context_layer_Pipeline_VITIS_LOOP_304_3_VITIS_LOOP_305_4
