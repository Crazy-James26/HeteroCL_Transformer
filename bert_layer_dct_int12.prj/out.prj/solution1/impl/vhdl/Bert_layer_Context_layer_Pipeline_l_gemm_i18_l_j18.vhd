-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Context_layer_Pipeline_l_gemm_i18_l_j18 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    q_Attn_V_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_0_ce0 : OUT STD_LOGIC;
    q_Attn_V_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_1_ce0 : OUT STD_LOGIC;
    q_Attn_V_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_2_ce0 : OUT STD_LOGIC;
    q_Attn_V_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_3_ce0 : OUT STD_LOGIC;
    q_Attn_V_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_4_ce0 : OUT STD_LOGIC;
    q_Attn_V_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_5_ce0 : OUT STD_LOGIC;
    q_Attn_V_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_6_ce0 : OUT STD_LOGIC;
    q_Attn_V_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_7_ce0 : OUT STD_LOGIC;
    q_Attn_V_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_8_ce0 : OUT STD_LOGIC;
    q_Attn_V_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_9_ce0 : OUT STD_LOGIC;
    q_Attn_V_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_10_ce0 : OUT STD_LOGIC;
    q_Attn_V_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_Attn_V_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    q_Attn_V_11_ce0 : OUT STD_LOGIC;
    q_Attn_V_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_outp2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    q_outp2_ce0 : OUT STD_LOGIC;
    q_outp2_we0 : OUT STD_LOGIC;
    q_outp2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    q_outp2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    q_outp2_ce1 : OUT STD_LOGIC;
    q_outp2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    q_V_h_V_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_0_ce0 : OUT STD_LOGIC;
    q_V_h_V_0_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_1_ce0 : OUT STD_LOGIC;
    q_V_h_V_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_2_ce0 : OUT STD_LOGIC;
    q_V_h_V_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_3_ce0 : OUT STD_LOGIC;
    q_V_h_V_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_4_ce0 : OUT STD_LOGIC;
    q_V_h_V_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_5_ce0 : OUT STD_LOGIC;
    q_V_h_V_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_6_ce0 : OUT STD_LOGIC;
    q_V_h_V_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_7_ce0 : OUT STD_LOGIC;
    q_V_h_V_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_8_ce0 : OUT STD_LOGIC;
    q_V_h_V_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_9_ce0 : OUT STD_LOGIC;
    q_V_h_V_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_10_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_10_ce0 : OUT STD_LOGIC;
    q_V_h_V_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    q_V_h_V_11_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    q_V_h_V_11_ce0 : OUT STD_LOGIC;
    q_V_h_V_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Bert_layer_Context_layer_Pipeline_l_gemm_i18_l_j18 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln379_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln379_fu_481_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln379_reg_827 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln379_1_fu_489_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln379_1_reg_832 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln379_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln379_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln379_reg_837_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln379_reg_837_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j18_cast_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j18_cast_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal j18_cast_reg_857_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j18_cast_reg_857_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal q_outp2_addr_1_reg_907 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_addr_1_reg_907_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal q_outp2_load_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_outp2_load_reg_993_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal q_outp2_load_reg_993_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal q_outp2_load_reg_993_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_727_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln389_1_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln389_1_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_758_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln389_10_fu_683_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln389_10_reg_1158 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln389_11_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln389_11_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j18_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln380_fu_507_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j18_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i18_fu_96 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i18_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten18_fu_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln379_1_fu_457_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten18_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln380_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln379_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln379_cast_fu_539_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_432_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_720_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_735_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_749_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln389_1_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_766_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_775_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_784_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln389_5_fu_674_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln389_4_fu_671_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln389_9_fu_677_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln389_3_fu_668_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_793_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln389_2_fu_689_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln389_6_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln389_4_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mul_mul_12s_12s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_mac_muladd_12s_12s_24s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Bert_layer_mac_muladd_12s_12s_25s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_12s_12s_24_4_1_U1035 : component Bert_layer_mul_mul_12s_12s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_6_q0,
        din1 => q_Attn_V_6_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_706_p2);

    mul_mul_12s_12s_24_4_1_U1036 : component Bert_layer_mul_mul_12s_12s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_0_q0,
        din1 => q_Attn_V_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_713_p2);

    mul_mul_12s_12s_24_4_1_U1037 : component Bert_layer_mul_mul_12s_12s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_3_q0,
        din1 => q_Attn_V_3_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_720_p2);

    mac_muladd_12s_12s_24s_25_4_1_U1038 : component Bert_layer_mac_muladd_12s_12s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_7_q0,
        din1 => q_Attn_V_7_q0,
        din2 => grp_fu_706_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_727_p3);

    mul_mul_12s_12s_24_4_1_U1039 : component Bert_layer_mul_mul_12s_12s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_8_q0,
        din1 => q_Attn_V_8_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_735_p2);

    mul_mul_12s_12s_24_4_1_U1040 : component Bert_layer_mul_mul_12s_12s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_10_q0,
        din1 => q_Attn_V_10_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_742_p2);

    mac_muladd_12s_12s_24s_25_4_1_U1041 : component Bert_layer_mac_muladd_12s_12s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_1_q0,
        din1 => q_Attn_V_1_q0,
        din2 => grp_fu_713_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_749_p3);

    mac_muladd_12s_12s_24s_25_4_1_U1042 : component Bert_layer_mac_muladd_12s_12s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_4_q0,
        din1 => q_Attn_V_4_q0,
        din2 => grp_fu_720_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p3);

    mac_muladd_12s_12s_25s_25_4_1_U1043 : component Bert_layer_mac_muladd_12s_12s_25s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_5_q0,
        din1 => q_Attn_V_5_q0,
        din2 => grp_fu_727_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_766_p3);

    mac_muladd_12s_12s_24s_25_4_1_U1044 : component Bert_layer_mac_muladd_12s_12s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_9_q0,
        din1 => q_Attn_V_9_q0,
        din2 => grp_fu_735_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_775_p3);

    mac_muladd_12s_12s_24s_25_4_1_U1045 : component Bert_layer_mac_muladd_12s_12s_24s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_11_q0,
        din1 => q_Attn_V_11_q0,
        din2 => grp_fu_742_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_784_p3);

    mac_muladd_12s_12s_25s_25_4_1_U1046 : component Bert_layer_mac_muladd_12s_12s_25s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 25,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => q_V_h_V_2_q0,
        din1 => q_Attn_V_2_q0,
        din2 => grp_fu_758_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p3);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    i18_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln379_fu_451_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i18_fu_96 <= select_ln379_1_fu_489_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i18_fu_96 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten18_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln379_fu_451_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten18_fu_100 <= add_ln379_1_fu_457_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten18_fu_100 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j18_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln379_fu_451_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j18_fu_92 <= add_ln380_fu_507_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j18_fu_92 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln389_10_reg_1158 <= add_ln389_10_fu_683_p2;
                add_ln389_11_reg_1163 <= add_ln389_11_fu_700_p2;
                add_ln389_1_reg_1148 <= add_ln389_1_fu_663_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                    j18_cast_reg_857_pp0_iter2_reg(6 downto 0) <= j18_cast_reg_857_pp0_iter1_reg(6 downto 0);
                q_outp2_addr_1_reg_907_pp0_iter2_reg <= q_outp2_addr_1_reg_907;
                q_outp2_addr_1_reg_907_pp0_iter3_reg <= q_outp2_addr_1_reg_907_pp0_iter2_reg;
                q_outp2_addr_1_reg_907_pp0_iter4_reg <= q_outp2_addr_1_reg_907_pp0_iter3_reg;
                q_outp2_addr_1_reg_907_pp0_iter5_reg <= q_outp2_addr_1_reg_907_pp0_iter4_reg;
                q_outp2_addr_1_reg_907_pp0_iter6_reg <= q_outp2_addr_1_reg_907_pp0_iter5_reg;
                q_outp2_addr_1_reg_907_pp0_iter7_reg <= q_outp2_addr_1_reg_907_pp0_iter6_reg;
                q_outp2_load_reg_993_pp0_iter3_reg <= q_outp2_load_reg_993;
                q_outp2_load_reg_993_pp0_iter4_reg <= q_outp2_load_reg_993_pp0_iter3_reg;
                q_outp2_load_reg_993_pp0_iter5_reg <= q_outp2_load_reg_993_pp0_iter4_reg;
                    zext_ln379_reg_837_pp0_iter2_reg(3 downto 0) <= zext_ln379_reg_837_pp0_iter1_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    j18_cast_reg_857_pp0_iter1_reg(6 downto 0) <= j18_cast_reg_857(6 downto 0);
                q_outp2_addr_1_reg_907 <= p_cast_fu_548_p1(10 - 1 downto 0);
                    zext_ln379_reg_837_pp0_iter1_reg(3 downto 0) <= zext_ln379_reg_837(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln379_fu_451_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j18_cast_reg_857(6 downto 0) <= j18_cast_fu_502_p1(6 downto 0);
                select_ln379_1_reg_832 <= select_ln379_1_fu_489_p3;
                select_ln379_reg_827 <= select_ln379_fu_481_p3;
                    zext_ln379_reg_837(3 downto 0) <= zext_ln379_fu_497_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                q_outp2_load_reg_993 <= q_outp2_q1;
            end if;
        end if;
    end process;
    zext_ln379_reg_837(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln379_reg_837_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln379_reg_837_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    j18_cast_reg_857(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    j18_cast_reg_857_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    j18_cast_reg_857_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln379_1_fu_457_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten18_load) + unsigned(ap_const_lv10_1));
    add_ln379_fu_469_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i18_load) + unsigned(ap_const_lv4_1));
    add_ln380_fu_507_p2 <= std_logic_vector(unsigned(select_ln379_fu_481_p3) + unsigned(ap_const_lv7_1));
    add_ln389_10_fu_683_p2 <= std_logic_vector(unsigned(add_ln389_9_fu_677_p2) + unsigned(sext_ln389_3_fu_668_p1));
    add_ln389_11_fu_700_p2 <= std_logic_vector(signed(sext_ln389_6_fu_697_p1) + signed(add_ln389_4_fu_692_p2));
    add_ln389_1_fu_663_p2 <= std_logic_vector(signed(sext_ln389_1_fu_660_p1) + signed(q_outp2_load_reg_993_pp0_iter5_reg));
    add_ln389_4_fu_692_p2 <= std_logic_vector(signed(sext_ln389_2_fu_689_p1) + signed(add_ln389_1_reg_1148));
    add_ln389_9_fu_677_p2 <= std_logic_vector(signed(sext_ln389_5_fu_674_p1) + signed(sext_ln389_4_fu_671_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln379_fu_451_p2)
    begin
        if (((icmp_ln379_fu_451_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i18_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i18_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i18_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i18_load <= i18_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten18_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten18_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten18_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten18_load <= indvar_flatten18_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_j18_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j18_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j18_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j18_load <= j18_fu_92;
        end if; 
    end process;

    empty_432_fu_542_p2 <= std_logic_vector(unsigned(tmp_s_fu_528_p3) + unsigned(select_ln379_cast_fu_539_p1));
    icmp_ln379_fu_451_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten18_load = ap_const_lv10_300) else "0";
    icmp_ln380_fu_475_p2 <= "1" when (ap_sig_allocacmp_j18_load = ap_const_lv7_40) else "0";
    j18_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln379_fu_481_p3),64));
    p_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_432_fu_542_p2),64));
    q_Attn_V_0_address0 <= zext_ln379_reg_837(4 - 1 downto 0);

    q_Attn_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_0_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_10_address0 <= zext_ln379_reg_837(4 - 1 downto 0);

    q_Attn_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_10_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_11_address0 <= zext_ln379_reg_837_pp0_iter1_reg(4 - 1 downto 0);

    q_Attn_V_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_Attn_V_11_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_1_address0 <= zext_ln379_reg_837_pp0_iter1_reg(4 - 1 downto 0);

    q_Attn_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_Attn_V_1_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_2_address0 <= zext_ln379_reg_837_pp0_iter2_reg(4 - 1 downto 0);

    q_Attn_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            q_Attn_V_2_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_3_address0 <= zext_ln379_reg_837(4 - 1 downto 0);

    q_Attn_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_3_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_4_address0 <= zext_ln379_reg_837_pp0_iter1_reg(4 - 1 downto 0);

    q_Attn_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_Attn_V_4_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_5_address0 <= zext_ln379_reg_837_pp0_iter1_reg(4 - 1 downto 0);

    q_Attn_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_Attn_V_5_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_6_address0 <= zext_ln379_fu_497_p1(4 - 1 downto 0);

    q_Attn_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_6_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_7_address0 <= zext_ln379_reg_837(4 - 1 downto 0);

    q_Attn_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_7_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_8_address0 <= zext_ln379_reg_837(4 - 1 downto 0);

    q_Attn_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_Attn_V_8_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_Attn_V_9_address0 <= zext_ln379_reg_837_pp0_iter1_reg(4 - 1 downto 0);

    q_Attn_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_Attn_V_9_ce0 <= ap_const_logic_1;
        else 
            q_Attn_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_0_address0 <= j18_cast_reg_857(6 - 1 downto 0);

    q_V_h_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_0_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_10_address0 <= j18_cast_reg_857(6 - 1 downto 0);

    q_V_h_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_10_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_11_address0 <= j18_cast_reg_857_pp0_iter1_reg(6 - 1 downto 0);

    q_V_h_V_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_V_h_V_11_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_1_address0 <= j18_cast_reg_857_pp0_iter1_reg(6 - 1 downto 0);

    q_V_h_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_V_h_V_1_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_2_address0 <= j18_cast_reg_857_pp0_iter2_reg(6 - 1 downto 0);

    q_V_h_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            q_V_h_V_2_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_3_address0 <= j18_cast_reg_857(6 - 1 downto 0);

    q_V_h_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_3_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_4_address0 <= j18_cast_reg_857_pp0_iter1_reg(6 - 1 downto 0);

    q_V_h_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_V_h_V_4_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_5_address0 <= j18_cast_reg_857_pp0_iter1_reg(6 - 1 downto 0);

    q_V_h_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_V_h_V_5_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_6_address0 <= j18_cast_fu_502_p1(6 - 1 downto 0);

    q_V_h_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_6_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_7_address0 <= j18_cast_reg_857(6 - 1 downto 0);

    q_V_h_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_7_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_8_address0 <= j18_cast_reg_857(6 - 1 downto 0);

    q_V_h_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_V_h_V_8_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_V_h_V_9_address0 <= j18_cast_reg_857_pp0_iter1_reg(6 - 1 downto 0);

    q_V_h_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            q_V_h_V_9_ce0 <= ap_const_logic_1;
        else 
            q_V_h_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    q_outp2_address0 <= q_outp2_addr_1_reg_907_pp0_iter7_reg;
    q_outp2_address1 <= p_cast_fu_548_p1(10 - 1 downto 0);

    q_outp2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            q_outp2_ce0 <= ap_const_logic_1;
        else 
            q_outp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q_outp2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            q_outp2_ce1 <= ap_const_logic_1;
        else 
            q_outp2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    q_outp2_d0 <= add_ln389_11_reg_1163;

    q_outp2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            q_outp2_we0 <= ap_const_logic_1;
        else 
            q_outp2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln379_1_fu_489_p3 <= 
        add_ln379_fu_469_p2 when (icmp_ln380_fu_475_p2(0) = '1') else 
        ap_sig_allocacmp_i18_load;
    select_ln379_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln379_reg_827),10));
    select_ln379_fu_481_p3 <= 
        ap_const_lv7_0 when (icmp_ln380_fu_475_p2(0) = '1') else 
        ap_sig_allocacmp_j18_load;
        sext_ln389_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_749_p3),32));

        sext_ln389_2_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_793_p3),32));

        sext_ln389_3_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_766_p3),26));

        sext_ln389_4_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_775_p3),26));

        sext_ln389_5_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_784_p3),26));

        sext_ln389_6_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln389_10_reg_1158),32));

    tmp_s_fu_528_p3 <= (select_ln379_1_reg_832 & ap_const_lv6_0);
    zext_ln379_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln379_1_fu_489_p3),64));
end behav;
