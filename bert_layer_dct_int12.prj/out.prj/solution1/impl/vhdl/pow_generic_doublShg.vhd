-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pow_generic_doublShg_rom is 
    generic(
             DWIDTH     : integer := 92; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pow_generic_doublShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    1 => "00000100000000000000000000000011111111110000000000000101010100110101010110011101010100010101", 
    2 => "00001000000000000000000000001111111111100000000000101010101000101010101110101010100010101010", 
    3 => "00001100000000000000000000100011111111010000000010001111111011100000001101000111100101000001", 
    4 => "00010000000000000000000000111111111111000000000101010101001101010101111001010100010101011001", 
    5 => "00010100000000000000000001100011111110110000001010011010011110001011111101110000101101110101", 
    6 => "00011000000000000000000010001111111110100000010001111111101110000010100111111100101000011001", 
    7 => "00011100000000000000000011000011111110010000011100100100111100111010001000010111111111001100", 
    8 => "00100000000000000000000011111111111110000000101010101010001010110010110010100010101100010100", 
    9 => "00100100000000000000000101000011111101110000111100101111010111101100111100111100101001111100", 
    10 => "00101000000000000000000110001111111101100001010011010100100011101001000001000101110010010010", 
    11 => "00101100000000000000000111100011111101010001101110111001101110100111011011011101111111100111", 
    12 => "00110000000000000000001000111111111101000010001111111110111000101000101011100101001100010000", 
    13 => "00110100000000000000001010100011111100110010110111000100000001101101010011111011010010100101", 
    14 => "00111000000000000000001100001111111100100011100100101001001001110101111010000000001101000100", 
    15 => "00111100000000000000001110000011111100010100011001001110010001000011000110010011110110001111", 
    16 => "01000000000000000000001111111111111100000101010101010011010111010101100100010110001000101101", 
    17 => "01000100000000000000010010000011111011110110011001011000011100101110000010100110111111001100", 
    18 => "01001000000000000000010100001111111011100111100101111101100001001101010010100110010100011111", 
    19 => "01001100000000000000010110100011111011011000111011100010100100110100001000110100000011011111", 
    20 => "01010000000000000000011000111111111011001010011010100111100111100011011100110000000111001100", 
    21 => "01010100000000000000011011100011111010111100000011101100101001011100001000111010011010101110", 
    22 => "01011000000000000000011110001111111010101101110111010001101010011111001010110010111001010011", 
    23 => "01011100000000000000100001000011111010011111110101110110101010101101100010111001011110010010", 
    24 => "01100000000000000000100011111111111010010001111111111011101010001000010100101110000101001011", 
    25 => "01100100000000000000100111000011111010000100010110000000101000110000100110110000101001100101", 
    26 => "01101000000000000000101010001111111001110110111000100101100110100111100010100001000111010000", 
    27 => "01101100000000000000101101100011111001101001101000001010100011101110010100011111011010000110", 
    28 => "01110000000000000000110000111111111001011100100101001111100000000110001100001011011110001011", 
    29 => "01110100000000000000110100100011111001001111110000010100011011110000011100000101001111101110", 
    30 => "01111000000000000000111000001111111001000011001001111001010110101110011001101100101011000101", 
    31 => "01111100000000000000111100000011111000110110110010011110010001000001011101100001101100110101", 
    32 => "10000000000000000000111111111111111000101010101010100011001010101011000011000100010001101100", 
    33 => "10000100000000000001000100000011111000011110110010101000000011101100101000110100010110100100", 
    34 => "10001000000000000001001000001111111000010011001011001100111100000111110000010001111000100011", 
    35 => "10001100000000000001001100100011111000000111110100110001110011111101111101111100110100111100", 
    36 => "10010000000000000001010000111111110111111100101111110110101011010000111001010101001001001101", 
    37 => "10010100000000000001010101100011110111110001111100111011100010000010001100111010110011000011", 
    38 => "10011000000000000001011010001111110111100111011100100000011000010011100110001101110000011001", 
    39 => "10011100000000000001011111000011110111011101001111000101001110000110110101101101111111010101", 
    40 => "10100000000000000001100011111111110111010011010101001010000011011101101110111011011110001110", 
    41 => "10100100000000000001101001000011110111001001101111001110111000011010001000010110001011101000", 
    42 => "10101000000000000001101110001111110111000000011101110011101100111101111011011110000110010110", 
    43 => "10101100000000000001110011100011110110110111100001011000100001001011000100110011001101011101", 
    44 => "10110000000000000001111000111111110110101110111010011101010101000011100011110101100000001110", 
    45 => "10110100000000000001111110100011110110100110101001100010001000101001011011000100111110001100", 
    46 => "10111000000000000010000100001111110110011110101111000110111011111110110000000001100111001011", 
    47 => "10111100000000000010001010000011110110010111001011101011101111000101101011001011011011001111", 
    48 => "11000000000000000010001111111111110110001111111111110000100010000000011000000010011010101101", 
    49 => "11000100000000000010010110000011110110001001001011110101010100110001000101000110100110001101", 
    50 => "11001000000000000010011100001111110110000010110000011010000111011010000011110111111110100111", 
    51 => "11001100000000000010100010100011110101111100101101111110111001111101101000110110100101000111", 
    52 => "11010000000000000010101000111111110101110111000101000011101100011110001011100010011011001100", 
    53 => "11010100000000000010101111100011110101110001110110001000011110111110000110011011100010100101", 
    54 => "11011000000000000010110110001111110101101101000001101101010001011111110111000001111101011010", 
    55 => "11011100000000000010111101000011110101101000101000010010000100000101111101110101101110000001", 
    56 => "11100000000000000011000011111111110101100100101010010110110110110010111110010110110111001001", 
    57 => "11100100000000000011001011000011110101100001001000011011101001101001011111000101011011110010", 
    58 => "11101000000000000011010010001111110101011110000011000000011100101100001001100001011111010011", 
    59 => "11101100000000000011011001100011110101011011011010100101001111111101101010001011000101011000", 
    60 => "11110000000000000011100000111111110101011001001111101010000011100000110000100010010010000100", 
    61 => "11110100000000000011101000100011110101010111100010101110110111011000001111000111001001101101", 
    62 => "11111000000000000011110000001111110101010110010100010011101011100110111011011001110001000010", 
    63 => "11111100000000000011111000000011110101010101100100111000100000001111101101111010001101001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pow_generic_doublShg is
    generic (
        DataWidth : INTEGER := 92;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pow_generic_doublShg is
    component pow_generic_doublShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pow_generic_doublShg_rom_U :  component pow_generic_doublShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


