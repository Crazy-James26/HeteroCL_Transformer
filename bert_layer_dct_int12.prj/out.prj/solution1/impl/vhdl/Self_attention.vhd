-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Self_attention is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v241_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v241_ce0 : OUT STD_LOGIC;
    v241_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v242_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v242_ce0 : OUT STD_LOGIC;
    v242_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v243_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v243_ce0 : OUT STD_LOGIC;
    v243_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v244_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v244_ce0 : OUT STD_LOGIC;
    v244_we0 : OUT STD_LOGIC;
    v244_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Self_attention is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_fu_273_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_279_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_503 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln414_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i20_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i20_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln420_fu_323_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln420_reg_517 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln418_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln419_1_fu_337_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln419_1_reg_522 : STD_LOGIC_VECTOR (10 downto 0);
    signal j20_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j20_reg_530 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln419_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln421_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln421_reg_550 : STD_LOGIC_VECTOR (10 downto 0);
    signal i21_fu_399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i21_reg_558 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sub_ln437_fu_429_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln437_reg_563 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln434_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln435_1_fu_443_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln435_1_reg_568 : STD_LOGIC_VECTOR (10 downto 0);
    signal j21_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j21_reg_576 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln435_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln437_1_fu_486_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln437_1_reg_586 : STD_LOGIC_VECTOR (14 downto 0);
    signal Q_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Q_h_ce0 : STD_LOGIC;
    signal Q_h_we0 : STD_LOGIC;
    signal Q_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal K_h_ce0 : STD_LOGIC;
    signal K_h_we0 : STD_LOGIC;
    signal K_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal V_h_ce0 : STD_LOGIC;
    signal V_h_we0 : STD_LOGIC;
    signal V_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v254_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v254_ce0 : STD_LOGIC;
    signal v254_we0 : STD_LOGIC;
    signal v254_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v254_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v255_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal v255_ce0 : STD_LOGIC;
    signal v255_we0 : STD_LOGIC;
    signal v255_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v256_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal v256_ce0 : STD_LOGIC;
    signal v256_we0 : STD_LOGIC;
    signal v256_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Context_layer_fu_247_ap_start : STD_LOGIC;
    signal grp_Context_layer_fu_247_ap_done : STD_LOGIC;
    signal grp_Context_layer_fu_247_ap_idle : STD_LOGIC;
    signal grp_Context_layer_fu_247_ap_ready : STD_LOGIC;
    signal grp_Context_layer_fu_247_v167_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Context_layer_fu_247_v167_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_247_v168_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Context_layer_fu_247_v168_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_247_v169_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Context_layer_fu_247_v169_ce0 : STD_LOGIC;
    signal grp_Context_layer_fu_247_v169_we0 : STD_LOGIC;
    signal grp_Context_layer_fu_247_v169_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Attention_layer_fu_254_ap_start : STD_LOGIC;
    signal grp_Attention_layer_fu_254_ap_done : STD_LOGIC;
    signal grp_Attention_layer_fu_254_ap_idle : STD_LOGIC;
    signal grp_Attention_layer_fu_254_ap_ready : STD_LOGIC;
    signal grp_Attention_layer_fu_254_v77_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Attention_layer_fu_254_v77_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_254_v78_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Attention_layer_fu_254_v78_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_254_v79_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Attention_layer_fu_254_v79_ce0 : STD_LOGIC;
    signal grp_Attention_layer_fu_254_v79_we0 : STD_LOGIC;
    signal grp_Attention_layer_fu_254_v79_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Softmax_layer_fu_261_ap_start : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_ap_done : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_ap_idle : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_ap_ready : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_v151_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Softmax_layer_fu_261_v151_ce0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_v151_we0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_v151_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Softmax_layer_fu_261_v152_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Softmax_layer_fu_261_v152_ce0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_v152_we0 : STD_LOGIC;
    signal grp_Softmax_layer_fu_261_v152_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_0_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal i20_0_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal j20_0_reg_214 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i21_0_reg_225 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j21_0_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_Context_layer_fu_247_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_Attention_layer_fu_254_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_Softmax_layer_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln420_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln421_1_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln436_1_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln437_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_299_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_311_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln420_fu_307_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln420_1_fu_319_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_329_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln419_fu_341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln420_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln420_2_fu_362_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln420_1_fu_366_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln421_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_405_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_fu_417_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln437_fu_413_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln437_1_fu_425_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_24_fu_435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln436_fu_463_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln436_fu_467_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln435_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln437_fu_477_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln437_2_fu_482_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component Context_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v167_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v167_ce0 : OUT STD_LOGIC;
        v167_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v168_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v168_ce0 : OUT STD_LOGIC;
        v168_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v169_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v169_ce0 : OUT STD_LOGIC;
        v169_we0 : OUT STD_LOGIC;
        v169_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Attention_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v77_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v77_ce0 : OUT STD_LOGIC;
        v77_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v78_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v78_ce0 : OUT STD_LOGIC;
        v78_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v79_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v79_ce0 : OUT STD_LOGIC;
        v79_we0 : OUT STD_LOGIC;
        v79_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v151_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v151_ce0 : OUT STD_LOGIC;
        v151_we0 : OUT STD_LOGIC;
        v151_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v151_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v152_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        v152_ce0 : OUT STD_LOGIC;
        v152_we0 : OUT STD_LOGIC;
        v152_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Linear_layer_qkv_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Attention_layer_qqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Q_h_U : component Linear_layer_qkv_cud
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Q_h_address0,
        ce0 => Q_h_ce0,
        we0 => Q_h_we0,
        d0 => v241_q0,
        q0 => Q_h_q0);

    K_h_U : component Linear_layer_qkv_cud
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => K_h_address0,
        ce0 => K_h_ce0,
        we0 => K_h_we0,
        d0 => v242_q0,
        q0 => K_h_q0);

    V_h_U : component Linear_layer_qkv_cud
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_h_address0,
        ce0 => V_h_ce0,
        we0 => V_h_we0,
        d0 => v243_q0,
        q0 => V_h_q0);

    v254_U : component Attention_layer_qqcK
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v254_address0,
        ce0 => v254_ce0,
        we0 => v254_we0,
        d0 => v254_d0,
        q0 => v254_q0);

    v255_U : component Attention_layer_qqcK
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v255_address0,
        ce0 => v255_ce0,
        we0 => v255_we0,
        d0 => grp_Softmax_layer_fu_261_v152_d0,
        q0 => v255_q0);

    v256_U : component Linear_layer_qkv_cud
    generic map (
        DataWidth => 32,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v256_address0,
        ce0 => v256_ce0,
        we0 => v256_we0,
        d0 => grp_Context_layer_fu_247_v169_d0,
        q0 => v256_q0);

    grp_Context_layer_fu_247 : component Context_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Context_layer_fu_247_ap_start,
        ap_done => grp_Context_layer_fu_247_ap_done,
        ap_idle => grp_Context_layer_fu_247_ap_idle,
        ap_ready => grp_Context_layer_fu_247_ap_ready,
        v167_address0 => grp_Context_layer_fu_247_v167_address0,
        v167_ce0 => grp_Context_layer_fu_247_v167_ce0,
        v167_q0 => v255_q0,
        v168_address0 => grp_Context_layer_fu_247_v168_address0,
        v168_ce0 => grp_Context_layer_fu_247_v168_ce0,
        v168_q0 => V_h_q0,
        v169_address0 => grp_Context_layer_fu_247_v169_address0,
        v169_ce0 => grp_Context_layer_fu_247_v169_ce0,
        v169_we0 => grp_Context_layer_fu_247_v169_we0,
        v169_d0 => grp_Context_layer_fu_247_v169_d0);

    grp_Attention_layer_fu_254 : component Attention_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Attention_layer_fu_254_ap_start,
        ap_done => grp_Attention_layer_fu_254_ap_done,
        ap_idle => grp_Attention_layer_fu_254_ap_idle,
        ap_ready => grp_Attention_layer_fu_254_ap_ready,
        v77_address0 => grp_Attention_layer_fu_254_v77_address0,
        v77_ce0 => grp_Attention_layer_fu_254_v77_ce0,
        v77_q0 => Q_h_q0,
        v78_address0 => grp_Attention_layer_fu_254_v78_address0,
        v78_ce0 => grp_Attention_layer_fu_254_v78_ce0,
        v78_q0 => K_h_q0,
        v79_address0 => grp_Attention_layer_fu_254_v79_address0,
        v79_ce0 => grp_Attention_layer_fu_254_v79_ce0,
        v79_we0 => grp_Attention_layer_fu_254_v79_we0,
        v79_d0 => grp_Attention_layer_fu_254_v79_d0);

    grp_Softmax_layer_fu_261 : component Softmax_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Softmax_layer_fu_261_ap_start,
        ap_done => grp_Softmax_layer_fu_261_ap_done,
        ap_idle => grp_Softmax_layer_fu_261_ap_idle,
        ap_ready => grp_Softmax_layer_fu_261_ap_ready,
        v151_address0 => grp_Softmax_layer_fu_261_v151_address0,
        v151_ce0 => grp_Softmax_layer_fu_261_v151_ce0,
        v151_we0 => grp_Softmax_layer_fu_261_v151_we0,
        v151_d0 => grp_Softmax_layer_fu_261_v151_d0,
        v151_q0 => v254_q0,
        v152_address0 => grp_Softmax_layer_fu_261_v152_address0,
        v152_ce0 => grp_Softmax_layer_fu_261_v152_ce0,
        v152_we0 => grp_Softmax_layer_fu_261_v152_we0,
        v152_d0 => grp_Softmax_layer_fu_261_v152_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Attention_layer_fu_254_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Attention_layer_fu_254_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln418_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_Attention_layer_fu_254_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Attention_layer_fu_254_ap_ready = ap_const_logic_1)) then 
                    grp_Attention_layer_fu_254_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Context_layer_fu_247_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Context_layer_fu_247_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_Context_layer_fu_247_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Context_layer_fu_247_ap_ready = ap_const_logic_1)) then 
                    grp_Context_layer_fu_247_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Softmax_layer_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Softmax_layer_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Softmax_layer_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Softmax_layer_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_Softmax_layer_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln434_fu_393_p2 = ap_const_lv1_1))) then 
                h_0_reg_192 <= h_reg_498;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                h_0_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i20_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln419_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i20_0_reg_203 <= i20_reg_512;
            elsif (((icmp_ln414_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i20_0_reg_203 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i21_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln435_fu_451_p2 = ap_const_lv1_1))) then 
                i21_0_reg_225 <= i21_reg_558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Context_layer_fu_247_ap_done = ap_const_logic_1))) then 
                i21_0_reg_225 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j20_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j20_0_reg_214 <= j20_reg_530;
            elsif (((icmp_ln418_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j20_0_reg_214 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j21_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j21_0_reg_236 <= j21_reg_576;
            elsif (((icmp_ln434_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j21_0_reg_236 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln419_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln421_reg_550 <= add_ln421_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln435_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                add_ln437_1_reg_586 <= add_ln437_1_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                h_reg_498 <= h_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i20_reg_512 <= i20_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i21_reg_558 <= i21_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j20_reg_530 <= j20_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j21_reg_576 <= j21_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln414_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_503(9 downto 6) <= shl_ln_fu_279_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln418_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln420_reg_517(14 downto 8) <= sub_ln420_fu_323_p2(14 downto 8);
                    zext_ln419_1_reg_522(9 downto 6) <= zext_ln419_1_fu_337_p1(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln434_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    sub_ln437_reg_563(14 downto 8) <= sub_ln437_fu_429_p2(14 downto 8);
                    zext_ln435_1_reg_568(9 downto 6) <= zext_ln435_1_fu_443_p1(9 downto 6);
            end if;
        end if;
    end process;
    shl_ln_reg_503(5 downto 0) <= "000000";
    sub_ln420_reg_517(7 downto 0) <= "00000000";
    zext_ln419_1_reg_522(5 downto 0) <= "000000";
    zext_ln419_1_reg_522(10) <= '0';
    sub_ln437_reg_563(7 downto 0) <= "00000000";
    zext_ln435_1_reg_568(5 downto 0) <= "000000";
    zext_ln435_1_reg_568(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln414_fu_267_p2, ap_CS_fsm_state3, icmp_ln418_fu_287_p2, ap_CS_fsm_state4, icmp_ln419_fu_345_p2, ap_CS_fsm_state11, icmp_ln434_fu_393_p2, ap_CS_fsm_state12, icmp_ln435_fu_451_p2, grp_Context_layer_fu_247_ap_done, grp_Attention_layer_fu_254_ap_done, grp_Softmax_layer_fu_261_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln414_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln418_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln419_fu_345_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((grp_Attention_layer_fu_254_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_Softmax_layer_fu_261_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Context_layer_fu_247_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln434_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln435_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    K_h_address0_assign_proc : process(grp_Attention_layer_fu_254_v78_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln421_1_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            K_h_address0 <= zext_ln421_1_fu_387_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            K_h_address0 <= grp_Attention_layer_fu_254_v78_address0;
        else 
            K_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    K_h_ce0_assign_proc : process(grp_Attention_layer_fu_254_v78_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            K_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            K_h_ce0 <= grp_Attention_layer_fu_254_v78_ce0;
        else 
            K_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    K_h_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            K_h_we0 <= ap_const_logic_1;
        else 
            K_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_h_address0_assign_proc : process(grp_Attention_layer_fu_254_v77_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln421_1_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Q_h_address0 <= zext_ln421_1_fu_387_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Q_h_address0 <= grp_Attention_layer_fu_254_v77_address0;
        else 
            Q_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Q_h_ce0_assign_proc : process(grp_Attention_layer_fu_254_v77_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Q_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Q_h_ce0 <= grp_Attention_layer_fu_254_v77_ce0;
        else 
            Q_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_h_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Q_h_we0 <= ap_const_logic_1;
        else 
            Q_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    V_h_address0_assign_proc : process(grp_Context_layer_fu_247_v168_address0, ap_CS_fsm_state5, ap_CS_fsm_state10, zext_ln421_1_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_h_address0 <= zext_ln421_1_fu_387_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            V_h_address0 <= grp_Context_layer_fu_247_v168_address0;
        else 
            V_h_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    V_h_ce0_assign_proc : process(grp_Context_layer_fu_247_v168_ce0, ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            V_h_ce0 <= grp_Context_layer_fu_247_v168_ce0;
        else 
            V_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_h_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            V_h_we0 <= ap_const_logic_1;
        else 
            V_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln420_1_fu_366_p2 <= std_logic_vector(unsigned(sub_ln420_reg_517) + unsigned(zext_ln420_2_fu_362_p1));
    add_ln420_fu_357_p2 <= std_logic_vector(unsigned(zext_ln419_fu_341_p1) + unsigned(shl_ln_reg_503));
    add_ln421_fu_382_p2 <= std_logic_vector(unsigned(zext_ln419_1_reg_522) + unsigned(zext_ln421_fu_378_p1));
    add_ln436_fu_467_p2 <= std_logic_vector(unsigned(zext_ln435_1_reg_568) + unsigned(zext_ln436_fu_463_p1));
    add_ln437_1_fu_486_p2 <= std_logic_vector(unsigned(sub_ln437_reg_563) + unsigned(zext_ln437_2_fu_482_p1));
    add_ln437_fu_477_p2 <= std_logic_vector(unsigned(zext_ln435_fu_447_p1) + unsigned(shl_ln_reg_503));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln414_fu_267_p2)
    begin
        if ((((icmp_ln414_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln414_fu_267_p2)
    begin
        if (((icmp_ln414_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Attention_layer_fu_254_ap_start <= grp_Attention_layer_fu_254_ap_start_reg;
    grp_Context_layer_fu_247_ap_start <= grp_Context_layer_fu_247_ap_start_reg;
    grp_Softmax_layer_fu_261_ap_start <= grp_Softmax_layer_fu_261_ap_start_reg;
    h_fu_273_p2 <= std_logic_vector(unsigned(h_0_reg_192) + unsigned(ap_const_lv4_1));
    i20_fu_293_p2 <= std_logic_vector(unsigned(i20_0_reg_203) + unsigned(ap_const_lv4_1));
    i21_fu_399_p2 <= std_logic_vector(unsigned(i21_0_reg_225) + unsigned(ap_const_lv4_1));
    icmp_ln414_fu_267_p2 <= "1" when (h_0_reg_192 = ap_const_lv4_C) else "0";
    icmp_ln418_fu_287_p2 <= "1" when (i20_0_reg_203 = ap_const_lv4_C) else "0";
    icmp_ln419_fu_345_p2 <= "1" when (j20_0_reg_214 = ap_const_lv7_40) else "0";
    icmp_ln434_fu_393_p2 <= "1" when (i21_0_reg_225 = ap_const_lv4_C) else "0";
    icmp_ln435_fu_451_p2 <= "1" when (j21_0_reg_236 = ap_const_lv7_40) else "0";
    j20_fu_351_p2 <= std_logic_vector(unsigned(j20_0_reg_214) + unsigned(ap_const_lv7_1));
    j21_fu_457_p2 <= std_logic_vector(unsigned(j21_0_reg_236) + unsigned(ap_const_lv7_1));
        sext_ln420_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln420_1_fu_366_p2),64));

        sext_ln437_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln437_1_reg_586),64));

    shl_ln_fu_279_p3 <= (h_0_reg_192 & ap_const_lv6_0);
    sub_ln420_fu_323_p2 <= std_logic_vector(unsigned(zext_ln420_fu_307_p1) - unsigned(zext_ln420_1_fu_319_p1));
    sub_ln437_fu_429_p2 <= std_logic_vector(unsigned(zext_ln437_fu_413_p1) - unsigned(zext_ln437_1_fu_425_p1));
    tmp_19_fu_299_p3 <= (i20_0_reg_203 & ap_const_lv10_0);
    tmp_20_fu_311_p3 <= (i20_0_reg_203 & ap_const_lv8_0);
    tmp_21_fu_329_p3 <= (i20_0_reg_203 & ap_const_lv6_0);
    tmp_22_fu_405_p3 <= (i21_0_reg_225 & ap_const_lv10_0);
    tmp_23_fu_417_p3 <= (i21_0_reg_225 & ap_const_lv8_0);
    tmp_24_fu_435_p3 <= (i21_0_reg_225 & ap_const_lv6_0);
    v241_address0 <= sext_ln420_fu_371_p1(14 - 1 downto 0);

    v241_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v241_ce0 <= ap_const_logic_1;
        else 
            v241_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v242_address0 <= sext_ln420_fu_371_p1(14 - 1 downto 0);

    v242_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v242_ce0 <= ap_const_logic_1;
        else 
            v242_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v243_address0 <= sext_ln420_fu_371_p1(14 - 1 downto 0);

    v243_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v243_ce0 <= ap_const_logic_1;
        else 
            v243_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v244_address0 <= sext_ln437_fu_491_p1(14 - 1 downto 0);

    v244_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v244_ce0 <= ap_const_logic_1;
        else 
            v244_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v244_d0 <= v256_q0;

    v244_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v244_we0 <= ap_const_logic_1;
        else 
            v244_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v254_address0_assign_proc : process(grp_Attention_layer_fu_254_v79_address0, grp_Softmax_layer_fu_261_v151_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v254_address0 <= grp_Softmax_layer_fu_261_v151_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v254_address0 <= grp_Attention_layer_fu_254_v79_address0;
        else 
            v254_address0 <= "XXXXXXXX";
        end if; 
    end process;


    v254_ce0_assign_proc : process(grp_Attention_layer_fu_254_v79_ce0, grp_Softmax_layer_fu_261_v151_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v254_ce0 <= grp_Softmax_layer_fu_261_v151_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v254_ce0 <= grp_Attention_layer_fu_254_v79_ce0;
        else 
            v254_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v254_d0_assign_proc : process(grp_Attention_layer_fu_254_v79_d0, grp_Softmax_layer_fu_261_v151_d0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v254_d0 <= grp_Softmax_layer_fu_261_v151_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v254_d0 <= grp_Attention_layer_fu_254_v79_d0;
        else 
            v254_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v254_we0_assign_proc : process(grp_Attention_layer_fu_254_v79_we0, grp_Softmax_layer_fu_261_v151_we0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v254_we0 <= grp_Softmax_layer_fu_261_v151_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v254_we0 <= grp_Attention_layer_fu_254_v79_we0;
        else 
            v254_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v255_address0_assign_proc : process(grp_Context_layer_fu_247_v167_address0, grp_Softmax_layer_fu_261_v152_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v255_address0 <= grp_Softmax_layer_fu_261_v152_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v255_address0 <= grp_Context_layer_fu_247_v167_address0;
        else 
            v255_address0 <= "XXXXXXXX";
        end if; 
    end process;


    v255_ce0_assign_proc : process(grp_Context_layer_fu_247_v167_ce0, grp_Softmax_layer_fu_261_v152_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v255_ce0 <= grp_Softmax_layer_fu_261_v152_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v255_ce0 <= grp_Context_layer_fu_247_v167_ce0;
        else 
            v255_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v255_we0_assign_proc : process(grp_Softmax_layer_fu_261_v152_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v255_we0 <= grp_Softmax_layer_fu_261_v152_we0;
        else 
            v255_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v256_address0_assign_proc : process(ap_CS_fsm_state12, grp_Context_layer_fu_247_v169_address0, ap_CS_fsm_state10, zext_ln436_1_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v256_address0 <= zext_ln436_1_fu_472_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v256_address0 <= grp_Context_layer_fu_247_v169_address0;
        else 
            v256_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v256_ce0_assign_proc : process(ap_CS_fsm_state12, grp_Context_layer_fu_247_v169_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            v256_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v256_ce0 <= grp_Context_layer_fu_247_v169_ce0;
        else 
            v256_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v256_we0_assign_proc : process(grp_Context_layer_fu_247_v169_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            v256_we0 <= grp_Context_layer_fu_247_v169_we0;
        else 
            v256_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln419_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_329_p3),11));
    zext_ln419_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j20_0_reg_214),10));
    zext_ln420_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_311_p3),15));
    zext_ln420_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln420_fu_357_p2),15));
    zext_ln420_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_299_p3),15));
    zext_ln421_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln421_reg_550),64));
    zext_ln421_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j20_0_reg_214),11));
    zext_ln435_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_435_p3),11));
    zext_ln435_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j21_0_reg_236),10));
    zext_ln436_1_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln436_fu_467_p2),64));
    zext_ln436_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j21_0_reg_236),11));
    zext_ln437_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_417_p3),15));
    zext_ln437_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln437_fu_477_p2),15));
    zext_ln437_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_405_p3),15));
end behav;
