-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Linear_layer_ds0_Pipeline_l_j22 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_inp1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    max_inp1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_inp1_ce0 : OUT STD_LOGIC;
    max_inp1_we0 : OUT STD_LOGIC;
    max_inp1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln465 : IN STD_LOGIC_VECTOR (3 downto 0);
    sub_ln467 : IN STD_LOGIC_VECTOR (13 downto 0);
    v260_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v260_ce0 : OUT STD_LOGIC;
    v260_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_622_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_622_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_622_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_622_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_622_p_ce : OUT STD_LOGIC;
    grp_fu_626_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_626_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_626_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_626_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_626_p_ce : OUT STD_LOGIC;
    grp_fu_630_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_630_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_630_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_630_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_630_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Linear_layer_ds0_Pipeline_l_j22 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln466_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal max_inp1_addr_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_inp1_addr_reg_345_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln466_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln466_fu_144_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln466_reg_354 : STD_LOGIC_VECTOR (9 downto 0);
    signal ifzero_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_364_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v275_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal v277_load_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln468_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln468_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln468_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln468_1_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal v283_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v283_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln481_2_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln481_2_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln468_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln468_reg_407 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln482_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln482_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln473_fu_309_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln473_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln465_cast_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln467_1_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v277_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln468_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal j22_fu_60 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_j22_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln467_fu_150_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln467_fu_154_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln468_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_179_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln468_fu_189_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal xor_ln480_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln481_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_243_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln481_fu_253_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln481_1_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln481_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln481_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln481_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln481_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v284_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln472_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v279_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln468_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j22_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j22_fu_60 <= ap_const_lv10_0;
            elsif (((icmp_ln466_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                j22_fu_60 <= add_ln466_reg_354;
            end if; 
        end if;
    end process;

    v277_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                v277_fu_56 <= max_inp1_load;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                v277_fu_56 <= select_ln468_fu_319_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln466_reg_354 <= add_ln466_fu_144_p2;
                icmp_ln466_reg_350 <= icmp_ln466_fu_138_p2;
                ifzero_reg_364_pp0_iter1_reg <= ifzero_reg_364;
                max_inp1_addr_reg_345 <= zext_ln465_cast_fu_120_p1(4 - 1 downto 0);
                max_inp1_addr_reg_345_pp0_iter1_reg <= max_inp1_addr_reg_345;
                or_ln468_reg_407 <= or_ln468_fu_236_p2;
                select_ln473_reg_422 <= select_ln473_fu_309_p3;
                select_ln482_reg_417 <= select_ln482_fu_291_p3;
                tmp_39_reg_412 <= grp_fu_622_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln466_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln468_1_reg_390 <= icmp_ln468_1_fu_199_p2;
                icmp_ln468_reg_385 <= icmp_ln468_fu_193_p2;
                icmp_ln481_2_reg_402 <= icmp_ln481_2_fu_226_p2;
                v277_load_reg_376 <= v277_fu_56;
                v283_reg_396 <= v283_fu_211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln466_fu_138_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ifzero_reg_364 <= ifzero_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln466_reg_350 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                v275_reg_368 <= v260_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln466_fu_144_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j22_1) + unsigned(ap_const_lv10_1));
    add_ln467_fu_154_p2 <= std_logic_vector(unsigned(sub_ln467) + unsigned(zext_ln467_fu_150_p1));
    and_ln468_fu_315_p2 <= (tmp_39_reg_412 and or_ln468_reg_407);
    and_ln472_fu_297_p2 <= (or_ln481_fu_269_p2 and or_ln468_fu_236_p2);
    and_ln481_fu_279_p2 <= (or_ln481_fu_269_p2 and grp_fu_626_p_dout0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln466_reg_350)
    begin
        if (((icmp_ln466_reg_350 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j22_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j22_fu_60)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j22_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j22_1 <= j22_fu_60;
        end if; 
    end process;

    bitcast_ln468_fu_176_p1 <= v275_reg_368;
    bitcast_ln481_fu_240_p1 <= v277_load_reg_376;
    grp_fu_622_p_ce <= ap_const_logic_1;
    grp_fu_622_p_din0 <= v275_reg_368;
    grp_fu_622_p_din1 <= ap_const_lv32_0;
    grp_fu_622_p_opcode <= ap_const_lv5_3;
    grp_fu_626_p_ce <= ap_const_logic_1;
    grp_fu_626_p_din0 <= v277_fu_56;
    grp_fu_626_p_din1 <= v283_fu_211_p1;
    grp_fu_626_p_opcode <= ap_const_lv5_4;
    grp_fu_630_p_ce <= ap_const_logic_1;
    grp_fu_630_p_din0 <= v277_fu_56;
    grp_fu_630_p_din1 <= v275_reg_368;
    grp_fu_630_p_opcode <= ap_const_lv5_4;
    icmp_ln466_fu_138_p2 <= "1" when (ap_sig_allocacmp_j22_1 = ap_const_lv10_300) else "0";
    icmp_ln468_1_fu_199_p2 <= "1" when (trunc_ln468_fu_189_p1 = ap_const_lv23_0) else "0";
    icmp_ln468_fu_193_p2 <= "0" when (tmp_38_fu_179_p4 = ap_const_lv8_FF) else "1";
    icmp_ln481_1_fu_263_p2 <= "1" when (trunc_ln481_fu_253_p1 = ap_const_lv23_0) else "0";
    icmp_ln481_2_fu_226_p2 <= "0" when (tmp_41_fu_216_p4 = ap_const_lv8_FF) else "1";
    icmp_ln481_fu_257_p2 <= "0" when (tmp_40_fu_243_p4 = ap_const_lv8_FF) else "1";
    ifzero_fu_165_p2 <= "1" when (add_ln466_fu_144_p2 = ap_const_lv10_300) else "0";
    max_inp1_address0 <= max_inp1_addr_reg_345_pp0_iter1_reg;

    max_inp1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            max_inp1_ce0 <= ap_const_logic_1;
        else 
            max_inp1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_inp1_d0 <= 
        select_ln473_reg_422 when (and_ln468_fu_315_p2(0) = '1') else 
        select_ln482_reg_417;

    max_inp1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ifzero_reg_364_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ifzero_reg_364_pp0_iter1_reg = ap_const_lv1_1))) then 
            max_inp1_we0 <= ap_const_logic_1;
        else 
            max_inp1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln468_fu_236_p2 <= (icmp_ln468_reg_385 or icmp_ln468_1_reg_390);
    or_ln481_1_fu_275_p2 <= (icmp_ln481_2_reg_402 or icmp_ln468_1_reg_390);
    or_ln481_fu_269_p2 <= (icmp_ln481_fu_257_p2 or icmp_ln481_1_fu_263_p2);
    select_ln468_fu_319_p3 <= 
        select_ln473_reg_422 when (and_ln468_fu_315_p2(0) = '1') else 
        select_ln482_reg_417;
    select_ln473_fu_309_p3 <= 
        v275_reg_368 when (v279_fu_303_p2(0) = '1') else 
        v277_load_reg_376;
    select_ln482_fu_291_p3 <= 
        v283_reg_396 when (v284_fu_285_p2(0) = '1') else 
        v277_load_reg_376;
    tmp_38_fu_179_p4 <= bitcast_ln468_fu_176_p1(30 downto 23);
    tmp_40_fu_243_p4 <= bitcast_ln481_fu_240_p1(30 downto 23);
    tmp_41_fu_216_p4 <= xor_ln480_fu_205_p2(30 downto 23);
    trunc_ln468_fu_189_p1 <= bitcast_ln468_fu_176_p1(23 - 1 downto 0);
    trunc_ln481_fu_253_p1 <= bitcast_ln481_fu_240_p1(23 - 1 downto 0);
    v260_address0 <= zext_ln467_1_fu_160_p1(14 - 1 downto 0);

    v260_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v260_ce0 <= ap_const_logic_1;
        else 
            v260_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v279_fu_303_p2 <= (grp_fu_630_p_dout0 and and_ln472_fu_297_p2);
    v283_fu_211_p1 <= xor_ln480_fu_205_p2;
    v284_fu_285_p2 <= (or_ln481_1_fu_275_p2 and and_ln481_fu_279_p2);
    xor_ln480_fu_205_p2 <= (bitcast_ln468_fu_176_p1 xor ap_const_lv32_80000000);
    zext_ln465_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln465),64));
    zext_ln467_1_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln467_fu_154_p2),64));
    zext_ln467_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j22_1),14));
end behav;
