// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module init_block_B_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        jj_0_i_0_dout,
        jj_0_i_0_empty_n,
        jj_0_i_0_read,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        block_B_loader_0_V_din,
        block_B_loader_0_V_full_n,
        block_B_loader_0_V_write,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        block_B_loader_1_V_din,
        block_B_loader_1_V_full_n,
        block_B_loader_1_V_write,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        block_B_loader_2_V_din,
        block_B_loader_2_V_full_n,
        block_B_loader_2_V_write,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        block_B_loader_3_V_din,
        block_B_loader_3_V_full_n,
        block_B_loader_3_V_write,
        B_4_address0,
        B_4_ce0,
        B_4_q0,
        block_B_loader_4_V_din,
        block_B_loader_4_V_full_n,
        block_B_loader_4_V_write,
        B_5_address0,
        B_5_ce0,
        B_5_q0,
        block_B_loader_5_V_din,
        block_B_loader_5_V_full_n,
        block_B_loader_5_V_write,
        B_6_address0,
        B_6_ce0,
        B_6_q0,
        block_B_loader_6_V_din,
        block_B_loader_6_V_full_n,
        block_B_loader_6_V_write,
        B_7_address0,
        B_7_ce0,
        B_7_q0,
        block_B_loader_7_V_din,
        block_B_loader_7_V_full_n,
        block_B_loader_7_V_write,
        B_8_address0,
        B_8_ce0,
        B_8_q0,
        block_B_loader_8_V_din,
        block_B_loader_8_V_full_n,
        block_B_loader_8_V_write,
        B_9_address0,
        B_9_ce0,
        B_9_q0,
        block_B_loader_9_V_din,
        block_B_loader_9_V_full_n,
        block_B_loader_9_V_write,
        B_10_address0,
        B_10_ce0,
        B_10_q0,
        block_B_loader_10_V_din,
        block_B_loader_10_V_full_n,
        block_B_loader_10_V_write,
        B_11_address0,
        B_11_ce0,
        B_11_q0,
        block_B_loader_11_V_din,
        block_B_loader_11_V_full_n,
        block_B_loader_11_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [5:0] jj_0_i_0_dout;
input   jj_0_i_0_empty_n;
output   jj_0_i_0_read;
output  [15:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [31:0] block_B_loader_0_V_din;
input   block_B_loader_0_V_full_n;
output   block_B_loader_0_V_write;
output  [15:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [31:0] block_B_loader_1_V_din;
input   block_B_loader_1_V_full_n;
output   block_B_loader_1_V_write;
output  [15:0] B_2_address0;
output   B_2_ce0;
input  [31:0] B_2_q0;
output  [31:0] block_B_loader_2_V_din;
input   block_B_loader_2_V_full_n;
output   block_B_loader_2_V_write;
output  [15:0] B_3_address0;
output   B_3_ce0;
input  [31:0] B_3_q0;
output  [31:0] block_B_loader_3_V_din;
input   block_B_loader_3_V_full_n;
output   block_B_loader_3_V_write;
output  [15:0] B_4_address0;
output   B_4_ce0;
input  [31:0] B_4_q0;
output  [31:0] block_B_loader_4_V_din;
input   block_B_loader_4_V_full_n;
output   block_B_loader_4_V_write;
output  [15:0] B_5_address0;
output   B_5_ce0;
input  [31:0] B_5_q0;
output  [31:0] block_B_loader_5_V_din;
input   block_B_loader_5_V_full_n;
output   block_B_loader_5_V_write;
output  [15:0] B_6_address0;
output   B_6_ce0;
input  [31:0] B_6_q0;
output  [31:0] block_B_loader_6_V_din;
input   block_B_loader_6_V_full_n;
output   block_B_loader_6_V_write;
output  [15:0] B_7_address0;
output   B_7_ce0;
input  [31:0] B_7_q0;
output  [31:0] block_B_loader_7_V_din;
input   block_B_loader_7_V_full_n;
output   block_B_loader_7_V_write;
output  [15:0] B_8_address0;
output   B_8_ce0;
input  [31:0] B_8_q0;
output  [31:0] block_B_loader_8_V_din;
input   block_B_loader_8_V_full_n;
output   block_B_loader_8_V_write;
output  [15:0] B_9_address0;
output   B_9_ce0;
input  [31:0] B_9_q0;
output  [31:0] block_B_loader_9_V_din;
input   block_B_loader_9_V_full_n;
output   block_B_loader_9_V_write;
output  [15:0] B_10_address0;
output   B_10_ce0;
input  [31:0] B_10_q0;
output  [31:0] block_B_loader_10_V_din;
input   block_B_loader_10_V_full_n;
output   block_B_loader_10_V_write;
output  [15:0] B_11_address0;
output   B_11_ce0;
input  [31:0] B_11_q0;
output  [31:0] block_B_loader_11_V_din;
input   block_B_loader_11_V_full_n;
output   block_B_loader_11_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg jj_0_i_0_read;
reg B_0_ce0;
reg block_B_loader_0_V_write;
reg B_1_ce0;
reg block_B_loader_1_V_write;
reg B_2_ce0;
reg block_B_loader_2_V_write;
reg B_3_ce0;
reg block_B_loader_3_V_write;
reg B_4_ce0;
reg block_B_loader_4_V_write;
reg B_5_ce0;
reg block_B_loader_5_V_write;
reg B_6_ce0;
reg block_B_loader_6_V_write;
reg B_7_ce0;
reg block_B_loader_7_V_write;
reg B_8_ce0;
reg block_B_loader_8_V_write;
reg B_9_ce0;
reg block_B_loader_9_V_write;
reg B_10_ce0;
reg block_B_loader_10_V_write;
reg B_11_ce0;
reg block_B_loader_11_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    jj_0_i_0_blk_n;
reg    block_B_loader_0_V_blk_n;
wire    ap_CS_fsm_state3;
reg    block_B_loader_1_V_blk_n;
reg    block_B_loader_2_V_blk_n;
reg    block_B_loader_3_V_blk_n;
reg    block_B_loader_4_V_blk_n;
reg    block_B_loader_5_V_blk_n;
reg    block_B_loader_6_V_blk_n;
reg    block_B_loader_7_V_blk_n;
reg    block_B_loader_8_V_blk_n;
reg    block_B_loader_9_V_blk_n;
reg    block_B_loader_10_V_blk_n;
reg    block_B_loader_11_V_blk_n;
reg   [5:0] jj_0_i_0_read_reg_542;
reg    ap_block_state1;
wire   [9:0] add_ln40_fu_513_p2;
reg   [9:0] add_ln40_reg_550;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln40_fu_507_p2;
reg   [9:0] k3_0_i_0_i_reg_496;
reg    ap_block_state3;
wire   [63:0] zext_ln43_fu_526_p1;
wire   [15:0] tmp_s_fu_519_p3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln40_fu_507_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k3_0_i_0_i_reg_496 <= 10'd0;
    end else if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        k3_0_i_0_i_reg_496 <= add_ln40_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln40_reg_550 <= add_ln40_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_0_read_reg_542 <= jj_0_i_0_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_10_ce0 = 1'b1;
    end else begin
        B_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_11_ce0 = 1'b1;
    end else begin
        B_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_2_ce0 = 1'b1;
    end else begin
        B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_3_ce0 = 1'b1;
    end else begin
        B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_4_ce0 = 1'b1;
    end else begin
        B_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_5_ce0 = 1'b1;
    end else begin
        B_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_6_ce0 = 1'b1;
    end else begin
        B_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_7_ce0 = 1'b1;
    end else begin
        B_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_8_ce0 = 1'b1;
    end else begin
        B_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_9_ce0 = 1'b1;
    end else begin
        B_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln40_fu_507_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln40_fu_507_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_0_V_blk_n = block_B_loader_0_V_full_n;
    end else begin
        block_B_loader_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_0_V_write = 1'b1;
    end else begin
        block_B_loader_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_10_V_blk_n = block_B_loader_10_V_full_n;
    end else begin
        block_B_loader_10_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_10_V_write = 1'b1;
    end else begin
        block_B_loader_10_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_11_V_blk_n = block_B_loader_11_V_full_n;
    end else begin
        block_B_loader_11_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_11_V_write = 1'b1;
    end else begin
        block_B_loader_11_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_1_V_blk_n = block_B_loader_1_V_full_n;
    end else begin
        block_B_loader_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_1_V_write = 1'b1;
    end else begin
        block_B_loader_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_2_V_blk_n = block_B_loader_2_V_full_n;
    end else begin
        block_B_loader_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_2_V_write = 1'b1;
    end else begin
        block_B_loader_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_3_V_blk_n = block_B_loader_3_V_full_n;
    end else begin
        block_B_loader_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_3_V_write = 1'b1;
    end else begin
        block_B_loader_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_4_V_blk_n = block_B_loader_4_V_full_n;
    end else begin
        block_B_loader_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_4_V_write = 1'b1;
    end else begin
        block_B_loader_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_5_V_blk_n = block_B_loader_5_V_full_n;
    end else begin
        block_B_loader_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_5_V_write = 1'b1;
    end else begin
        block_B_loader_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_6_V_blk_n = block_B_loader_6_V_full_n;
    end else begin
        block_B_loader_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_6_V_write = 1'b1;
    end else begin
        block_B_loader_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_7_V_blk_n = block_B_loader_7_V_full_n;
    end else begin
        block_B_loader_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_7_V_write = 1'b1;
    end else begin
        block_B_loader_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_8_V_blk_n = block_B_loader_8_V_full_n;
    end else begin
        block_B_loader_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_8_V_write = 1'b1;
    end else begin
        block_B_loader_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        block_B_loader_9_V_blk_n = block_B_loader_9_V_full_n;
    end else begin
        block_B_loader_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        block_B_loader_9_V_write = 1'b1;
    end else begin
        block_B_loader_9_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_0_blk_n = jj_0_i_0_empty_n;
    end else begin
        jj_0_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (jj_0_i_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_0_i_0_read = 1'b1;
    end else begin
        jj_0_i_0_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (jj_0_i_0_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln40_fu_507_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_0_address0 = zext_ln43_fu_526_p1;

assign B_10_address0 = zext_ln43_fu_526_p1;

assign B_11_address0 = zext_ln43_fu_526_p1;

assign B_1_address0 = zext_ln43_fu_526_p1;

assign B_2_address0 = zext_ln43_fu_526_p1;

assign B_3_address0 = zext_ln43_fu_526_p1;

assign B_4_address0 = zext_ln43_fu_526_p1;

assign B_5_address0 = zext_ln43_fu_526_p1;

assign B_6_address0 = zext_ln43_fu_526_p1;

assign B_7_address0 = zext_ln43_fu_526_p1;

assign B_8_address0 = zext_ln43_fu_526_p1;

assign B_9_address0 = zext_ln43_fu_526_p1;

assign add_ln40_fu_513_p2 = (k3_0_i_0_i_reg_496 + 10'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (jj_0_i_0_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((block_B_loader_6_V_full_n == 1'b0) | (block_B_loader_5_V_full_n == 1'b0) | (block_B_loader_4_V_full_n == 1'b0) | (block_B_loader_3_V_full_n == 1'b0) | (block_B_loader_2_V_full_n == 1'b0) | (block_B_loader_1_V_full_n == 1'b0) | (block_B_loader_0_V_full_n == 1'b0) | (block_B_loader_11_V_full_n == 1'b0) | (block_B_loader_10_V_full_n == 1'b0) | (block_B_loader_9_V_full_n == 1'b0) | (block_B_loader_8_V_full_n == 1'b0) | (block_B_loader_7_V_full_n == 1'b0));
end

assign block_B_loader_0_V_din = B_0_q0;

assign block_B_loader_10_V_din = B_10_q0;

assign block_B_loader_11_V_din = B_11_q0;

assign block_B_loader_1_V_din = B_1_q0;

assign block_B_loader_2_V_din = B_2_q0;

assign block_B_loader_3_V_din = B_3_q0;

assign block_B_loader_4_V_din = B_4_q0;

assign block_B_loader_5_V_din = B_5_q0;

assign block_B_loader_6_V_din = B_6_q0;

assign block_B_loader_7_V_din = B_7_q0;

assign block_B_loader_8_V_din = B_8_q0;

assign block_B_loader_9_V_din = B_9_q0;

assign icmp_ln40_fu_507_p2 = ((k3_0_i_0_i_reg_496 == 10'd768) ? 1'b1 : 1'b0);

assign tmp_s_fu_519_p3 = {{k3_0_i_0_i_reg_496}, {jj_0_i_0_read_reg_542}};

assign zext_ln43_fu_526_p1 = tmp_s_fu_519_p3;

endmodule //init_block_B_proc
