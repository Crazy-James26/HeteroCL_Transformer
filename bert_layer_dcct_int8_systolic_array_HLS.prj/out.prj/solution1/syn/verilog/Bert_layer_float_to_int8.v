// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_float_to_int8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v323_0_address0,
        v323_0_ce0,
        v323_0_q0,
        v323_1_address0,
        v323_1_ce0,
        v323_1_q0,
        v323_2_address0,
        v323_2_ce0,
        v323_2_q0,
        v323_3_address0,
        v323_3_ce0,
        v323_3_q0,
        v323_4_address0,
        v323_4_ce0,
        v323_4_q0,
        v323_5_address0,
        v323_5_ce0,
        v323_5_q0,
        v323_6_address0,
        v323_6_ce0,
        v323_6_q0,
        v323_7_address0,
        v323_7_ce0,
        v323_7_q0,
        v323_8_address0,
        v323_8_ce0,
        v323_8_q0,
        v323_9_address0,
        v323_9_ce0,
        v323_9_q0,
        v323_10_address0,
        v323_10_ce0,
        v323_10_q0,
        v323_11_address0,
        v323_11_ce0,
        v323_11_q0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        v2_0_address0,
        v2_0_ce0,
        v2_0_we0,
        v2_0_d0,
        v2_1_address0,
        v2_1_ce0,
        v2_1_we0,
        v2_1_d0,
        v2_2_address0,
        v2_2_ce0,
        v2_2_we0,
        v2_2_d0,
        v2_3_address0,
        v2_3_ce0,
        v2_3_we0,
        v2_3_d0,
        v2_4_address0,
        v2_4_ce0,
        v2_4_we0,
        v2_4_d0,
        v2_5_address0,
        v2_5_ce0,
        v2_5_we0,
        v2_5_d0,
        v2_6_address0,
        v2_6_ce0,
        v2_6_we0,
        v2_6_d0,
        v2_7_address0,
        v2_7_ce0,
        v2_7_we0,
        v2_7_d0,
        v2_8_address0,
        v2_8_ce0,
        v2_8_we0,
        v2_8_d0,
        v2_9_address0,
        v2_9_ce0,
        v2_9_we0,
        v2_9_d0,
        v2_10_address0,
        v2_10_ce0,
        v2_10_we0,
        v2_10_d0,
        v2_11_address0,
        v2_11_ce0,
        v2_11_we0,
        v2_11_d0,
        grp_fu_2765_p_din0,
        grp_fu_2765_p_din1,
        grp_fu_2765_p_dout0,
        grp_fu_2765_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v323_0_address0;
output   v323_0_ce0;
input  [31:0] v323_0_q0;
output  [9:0] v323_1_address0;
output   v323_1_ce0;
input  [31:0] v323_1_q0;
output  [9:0] v323_2_address0;
output   v323_2_ce0;
input  [31:0] v323_2_q0;
output  [9:0] v323_3_address0;
output   v323_3_ce0;
input  [31:0] v323_3_q0;
output  [9:0] v323_4_address0;
output   v323_4_ce0;
input  [31:0] v323_4_q0;
output  [9:0] v323_5_address0;
output   v323_5_ce0;
input  [31:0] v323_5_q0;
output  [9:0] v323_6_address0;
output   v323_6_ce0;
input  [31:0] v323_6_q0;
output  [9:0] v323_7_address0;
output   v323_7_ce0;
input  [31:0] v323_7_q0;
output  [9:0] v323_8_address0;
output   v323_8_ce0;
input  [31:0] v323_8_q0;
output  [9:0] v323_9_address0;
output   v323_9_ce0;
input  [31:0] v323_9_q0;
output  [9:0] v323_10_address0;
output   v323_10_ce0;
input  [31:0] v323_10_q0;
output  [9:0] v323_11_address0;
output   v323_11_ce0;
input  [31:0] v323_11_q0;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
output  [9:0] v2_0_address0;
output   v2_0_ce0;
output   v2_0_we0;
output  [7:0] v2_0_d0;
output  [9:0] v2_1_address0;
output   v2_1_ce0;
output   v2_1_we0;
output  [7:0] v2_1_d0;
output  [9:0] v2_2_address0;
output   v2_2_ce0;
output   v2_2_we0;
output  [7:0] v2_2_d0;
output  [9:0] v2_3_address0;
output   v2_3_ce0;
output   v2_3_we0;
output  [7:0] v2_3_d0;
output  [9:0] v2_4_address0;
output   v2_4_ce0;
output   v2_4_we0;
output  [7:0] v2_4_d0;
output  [9:0] v2_5_address0;
output   v2_5_ce0;
output   v2_5_we0;
output  [7:0] v2_5_d0;
output  [9:0] v2_6_address0;
output   v2_6_ce0;
output   v2_6_we0;
output  [7:0] v2_6_d0;
output  [9:0] v2_7_address0;
output   v2_7_ce0;
output   v2_7_we0;
output  [7:0] v2_7_d0;
output  [9:0] v2_8_address0;
output   v2_8_ce0;
output   v2_8_we0;
output  [7:0] v2_8_d0;
output  [9:0] v2_9_address0;
output   v2_9_ce0;
output   v2_9_we0;
output  [7:0] v2_9_d0;
output  [9:0] v2_10_address0;
output   v2_10_ce0;
output   v2_10_we0;
output  [7:0] v2_10_d0;
output  [9:0] v2_11_address0;
output   v2_11_ce0;
output   v2_11_we0;
output  [7:0] v2_11_d0;
output  [31:0] grp_fu_2765_p_din0;
output  [31:0] grp_fu_2765_p_din1;
input  [31:0] grp_fu_2765_p_dout0;
output   grp_fu_2765_p_ce;

reg ap_idle;
reg v323_0_ce0;
reg v323_1_ce0;
reg v323_2_ce0;
reg v323_3_ce0;
reg v323_4_ce0;
reg v323_5_ce0;
reg v323_6_ce0;
reg v323_7_ce0;
reg v323_8_ce0;
reg v323_9_ce0;
reg v323_10_ce0;
reg v323_11_ce0;
reg v2_0_ce0;
reg v2_0_we0;
reg v2_1_ce0;
reg v2_1_we0;
reg v2_2_ce0;
reg v2_2_we0;
reg v2_3_ce0;
reg v2_3_we0;
reg v2_4_ce0;
reg v2_4_we0;
reg v2_5_ce0;
reg v2_5_we0;
reg v2_6_ce0;
reg v2_6_we0;
reg v2_7_ce0;
reg v2_7_we0;
reg v2_8_ce0;
reg v2_8_we0;
reg v2_9_ce0;
reg v2_9_we0;
reg v2_10_ce0;
reg v2_10_we0;
reg v2_11_ce0;
reg v2_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_634_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] select_ln23_3_fu_732_p3;
reg   [31:0] select_ln23_3_reg_1032;
reg   [31:0] select_ln23_3_reg_1032_pp0_iter1_reg;
wire   [3:0] select_ln23_4_fu_740_p3;
reg   [3:0] select_ln23_4_reg_1037;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter1_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter2_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter3_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter4_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter5_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter6_reg;
reg   [3:0] select_ln23_4_reg_1037_pp0_iter7_reg;
wire   [63:0] zext_ln24_fu_748_p1;
reg   [63:0] zext_ln24_reg_1042;
reg   [63:0] zext_ln24_reg_1042_pp0_iter1_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter2_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter3_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter4_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter5_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter6_reg;
reg   [63:0] zext_ln24_reg_1042_pp0_iter7_reg;
wire   [31:0] v5_fu_833_p14;
reg   [31:0] v5_reg_1118;
reg   [31:0] v7_reg_1123;
reg   [0:0] p_Result_s_reg_1128;
reg   [0:0] p_Result_s_reg_1128_pp0_iter7_reg;
wire   [22:0] p_Result_22_fu_883_p1;
reg   [22:0] p_Result_22_reg_1133;
wire   [0:0] isNeg_fu_897_p3;
reg   [0:0] isNeg_reg_1138;
wire   [8:0] ush_fu_915_p3;
reg   [8:0] ush_reg_1143;
wire   [7:0] val_fu_977_p3;
reg   [7:0] val_reg_1148;
wire    ap_block_pp0_stage0;
reg   [9:0] j_fu_168;
wire   [9:0] add_ln24_fu_764_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_172;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten_fu_176;
wire   [13:0] add_ln23_2_fu_640_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [7:0] result_V_fu_989_p3;
wire   [0:0] icmp_ln24_fu_658_p2;
wire   [31:0] empty_fu_568_p1;
wire   [31:0] empty_1459_fu_572_p1;
wire   [31:0] empty_1460_fu_576_p1;
wire   [31:0] empty_1461_fu_580_p1;
wire   [31:0] empty_1462_fu_584_p1;
wire   [31:0] empty_1463_fu_588_p1;
wire   [31:0] empty_1464_fu_592_p1;
wire   [31:0] empty_1465_fu_596_p1;
wire   [31:0] empty_1466_fu_600_p1;
wire   [31:0] empty_1467_fu_604_p1;
wire   [31:0] empty_1468_fu_608_p1;
wire   [31:0] empty_1469_fu_612_p1;
wire   [3:0] add_ln23_fu_652_p2;
wire   [31:0] v6_mid1_fu_672_p14;
wire   [31:0] v_fu_702_p14;
wire   [9:0] select_ln23_fu_664_p3;
wire   [31:0] v5_fu_833_p1;
wire   [31:0] v5_fu_833_p2;
wire   [31:0] v5_fu_833_p3;
wire   [31:0] v5_fu_833_p4;
wire   [31:0] v5_fu_833_p5;
wire   [31:0] v5_fu_833_p6;
wire   [31:0] v5_fu_833_p7;
wire   [31:0] v5_fu_833_p8;
wire   [31:0] v5_fu_833_p9;
wire   [31:0] v5_fu_833_p10;
wire   [31:0] v5_fu_833_p11;
wire   [31:0] v5_fu_833_p12;
wire   [31:0] data_V_fu_862_p1;
wire   [7:0] xs_exp_V_fu_873_p4;
wire   [8:0] zext_ln346_fu_887_p1;
wire   [8:0] add_ln346_fu_891_p2;
wire   [7:0] sub_ln1512_fu_905_p2;
wire  signed [8:0] sext_ln1512_fu_911_p1;
wire   [24:0] mantissa_fu_923_p4;
wire  signed [31:0] sext_ln1488_fu_936_p1;
wire   [54:0] zext_ln15_fu_932_p1;
wire   [54:0] zext_ln1488_fu_939_p1;
wire   [54:0] r_V_fu_943_p2;
wire   [0:0] tmp_fu_955_p3;
wire   [54:0] r_V_33_fu_949_p2;
wire   [7:0] zext_ln818_fu_963_p1;
wire   [7:0] tmp_s_fu_967_p4;
wire   [7:0] result_V_4_fu_984_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U2(
    .din0(empty_fu_568_p1),
    .din1(empty_1459_fu_572_p1),
    .din2(empty_1460_fu_576_p1),
    .din3(empty_1461_fu_580_p1),
    .din4(empty_1462_fu_584_p1),
    .din5(empty_1463_fu_588_p1),
    .din6(empty_1464_fu_592_p1),
    .din7(empty_1465_fu_596_p1),
    .din8(empty_1466_fu_600_p1),
    .din9(empty_1467_fu_604_p1),
    .din10(empty_1468_fu_608_p1),
    .din11(empty_1469_fu_612_p1),
    .din12(add_ln23_fu_652_p2),
    .dout(v6_mid1_fu_672_p14)
);

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U3(
    .din0(empty_fu_568_p1),
    .din1(empty_1459_fu_572_p1),
    .din2(empty_1460_fu_576_p1),
    .din3(empty_1461_fu_580_p1),
    .din4(empty_1462_fu_584_p1),
    .din5(empty_1463_fu_588_p1),
    .din6(empty_1464_fu_592_p1),
    .din7(empty_1465_fu_596_p1),
    .din8(empty_1466_fu_600_p1),
    .din9(empty_1467_fu_604_p1),
    .din10(empty_1468_fu_608_p1),
    .din11(empty_1469_fu_612_p1),
    .din12(ap_sig_allocacmp_i_load),
    .dout(v_fu_702_p14)
);

Bert_layer_mux_124_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_124_32_1_1_U4(
    .din0(v5_fu_833_p1),
    .din1(v5_fu_833_p2),
    .din2(v5_fu_833_p3),
    .din3(v5_fu_833_p4),
    .din4(v5_fu_833_p5),
    .din5(v5_fu_833_p6),
    .din6(v5_fu_833_p7),
    .din7(v5_fu_833_p8),
    .din8(v5_fu_833_p9),
    .din9(v5_fu_833_p10),
    .din10(v5_fu_833_p11),
    .din11(v5_fu_833_p12),
    .din12(select_ln23_4_reg_1037),
    .dout(v5_fu_833_p14)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_634_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_172 <= select_ln23_4_fu_740_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_172 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_634_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_176 <= add_ln23_2_fu_640_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_176 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_634_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_168 <= add_ln24_fu_764_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_168 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln23_3_reg_1032_pp0_iter1_reg <= select_ln23_3_reg_1032;
        select_ln23_4_reg_1037_pp0_iter1_reg <= select_ln23_4_reg_1037;
        v5_reg_1118 <= v5_fu_833_p14;
        zext_ln24_reg_1042_pp0_iter1_reg[9 : 0] <= zext_ln24_reg_1042[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        isNeg_reg_1138 <= add_ln346_fu_891_p2[32'd8];
        p_Result_22_reg_1133 <= p_Result_22_fu_883_p1;
        p_Result_s_reg_1128 <= data_V_fu_862_p1[32'd31];
        p_Result_s_reg_1128_pp0_iter7_reg <= p_Result_s_reg_1128;
        select_ln23_4_reg_1037_pp0_iter2_reg <= select_ln23_4_reg_1037_pp0_iter1_reg;
        select_ln23_4_reg_1037_pp0_iter3_reg <= select_ln23_4_reg_1037_pp0_iter2_reg;
        select_ln23_4_reg_1037_pp0_iter4_reg <= select_ln23_4_reg_1037_pp0_iter3_reg;
        select_ln23_4_reg_1037_pp0_iter5_reg <= select_ln23_4_reg_1037_pp0_iter4_reg;
        select_ln23_4_reg_1037_pp0_iter6_reg <= select_ln23_4_reg_1037_pp0_iter5_reg;
        select_ln23_4_reg_1037_pp0_iter7_reg <= select_ln23_4_reg_1037_pp0_iter6_reg;
        ush_reg_1143 <= ush_fu_915_p3;
        v7_reg_1123 <= grp_fu_2765_p_dout0;
        val_reg_1148 <= val_fu_977_p3;
        zext_ln24_reg_1042_pp0_iter2_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter1_reg[9 : 0];
        zext_ln24_reg_1042_pp0_iter3_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter2_reg[9 : 0];
        zext_ln24_reg_1042_pp0_iter4_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter3_reg[9 : 0];
        zext_ln24_reg_1042_pp0_iter5_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter4_reg[9 : 0];
        zext_ln24_reg_1042_pp0_iter6_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter5_reg[9 : 0];
        zext_ln24_reg_1042_pp0_iter7_reg[9 : 0] <= zext_ln24_reg_1042_pp0_iter6_reg[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_634_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln23_3_reg_1032 <= select_ln23_3_fu_732_p3;
        select_ln23_4_reg_1037 <= select_ln23_4_fu_740_p3;
        zext_ln24_reg_1042[9 : 0] <= zext_ln24_fu_748_p1[9 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_634_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_172;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_176;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_168;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_0_ce0 = 1'b1;
    end else begin
        v2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd0))) begin
        v2_0_we0 = 1'b1;
    end else begin
        v2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_10_ce0 = 1'b1;
    end else begin
        v2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd10))) begin
        v2_10_we0 = 1'b1;
    end else begin
        v2_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_11_ce0 = 1'b1;
    end else begin
        v2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & ((select_ln23_4_reg_1037_pp0_iter7_reg == 4'd11) | ((select_ln23_4_reg_1037_pp0_iter7_reg == 4'd12) | ((select_ln23_4_reg_1037_pp0_iter7_reg == 4'd13) | ((select_ln23_4_reg_1037_pp0_iter7_reg == 4'd14) | (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd15))))))) begin
        v2_11_we0 = 1'b1;
    end else begin
        v2_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_1_ce0 = 1'b1;
    end else begin
        v2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd1))) begin
        v2_1_we0 = 1'b1;
    end else begin
        v2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_2_ce0 = 1'b1;
    end else begin
        v2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd2))) begin
        v2_2_we0 = 1'b1;
    end else begin
        v2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_3_ce0 = 1'b1;
    end else begin
        v2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd3))) begin
        v2_3_we0 = 1'b1;
    end else begin
        v2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_4_ce0 = 1'b1;
    end else begin
        v2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd4))) begin
        v2_4_we0 = 1'b1;
    end else begin
        v2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_5_ce0 = 1'b1;
    end else begin
        v2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd5))) begin
        v2_5_we0 = 1'b1;
    end else begin
        v2_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_6_ce0 = 1'b1;
    end else begin
        v2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd6))) begin
        v2_6_we0 = 1'b1;
    end else begin
        v2_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_7_ce0 = 1'b1;
    end else begin
        v2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd7))) begin
        v2_7_we0 = 1'b1;
    end else begin
        v2_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_8_ce0 = 1'b1;
    end else begin
        v2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd8))) begin
        v2_8_we0 = 1'b1;
    end else begin
        v2_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        v2_9_ce0 = 1'b1;
    end else begin
        v2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (select_ln23_4_reg_1037_pp0_iter7_reg == 4'd9))) begin
        v2_9_we0 = 1'b1;
    end else begin
        v2_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_0_ce0 = 1'b1;
    end else begin
        v323_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_10_ce0 = 1'b1;
    end else begin
        v323_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_11_ce0 = 1'b1;
    end else begin
        v323_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_1_ce0 = 1'b1;
    end else begin
        v323_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_2_ce0 = 1'b1;
    end else begin
        v323_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_3_ce0 = 1'b1;
    end else begin
        v323_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_4_ce0 = 1'b1;
    end else begin
        v323_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_5_ce0 = 1'b1;
    end else begin
        v323_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_6_ce0 = 1'b1;
    end else begin
        v323_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_7_ce0 = 1'b1;
    end else begin
        v323_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_8_ce0 = 1'b1;
    end else begin
        v323_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v323_9_ce0 = 1'b1;
    end else begin
        v323_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_2_fu_640_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln23_fu_652_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln24_fu_764_p2 = (select_ln23_fu_664_p3 + 10'd1);

assign add_ln346_fu_891_p2 = ($signed(zext_ln346_fu_887_p1) + $signed(9'd385));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_V_fu_862_p1 = v7_reg_1123;

assign empty_1459_fu_572_p1 = p_read1;

assign empty_1460_fu_576_p1 = p_read2;

assign empty_1461_fu_580_p1 = p_read3;

assign empty_1462_fu_584_p1 = p_read4;

assign empty_1463_fu_588_p1 = p_read5;

assign empty_1464_fu_592_p1 = p_read6;

assign empty_1465_fu_596_p1 = p_read7;

assign empty_1466_fu_600_p1 = p_read8;

assign empty_1467_fu_604_p1 = p_read9;

assign empty_1468_fu_608_p1 = p_read10;

assign empty_1469_fu_612_p1 = p_read11;

assign empty_fu_568_p1 = p_read;

assign grp_fu_2765_p_ce = 1'b1;

assign grp_fu_2765_p_din0 = v5_reg_1118;

assign grp_fu_2765_p_din1 = select_ln23_3_reg_1032_pp0_iter1_reg;

assign icmp_ln23_fu_634_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_658_p2 = ((ap_sig_allocacmp_j_load == 10'd768) ? 1'b1 : 1'b0);

assign isNeg_fu_897_p3 = add_ln346_fu_891_p2[32'd8];

assign mantissa_fu_923_p4 = {{{{1'd1}, {p_Result_22_reg_1133}}}, {1'd0}};

assign p_Result_22_fu_883_p1 = data_V_fu_862_p1[22:0];

assign r_V_33_fu_949_p2 = zext_ln15_fu_932_p1 << zext_ln1488_fu_939_p1;

assign r_V_fu_943_p2 = zext_ln15_fu_932_p1 >> zext_ln1488_fu_939_p1;

assign result_V_4_fu_984_p2 = (8'd0 - val_reg_1148);

assign result_V_fu_989_p3 = ((p_Result_s_reg_1128_pp0_iter7_reg[0:0] == 1'b1) ? result_V_4_fu_984_p2 : val_reg_1148);

assign select_ln23_3_fu_732_p3 = ((icmp_ln24_fu_658_p2[0:0] == 1'b1) ? v6_mid1_fu_672_p14 : v_fu_702_p14);

assign select_ln23_4_fu_740_p3 = ((icmp_ln24_fu_658_p2[0:0] == 1'b1) ? add_ln23_fu_652_p2 : ap_sig_allocacmp_i_load);

assign select_ln23_fu_664_p3 = ((icmp_ln24_fu_658_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j_load);

assign sext_ln1488_fu_936_p1 = $signed(ush_reg_1143);

assign sext_ln1512_fu_911_p1 = $signed(sub_ln1512_fu_905_p2);

assign sub_ln1512_fu_905_p2 = (8'd127 - xs_exp_V_fu_873_p4);

assign tmp_fu_955_p3 = r_V_fu_943_p2[32'd24];

assign tmp_s_fu_967_p4 = {{r_V_33_fu_949_p2[31:24]}};

assign ush_fu_915_p3 = ((isNeg_fu_897_p3[0:0] == 1'b1) ? sext_ln1512_fu_911_p1 : add_ln346_fu_891_p2);

assign v2_0_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_0_d0 = result_V_fu_989_p3;

assign v2_10_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_10_d0 = result_V_fu_989_p3;

assign v2_11_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_11_d0 = result_V_fu_989_p3;

assign v2_1_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_1_d0 = result_V_fu_989_p3;

assign v2_2_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_2_d0 = result_V_fu_989_p3;

assign v2_3_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_3_d0 = result_V_fu_989_p3;

assign v2_4_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_4_d0 = result_V_fu_989_p3;

assign v2_5_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_5_d0 = result_V_fu_989_p3;

assign v2_6_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_6_d0 = result_V_fu_989_p3;

assign v2_7_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_7_d0 = result_V_fu_989_p3;

assign v2_8_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_8_d0 = result_V_fu_989_p3;

assign v2_9_address0 = zext_ln24_reg_1042_pp0_iter7_reg;

assign v2_9_d0 = result_V_fu_989_p3;

assign v323_0_address0 = zext_ln24_fu_748_p1;

assign v323_10_address0 = zext_ln24_fu_748_p1;

assign v323_11_address0 = zext_ln24_fu_748_p1;

assign v323_1_address0 = zext_ln24_fu_748_p1;

assign v323_2_address0 = zext_ln24_fu_748_p1;

assign v323_3_address0 = zext_ln24_fu_748_p1;

assign v323_4_address0 = zext_ln24_fu_748_p1;

assign v323_5_address0 = zext_ln24_fu_748_p1;

assign v323_6_address0 = zext_ln24_fu_748_p1;

assign v323_7_address0 = zext_ln24_fu_748_p1;

assign v323_8_address0 = zext_ln24_fu_748_p1;

assign v323_9_address0 = zext_ln24_fu_748_p1;

assign v5_fu_833_p1 = v323_0_q0;

assign v5_fu_833_p10 = v323_9_q0;

assign v5_fu_833_p11 = v323_10_q0;

assign v5_fu_833_p12 = v323_11_q0;

assign v5_fu_833_p2 = v323_1_q0;

assign v5_fu_833_p3 = v323_2_q0;

assign v5_fu_833_p4 = v323_3_q0;

assign v5_fu_833_p5 = v323_4_q0;

assign v5_fu_833_p6 = v323_5_q0;

assign v5_fu_833_p7 = v323_6_q0;

assign v5_fu_833_p8 = v323_7_q0;

assign v5_fu_833_p9 = v323_8_q0;

assign val_fu_977_p3 = ((isNeg_reg_1138[0:0] == 1'b1) ? zext_ln818_fu_963_p1 : tmp_s_fu_967_p4);

assign xs_exp_V_fu_873_p4 = {{data_V_fu_862_p1[30:23]}};

assign zext_ln1488_fu_939_p1 = $unsigned(sext_ln1488_fu_936_p1);

assign zext_ln15_fu_932_p1 = mantissa_fu_923_p4;

assign zext_ln24_fu_748_p1 = select_ln23_fu_664_p3;

assign zext_ln346_fu_887_p1 = xs_exp_V_fu_873_p4;

assign zext_ln818_fu_963_p1 = tmp_fu_955_p3;

always @ (posedge ap_clk) begin
    zext_ln24_reg_1042[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter3_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter4_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter5_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter6_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln24_reg_1042_pp0_iter7_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_float_to_int8
