// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_bias_i17_l_j16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v333_address0,
        v333_ce0,
        v333_q0,
        acc_outp4_V_address0,
        acc_outp4_V_ce0,
        acc_outp4_V_we0,
        acc_outp4_V_d0,
        acc_outp4_V_1_address0,
        acc_outp4_V_1_ce0,
        acc_outp4_V_1_we0,
        acc_outp4_V_1_d0,
        acc_outp4_V_2_address0,
        acc_outp4_V_2_ce0,
        acc_outp4_V_2_we0,
        acc_outp4_V_2_d0,
        acc_outp4_V_3_address0,
        acc_outp4_V_3_ce0,
        acc_outp4_V_3_we0,
        acc_outp4_V_3_d0,
        acc_outp4_V_4_address0,
        acc_outp4_V_4_ce0,
        acc_outp4_V_4_we0,
        acc_outp4_V_4_d0,
        acc_outp4_V_5_address0,
        acc_outp4_V_5_ce0,
        acc_outp4_V_5_we0,
        acc_outp4_V_5_d0,
        acc_outp4_V_6_address0,
        acc_outp4_V_6_ce0,
        acc_outp4_V_6_we0,
        acc_outp4_V_6_d0,
        acc_outp4_V_7_address0,
        acc_outp4_V_7_ce0,
        acc_outp4_V_7_we0,
        acc_outp4_V_7_d0,
        acc_outp4_V_8_address0,
        acc_outp4_V_8_ce0,
        acc_outp4_V_8_we0,
        acc_outp4_V_8_d0,
        acc_outp4_V_9_address0,
        acc_outp4_V_9_ce0,
        acc_outp4_V_9_we0,
        acc_outp4_V_9_d0,
        acc_outp4_V_10_address0,
        acc_outp4_V_10_ce0,
        acc_outp4_V_10_we0,
        acc_outp4_V_10_d0,
        acc_outp4_V_11_address0,
        acc_outp4_V_11_ce0,
        acc_outp4_V_11_we0,
        acc_outp4_V_11_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] v333_address0;
output   v333_ce0;
input  [11:0] v333_q0;
output  [11:0] acc_outp4_V_address0;
output   acc_outp4_V_ce0;
output   acc_outp4_V_we0;
output  [23:0] acc_outp4_V_d0;
output  [11:0] acc_outp4_V_1_address0;
output   acc_outp4_V_1_ce0;
output   acc_outp4_V_1_we0;
output  [23:0] acc_outp4_V_1_d0;
output  [11:0] acc_outp4_V_2_address0;
output   acc_outp4_V_2_ce0;
output   acc_outp4_V_2_we0;
output  [23:0] acc_outp4_V_2_d0;
output  [11:0] acc_outp4_V_3_address0;
output   acc_outp4_V_3_ce0;
output   acc_outp4_V_3_we0;
output  [23:0] acc_outp4_V_3_d0;
output  [11:0] acc_outp4_V_4_address0;
output   acc_outp4_V_4_ce0;
output   acc_outp4_V_4_we0;
output  [23:0] acc_outp4_V_4_d0;
output  [11:0] acc_outp4_V_5_address0;
output   acc_outp4_V_5_ce0;
output   acc_outp4_V_5_we0;
output  [23:0] acc_outp4_V_5_d0;
output  [11:0] acc_outp4_V_6_address0;
output   acc_outp4_V_6_ce0;
output   acc_outp4_V_6_we0;
output  [23:0] acc_outp4_V_6_d0;
output  [11:0] acc_outp4_V_7_address0;
output   acc_outp4_V_7_ce0;
output   acc_outp4_V_7_we0;
output  [23:0] acc_outp4_V_7_d0;
output  [11:0] acc_outp4_V_8_address0;
output   acc_outp4_V_8_ce0;
output   acc_outp4_V_8_we0;
output  [23:0] acc_outp4_V_8_d0;
output  [11:0] acc_outp4_V_9_address0;
output   acc_outp4_V_9_ce0;
output   acc_outp4_V_9_we0;
output  [23:0] acc_outp4_V_9_d0;
output  [11:0] acc_outp4_V_10_address0;
output   acc_outp4_V_10_ce0;
output   acc_outp4_V_10_we0;
output  [23:0] acc_outp4_V_10_d0;
output  [11:0] acc_outp4_V_11_address0;
output   acc_outp4_V_11_ce0;
output   acc_outp4_V_11_we0;
output  [23:0] acc_outp4_V_11_d0;

reg ap_idle;
reg v333_ce0;
reg acc_outp4_V_ce0;
reg acc_outp4_V_we0;
reg acc_outp4_V_1_ce0;
reg acc_outp4_V_1_we0;
reg acc_outp4_V_2_ce0;
reg acc_outp4_V_2_we0;
reg acc_outp4_V_3_ce0;
reg acc_outp4_V_3_we0;
reg acc_outp4_V_4_ce0;
reg acc_outp4_V_4_we0;
reg acc_outp4_V_5_ce0;
reg acc_outp4_V_5_we0;
reg acc_outp4_V_6_ce0;
reg acc_outp4_V_6_we0;
reg acc_outp4_V_7_ce0;
reg acc_outp4_V_7_we0;
reg acc_outp4_V_8_ce0;
reg acc_outp4_V_8_we0;
reg acc_outp4_V_9_ce0;
reg acc_outp4_V_9_we0;
reg acc_outp4_V_10_ce0;
reg acc_outp4_V_10_we0;
reg acc_outp4_V_11_ce0;
reg acc_outp4_V_11_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln382_fu_285_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln382_1_fu_323_p3;
reg   [3:0] select_ln382_1_reg_397;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln383_fu_331_p1;
reg   [63:0] zext_ln383_reg_401;
wire    ap_block_pp0_stage0;
reg   [11:0] j16_fu_86;
wire   [11:0] add_ln383_fu_336_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j16_load;
reg   [3:0] i17_fu_90;
reg   [3:0] ap_sig_allocacmp_i17_load;
reg   [15:0] indvar_flatten21_fu_94;
wire   [15:0] add_ln382_1_fu_291_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten21_load;
wire  signed [23:0] sext_ln75_fu_357_p1;
wire   [0:0] icmp_ln383_fu_309_p2;
wire   [3:0] add_ln382_fu_303_p2;
wire   [11:0] select_ln382_fu_315_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln382_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i17_fu_90 <= select_ln382_1_fu_323_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i17_fu_90 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln382_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten21_fu_94 <= add_ln382_1_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten21_fu_94 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln382_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j16_fu_86 <= add_ln383_fu_336_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j16_fu_86 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln382_fu_285_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln382_1_reg_397 <= select_ln382_1_fu_323_p3;
        zext_ln383_reg_401[11 : 0] <= zext_ln383_fu_331_p1[11 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_10_ce0 = 1'b1;
    end else begin
        acc_outp4_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd10))) begin
        acc_outp4_V_10_we0 = 1'b1;
    end else begin
        acc_outp4_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_11_ce0 = 1'b1;
    end else begin
        acc_outp4_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((select_ln382_1_reg_397 == 4'd11) | ((select_ln382_1_reg_397 == 4'd12) | ((select_ln382_1_reg_397 == 4'd13) | ((select_ln382_1_reg_397 == 4'd14) | (select_ln382_1_reg_397 == 4'd15))))))) begin
        acc_outp4_V_11_we0 = 1'b1;
    end else begin
        acc_outp4_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_1_ce0 = 1'b1;
    end else begin
        acc_outp4_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd1))) begin
        acc_outp4_V_1_we0 = 1'b1;
    end else begin
        acc_outp4_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_2_ce0 = 1'b1;
    end else begin
        acc_outp4_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd2))) begin
        acc_outp4_V_2_we0 = 1'b1;
    end else begin
        acc_outp4_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_3_ce0 = 1'b1;
    end else begin
        acc_outp4_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd3))) begin
        acc_outp4_V_3_we0 = 1'b1;
    end else begin
        acc_outp4_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_4_ce0 = 1'b1;
    end else begin
        acc_outp4_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd4))) begin
        acc_outp4_V_4_we0 = 1'b1;
    end else begin
        acc_outp4_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_5_ce0 = 1'b1;
    end else begin
        acc_outp4_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd5))) begin
        acc_outp4_V_5_we0 = 1'b1;
    end else begin
        acc_outp4_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_6_ce0 = 1'b1;
    end else begin
        acc_outp4_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd6))) begin
        acc_outp4_V_6_we0 = 1'b1;
    end else begin
        acc_outp4_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_7_ce0 = 1'b1;
    end else begin
        acc_outp4_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd7))) begin
        acc_outp4_V_7_we0 = 1'b1;
    end else begin
        acc_outp4_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_8_ce0 = 1'b1;
    end else begin
        acc_outp4_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd8))) begin
        acc_outp4_V_8_we0 = 1'b1;
    end else begin
        acc_outp4_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_9_ce0 = 1'b1;
    end else begin
        acc_outp4_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd9))) begin
        acc_outp4_V_9_we0 = 1'b1;
    end else begin
        acc_outp4_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_outp4_V_ce0 = 1'b1;
    end else begin
        acc_outp4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln382_1_reg_397 == 4'd0))) begin
        acc_outp4_V_we0 = 1'b1;
    end else begin
        acc_outp4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln382_fu_285_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i17_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i17_load = i17_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten21_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten21_load = indvar_flatten21_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j16_load = 12'd0;
    end else begin
        ap_sig_allocacmp_j16_load = j16_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v333_ce0 = 1'b1;
    end else begin
        v333_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_outp4_V_10_address0 = zext_ln383_reg_401;

assign acc_outp4_V_10_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_11_address0 = zext_ln383_reg_401;

assign acc_outp4_V_11_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_1_address0 = zext_ln383_reg_401;

assign acc_outp4_V_1_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_2_address0 = zext_ln383_reg_401;

assign acc_outp4_V_2_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_3_address0 = zext_ln383_reg_401;

assign acc_outp4_V_3_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_4_address0 = zext_ln383_reg_401;

assign acc_outp4_V_4_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_5_address0 = zext_ln383_reg_401;

assign acc_outp4_V_5_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_6_address0 = zext_ln383_reg_401;

assign acc_outp4_V_6_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_7_address0 = zext_ln383_reg_401;

assign acc_outp4_V_7_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_8_address0 = zext_ln383_reg_401;

assign acc_outp4_V_8_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_9_address0 = zext_ln383_reg_401;

assign acc_outp4_V_9_d0 = sext_ln75_fu_357_p1;

assign acc_outp4_V_address0 = zext_ln383_reg_401;

assign acc_outp4_V_d0 = sext_ln75_fu_357_p1;

assign add_ln382_1_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten21_load + 16'd1);

assign add_ln382_fu_303_p2 = (ap_sig_allocacmp_i17_load + 4'd1);

assign add_ln383_fu_336_p2 = (select_ln382_fu_315_p3 + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln382_fu_285_p2 = ((ap_sig_allocacmp_indvar_flatten21_load == 16'd36864) ? 1'b1 : 1'b0);

assign icmp_ln383_fu_309_p2 = ((ap_sig_allocacmp_j16_load == 12'd3072) ? 1'b1 : 1'b0);

assign select_ln382_1_fu_323_p3 = ((icmp_ln383_fu_309_p2[0:0] == 1'b1) ? add_ln382_fu_303_p2 : ap_sig_allocacmp_i17_load);

assign select_ln382_fu_315_p3 = ((icmp_ln383_fu_309_p2[0:0] == 1'b1) ? 12'd0 : ap_sig_allocacmp_j16_load);

assign sext_ln75_fu_357_p1 = $signed(v333_q0);

assign v333_address0 = zext_ln383_fu_331_p1;

assign zext_ln383_fu_331_p1 = select_ln382_fu_315_p3;

always @ (posedge ap_clk) begin
    zext_ln383_reg_401[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //Bert_layer_Bert_layer_Pipeline_l_bias_i17_l_j16
