-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v125_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_ce0 : OUT STD_LOGIC;
    v125_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v125_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_1_ce0 : OUT STD_LOGIC;
    v125_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v125_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_2_ce0 : OUT STD_LOGIC;
    v125_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    v125_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v125_3_ce0 : OUT STD_LOGIC;
    v125_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    tmp : IN STD_LOGIC_VECTOR (9 downto 0);
    v113_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_0_ce0 : OUT STD_LOGIC;
    v113_0_we0 : OUT STD_LOGIC;
    v113_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_1_ce0 : OUT STD_LOGIC;
    v113_1_we0 : OUT STD_LOGIC;
    v113_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_2_ce0 : OUT STD_LOGIC;
    v113_2_we0 : OUT STD_LOGIC;
    v113_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_3_ce0 : OUT STD_LOGIC;
    v113_3_we0 : OUT STD_LOGIC;
    v113_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_4_ce0 : OUT STD_LOGIC;
    v113_4_we0 : OUT STD_LOGIC;
    v113_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_5_ce0 : OUT STD_LOGIC;
    v113_5_we0 : OUT STD_LOGIC;
    v113_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_6_ce0 : OUT STD_LOGIC;
    v113_6_we0 : OUT STD_LOGIC;
    v113_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_7_ce0 : OUT STD_LOGIC;
    v113_7_we0 : OUT STD_LOGIC;
    v113_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_8_ce0 : OUT STD_LOGIC;
    v113_8_we0 : OUT STD_LOGIC;
    v113_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_9_ce0 : OUT STD_LOGIC;
    v113_9_we0 : OUT STD_LOGIC;
    v113_9_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_10_ce0 : OUT STD_LOGIC;
    v113_10_we0 : OUT STD_LOGIC;
    v113_10_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v113_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v113_11_ce0 : OUT STD_LOGIC;
    v113_11_we0 : OUT STD_LOGIC;
    v113_11_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_mh_merge_i_m_l_j_m is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln227_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln227_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln227_reg_518 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln227_reg_518_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln227_reg_518_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln227_1_fu_384_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_1_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_1_reg_524_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_1_reg_524_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln227_fu_392_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln227_reg_528 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln227_reg_528_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast23_mid2_v_reg_533 : STD_LOGIC_VECTOR (1 downto 0);
    signal v128_fu_451_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal v128_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln230_1_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln231_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_m_fu_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln228_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_m_load : STD_LOGIC_VECTOR (6 downto 0);
    signal i_m_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_m_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten63_fu_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln227_1_fu_352_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten63_load : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln228_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_364_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln230_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln230_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln228_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln231_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_8_1_1_U3193 : component Bert_layer_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => v125_q0,
        din1 => v125_1_q0,
        din2 => v125_2_q0,
        din3 => v125_3_q0,
        din4 => trunc_ln227_reg_528_pp0_iter1_reg,
        dout => v128_fu_451_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_m_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln227_fu_346_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_m_fu_106 <= select_ln227_1_fu_384_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_m_fu_106 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten63_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln227_fu_346_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten63_fu_110 <= add_ln227_1_fu_352_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten63_fu_110 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_m_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln227_fu_346_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_m_fu_102 <= add_ln228_fu_406_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_m_fu_102 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln227_1_reg_524_pp0_iter1_reg <= select_ln227_1_reg_524;
                select_ln227_reg_518_pp0_iter1_reg <= select_ln227_reg_518;
                trunc_ln227_reg_528_pp0_iter1_reg <= trunc_ln227_reg_528;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln227_fu_346_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_cast23_mid2_v_reg_533 <= select_ln227_1_fu_384_p3(3 downto 2);
                select_ln227_1_reg_524 <= select_ln227_1_fu_384_p3;
                select_ln227_reg_518 <= select_ln227_fu_376_p3;
                trunc_ln227_reg_528 <= trunc_ln227_fu_392_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                select_ln227_1_reg_524_pp0_iter2_reg <= select_ln227_1_reg_524_pp0_iter1_reg;
                select_ln227_reg_518_pp0_iter2_reg <= select_ln227_reg_518_pp0_iter1_reg;
                v128_reg_558 <= v128_fu_451_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln227_1_fu_352_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten63_load) + unsigned(ap_const_lv10_1));
    add_ln227_fu_364_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_m_load) + unsigned(ap_const_lv4_1));
    add_ln228_fu_406_p2 <= std_logic_vector(unsigned(select_ln227_fu_376_p3) + unsigned(ap_const_lv7_1));
    add_ln230_fu_437_p2 <= std_logic_vector(unsigned(tmp_s_fu_427_p3) + unsigned(zext_ln230_fu_434_p1));
    add_ln231_fu_467_p2 <= std_logic_vector(unsigned(tmp) + unsigned(zext_ln228_fu_464_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln227_fu_346_p2)
    begin
        if (((icmp_ln227_fu_346_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_m_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_m_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_m_load <= i_m_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten63_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten63_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten63_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten63_load <= indvar_flatten63_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_j_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_m_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_m_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_m_load <= j_m_fu_102;
        end if; 
    end process;

    icmp_ln227_fu_346_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten63_load = ap_const_lv10_300) else "0";
    icmp_ln228_fu_370_p2 <= "1" when (ap_sig_allocacmp_j_m_load = ap_const_lv7_40) else "0";
    select_ln227_1_fu_384_p3 <= 
        add_ln227_fu_364_p2 when (icmp_ln228_fu_370_p2(0) = '1') else 
        ap_sig_allocacmp_i_m_load;
    select_ln227_fu_376_p3 <= 
        ap_const_lv7_0 when (icmp_ln228_fu_370_p2(0) = '1') else 
        ap_sig_allocacmp_j_m_load;
    tmp_s_fu_427_p3 <= (p_cast23_mid2_v_reg_533 & ap_const_lv6_0);
    trunc_ln227_fu_392_p1 <= select_ln227_1_fu_384_p3(2 - 1 downto 0);
    v113_0_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_0_ce0 <= ap_const_logic_1;
        else 
            v113_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_0_d0 <= v128_reg_558;

    v113_0_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_0))) then 
            v113_0_we0 <= ap_const_logic_1;
        else 
            v113_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_10_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_10_ce0 <= ap_const_logic_1;
        else 
            v113_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_10_d0 <= v128_reg_558;

    v113_10_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_A))) then 
            v113_10_we0 <= ap_const_logic_1;
        else 
            v113_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_11_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_11_ce0 <= ap_const_logic_1;
        else 
            v113_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_11_d0 <= v128_reg_558;

    v113_11_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_B) or ((select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_C) or ((select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_D) or ((select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_E) or (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_F))))))) then 
            v113_11_we0 <= ap_const_logic_1;
        else 
            v113_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_1_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_1_ce0 <= ap_const_logic_1;
        else 
            v113_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_1_d0 <= v128_reg_558;

    v113_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_1))) then 
            v113_1_we0 <= ap_const_logic_1;
        else 
            v113_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_2_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_2_ce0 <= ap_const_logic_1;
        else 
            v113_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_2_d0 <= v128_reg_558;

    v113_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_2))) then 
            v113_2_we0 <= ap_const_logic_1;
        else 
            v113_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_3_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_3_ce0 <= ap_const_logic_1;
        else 
            v113_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_3_d0 <= v128_reg_558;

    v113_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_3))) then 
            v113_3_we0 <= ap_const_logic_1;
        else 
            v113_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_4_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_4_ce0 <= ap_const_logic_1;
        else 
            v113_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_4_d0 <= v128_reg_558;

    v113_4_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_4))) then 
            v113_4_we0 <= ap_const_logic_1;
        else 
            v113_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_5_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_5_ce0 <= ap_const_logic_1;
        else 
            v113_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_5_d0 <= v128_reg_558;

    v113_5_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_5))) then 
            v113_5_we0 <= ap_const_logic_1;
        else 
            v113_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_6_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_6_ce0 <= ap_const_logic_1;
        else 
            v113_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_6_d0 <= v128_reg_558;

    v113_6_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_6))) then 
            v113_6_we0 <= ap_const_logic_1;
        else 
            v113_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_7_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_7_ce0 <= ap_const_logic_1;
        else 
            v113_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_7_d0 <= v128_reg_558;

    v113_7_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_7))) then 
            v113_7_we0 <= ap_const_logic_1;
        else 
            v113_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_8_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_8_ce0 <= ap_const_logic_1;
        else 
            v113_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_8_d0 <= v128_reg_558;

    v113_8_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_8))) then 
            v113_8_we0 <= ap_const_logic_1;
        else 
            v113_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_9_address0 <= zext_ln231_fu_472_p1(10 - 1 downto 0);

    v113_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            v113_9_ce0 <= ap_const_logic_1;
        else 
            v113_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v113_9_d0 <= v128_reg_558;

    v113_9_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, select_ln227_1_reg_524_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (select_ln227_1_reg_524_pp0_iter2_reg = ap_const_lv4_9))) then 
            v113_9_we0 <= ap_const_logic_1;
        else 
            v113_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_1_address0 <= zext_ln230_1_fu_443_p1(8 - 1 downto 0);

    v125_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v125_1_ce0 <= ap_const_logic_1;
        else 
            v125_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_2_address0 <= zext_ln230_1_fu_443_p1(8 - 1 downto 0);

    v125_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v125_2_ce0 <= ap_const_logic_1;
        else 
            v125_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_3_address0 <= zext_ln230_1_fu_443_p1(8 - 1 downto 0);

    v125_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v125_3_ce0 <= ap_const_logic_1;
        else 
            v125_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v125_address0 <= zext_ln230_1_fu_443_p1(8 - 1 downto 0);

    v125_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v125_ce0 <= ap_const_logic_1;
        else 
            v125_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln228_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln227_reg_518_pp0_iter2_reg),10));
    zext_ln230_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln230_fu_437_p2),64));
    zext_ln230_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln227_reg_518),8));
    zext_ln231_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_467_p2),64));
end behav;
