-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_init_block_AB_proc_Pipeline_init_block_AB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_A_loader_01_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_A_loader_01_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_01_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_01_full_n : IN STD_LOGIC;
    block_A_loader_01_write : OUT STD_LOGIC;
    block_A_loader_12_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_A_loader_12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_12_full_n : IN STD_LOGIC;
    block_A_loader_12_write : OUT STD_LOGIC;
    block_A_loader_23_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_A_loader_23_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_23_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_23_full_n : IN STD_LOGIC;
    block_A_loader_23_write : OUT STD_LOGIC;
    block_A_loader_34_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_A_loader_34_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_34_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_34_full_n : IN STD_LOGIC;
    block_A_loader_34_write : OUT STD_LOGIC;
    block_B_loader_05_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_B_loader_05_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_05_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_05_full_n : IN STD_LOGIC;
    block_B_loader_05_write : OUT STD_LOGIC;
    block_B_loader_16_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_B_loader_16_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_16_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_16_full_n : IN STD_LOGIC;
    block_B_loader_16_write : OUT STD_LOGIC;
    block_B_loader_27_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_B_loader_27_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_27_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_27_full_n : IN STD_LOGIC;
    block_B_loader_27_write : OUT STD_LOGIC;
    block_B_loader_38_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    block_B_loader_38_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_38_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_38_full_n : IN STD_LOGIC;
    block_B_loader_38_write : OUT STD_LOGIC;
    zext_ln74 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln77 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Bert_layer_init_block_AB_proc_Pipeline_init_block_AB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln71_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal block_A_loader_01_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal block_A_loader_12_blk_n : STD_LOGIC;
    signal block_A_loader_23_blk_n : STD_LOGIC;
    signal block_A_loader_34_blk_n : STD_LOGIC;
    signal block_B_loader_05_blk_n : STD_LOGIC;
    signal block_B_loader_16_blk_n : STD_LOGIC;
    signal block_B_loader_27_blk_n : STD_LOGIC;
    signal block_B_loader_38_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln74_2_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln71_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_24 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln74_1_fu_274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln74_fu_278_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    k_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln71_fu_262_p2 = ap_const_lv1_0))) then 
                    k_fu_70 <= add_ln71_fu_268_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_70 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_0_address0 <= zext_ln74_2_fu_284_p1(8 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln74_2_fu_284_p1(8 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln74_2_fu_284_p1(8 - 1 downto 0);

    A_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln74_2_fu_284_p1(8 - 1 downto 0);

    A_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_0_address0 <= zext_ln77_1_fu_298_p1(8 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln77_1_fu_298_p1(8 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln77_1_fu_298_p1(8 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln77_1_fu_298_p1(8 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln71_fu_268_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_24) + unsigned(ap_const_lv7_1));
    add_ln74_fu_278_p2 <= std_logic_vector(unsigned(zext_ln74) + unsigned(zext_ln74_1_fu_274_p1));
    add_ln77_fu_292_p2 <= std_logic_vector(unsigned(zext_ln77) + unsigned(zext_ln74_1_fu_274_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, block_A_loader_01_full_n, block_A_loader_12_full_n, block_A_loader_23_full_n, block_A_loader_34_full_n, block_B_loader_05_full_n, block_B_loader_16_full_n, block_B_loader_27_full_n, block_B_loader_38_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_38_full_n = ap_const_logic_0) or (block_B_loader_27_full_n = ap_const_logic_0) or (block_B_loader_16_full_n = ap_const_logic_0) or (block_B_loader_05_full_n = ap_const_logic_0) or (block_A_loader_34_full_n = ap_const_logic_0) or (block_A_loader_23_full_n = ap_const_logic_0) or (block_A_loader_12_full_n = ap_const_logic_0) or (block_A_loader_01_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, block_A_loader_01_full_n, block_A_loader_12_full_n, block_A_loader_23_full_n, block_A_loader_34_full_n, block_B_loader_05_full_n, block_B_loader_16_full_n, block_B_loader_27_full_n, block_B_loader_38_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_38_full_n = ap_const_logic_0) or (block_B_loader_27_full_n = ap_const_logic_0) or (block_B_loader_16_full_n = ap_const_logic_0) or (block_B_loader_05_full_n = ap_const_logic_0) or (block_A_loader_34_full_n = ap_const_logic_0) or (block_A_loader_23_full_n = ap_const_logic_0) or (block_A_loader_12_full_n = ap_const_logic_0) or (block_A_loader_01_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, block_A_loader_01_full_n, block_A_loader_12_full_n, block_A_loader_23_full_n, block_A_loader_34_full_n, block_B_loader_05_full_n, block_B_loader_16_full_n, block_B_loader_27_full_n, block_B_loader_38_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_38_full_n = ap_const_logic_0) or (block_B_loader_27_full_n = ap_const_logic_0) or (block_B_loader_16_full_n = ap_const_logic_0) or (block_B_loader_05_full_n = ap_const_logic_0) or (block_A_loader_34_full_n = ap_const_logic_0) or (block_A_loader_23_full_n = ap_const_logic_0) or (block_A_loader_12_full_n = ap_const_logic_0) or (block_A_loader_01_full_n = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(block_A_loader_01_full_n, block_A_loader_12_full_n, block_A_loader_23_full_n, block_A_loader_34_full_n, block_B_loader_05_full_n, block_B_loader_16_full_n, block_B_loader_27_full_n, block_B_loader_38_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((block_B_loader_38_full_n = ap_const_logic_0) or (block_B_loader_27_full_n = ap_const_logic_0) or (block_B_loader_16_full_n = ap_const_logic_0) or (block_B_loader_05_full_n = ap_const_logic_0) or (block_A_loader_34_full_n = ap_const_logic_0) or (block_A_loader_23_full_n = ap_const_logic_0) or (block_A_loader_12_full_n = ap_const_logic_0) or (block_A_loader_01_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln71_fu_262_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln71_fu_262_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_24_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_24 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_k_24 <= k_fu_70;
        end if; 
    end process;


    block_A_loader_01_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_01_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_01_blk_n <= block_A_loader_01_full_n;
        else 
            block_A_loader_01_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_01_din <= A_0_q0;

    block_A_loader_01_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_01_write <= ap_const_logic_1;
        else 
            block_A_loader_01_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_12_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_12_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_12_blk_n <= block_A_loader_12_full_n;
        else 
            block_A_loader_12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_12_din <= A_1_q0;

    block_A_loader_12_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_12_write <= ap_const_logic_1;
        else 
            block_A_loader_12_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_23_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_23_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_23_blk_n <= block_A_loader_23_full_n;
        else 
            block_A_loader_23_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_23_din <= A_2_q0;

    block_A_loader_23_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_23_write <= ap_const_logic_1;
        else 
            block_A_loader_23_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_34_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_34_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_34_blk_n <= block_A_loader_34_full_n;
        else 
            block_A_loader_34_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_34_din <= A_3_q0;

    block_A_loader_34_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_A_loader_34_write <= ap_const_logic_1;
        else 
            block_A_loader_34_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_05_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_05_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_05_blk_n <= block_B_loader_05_full_n;
        else 
            block_B_loader_05_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_05_din <= B_0_q0;

    block_B_loader_05_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_05_write <= ap_const_logic_1;
        else 
            block_B_loader_05_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_16_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_16_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_16_blk_n <= block_B_loader_16_full_n;
        else 
            block_B_loader_16_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_16_din <= B_1_q0;

    block_B_loader_16_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_16_write <= ap_const_logic_1;
        else 
            block_B_loader_16_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_27_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_27_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_27_blk_n <= block_B_loader_27_full_n;
        else 
            block_B_loader_27_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_27_din <= B_2_q0;

    block_B_loader_27_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_27_write <= ap_const_logic_1;
        else 
            block_B_loader_27_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_38_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_38_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_38_blk_n <= block_B_loader_38_full_n;
        else 
            block_B_loader_38_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_38_din <= B_3_q0;

    block_B_loader_38_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_B_loader_38_write <= ap_const_logic_1;
        else 
            block_B_loader_38_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln71_fu_262_p2 <= "1" when (ap_sig_allocacmp_k_24 = ap_const_lv7_40) else "0";
    zext_ln74_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_24),8));
    zext_ln74_2_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_278_p2),64));
    zext_ln77_1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_292_p2),64));
end behav;
