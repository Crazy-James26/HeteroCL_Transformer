-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_systolic_array_k_12_Loop_data_drain_C_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_C_drainer_0_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_0_full_n : IN STD_LOGIC;
    block_C_drainer_0_write : OUT STD_LOGIC;
    block_C_drainer_1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_1_full_n : IN STD_LOGIC;
    block_C_drainer_1_write : OUT STD_LOGIC;
    block_C_drainer_2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_2_full_n : IN STD_LOGIC;
    block_C_drainer_2_write : OUT STD_LOGIC;
    block_C_drainer_3_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_3_full_n : IN STD_LOGIC;
    block_C_drainer_3_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Bert_layer_systolic_array_k_12_Loop_data_drain_C_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln226_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal block_C_drainer_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal block_C_drainer_1_blk_n : STD_LOGIC;
    signal block_C_drainer_2_blk_n : STD_LOGIC;
    signal block_C_drainer_3_blk_n : STD_LOGIC;
    signal tmp_i_fu_222_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_reg_293 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_63_i_fu_236_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_63_i_reg_298 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_64_i_fu_250_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_64_i_reg_303 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_65_i_fu_264_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_65_i_reg_308 : STD_LOGIC_VECTOR (23 downto 0);
    signal n_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln226_fu_216_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_133 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mux_43_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_43_24_1_1_U2964 : component Bert_layer_mux_43_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => ap_sig_allocacmp_n_6,
        dout => tmp_i_fu_222_p6);

    mux_43_24_1_1_U2965 : component Bert_layer_mux_43_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => p_read4,
        din1 => p_read5,
        din2 => p_read6,
        din3 => p_read7,
        din4 => ap_sig_allocacmp_n_6,
        dout => tmp_63_i_fu_236_p6);

    mux_43_24_1_1_U2966 : component Bert_layer_mux_43_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => p_read8,
        din1 => p_read9,
        din2 => p_read10,
        din3 => p_read11,
        din4 => ap_sig_allocacmp_n_6,
        dout => tmp_64_i_fu_250_p6);

    mux_43_24_1_1_U2967 : component Bert_layer_mux_43_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 3,
        dout_WIDTH => 24)
    port map (
        din0 => p_read12,
        din1 => p_read13,
        din2 => p_read14,
        din3 => p_read15,
        din4 => ap_sig_allocacmp_n_6,
        dout => tmp_65_i_fu_264_p6);

    flow_control_loop_pipe_U : component Bert_layer_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    n_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_133)) then
                if ((icmp_ln226_fu_210_p2 = ap_const_lv1_0)) then 
                    n_fu_74 <= add_ln226_fu_216_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_210_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_63_i_reg_298 <= tmp_63_i_fu_236_p6;
                tmp_64_i_reg_303 <= tmp_64_i_fu_250_p6;
                tmp_65_i_reg_308 <= tmp_65_i_fu_264_p6;
                tmp_i_reg_293 <= tmp_i_fu_222_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln226_fu_216_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_6) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0));
    end process;


    ap_condition_133_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_133 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln226_fu_210_p2, ap_start_int)
    begin
        if (((icmp_ln226_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_74, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_6 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_n_6 <= n_fu_74;
        end if; 
    end process;


    block_C_drainer_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_0_blk_n <= block_C_drainer_0_full_n;
        else 
            block_C_drainer_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_0_din <= tmp_i_reg_293;

    block_C_drainer_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_0_write <= ap_const_logic_1;
        else 
            block_C_drainer_0_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_1_blk_n <= block_C_drainer_1_full_n;
        else 
            block_C_drainer_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_1_din <= tmp_63_i_reg_298;

    block_C_drainer_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_1_write <= ap_const_logic_1;
        else 
            block_C_drainer_1_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_2_blk_n <= block_C_drainer_2_full_n;
        else 
            block_C_drainer_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_2_din <= tmp_64_i_reg_303;

    block_C_drainer_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_2_write <= ap_const_logic_1;
        else 
            block_C_drainer_2_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_3_blk_n <= block_C_drainer_3_full_n;
        else 
            block_C_drainer_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_3_din <= tmp_65_i_reg_308;

    block_C_drainer_3_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_C_drainer_3_write <= ap_const_logic_1;
        else 
            block_C_drainer_3_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln226_fu_210_p2 <= "1" when (ap_sig_allocacmp_n_6 = ap_const_lv3_4) else "0";
end behav;
