// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Self_attention_Pipeline_l_mh_separate_i_s_l_j_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v89_0_address0,
        v89_0_ce0,
        v89_0_q0,
        v89_1_address0,
        v89_1_ce0,
        v89_1_q0,
        v89_2_address0,
        v89_2_ce0,
        v89_2_q0,
        v89_3_address0,
        v89_3_ce0,
        v89_3_q0,
        v89_4_address0,
        v89_4_ce0,
        v89_4_q0,
        v89_5_address0,
        v89_5_ce0,
        v89_5_q0,
        v89_6_address0,
        v89_6_ce0,
        v89_6_q0,
        v89_7_address0,
        v89_7_ce0,
        v89_7_q0,
        v89_8_address0,
        v89_8_ce0,
        v89_8_q0,
        v89_9_address0,
        v89_9_ce0,
        v89_9_q0,
        v89_10_address0,
        v89_10_ce0,
        v89_10_q0,
        v89_11_address0,
        v89_11_ce0,
        v89_11_q0,
        V_h_V_address0,
        V_h_V_ce0,
        V_h_V_we0,
        V_h_V_d0,
        V_h_V_1_address0,
        V_h_V_1_ce0,
        V_h_V_1_we0,
        V_h_V_1_d0,
        V_h_V_2_address0,
        V_h_V_2_ce0,
        V_h_V_2_we0,
        V_h_V_2_d0,
        V_h_V_3_address0,
        V_h_V_3_ce0,
        V_h_V_3_we0,
        V_h_V_3_d0,
        Q_h_V_address0,
        Q_h_V_ce0,
        Q_h_V_we0,
        Q_h_V_d0,
        Q_h_V_1_address0,
        Q_h_V_1_ce0,
        Q_h_V_1_we0,
        Q_h_V_1_d0,
        Q_h_V_2_address0,
        Q_h_V_2_ce0,
        Q_h_V_2_we0,
        Q_h_V_2_d0,
        Q_h_V_3_address0,
        Q_h_V_3_ce0,
        Q_h_V_3_we0,
        Q_h_V_3_d0,
        K_h_V_address0,
        K_h_V_ce0,
        K_h_V_we0,
        K_h_V_d0,
        K_h_V_1_address0,
        K_h_V_1_ce0,
        K_h_V_1_we0,
        K_h_V_1_d0,
        K_h_V_2_address0,
        K_h_V_2_ce0,
        K_h_V_2_we0,
        K_h_V_2_d0,
        K_h_V_3_address0,
        K_h_V_3_ce0,
        K_h_V_3_we0,
        K_h_V_3_d0,
        tmp_62,
        v87_0_address0,
        v87_0_ce0,
        v87_0_q0,
        v87_1_address0,
        v87_1_ce0,
        v87_1_q0,
        v87_2_address0,
        v87_2_ce0,
        v87_2_q0,
        v87_3_address0,
        v87_3_ce0,
        v87_3_q0,
        v87_4_address0,
        v87_4_ce0,
        v87_4_q0,
        v87_5_address0,
        v87_5_ce0,
        v87_5_q0,
        v87_6_address0,
        v87_6_ce0,
        v87_6_q0,
        v87_7_address0,
        v87_7_ce0,
        v87_7_q0,
        v87_8_address0,
        v87_8_ce0,
        v87_8_q0,
        v87_9_address0,
        v87_9_ce0,
        v87_9_q0,
        v87_10_address0,
        v87_10_ce0,
        v87_10_q0,
        v87_11_address0,
        v87_11_ce0,
        v87_11_q0,
        v88_0_address0,
        v88_0_ce0,
        v88_0_q0,
        v88_1_address0,
        v88_1_ce0,
        v88_1_q0,
        v88_2_address0,
        v88_2_ce0,
        v88_2_q0,
        v88_3_address0,
        v88_3_ce0,
        v88_3_q0,
        v88_4_address0,
        v88_4_ce0,
        v88_4_q0,
        v88_5_address0,
        v88_5_ce0,
        v88_5_q0,
        v88_6_address0,
        v88_6_ce0,
        v88_6_q0,
        v88_7_address0,
        v88_7_ce0,
        v88_7_q0,
        v88_8_address0,
        v88_8_ce0,
        v88_8_q0,
        v88_9_address0,
        v88_9_ce0,
        v88_9_q0,
        v88_10_address0,
        v88_10_ce0,
        v88_10_q0,
        v88_11_address0,
        v88_11_ce0,
        v88_11_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] v89_0_address0;
output   v89_0_ce0;
input  [23:0] v89_0_q0;
output  [9:0] v89_1_address0;
output   v89_1_ce0;
input  [23:0] v89_1_q0;
output  [9:0] v89_2_address0;
output   v89_2_ce0;
input  [23:0] v89_2_q0;
output  [9:0] v89_3_address0;
output   v89_3_ce0;
input  [23:0] v89_3_q0;
output  [9:0] v89_4_address0;
output   v89_4_ce0;
input  [23:0] v89_4_q0;
output  [9:0] v89_5_address0;
output   v89_5_ce0;
input  [23:0] v89_5_q0;
output  [9:0] v89_6_address0;
output   v89_6_ce0;
input  [23:0] v89_6_q0;
output  [9:0] v89_7_address0;
output   v89_7_ce0;
input  [23:0] v89_7_q0;
output  [9:0] v89_8_address0;
output   v89_8_ce0;
input  [23:0] v89_8_q0;
output  [9:0] v89_9_address0;
output   v89_9_ce0;
input  [23:0] v89_9_q0;
output  [9:0] v89_10_address0;
output   v89_10_ce0;
input  [23:0] v89_10_q0;
output  [9:0] v89_11_address0;
output   v89_11_ce0;
input  [23:0] v89_11_q0;
output  [7:0] V_h_V_address0;
output   V_h_V_ce0;
output   V_h_V_we0;
output  [23:0] V_h_V_d0;
output  [7:0] V_h_V_1_address0;
output   V_h_V_1_ce0;
output   V_h_V_1_we0;
output  [23:0] V_h_V_1_d0;
output  [7:0] V_h_V_2_address0;
output   V_h_V_2_ce0;
output   V_h_V_2_we0;
output  [23:0] V_h_V_2_d0;
output  [7:0] V_h_V_3_address0;
output   V_h_V_3_ce0;
output   V_h_V_3_we0;
output  [23:0] V_h_V_3_d0;
output  [7:0] Q_h_V_address0;
output   Q_h_V_ce0;
output   Q_h_V_we0;
output  [23:0] Q_h_V_d0;
output  [7:0] Q_h_V_1_address0;
output   Q_h_V_1_ce0;
output   Q_h_V_1_we0;
output  [23:0] Q_h_V_1_d0;
output  [7:0] Q_h_V_2_address0;
output   Q_h_V_2_ce0;
output   Q_h_V_2_we0;
output  [23:0] Q_h_V_2_d0;
output  [7:0] Q_h_V_3_address0;
output   Q_h_V_3_ce0;
output   Q_h_V_3_we0;
output  [23:0] Q_h_V_3_d0;
output  [7:0] K_h_V_address0;
output   K_h_V_ce0;
output   K_h_V_we0;
output  [23:0] K_h_V_d0;
output  [7:0] K_h_V_1_address0;
output   K_h_V_1_ce0;
output   K_h_V_1_we0;
output  [23:0] K_h_V_1_d0;
output  [7:0] K_h_V_2_address0;
output   K_h_V_2_ce0;
output   K_h_V_2_we0;
output  [23:0] K_h_V_2_d0;
output  [7:0] K_h_V_3_address0;
output   K_h_V_3_ce0;
output   K_h_V_3_we0;
output  [23:0] K_h_V_3_d0;
input  [9:0] tmp_62;
output  [9:0] v87_0_address0;
output   v87_0_ce0;
input  [23:0] v87_0_q0;
output  [9:0] v87_1_address0;
output   v87_1_ce0;
input  [23:0] v87_1_q0;
output  [9:0] v87_2_address0;
output   v87_2_ce0;
input  [23:0] v87_2_q0;
output  [9:0] v87_3_address0;
output   v87_3_ce0;
input  [23:0] v87_3_q0;
output  [9:0] v87_4_address0;
output   v87_4_ce0;
input  [23:0] v87_4_q0;
output  [9:0] v87_5_address0;
output   v87_5_ce0;
input  [23:0] v87_5_q0;
output  [9:0] v87_6_address0;
output   v87_6_ce0;
input  [23:0] v87_6_q0;
output  [9:0] v87_7_address0;
output   v87_7_ce0;
input  [23:0] v87_7_q0;
output  [9:0] v87_8_address0;
output   v87_8_ce0;
input  [23:0] v87_8_q0;
output  [9:0] v87_9_address0;
output   v87_9_ce0;
input  [23:0] v87_9_q0;
output  [9:0] v87_10_address0;
output   v87_10_ce0;
input  [23:0] v87_10_q0;
output  [9:0] v87_11_address0;
output   v87_11_ce0;
input  [23:0] v87_11_q0;
output  [9:0] v88_0_address0;
output   v88_0_ce0;
input  [23:0] v88_0_q0;
output  [9:0] v88_1_address0;
output   v88_1_ce0;
input  [23:0] v88_1_q0;
output  [9:0] v88_2_address0;
output   v88_2_ce0;
input  [23:0] v88_2_q0;
output  [9:0] v88_3_address0;
output   v88_3_ce0;
input  [23:0] v88_3_q0;
output  [9:0] v88_4_address0;
output   v88_4_ce0;
input  [23:0] v88_4_q0;
output  [9:0] v88_5_address0;
output   v88_5_ce0;
input  [23:0] v88_5_q0;
output  [9:0] v88_6_address0;
output   v88_6_ce0;
input  [23:0] v88_6_q0;
output  [9:0] v88_7_address0;
output   v88_7_ce0;
input  [23:0] v88_7_q0;
output  [9:0] v88_8_address0;
output   v88_8_ce0;
input  [23:0] v88_8_q0;
output  [9:0] v88_9_address0;
output   v88_9_ce0;
input  [23:0] v88_9_q0;
output  [9:0] v88_10_address0;
output   v88_10_ce0;
input  [23:0] v88_10_q0;
output  [9:0] v88_11_address0;
output   v88_11_ce0;
input  [23:0] v88_11_q0;

reg ap_idle;
reg v89_0_ce0;
reg v89_1_ce0;
reg v89_2_ce0;
reg v89_3_ce0;
reg v89_4_ce0;
reg v89_5_ce0;
reg v89_6_ce0;
reg v89_7_ce0;
reg v89_8_ce0;
reg v89_9_ce0;
reg v89_10_ce0;
reg v89_11_ce0;
reg V_h_V_ce0;
reg V_h_V_we0;
reg V_h_V_1_ce0;
reg V_h_V_1_we0;
reg V_h_V_2_ce0;
reg V_h_V_2_we0;
reg V_h_V_3_ce0;
reg V_h_V_3_we0;
reg Q_h_V_ce0;
reg Q_h_V_we0;
reg Q_h_V_1_ce0;
reg Q_h_V_1_we0;
reg Q_h_V_2_ce0;
reg Q_h_V_2_we0;
reg Q_h_V_3_ce0;
reg Q_h_V_3_we0;
reg K_h_V_ce0;
reg K_h_V_we0;
reg K_h_V_1_ce0;
reg K_h_V_1_we0;
reg K_h_V_2_ce0;
reg K_h_V_2_we0;
reg K_h_V_3_ce0;
reg K_h_V_3_we0;
reg v87_0_ce0;
reg v87_1_ce0;
reg v87_2_ce0;
reg v87_3_ce0;
reg v87_4_ce0;
reg v87_5_ce0;
reg v87_6_ce0;
reg v87_7_ce0;
reg v87_8_ce0;
reg v87_9_ce0;
reg v87_10_ce0;
reg v87_11_ce0;
reg v88_0_ce0;
reg v88_1_ce0;
reg v88_2_ce0;
reg v88_3_ce0;
reg v88_4_ce0;
reg v88_5_ce0;
reg v88_6_ce0;
reg v88_7_ce0;
reg v88_8_ce0;
reg v88_9_ce0;
reg v88_10_ce0;
reg v88_11_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln144_fu_820_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln145_fu_835_p2;
reg   [0:0] icmp_ln145_reg_1123;
reg   [0:0] icmp_ln145_reg_1123_pp0_iter1_reg;
wire   [6:0] select_ln144_fu_841_p3;
reg   [6:0] select_ln144_reg_1128;
reg   [6:0] select_ln144_reg_1128_pp0_iter1_reg;
reg   [6:0] select_ln144_reg_1128_pp0_iter2_reg;
wire   [1:0] trunc_ln152_fu_913_p1;
reg   [1:0] trunc_ln152_reg_1316;
reg   [1:0] trunc_ln152_reg_1316_pp0_iter2_reg;
wire   [3:0] select_ln144_1_fu_925_p3;
reg   [3:0] select_ln144_1_reg_1320;
reg   [1:0] p_cast_mid2_v_reg_1325;
wire   [1:0] trunc_ln144_fu_942_p1;
reg   [1:0] trunc_ln144_reg_1330;
wire   [23:0] tmp_fu_946_p14;
reg   [23:0] tmp_reg_1334;
wire   [23:0] tmp_s_fu_976_p14;
reg   [23:0] tmp_s_reg_1342;
wire   [23:0] tmp_1_fu_1006_p14;
reg   [23:0] tmp_1_reg_1350;
wire   [63:0] zext_ln148_fu_873_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln148_2_fu_1057_p1;
wire   [63:0] zext_ln152_fu_1085_p1;
reg   [6:0] j_s_fu_160;
wire   [6:0] add_ln145_fu_849_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_s_load;
reg   [3:0] i_s_fu_164;
reg   [9:0] indvar_flatten_fu_168;
wire   [9:0] add_ln144_1_fu_826_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] zext_ln145_fu_865_p1;
wire   [9:0] add_ln147_fu_868_p2;
wire   [3:0] add_ln144_fu_919_p2;
wire   [7:0] tmp_25_fu_1041_p3;
wire   [7:0] zext_ln148_1_fu_1048_p1;
wire   [7:0] add_ln148_fu_1051_p2;
wire   [3:0] lshr_ln_fu_1069_p4;
wire   [7:0] tmp_26_fu_1078_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 24 ),
    .din9_WIDTH( 24 ),
    .din10_WIDTH( 24 ),
    .din11_WIDTH( 24 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
mux_124_24_1_1_U2231(
    .din0(v87_0_q0),
    .din1(v87_1_q0),
    .din2(v87_2_q0),
    .din3(v87_3_q0),
    .din4(v87_4_q0),
    .din5(v87_5_q0),
    .din6(v87_6_q0),
    .din7(v87_7_q0),
    .din8(v87_8_q0),
    .din9(v87_9_q0),
    .din10(v87_10_q0),
    .din11(v87_11_q0),
    .din12(select_ln144_1_fu_925_p3),
    .dout(tmp_fu_946_p14)
);

Bert_layer_mux_124_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 24 ),
    .din9_WIDTH( 24 ),
    .din10_WIDTH( 24 ),
    .din11_WIDTH( 24 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
mux_124_24_1_1_U2232(
    .din0(v88_0_q0),
    .din1(v88_1_q0),
    .din2(v88_2_q0),
    .din3(v88_3_q0),
    .din4(v88_4_q0),
    .din5(v88_5_q0),
    .din6(v88_6_q0),
    .din7(v88_7_q0),
    .din8(v88_8_q0),
    .din9(v88_9_q0),
    .din10(v88_10_q0),
    .din11(v88_11_q0),
    .din12(select_ln144_1_fu_925_p3),
    .dout(tmp_s_fu_976_p14)
);

Bert_layer_mux_124_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 24 ),
    .din9_WIDTH( 24 ),
    .din10_WIDTH( 24 ),
    .din11_WIDTH( 24 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
mux_124_24_1_1_U2233(
    .din0(v89_0_q0),
    .din1(v89_1_q0),
    .din2(v89_2_q0),
    .din3(v89_3_q0),
    .din4(v89_4_q0),
    .din5(v89_5_q0),
    .din6(v89_6_q0),
    .din7(v89_7_q0),
    .din8(v89_8_q0),
    .din9(v89_9_q0),
    .din10(v89_10_q0),
    .din11(v89_11_q0),
    .din12(select_ln144_1_fu_925_p3),
    .dout(tmp_1_fu_1006_p14)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_s_fu_164 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_s_fu_164 <= select_ln144_1_fu_925_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln144_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_168 <= add_ln144_1_fu_826_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_168 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln144_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_s_fu_160 <= add_ln145_fu_849_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_s_fu_160 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln145_reg_1123_pp0_iter1_reg <= icmp_ln145_reg_1123;
        select_ln144_reg_1128_pp0_iter1_reg <= select_ln144_reg_1128;
        trunc_ln152_reg_1316 <= trunc_ln152_fu_913_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln144_fu_820_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln145_reg_1123 <= icmp_ln145_fu_835_p2;
        select_ln144_reg_1128 <= select_ln144_fu_841_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_cast_mid2_v_reg_1325 <= {{select_ln144_1_fu_925_p3[3:2]}};
        select_ln144_1_reg_1320 <= select_ln144_1_fu_925_p3;
        select_ln144_reg_1128_pp0_iter2_reg <= select_ln144_reg_1128_pp0_iter1_reg;
        tmp_1_reg_1350 <= tmp_1_fu_1006_p14;
        tmp_reg_1334 <= tmp_fu_946_p14;
        tmp_s_reg_1342 <= tmp_s_fu_976_p14;
        trunc_ln144_reg_1330 <= trunc_ln144_fu_942_p1;
        trunc_ln152_reg_1316_pp0_iter2_reg <= trunc_ln152_reg_1316;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_1_ce0 = 1'b1;
    end else begin
        K_h_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_1_we0 = 1'b1;
    end else begin
        K_h_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_2_ce0 = 1'b1;
    end else begin
        K_h_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_2_we0 = 1'b1;
    end else begin
        K_h_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_3_ce0 = 1'b1;
    end else begin
        K_h_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_3_we0 = 1'b1;
    end else begin
        K_h_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_ce0 = 1'b1;
    end else begin
        K_h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        K_h_V_we0 = 1'b1;
    end else begin
        K_h_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_1_ce0 = 1'b1;
    end else begin
        Q_h_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_1_we0 = 1'b1;
    end else begin
        Q_h_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_2_ce0 = 1'b1;
    end else begin
        Q_h_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_2_we0 = 1'b1;
    end else begin
        Q_h_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_3_ce0 = 1'b1;
    end else begin
        Q_h_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_3_we0 = 1'b1;
    end else begin
        Q_h_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_ce0 = 1'b1;
    end else begin
        Q_h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1330 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Q_h_V_we0 = 1'b1;
    end else begin
        Q_h_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_1_ce0 = 1'b1;
    end else begin
        V_h_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln152_reg_1316_pp0_iter2_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_1_we0 = 1'b1;
    end else begin
        V_h_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_2_ce0 = 1'b1;
    end else begin
        V_h_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln152_reg_1316_pp0_iter2_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_2_we0 = 1'b1;
    end else begin
        V_h_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_3_ce0 = 1'b1;
    end else begin
        V_h_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln152_reg_1316_pp0_iter2_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_3_we0 = 1'b1;
    end else begin
        V_h_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_ce0 = 1'b1;
    end else begin
        V_h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln152_reg_1316_pp0_iter2_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        V_h_V_we0 = 1'b1;
    end else begin
        V_h_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln144_fu_820_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_168;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_s_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_s_load = j_s_fu_160;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_0_ce0 = 1'b1;
    end else begin
        v87_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_10_ce0 = 1'b1;
    end else begin
        v87_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_11_ce0 = 1'b1;
    end else begin
        v87_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_1_ce0 = 1'b1;
    end else begin
        v87_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_2_ce0 = 1'b1;
    end else begin
        v87_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_3_ce0 = 1'b1;
    end else begin
        v87_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_4_ce0 = 1'b1;
    end else begin
        v87_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_5_ce0 = 1'b1;
    end else begin
        v87_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_6_ce0 = 1'b1;
    end else begin
        v87_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_7_ce0 = 1'b1;
    end else begin
        v87_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_8_ce0 = 1'b1;
    end else begin
        v87_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v87_9_ce0 = 1'b1;
    end else begin
        v87_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_0_ce0 = 1'b1;
    end else begin
        v88_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_10_ce0 = 1'b1;
    end else begin
        v88_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_11_ce0 = 1'b1;
    end else begin
        v88_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_1_ce0 = 1'b1;
    end else begin
        v88_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_2_ce0 = 1'b1;
    end else begin
        v88_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_3_ce0 = 1'b1;
    end else begin
        v88_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_4_ce0 = 1'b1;
    end else begin
        v88_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_5_ce0 = 1'b1;
    end else begin
        v88_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_6_ce0 = 1'b1;
    end else begin
        v88_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_7_ce0 = 1'b1;
    end else begin
        v88_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_8_ce0 = 1'b1;
    end else begin
        v88_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v88_9_ce0 = 1'b1;
    end else begin
        v88_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_0_ce0 = 1'b1;
    end else begin
        v89_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_10_ce0 = 1'b1;
    end else begin
        v89_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_11_ce0 = 1'b1;
    end else begin
        v89_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_1_ce0 = 1'b1;
    end else begin
        v89_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_2_ce0 = 1'b1;
    end else begin
        v89_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_3_ce0 = 1'b1;
    end else begin
        v89_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_4_ce0 = 1'b1;
    end else begin
        v89_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_5_ce0 = 1'b1;
    end else begin
        v89_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_6_ce0 = 1'b1;
    end else begin
        v89_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_7_ce0 = 1'b1;
    end else begin
        v89_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_8_ce0 = 1'b1;
    end else begin
        v89_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v89_9_ce0 = 1'b1;
    end else begin
        v89_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_h_V_1_address0 = zext_ln148_2_fu_1057_p1;

assign K_h_V_1_d0 = tmp_s_reg_1342;

assign K_h_V_2_address0 = zext_ln148_2_fu_1057_p1;

assign K_h_V_2_d0 = tmp_s_reg_1342;

assign K_h_V_3_address0 = zext_ln148_2_fu_1057_p1;

assign K_h_V_3_d0 = tmp_s_reg_1342;

assign K_h_V_address0 = zext_ln148_2_fu_1057_p1;

assign K_h_V_d0 = tmp_s_reg_1342;

assign Q_h_V_1_address0 = zext_ln148_2_fu_1057_p1;

assign Q_h_V_1_d0 = tmp_reg_1334;

assign Q_h_V_2_address0 = zext_ln148_2_fu_1057_p1;

assign Q_h_V_2_d0 = tmp_reg_1334;

assign Q_h_V_3_address0 = zext_ln148_2_fu_1057_p1;

assign Q_h_V_3_d0 = tmp_reg_1334;

assign Q_h_V_address0 = zext_ln148_2_fu_1057_p1;

assign Q_h_V_d0 = tmp_reg_1334;

assign V_h_V_1_address0 = zext_ln152_fu_1085_p1;

assign V_h_V_1_d0 = tmp_1_reg_1350;

assign V_h_V_2_address0 = zext_ln152_fu_1085_p1;

assign V_h_V_2_d0 = tmp_1_reg_1350;

assign V_h_V_3_address0 = zext_ln152_fu_1085_p1;

assign V_h_V_3_d0 = tmp_1_reg_1350;

assign V_h_V_address0 = zext_ln152_fu_1085_p1;

assign V_h_V_d0 = tmp_1_reg_1350;

assign add_ln144_1_fu_826_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln144_fu_919_p2 = (i_s_fu_164 + 4'd1);

assign add_ln145_fu_849_p2 = (select_ln144_fu_841_p3 + 7'd1);

assign add_ln147_fu_868_p2 = (tmp_62 + zext_ln145_fu_865_p1);

assign add_ln148_fu_1051_p2 = (tmp_25_fu_1041_p3 + zext_ln148_1_fu_1048_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln144_fu_820_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_835_p2 = ((ap_sig_allocacmp_j_s_load == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln_fu_1069_p4 = {{select_ln144_reg_1128_pp0_iter2_reg[5:2]}};

assign select_ln144_1_fu_925_p3 = ((icmp_ln145_reg_1123_pp0_iter1_reg[0:0] == 1'b1) ? add_ln144_fu_919_p2 : i_s_fu_164);

assign select_ln144_fu_841_p3 = ((icmp_ln145_fu_835_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_s_load);

assign tmp_25_fu_1041_p3 = {{p_cast_mid2_v_reg_1325}, {6'd0}};

assign tmp_26_fu_1078_p3 = {{select_ln144_1_reg_1320}, {lshr_ln_fu_1069_p4}};

assign trunc_ln144_fu_942_p1 = select_ln144_1_fu_925_p3[1:0];

assign trunc_ln152_fu_913_p1 = select_ln144_reg_1128[1:0];

assign v87_0_address0 = zext_ln148_fu_873_p1;

assign v87_10_address0 = zext_ln148_fu_873_p1;

assign v87_11_address0 = zext_ln148_fu_873_p1;

assign v87_1_address0 = zext_ln148_fu_873_p1;

assign v87_2_address0 = zext_ln148_fu_873_p1;

assign v87_3_address0 = zext_ln148_fu_873_p1;

assign v87_4_address0 = zext_ln148_fu_873_p1;

assign v87_5_address0 = zext_ln148_fu_873_p1;

assign v87_6_address0 = zext_ln148_fu_873_p1;

assign v87_7_address0 = zext_ln148_fu_873_p1;

assign v87_8_address0 = zext_ln148_fu_873_p1;

assign v87_9_address0 = zext_ln148_fu_873_p1;

assign v88_0_address0 = zext_ln148_fu_873_p1;

assign v88_10_address0 = zext_ln148_fu_873_p1;

assign v88_11_address0 = zext_ln148_fu_873_p1;

assign v88_1_address0 = zext_ln148_fu_873_p1;

assign v88_2_address0 = zext_ln148_fu_873_p1;

assign v88_3_address0 = zext_ln148_fu_873_p1;

assign v88_4_address0 = zext_ln148_fu_873_p1;

assign v88_5_address0 = zext_ln148_fu_873_p1;

assign v88_6_address0 = zext_ln148_fu_873_p1;

assign v88_7_address0 = zext_ln148_fu_873_p1;

assign v88_8_address0 = zext_ln148_fu_873_p1;

assign v88_9_address0 = zext_ln148_fu_873_p1;

assign v89_0_address0 = zext_ln148_fu_873_p1;

assign v89_10_address0 = zext_ln148_fu_873_p1;

assign v89_11_address0 = zext_ln148_fu_873_p1;

assign v89_1_address0 = zext_ln148_fu_873_p1;

assign v89_2_address0 = zext_ln148_fu_873_p1;

assign v89_3_address0 = zext_ln148_fu_873_p1;

assign v89_4_address0 = zext_ln148_fu_873_p1;

assign v89_5_address0 = zext_ln148_fu_873_p1;

assign v89_6_address0 = zext_ln148_fu_873_p1;

assign v89_7_address0 = zext_ln148_fu_873_p1;

assign v89_8_address0 = zext_ln148_fu_873_p1;

assign v89_9_address0 = zext_ln148_fu_873_p1;

assign zext_ln145_fu_865_p1 = select_ln144_reg_1128;

assign zext_ln148_1_fu_1048_p1 = select_ln144_reg_1128_pp0_iter2_reg;

assign zext_ln148_2_fu_1057_p1 = add_ln148_fu_1051_p2;

assign zext_ln148_fu_873_p1 = add_ln147_fu_868_p2;

assign zext_ln152_fu_1085_p1 = tmp_26_fu_1078_p3;

endmodule //Bert_layer_Self_attention_Pipeline_l_mh_separate_i_s_l_j_s
