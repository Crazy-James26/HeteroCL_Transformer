// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i16_l_j12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v275_address0,
        v275_ce0,
        v275_we0,
        v275_d0,
        v274_V_address0,
        v274_V_ce0,
        v274_V_q0,
        v274_V_1_address0,
        v274_V_1_ce0,
        v274_V_1_q0,
        v274_V_2_address0,
        v274_V_2_ce0,
        v274_V_2_q0,
        v274_V_3_address0,
        v274_V_3_ce0,
        v274_V_3_q0,
        v274_V_4_address0,
        v274_V_4_ce0,
        v274_V_4_q0,
        v274_V_5_address0,
        v274_V_5_ce0,
        v274_V_5_q0,
        v274_V_6_address0,
        v274_V_6_ce0,
        v274_V_6_q0,
        v274_V_7_address0,
        v274_V_7_ce0,
        v274_V_7_q0,
        v274_V_8_address0,
        v274_V_8_ce0,
        v274_V_8_q0,
        v274_V_9_address0,
        v274_V_9_ce0,
        v274_V_9_q0,
        v274_V_10_address0,
        v274_V_10_ce0,
        v274_V_10_q0,
        v274_V_11_address0,
        v274_V_11_ce0,
        v274_V_11_q0,
        v271_V_address0,
        v271_V_ce0,
        v271_V_q0,
        v271_V_1_address0,
        v271_V_1_ce0,
        v271_V_1_q0,
        v271_V_2_address0,
        v271_V_2_ce0,
        v271_V_2_q0,
        v271_V_3_address0,
        v271_V_3_ce0,
        v271_V_3_q0,
        v271_V_4_address0,
        v271_V_4_ce0,
        v271_V_4_q0,
        v271_V_5_address0,
        v271_V_5_ce0,
        v271_V_5_q0,
        v271_V_6_address0,
        v271_V_6_ce0,
        v271_V_6_q0,
        v271_V_7_address0,
        v271_V_7_ce0,
        v271_V_7_q0,
        v271_V_8_address0,
        v271_V_8_ce0,
        v271_V_8_q0,
        v271_V_9_address0,
        v271_V_9_ce0,
        v271_V_9_q0,
        v271_V_10_address0,
        v271_V_10_ce0,
        v271_V_10_q0,
        v271_V_11_address0,
        v271_V_11_ce0,
        v271_V_11_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v275_address0;
output   v275_ce0;
output   v275_we0;
output  [31:0] v275_d0;
output  [9:0] v274_V_address0;
output   v274_V_ce0;
input  [23:0] v274_V_q0;
output  [9:0] v274_V_1_address0;
output   v274_V_1_ce0;
input  [23:0] v274_V_1_q0;
output  [9:0] v274_V_2_address0;
output   v274_V_2_ce0;
input  [23:0] v274_V_2_q0;
output  [9:0] v274_V_3_address0;
output   v274_V_3_ce0;
input  [23:0] v274_V_3_q0;
output  [9:0] v274_V_4_address0;
output   v274_V_4_ce0;
input  [23:0] v274_V_4_q0;
output  [9:0] v274_V_5_address0;
output   v274_V_5_ce0;
input  [23:0] v274_V_5_q0;
output  [9:0] v274_V_6_address0;
output   v274_V_6_ce0;
input  [23:0] v274_V_6_q0;
output  [9:0] v274_V_7_address0;
output   v274_V_7_ce0;
input  [23:0] v274_V_7_q0;
output  [9:0] v274_V_8_address0;
output   v274_V_8_ce0;
input  [23:0] v274_V_8_q0;
output  [9:0] v274_V_9_address0;
output   v274_V_9_ce0;
input  [23:0] v274_V_9_q0;
output  [9:0] v274_V_10_address0;
output   v274_V_10_ce0;
input  [23:0] v274_V_10_q0;
output  [9:0] v274_V_11_address0;
output   v274_V_11_ce0;
input  [23:0] v274_V_11_q0;
output  [9:0] v271_V_address0;
output   v271_V_ce0;
input  [23:0] v271_V_q0;
output  [9:0] v271_V_1_address0;
output   v271_V_1_ce0;
input  [23:0] v271_V_1_q0;
output  [9:0] v271_V_2_address0;
output   v271_V_2_ce0;
input  [23:0] v271_V_2_q0;
output  [9:0] v271_V_3_address0;
output   v271_V_3_ce0;
input  [23:0] v271_V_3_q0;
output  [9:0] v271_V_4_address0;
output   v271_V_4_ce0;
input  [23:0] v271_V_4_q0;
output  [9:0] v271_V_5_address0;
output   v271_V_5_ce0;
input  [23:0] v271_V_5_q0;
output  [9:0] v271_V_6_address0;
output   v271_V_6_ce0;
input  [23:0] v271_V_6_q0;
output  [9:0] v271_V_7_address0;
output   v271_V_7_ce0;
input  [23:0] v271_V_7_q0;
output  [9:0] v271_V_8_address0;
output   v271_V_8_ce0;
input  [23:0] v271_V_8_q0;
output  [9:0] v271_V_9_address0;
output   v271_V_9_ce0;
input  [23:0] v271_V_9_q0;
output  [9:0] v271_V_10_address0;
output   v271_V_10_ce0;
input  [23:0] v271_V_10_q0;
output  [9:0] v271_V_11_address0;
output   v271_V_11_ce0;
input  [23:0] v271_V_11_q0;

reg ap_idle;
reg v275_ce0;
reg v275_we0;
reg v274_V_ce0;
reg v274_V_1_ce0;
reg v274_V_2_ce0;
reg v274_V_3_ce0;
reg v274_V_4_ce0;
reg v274_V_5_ce0;
reg v274_V_6_ce0;
reg v274_V_7_ce0;
reg v274_V_8_ce0;
reg v274_V_9_ce0;
reg v274_V_10_ce0;
reg v274_V_11_ce0;
reg v271_V_ce0;
reg v271_V_1_ce0;
reg v271_V_2_ce0;
reg v271_V_3_ce0;
reg v271_V_4_ce0;
reg v271_V_5_ce0;
reg v271_V_6_ce0;
reg v271_V_7_ce0;
reg v271_V_8_ce0;
reg v271_V_9_ce0;
reg v271_V_10_ce0;
reg v271_V_11_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln374_fu_509_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln375_fu_524_p2;
reg   [0:0] icmp_ln375_reg_1031;
wire   [9:0] select_ln374_fu_530_p3;
reg   [9:0] select_ln374_reg_1036;
reg   [9:0] select_ln374_reg_1036_pp0_iter1_reg;
reg   [9:0] select_ln374_reg_1036_pp0_iter2_reg;
reg   [9:0] select_ln374_reg_1036_pp0_iter3_reg;
reg   [9:0] select_ln374_reg_1036_pp0_iter4_reg;
reg   [9:0] select_ln374_reg_1036_pp0_iter5_reg;
reg   [9:0] select_ln374_reg_1036_pp0_iter6_reg;
wire   [3:0] select_ln374_1_fu_591_p3;
reg   [3:0] select_ln374_1_reg_1161;
reg   [3:0] select_ln374_1_reg_1161_pp0_iter2_reg;
reg   [3:0] select_ln374_1_reg_1161_pp0_iter3_reg;
reg   [3:0] select_ln374_1_reg_1161_pp0_iter4_reg;
reg   [3:0] select_ln374_1_reg_1161_pp0_iter5_reg;
reg   [3:0] select_ln374_1_reg_1161_pp0_iter6_reg;
wire   [23:0] v241_V_fu_598_p14;
reg   [23:0] v241_V_reg_1167;
wire   [23:0] v242_V_fu_628_p14;
reg   [23:0] v242_V_reg_1172;
wire   [24:0] v245_fu_669_p2;
reg   [24:0] v245_reg_1177;
reg   [0:0] p_Result_66_reg_1184;
reg   [0:0] p_Result_66_reg_1184_pp0_iter3_reg;
reg   [0:0] p_Result_66_reg_1184_pp0_iter4_reg;
reg   [0:0] p_Result_66_reg_1184_pp0_iter5_reg;
wire   [0:0] icmp_ln1136_fu_683_p2;
reg   [0:0] icmp_ln1136_reg_1190;
reg   [0:0] icmp_ln1136_reg_1190_pp0_iter4_reg;
reg   [0:0] icmp_ln1136_reg_1190_pp0_iter5_reg;
wire   [24:0] tmp_V_616_fu_693_p3;
reg   [24:0] tmp_V_616_reg_1195;
reg   [24:0] tmp_V_616_reg_1195_pp0_iter4_reg;
reg   [31:0] l_fu_721_p3;
reg   [31:0] l_reg_1202;
reg   [31:0] l_reg_1202_pp0_iter4_reg;
wire   [31:0] sub_ln1145_fu_729_p2;
reg   [31:0] sub_ln1145_reg_1207;
reg   [31:0] sub_ln1145_reg_1207_pp0_iter4_reg;
wire   [24:0] trunc_ln1145_fu_735_p1;
reg   [24:0] trunc_ln1145_reg_1213;
wire   [4:0] trunc_ln1148_fu_739_p1;
reg   [4:0] trunc_ln1148_reg_1218;
wire   [7:0] trunc_ln1144_fu_743_p1;
reg   [7:0] trunc_ln1144_reg_1223;
reg   [7:0] trunc_ln1144_reg_1223_pp0_iter4_reg;
reg   [7:0] trunc_ln1144_reg_1223_pp0_iter5_reg;
wire   [1:0] or_ln1150_2_fu_838_p3;
reg   [1:0] or_ln1150_2_reg_1228;
wire   [0:0] icmp_ln1159_fu_846_p2;
reg   [0:0] icmp_ln1159_reg_1233;
reg   [62:0] m_reg_1238;
reg   [0:0] p_Result_64_reg_1243;
wire   [31:0] v246_fu_961_p3;
reg   [31:0] v246_reg_1248;
wire   [63:0] zext_ln375_fu_538_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln383_2_fu_1001_p1;
reg   [9:0] j12_fu_154;
wire   [9:0] add_ln375_fu_566_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j12_load;
reg   [3:0] i16_fu_158;
reg   [13:0] indvar_flatten62_fu_162;
wire   [13:0] add_ln374_1_fu_515_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten62_load;
wire   [3:0] add_ln374_fu_585_p2;
wire  signed [24:0] sext_ln859_2_fu_666_p1;
wire  signed [24:0] sext_ln859_fu_663_p1;
wire   [24:0] tmp_V_fu_688_p2;
reg   [24:0] p_Result_s_fu_699_p4;
wire   [25:0] p_Result_67_fu_709_p3;
wire  signed [31:0] sext_ln1244_fu_717_p1;
wire   [31:0] lsb_index_fu_747_p2;
wire   [30:0] tmp_fu_752_p4;
wire   [4:0] sub_ln1148_fu_768_p2;
wire   [24:0] zext_ln1148_fu_773_p1;
wire   [24:0] lshr_ln1148_fu_777_p2;
wire   [24:0] p_Result_62_fu_783_p2;
wire   [0:0] icmp_ln1147_fu_762_p2;
wire   [0:0] icmp_ln1148_fu_788_p2;
wire   [0:0] tmp_33_fu_800_p3;
wire   [24:0] add_ln1150_fu_814_p2;
wire   [0:0] p_Result_63_fu_819_p3;
wire   [0:0] xor_ln1150_fu_808_p2;
wire   [0:0] and_ln1150_fu_826_p2;
wire   [0:0] a_fu_794_p2;
wire   [0:0] or_ln1150_fu_832_p2;
wire   [31:0] add_ln1159_fu_855_p2;
wire   [63:0] zext_ln1158_fu_852_p1;
wire   [63:0] zext_ln1159_fu_860_p1;
wire   [63:0] zext_ln1160_fu_870_p1;
wire   [63:0] lshr_ln1159_fu_864_p2;
wire   [63:0] shl_ln1160_fu_873_p2;
wire   [63:0] m_14_fu_879_p3;
wire   [63:0] zext_ln1162_fu_886_p1;
wire   [63:0] m_15_fu_889_p2;
wire   [7:0] sub_ln1165_fu_923_p2;
wire   [7:0] select_ln1144_fu_916_p3;
wire   [7:0] add_ln1170_fu_928_p2;
wire   [63:0] zext_ln1163_fu_913_p1;
wire   [8:0] tmp_1_fu_934_p3;
wire   [63:0] p_Result_68_fu_941_p5;
wire   [31:0] LD_fu_953_p1;
wire   [31:0] bitcast_ln810_fu_957_p1;
wire   [11:0] tmp_38_fu_975_p3;
wire   [13:0] tmp_s_fu_968_p3;
wire   [13:0] zext_ln383_fu_982_p1;
wire   [13:0] sub_ln383_fu_986_p2;
wire   [13:0] zext_ln383_1_fu_992_p1;
wire   [13:0] add_ln383_fu_995_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_mux_124_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 24 ),
    .din9_WIDTH( 24 ),
    .din10_WIDTH( 24 ),
    .din11_WIDTH( 24 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
mux_124_24_1_1_U9999(
    .din0(v274_V_q0),
    .din1(v274_V_1_q0),
    .din2(v274_V_2_q0),
    .din3(v274_V_3_q0),
    .din4(v274_V_4_q0),
    .din5(v274_V_5_q0),
    .din6(v274_V_6_q0),
    .din7(v274_V_7_q0),
    .din8(v274_V_8_q0),
    .din9(v274_V_9_q0),
    .din10(v274_V_10_q0),
    .din11(v274_V_11_q0),
    .din12(select_ln374_1_fu_591_p3),
    .dout(v241_V_fu_598_p14)
);

Bert_layer_mux_124_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 24 ),
    .din9_WIDTH( 24 ),
    .din10_WIDTH( 24 ),
    .din11_WIDTH( 24 ),
    .din12_WIDTH( 4 ),
    .dout_WIDTH( 24 ))
mux_124_24_1_1_U10000(
    .din0(v271_V_q0),
    .din1(v271_V_1_q0),
    .din2(v271_V_2_q0),
    .din3(v271_V_3_q0),
    .din4(v271_V_4_q0),
    .din5(v271_V_5_q0),
    .din6(v271_V_6_q0),
    .din7(v271_V_7_q0),
    .din8(v271_V_8_q0),
    .din9(v271_V_9_q0),
    .din10(v271_V_10_q0),
    .din11(v271_V_11_q0),
    .din12(select_ln374_1_fu_591_p3),
    .dout(v242_V_fu_628_p14)
);

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i16_fu_158 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i16_fu_158 <= select_ln374_1_fu_591_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln374_fu_509_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten62_fu_162 <= add_ln374_1_fu_515_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten62_fu_162 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln374_fu_509_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j12_fu_154 <= add_ln375_fu_566_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j12_fu_154 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln374_1_reg_1161 <= select_ln374_1_fu_591_p3;
        select_ln374_reg_1036_pp0_iter1_reg <= select_ln374_reg_1036;
        v241_V_reg_1167 <= v241_V_fu_598_p14;
        v242_V_reg_1172 <= v242_V_fu_628_p14;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln1136_reg_1190 <= icmp_ln1136_fu_683_p2;
        icmp_ln1136_reg_1190_pp0_iter4_reg <= icmp_ln1136_reg_1190;
        icmp_ln1136_reg_1190_pp0_iter5_reg <= icmp_ln1136_reg_1190_pp0_iter4_reg;
        l_reg_1202 <= l_fu_721_p3;
        l_reg_1202_pp0_iter4_reg <= l_reg_1202;
        p_Result_66_reg_1184 <= v245_fu_669_p2[32'd24];
        p_Result_66_reg_1184_pp0_iter3_reg <= p_Result_66_reg_1184;
        p_Result_66_reg_1184_pp0_iter4_reg <= p_Result_66_reg_1184_pp0_iter3_reg;
        p_Result_66_reg_1184_pp0_iter5_reg <= p_Result_66_reg_1184_pp0_iter4_reg;
        select_ln374_1_reg_1161_pp0_iter2_reg <= select_ln374_1_reg_1161;
        select_ln374_1_reg_1161_pp0_iter3_reg <= select_ln374_1_reg_1161_pp0_iter2_reg;
        select_ln374_1_reg_1161_pp0_iter4_reg <= select_ln374_1_reg_1161_pp0_iter3_reg;
        select_ln374_1_reg_1161_pp0_iter5_reg <= select_ln374_1_reg_1161_pp0_iter4_reg;
        select_ln374_1_reg_1161_pp0_iter6_reg <= select_ln374_1_reg_1161_pp0_iter5_reg;
        select_ln374_reg_1036_pp0_iter2_reg <= select_ln374_reg_1036_pp0_iter1_reg;
        select_ln374_reg_1036_pp0_iter3_reg <= select_ln374_reg_1036_pp0_iter2_reg;
        select_ln374_reg_1036_pp0_iter4_reg <= select_ln374_reg_1036_pp0_iter3_reg;
        select_ln374_reg_1036_pp0_iter5_reg <= select_ln374_reg_1036_pp0_iter4_reg;
        select_ln374_reg_1036_pp0_iter6_reg <= select_ln374_reg_1036_pp0_iter5_reg;
        sub_ln1145_reg_1207 <= sub_ln1145_fu_729_p2;
        sub_ln1145_reg_1207_pp0_iter4_reg <= sub_ln1145_reg_1207;
        tmp_V_616_reg_1195 <= tmp_V_616_fu_693_p3;
        tmp_V_616_reg_1195_pp0_iter4_reg <= tmp_V_616_reg_1195;
        trunc_ln1144_reg_1223 <= trunc_ln1144_fu_743_p1;
        trunc_ln1144_reg_1223_pp0_iter4_reg <= trunc_ln1144_reg_1223;
        trunc_ln1144_reg_1223_pp0_iter5_reg <= trunc_ln1144_reg_1223_pp0_iter4_reg;
        trunc_ln1145_reg_1213 <= trunc_ln1145_fu_735_p1;
        trunc_ln1148_reg_1218 <= trunc_ln1148_fu_739_p1;
        v245_reg_1177 <= v245_fu_669_p2;
        v246_reg_1248 <= v246_fu_961_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_1190 == 1'd0))) begin
        icmp_ln1159_reg_1233 <= icmp_ln1159_fu_846_p2;
        or_ln1150_2_reg_1228[0] <= or_ln1150_2_fu_838_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln374_fu_509_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln375_reg_1031 <= icmp_ln375_fu_524_p2;
        select_ln374_reg_1036 <= select_ln374_fu_530_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_1190_pp0_iter4_reg == 1'd0))) begin
        m_reg_1238 <= {{m_15_fu_889_p2[63:1]}};
        p_Result_64_reg_1243 <= m_15_fu_889_p2[32'd25];
    end
end

always @ (*) begin
    if (((icmp_ln374_fu_509_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten62_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten62_load = indvar_flatten62_fu_162;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j12_load = j12_fu_154;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_10_ce0 = 1'b1;
    end else begin
        v271_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_11_ce0 = 1'b1;
    end else begin
        v271_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_1_ce0 = 1'b1;
    end else begin
        v271_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_2_ce0 = 1'b1;
    end else begin
        v271_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_3_ce0 = 1'b1;
    end else begin
        v271_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_4_ce0 = 1'b1;
    end else begin
        v271_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_5_ce0 = 1'b1;
    end else begin
        v271_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_6_ce0 = 1'b1;
    end else begin
        v271_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_7_ce0 = 1'b1;
    end else begin
        v271_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_8_ce0 = 1'b1;
    end else begin
        v271_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_9_ce0 = 1'b1;
    end else begin
        v271_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v271_V_ce0 = 1'b1;
    end else begin
        v271_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_10_ce0 = 1'b1;
    end else begin
        v274_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_11_ce0 = 1'b1;
    end else begin
        v274_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_1_ce0 = 1'b1;
    end else begin
        v274_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_2_ce0 = 1'b1;
    end else begin
        v274_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_3_ce0 = 1'b1;
    end else begin
        v274_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_4_ce0 = 1'b1;
    end else begin
        v274_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_5_ce0 = 1'b1;
    end else begin
        v274_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_6_ce0 = 1'b1;
    end else begin
        v274_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_7_ce0 = 1'b1;
    end else begin
        v274_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_8_ce0 = 1'b1;
    end else begin
        v274_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_9_ce0 = 1'b1;
    end else begin
        v274_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v274_V_ce0 = 1'b1;
    end else begin
        v274_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v275_ce0 = 1'b1;
    end else begin
        v275_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v275_we0 = 1'b1;
    end else begin
        v275_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_953_p1 = p_Result_68_fu_941_p5[31:0];

assign a_fu_794_p2 = (icmp_ln1148_fu_788_p2 & icmp_ln1147_fu_762_p2);

assign add_ln1150_fu_814_p2 = ($signed(trunc_ln1145_reg_1213) + $signed(25'd33554408));

assign add_ln1159_fu_855_p2 = ($signed(sub_ln1145_reg_1207_pp0_iter4_reg) + $signed(32'd4294967271));

assign add_ln1170_fu_928_p2 = (sub_ln1165_fu_923_p2 + select_ln1144_fu_916_p3);

assign add_ln374_1_fu_515_p2 = (ap_sig_allocacmp_indvar_flatten62_load + 14'd1);

assign add_ln374_fu_585_p2 = (i16_fu_158 + 4'd1);

assign add_ln375_fu_566_p2 = (select_ln374_fu_530_p3 + 10'd1);

assign add_ln383_fu_995_p2 = (sub_ln383_fu_986_p2 + zext_ln383_1_fu_992_p1);

assign and_ln1150_fu_826_p2 = (xor_ln1150_fu_808_p2 & p_Result_63_fu_819_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln810_fu_957_p1 = LD_fu_953_p1;

assign icmp_ln1136_fu_683_p2 = ((v245_reg_1177 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_762_p2 = (($signed(tmp_fu_752_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_788_p2 = ((p_Result_62_fu_783_p2 != 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_846_p2 = (($signed(lsb_index_fu_747_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln374_fu_509_p2 = ((ap_sig_allocacmp_indvar_flatten62_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln375_fu_524_p2 = ((ap_sig_allocacmp_j12_load == 10'd768) ? 1'b1 : 1'b0);


always @ (sext_ln1244_fu_717_p1) begin
    if (sext_ln1244_fu_717_p1[0] == 1'b1) begin
        l_fu_721_p3 = 32'd0;
    end else if (sext_ln1244_fu_717_p1[1] == 1'b1) begin
        l_fu_721_p3 = 32'd1;
    end else if (sext_ln1244_fu_717_p1[2] == 1'b1) begin
        l_fu_721_p3 = 32'd2;
    end else if (sext_ln1244_fu_717_p1[3] == 1'b1) begin
        l_fu_721_p3 = 32'd3;
    end else if (sext_ln1244_fu_717_p1[4] == 1'b1) begin
        l_fu_721_p3 = 32'd4;
    end else if (sext_ln1244_fu_717_p1[5] == 1'b1) begin
        l_fu_721_p3 = 32'd5;
    end else if (sext_ln1244_fu_717_p1[6] == 1'b1) begin
        l_fu_721_p3 = 32'd6;
    end else if (sext_ln1244_fu_717_p1[7] == 1'b1) begin
        l_fu_721_p3 = 32'd7;
    end else if (sext_ln1244_fu_717_p1[8] == 1'b1) begin
        l_fu_721_p3 = 32'd8;
    end else if (sext_ln1244_fu_717_p1[9] == 1'b1) begin
        l_fu_721_p3 = 32'd9;
    end else if (sext_ln1244_fu_717_p1[10] == 1'b1) begin
        l_fu_721_p3 = 32'd10;
    end else if (sext_ln1244_fu_717_p1[11] == 1'b1) begin
        l_fu_721_p3 = 32'd11;
    end else if (sext_ln1244_fu_717_p1[12] == 1'b1) begin
        l_fu_721_p3 = 32'd12;
    end else if (sext_ln1244_fu_717_p1[13] == 1'b1) begin
        l_fu_721_p3 = 32'd13;
    end else if (sext_ln1244_fu_717_p1[14] == 1'b1) begin
        l_fu_721_p3 = 32'd14;
    end else if (sext_ln1244_fu_717_p1[15] == 1'b1) begin
        l_fu_721_p3 = 32'd15;
    end else if (sext_ln1244_fu_717_p1[16] == 1'b1) begin
        l_fu_721_p3 = 32'd16;
    end else if (sext_ln1244_fu_717_p1[17] == 1'b1) begin
        l_fu_721_p3 = 32'd17;
    end else if (sext_ln1244_fu_717_p1[18] == 1'b1) begin
        l_fu_721_p3 = 32'd18;
    end else if (sext_ln1244_fu_717_p1[19] == 1'b1) begin
        l_fu_721_p3 = 32'd19;
    end else if (sext_ln1244_fu_717_p1[20] == 1'b1) begin
        l_fu_721_p3 = 32'd20;
    end else if (sext_ln1244_fu_717_p1[21] == 1'b1) begin
        l_fu_721_p3 = 32'd21;
    end else if (sext_ln1244_fu_717_p1[22] == 1'b1) begin
        l_fu_721_p3 = 32'd22;
    end else if (sext_ln1244_fu_717_p1[23] == 1'b1) begin
        l_fu_721_p3 = 32'd23;
    end else if (sext_ln1244_fu_717_p1[24] == 1'b1) begin
        l_fu_721_p3 = 32'd24;
    end else if (sext_ln1244_fu_717_p1[25] == 1'b1) begin
        l_fu_721_p3 = 32'd25;
    end else if (sext_ln1244_fu_717_p1[26] == 1'b1) begin
        l_fu_721_p3 = 32'd26;
    end else if (sext_ln1244_fu_717_p1[27] == 1'b1) begin
        l_fu_721_p3 = 32'd27;
    end else if (sext_ln1244_fu_717_p1[28] == 1'b1) begin
        l_fu_721_p3 = 32'd28;
    end else if (sext_ln1244_fu_717_p1[29] == 1'b1) begin
        l_fu_721_p3 = 32'd29;
    end else if (sext_ln1244_fu_717_p1[30] == 1'b1) begin
        l_fu_721_p3 = 32'd30;
    end else if (sext_ln1244_fu_717_p1[31] == 1'b1) begin
        l_fu_721_p3 = 32'd31;
    end else begin
        l_fu_721_p3 = 32'd32;
    end
end

assign lsb_index_fu_747_p2 = ($signed(sub_ln1145_reg_1207) + $signed(32'd4294967272));

assign lshr_ln1148_fu_777_p2 = 25'd33554431 >> zext_ln1148_fu_773_p1;

assign lshr_ln1159_fu_864_p2 = zext_ln1158_fu_852_p1 >> zext_ln1159_fu_860_p1;

assign m_14_fu_879_p3 = ((icmp_ln1159_reg_1233[0:0] == 1'b1) ? lshr_ln1159_fu_864_p2 : shl_ln1160_fu_873_p2);

assign m_15_fu_889_p2 = (m_14_fu_879_p3 + zext_ln1162_fu_886_p1);

assign or_ln1150_2_fu_838_p3 = {{1'd0}, {or_ln1150_fu_832_p2}};

assign or_ln1150_fu_832_p2 = (and_ln1150_fu_826_p2 | a_fu_794_p2);

assign p_Result_62_fu_783_p2 = (tmp_V_616_reg_1195 & lshr_ln1148_fu_777_p2);

assign p_Result_63_fu_819_p3 = tmp_V_616_reg_1195[add_ln1150_fu_814_p2];

assign p_Result_67_fu_709_p3 = {{1'd1}, {p_Result_s_fu_699_p4}};

assign p_Result_68_fu_941_p5 = {{zext_ln1163_fu_913_p1[63:32]}, {tmp_1_fu_934_p3}, {zext_ln1163_fu_913_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_616_fu_693_p3) begin
    for (ap_tvar_int_0 = 25 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 24 - 0) begin
            p_Result_s_fu_699_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_699_p4[ap_tvar_int_0] = tmp_V_616_fu_693_p3[24 - ap_tvar_int_0];
        end
    end
end

assign select_ln1144_fu_916_p3 = ((p_Result_64_reg_1243[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln374_1_fu_591_p3 = ((icmp_ln375_reg_1031[0:0] == 1'b1) ? add_ln374_fu_585_p2 : i16_fu_158);

assign select_ln374_fu_530_p3 = ((icmp_ln375_fu_524_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j12_load);

assign sext_ln1244_fu_717_p1 = $signed(p_Result_67_fu_709_p3);

assign sext_ln859_2_fu_666_p1 = $signed(v242_V_reg_1172);

assign sext_ln859_fu_663_p1 = $signed(v241_V_reg_1167);

assign shl_ln1160_fu_873_p2 = zext_ln1158_fu_852_p1 << zext_ln1160_fu_870_p1;

assign sub_ln1145_fu_729_p2 = (32'd25 - l_fu_721_p3);

assign sub_ln1148_fu_768_p2 = ($signed(5'd18) - $signed(trunc_ln1148_reg_1218));

assign sub_ln1165_fu_923_p2 = (8'd9 - trunc_ln1144_reg_1223_pp0_iter5_reg);

assign sub_ln383_fu_986_p2 = (tmp_s_fu_968_p3 - zext_ln383_fu_982_p1);

assign tmp_1_fu_934_p3 = {{p_Result_66_reg_1184_pp0_iter5_reg}, {add_ln1170_fu_928_p2}};

assign tmp_33_fu_800_p3 = lsb_index_fu_747_p2[32'd31];

assign tmp_38_fu_975_p3 = {{select_ln374_1_reg_1161_pp0_iter6_reg}, {8'd0}};

assign tmp_V_616_fu_693_p3 = ((p_Result_66_reg_1184[0:0] == 1'b1) ? tmp_V_fu_688_p2 : v245_reg_1177);

assign tmp_V_fu_688_p2 = (25'd0 - v245_reg_1177);

assign tmp_fu_752_p4 = {{lsb_index_fu_747_p2[31:1]}};

assign tmp_s_fu_968_p3 = {{select_ln374_1_reg_1161_pp0_iter6_reg}, {10'd0}};

assign trunc_ln1144_fu_743_p1 = l_fu_721_p3[7:0];

assign trunc_ln1145_fu_735_p1 = sub_ln1145_fu_729_p2[24:0];

assign trunc_ln1148_fu_739_p1 = sub_ln1145_fu_729_p2[4:0];

assign v245_fu_669_p2 = ($signed(sext_ln859_2_fu_666_p1) + $signed(sext_ln859_fu_663_p1));

assign v246_fu_961_p3 = ((icmp_ln1136_reg_1190_pp0_iter5_reg[0:0] == 1'b1) ? 32'd0 : bitcast_ln810_fu_957_p1);

assign v271_V_10_address0 = zext_ln375_fu_538_p1;

assign v271_V_11_address0 = zext_ln375_fu_538_p1;

assign v271_V_1_address0 = zext_ln375_fu_538_p1;

assign v271_V_2_address0 = zext_ln375_fu_538_p1;

assign v271_V_3_address0 = zext_ln375_fu_538_p1;

assign v271_V_4_address0 = zext_ln375_fu_538_p1;

assign v271_V_5_address0 = zext_ln375_fu_538_p1;

assign v271_V_6_address0 = zext_ln375_fu_538_p1;

assign v271_V_7_address0 = zext_ln375_fu_538_p1;

assign v271_V_8_address0 = zext_ln375_fu_538_p1;

assign v271_V_9_address0 = zext_ln375_fu_538_p1;

assign v271_V_address0 = zext_ln375_fu_538_p1;

assign v274_V_10_address0 = zext_ln375_fu_538_p1;

assign v274_V_11_address0 = zext_ln375_fu_538_p1;

assign v274_V_1_address0 = zext_ln375_fu_538_p1;

assign v274_V_2_address0 = zext_ln375_fu_538_p1;

assign v274_V_3_address0 = zext_ln375_fu_538_p1;

assign v274_V_4_address0 = zext_ln375_fu_538_p1;

assign v274_V_5_address0 = zext_ln375_fu_538_p1;

assign v274_V_6_address0 = zext_ln375_fu_538_p1;

assign v274_V_7_address0 = zext_ln375_fu_538_p1;

assign v274_V_8_address0 = zext_ln375_fu_538_p1;

assign v274_V_9_address0 = zext_ln375_fu_538_p1;

assign v274_V_address0 = zext_ln375_fu_538_p1;

assign v275_address0 = zext_ln383_2_fu_1001_p1;

assign v275_d0 = v246_reg_1248;

assign xor_ln1150_fu_808_p2 = (tmp_33_fu_800_p3 ^ 1'd1);

assign zext_ln1148_fu_773_p1 = sub_ln1148_fu_768_p2;

assign zext_ln1158_fu_852_p1 = tmp_V_616_reg_1195_pp0_iter4_reg;

assign zext_ln1159_fu_860_p1 = add_ln1159_fu_855_p2;

assign zext_ln1160_fu_870_p1 = l_reg_1202_pp0_iter4_reg;

assign zext_ln1162_fu_886_p1 = or_ln1150_2_reg_1228;

assign zext_ln1163_fu_913_p1 = m_reg_1238;

assign zext_ln375_fu_538_p1 = select_ln374_fu_530_p3;

assign zext_ln383_1_fu_992_p1 = select_ln374_reg_1036_pp0_iter6_reg;

assign zext_ln383_2_fu_1001_p1 = add_ln383_fu_995_p2;

assign zext_ln383_fu_982_p1 = tmp_38_fu_975_p3;

always @ (posedge ap_clk) begin
    or_ln1150_2_reg_1228[1] <= 1'b0;
end

endmodule //Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i16_l_j12
