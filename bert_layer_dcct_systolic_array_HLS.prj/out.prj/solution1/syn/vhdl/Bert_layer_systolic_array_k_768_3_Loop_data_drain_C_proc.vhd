-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_systolic_array_k_768_3_Loop_data_drain_C_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_C_drainer_0_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_0_full_n : IN STD_LOGIC;
    block_C_drainer_0_write : OUT STD_LOGIC;
    block_C_drainer_1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_1_full_n : IN STD_LOGIC;
    block_C_drainer_1_write : OUT STD_LOGIC;
    block_C_drainer_2_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_2_full_n : IN STD_LOGIC;
    block_C_drainer_2_write : OUT STD_LOGIC;
    block_C_drainer_3_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_3_full_n : IN STD_LOGIC;
    block_C_drainer_3_write : OUT STD_LOGIC;
    block_C_drainer_4_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_4_full_n : IN STD_LOGIC;
    block_C_drainer_4_write : OUT STD_LOGIC;
    block_C_drainer_5_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_5_full_n : IN STD_LOGIC;
    block_C_drainer_5_write : OUT STD_LOGIC;
    block_C_drainer_6_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_6_full_n : IN STD_LOGIC;
    block_C_drainer_6_write : OUT STD_LOGIC;
    block_C_drainer_7_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_7_full_n : IN STD_LOGIC;
    block_C_drainer_7_write : OUT STD_LOGIC;
    block_C_drainer_8_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_8_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_8_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_8_full_n : IN STD_LOGIC;
    block_C_drainer_8_write : OUT STD_LOGIC;
    block_C_drainer_9_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_9_full_n : IN STD_LOGIC;
    block_C_drainer_9_write : OUT STD_LOGIC;
    block_C_drainer_10_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_10_full_n : IN STD_LOGIC;
    block_C_drainer_10_write : OUT STD_LOGIC;
    block_C_drainer_11_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_C_drainer_11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_C_drainer_11_full_n : IN STD_LOGIC;
    block_C_drainer_11_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read9 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read10 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read11 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read12 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read13 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read15 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read16 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read17 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read18 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read19 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read20 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read21 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read22 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read23 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read24 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read26 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read27 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read28 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read29 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read30 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read31 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read32 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read33 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read34 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read35 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read36 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read37 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read38 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read39 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read40 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read41 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read42 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read43 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read44 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read45 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read46 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read47 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read48 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read49 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read50 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read51 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read52 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read53 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read54 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read55 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read56 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read57 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read58 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read59 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read60 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read61 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read62 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read63 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read64 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read65 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read66 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read67 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read68 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read69 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read70 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read71 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read72 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read73 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read74 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read75 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read76 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read77 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read78 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read79 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read80 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read81 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read82 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read83 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read84 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read85 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read86 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read87 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read88 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read89 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read90 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read91 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read92 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read93 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read94 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read95 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read96 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read97 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read98 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read99 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read100 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read101 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read102 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read103 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read104 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read105 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read106 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read107 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read108 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read109 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read110 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read111 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read112 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read113 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read114 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read115 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read116 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read117 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read118 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read119 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read120 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read121 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read122 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read123 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read124 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read125 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read126 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read127 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read128 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read129 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read130 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read131 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read132 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read133 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read134 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read135 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read136 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read137 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read138 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read139 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read140 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read141 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read142 : IN STD_LOGIC_VECTOR (23 downto 0);
    p_read143 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Bert_layer_systolic_array_k_768_3_Loop_data_drain_C_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln59_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal block_C_drainer_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal block_C_drainer_1_blk_n : STD_LOGIC;
    signal block_C_drainer_2_blk_n : STD_LOGIC;
    signal block_C_drainer_3_blk_n : STD_LOGIC;
    signal block_C_drainer_4_blk_n : STD_LOGIC;
    signal block_C_drainer_5_blk_n : STD_LOGIC;
    signal block_C_drainer_6_blk_n : STD_LOGIC;
    signal block_C_drainer_7_blk_n : STD_LOGIC;
    signal block_C_drainer_8_blk_n : STD_LOGIC;
    signal block_C_drainer_9_blk_n : STD_LOGIC;
    signal block_C_drainer_10_blk_n : STD_LOGIC;
    signal block_C_drainer_11_blk_n : STD_LOGIC;
    signal tmp_i_fu_1318_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_reg_1693 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_i_fu_1348_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_i_reg_1698 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_fu_1378_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_reg_1703 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_i_fu_1408_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_i_reg_1708 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_i_fu_1438_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_i_reg_1713 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_i_fu_1468_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_i_reg_1718 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_i_fu_1498_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_i_reg_1723 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_i_fu_1528_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_i_reg_1728 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_i_fu_1558_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_i_reg_1733 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i_fu_1588_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_i_reg_1738 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_120_fu_1618_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_120_reg_1743 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_i_fu_1648_p14 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_i_reg_1748 : STD_LOGIC_VECTOR (23 downto 0);
    signal n_fu_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln59_fu_1312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_349 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_mux_124_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (23 downto 0);
        din5 : IN STD_LOGIC_VECTOR (23 downto 0);
        din6 : IN STD_LOGIC_VECTOR (23 downto 0);
        din7 : IN STD_LOGIC_VECTOR (23 downto 0);
        din8 : IN STD_LOGIC_VECTOR (23 downto 0);
        din9 : IN STD_LOGIC_VECTOR (23 downto 0);
        din10 : IN STD_LOGIC_VECTOR (23 downto 0);
        din11 : IN STD_LOGIC_VECTOR (23 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_124_24_1_1_U6516 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => p_read3,
        din4 => p_read4,
        din5 => p_read5,
        din6 => p_read6,
        din7 => p_read7,
        din8 => p_read8,
        din9 => p_read9,
        din10 => p_read10,
        din11 => p_read11,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_i_fu_1318_p14);

    mux_124_24_1_1_U6517 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read12,
        din1 => p_read13,
        din2 => p_read14,
        din3 => p_read15,
        din4 => p_read16,
        din5 => p_read17,
        din6 => p_read18,
        din7 => p_read19,
        din8 => p_read20,
        din9 => p_read21,
        din10 => p_read22,
        din11 => p_read23,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_1_i_fu_1348_p14);

    mux_124_24_1_1_U6518 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read24,
        din1 => p_read25,
        din2 => p_read26,
        din3 => p_read27,
        din4 => p_read28,
        din5 => p_read29,
        din6 => p_read30,
        din7 => p_read31,
        din8 => p_read32,
        din9 => p_read33,
        din10 => p_read34,
        din11 => p_read35,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_2_i_fu_1378_p14);

    mux_124_24_1_1_U6519 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read36,
        din1 => p_read37,
        din2 => p_read38,
        din3 => p_read39,
        din4 => p_read40,
        din5 => p_read41,
        din6 => p_read42,
        din7 => p_read43,
        din8 => p_read44,
        din9 => p_read45,
        din10 => p_read46,
        din11 => p_read47,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_3_i_fu_1408_p14);

    mux_124_24_1_1_U6520 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read48,
        din1 => p_read49,
        din2 => p_read50,
        din3 => p_read51,
        din4 => p_read52,
        din5 => p_read53,
        din6 => p_read54,
        din7 => p_read55,
        din8 => p_read56,
        din9 => p_read57,
        din10 => p_read58,
        din11 => p_read59,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_4_i_fu_1438_p14);

    mux_124_24_1_1_U6521 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read60,
        din1 => p_read61,
        din2 => p_read62,
        din3 => p_read63,
        din4 => p_read64,
        din5 => p_read65,
        din6 => p_read66,
        din7 => p_read67,
        din8 => p_read68,
        din9 => p_read69,
        din10 => p_read70,
        din11 => p_read71,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_5_i_fu_1468_p14);

    mux_124_24_1_1_U6522 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read72,
        din1 => p_read73,
        din2 => p_read74,
        din3 => p_read75,
        din4 => p_read76,
        din5 => p_read77,
        din6 => p_read78,
        din7 => p_read79,
        din8 => p_read80,
        din9 => p_read81,
        din10 => p_read82,
        din11 => p_read83,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_6_i_fu_1498_p14);

    mux_124_24_1_1_U6523 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read84,
        din1 => p_read85,
        din2 => p_read86,
        din3 => p_read87,
        din4 => p_read88,
        din5 => p_read89,
        din6 => p_read90,
        din7 => p_read91,
        din8 => p_read92,
        din9 => p_read93,
        din10 => p_read94,
        din11 => p_read95,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_7_i_fu_1528_p14);

    mux_124_24_1_1_U6524 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read96,
        din1 => p_read97,
        din2 => p_read98,
        din3 => p_read99,
        din4 => p_read100,
        din5 => p_read101,
        din6 => p_read102,
        din7 => p_read103,
        din8 => p_read104,
        din9 => p_read105,
        din10 => p_read106,
        din11 => p_read107,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_8_i_fu_1558_p14);

    mux_124_24_1_1_U6525 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read108,
        din1 => p_read109,
        din2 => p_read110,
        din3 => p_read111,
        din4 => p_read112,
        din5 => p_read113,
        din6 => p_read114,
        din7 => p_read115,
        din8 => p_read116,
        din9 => p_read117,
        din10 => p_read118,
        din11 => p_read119,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_9_i_fu_1588_p14);

    mux_124_24_1_1_U6526 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read120,
        din1 => p_read121,
        din2 => p_read122,
        din3 => p_read123,
        din4 => p_read124,
        din5 => p_read125,
        din6 => p_read126,
        din7 => p_read127,
        din8 => p_read128,
        din9 => p_read129,
        din10 => p_read130,
        din11 => p_read131,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_i_120_fu_1618_p14);

    mux_124_24_1_1_U6527 : component Bert_layer_mux_124_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 24,
        din5_WIDTH => 24,
        din6_WIDTH => 24,
        din7_WIDTH => 24,
        din8_WIDTH => 24,
        din9_WIDTH => 24,
        din10_WIDTH => 24,
        din11_WIDTH => 24,
        din12_WIDTH => 4,
        dout_WIDTH => 24)
    port map (
        din0 => p_read132,
        din1 => p_read133,
        din2 => p_read134,
        din3 => p_read135,
        din4 => p_read136,
        din5 => p_read137,
        din6 => p_read138,
        din7 => p_read139,
        din8 => p_read140,
        din9 => p_read141,
        din10 => p_read142,
        din11 => p_read143,
        din12 => ap_sig_allocacmp_n_2,
        dout => tmp_10_i_fu_1648_p14);

    flow_control_loop_pipe_U : component Bert_layer_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    n_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_349)) then
                if ((icmp_ln59_fu_1306_p2 = ap_const_lv1_0)) then 
                    n_fu_346 <= add_ln59_fu_1312_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_346 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln59_fu_1306_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_i_reg_1748 <= tmp_10_i_fu_1648_p14;
                tmp_1_i_reg_1698 <= tmp_1_i_fu_1348_p14;
                tmp_2_i_reg_1703 <= tmp_2_i_fu_1378_p14;
                tmp_3_i_reg_1708 <= tmp_3_i_fu_1408_p14;
                tmp_4_i_reg_1713 <= tmp_4_i_fu_1438_p14;
                tmp_5_i_reg_1718 <= tmp_5_i_fu_1468_p14;
                tmp_6_i_reg_1723 <= tmp_6_i_fu_1498_p14;
                tmp_7_i_reg_1728 <= tmp_7_i_fu_1528_p14;
                tmp_8_i_reg_1733 <= tmp_8_i_fu_1558_p14;
                tmp_9_i_reg_1738 <= tmp_9_i_fu_1588_p14;
                tmp_i_120_reg_1743 <= tmp_i_120_fu_1618_p14;
                tmp_i_reg_1693 <= tmp_i_fu_1318_p14;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln59_fu_1312_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_2) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, block_C_drainer_4_full_n, block_C_drainer_5_full_n, block_C_drainer_6_full_n, block_C_drainer_7_full_n, block_C_drainer_8_full_n, block_C_drainer_9_full_n, block_C_drainer_10_full_n, block_C_drainer_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_7_full_n = ap_const_logic_0) or (block_C_drainer_6_full_n = ap_const_logic_0) or (block_C_drainer_5_full_n = ap_const_logic_0) or (block_C_drainer_4_full_n = ap_const_logic_0) or (block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0) or (block_C_drainer_11_full_n = ap_const_logic_0) or (block_C_drainer_10_full_n = ap_const_logic_0) or (block_C_drainer_9_full_n = ap_const_logic_0) or (block_C_drainer_8_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, block_C_drainer_4_full_n, block_C_drainer_5_full_n, block_C_drainer_6_full_n, block_C_drainer_7_full_n, block_C_drainer_8_full_n, block_C_drainer_9_full_n, block_C_drainer_10_full_n, block_C_drainer_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_7_full_n = ap_const_logic_0) or (block_C_drainer_6_full_n = ap_const_logic_0) or (block_C_drainer_5_full_n = ap_const_logic_0) or (block_C_drainer_4_full_n = ap_const_logic_0) or (block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0) or (block_C_drainer_11_full_n = ap_const_logic_0) or (block_C_drainer_10_full_n = ap_const_logic_0) or (block_C_drainer_9_full_n = ap_const_logic_0) or (block_C_drainer_8_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, block_C_drainer_4_full_n, block_C_drainer_5_full_n, block_C_drainer_6_full_n, block_C_drainer_7_full_n, block_C_drainer_8_full_n, block_C_drainer_9_full_n, block_C_drainer_10_full_n, block_C_drainer_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_C_drainer_7_full_n = ap_const_logic_0) or (block_C_drainer_6_full_n = ap_const_logic_0) or (block_C_drainer_5_full_n = ap_const_logic_0) or (block_C_drainer_4_full_n = ap_const_logic_0) or (block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0) or (block_C_drainer_11_full_n = ap_const_logic_0) or (block_C_drainer_10_full_n = ap_const_logic_0) or (block_C_drainer_9_full_n = ap_const_logic_0) or (block_C_drainer_8_full_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(block_C_drainer_0_full_n, block_C_drainer_1_full_n, block_C_drainer_2_full_n, block_C_drainer_3_full_n, block_C_drainer_4_full_n, block_C_drainer_5_full_n, block_C_drainer_6_full_n, block_C_drainer_7_full_n, block_C_drainer_8_full_n, block_C_drainer_9_full_n, block_C_drainer_10_full_n, block_C_drainer_11_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((block_C_drainer_7_full_n = ap_const_logic_0) or (block_C_drainer_6_full_n = ap_const_logic_0) or (block_C_drainer_5_full_n = ap_const_logic_0) or (block_C_drainer_4_full_n = ap_const_logic_0) or (block_C_drainer_3_full_n = ap_const_logic_0) or (block_C_drainer_2_full_n = ap_const_logic_0) or (block_C_drainer_1_full_n = ap_const_logic_0) or (block_C_drainer_0_full_n = ap_const_logic_0) or (block_C_drainer_11_full_n = ap_const_logic_0) or (block_C_drainer_10_full_n = ap_const_logic_0) or (block_C_drainer_9_full_n = ap_const_logic_0) or (block_C_drainer_8_full_n = ap_const_logic_0));
    end process;


    ap_condition_349_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_349 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln59_fu_1306_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln59_fu_1306_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_346, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_n_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_n_2 <= n_fu_346;
        end if; 
    end process;


    block_C_drainer_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_0_blk_n <= block_C_drainer_0_full_n;
        else 
            block_C_drainer_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_0_din <= tmp_i_reg_1693;

    block_C_drainer_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_0_write <= ap_const_logic_1;
        else 
            block_C_drainer_0_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_10_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_10_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_10_blk_n <= block_C_drainer_10_full_n;
        else 
            block_C_drainer_10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_10_din <= tmp_i_120_reg_1743;

    block_C_drainer_10_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_10_write <= ap_const_logic_1;
        else 
            block_C_drainer_10_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_11_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_11_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_11_blk_n <= block_C_drainer_11_full_n;
        else 
            block_C_drainer_11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_11_din <= tmp_10_i_reg_1748;

    block_C_drainer_11_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_11_write <= ap_const_logic_1;
        else 
            block_C_drainer_11_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_1_blk_n <= block_C_drainer_1_full_n;
        else 
            block_C_drainer_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_1_din <= tmp_1_i_reg_1698;

    block_C_drainer_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_1_write <= ap_const_logic_1;
        else 
            block_C_drainer_1_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_2_blk_n <= block_C_drainer_2_full_n;
        else 
            block_C_drainer_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_2_din <= tmp_2_i_reg_1703;

    block_C_drainer_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_2_write <= ap_const_logic_1;
        else 
            block_C_drainer_2_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_3_blk_n <= block_C_drainer_3_full_n;
        else 
            block_C_drainer_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_3_din <= tmp_3_i_reg_1708;

    block_C_drainer_3_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_3_write <= ap_const_logic_1;
        else 
            block_C_drainer_3_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_4_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_4_blk_n <= block_C_drainer_4_full_n;
        else 
            block_C_drainer_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_4_din <= tmp_4_i_reg_1713;

    block_C_drainer_4_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_4_write <= ap_const_logic_1;
        else 
            block_C_drainer_4_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_5_blk_n <= block_C_drainer_5_full_n;
        else 
            block_C_drainer_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_5_din <= tmp_5_i_reg_1718;

    block_C_drainer_5_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_5_write <= ap_const_logic_1;
        else 
            block_C_drainer_5_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_6_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_6_blk_n <= block_C_drainer_6_full_n;
        else 
            block_C_drainer_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_6_din <= tmp_6_i_reg_1723;

    block_C_drainer_6_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_6_write <= ap_const_logic_1;
        else 
            block_C_drainer_6_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_7_blk_n <= block_C_drainer_7_full_n;
        else 
            block_C_drainer_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_7_din <= tmp_7_i_reg_1728;

    block_C_drainer_7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_7_write <= ap_const_logic_1;
        else 
            block_C_drainer_7_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_8_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_8_blk_n <= block_C_drainer_8_full_n;
        else 
            block_C_drainer_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_8_din <= tmp_8_i_reg_1733;

    block_C_drainer_8_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_8_write <= ap_const_logic_1;
        else 
            block_C_drainer_8_write <= ap_const_logic_0;
        end if; 
    end process;


    block_C_drainer_9_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_C_drainer_9_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_C_drainer_9_blk_n <= block_C_drainer_9_full_n;
        else 
            block_C_drainer_9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_C_drainer_9_din <= tmp_9_i_reg_1738;

    block_C_drainer_9_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_C_drainer_9_write <= ap_const_logic_1;
        else 
            block_C_drainer_9_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln59_fu_1306_p2 <= "1" when (ap_sig_allocacmp_n_2 = ap_const_lv4_C) else "0";
end behav;
