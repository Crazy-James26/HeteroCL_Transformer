-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Self_attention_Pipeline_l_norm_i2_l_j1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outp_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outp_V_ce0 : OUT STD_LOGIC;
    outp_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    outp_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outp_V_1_ce0 : OUT STD_LOGIC;
    outp_V_1_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    outp_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outp_V_2_ce0 : OUT STD_LOGIC;
    outp_V_2_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    outp_V_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outp_V_3_ce0 : OUT STD_LOGIC;
    outp_V_3_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v100_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v100_ce0 : OUT STD_LOGIC;
    v100_we0 : OUT STD_LOGIC;
    v100_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v100_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v100_1_ce0 : OUT STD_LOGIC;
    v100_1_we0 : OUT STD_LOGIC;
    v100_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v100_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v100_2_ce0 : OUT STD_LOGIC;
    v100_2_we0 : OUT STD_LOGIC;
    v100_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v100_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    v100_3_ce0 : OUT STD_LOGIC;
    v100_3_we0 : OUT STD_LOGIC;
    v100_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_653_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_653_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_653_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_653_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Self_attention_Pipeline_l_norm_i2_l_j1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3E000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000000000000000000000000";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_FFFFE8 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln57_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln57_fu_293_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln57_reg_726 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln57_fu_309_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln57_reg_731_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast9_mid2_v_reg_736 : STD_LOGIC_VECTOR (1 downto 0);
    signal v100_addr_reg_762 : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_addr_reg_762_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767 : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_1_addr_reg_767_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772 : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_2_addr_reg_772_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777 : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v100_3_addr_reg_777_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal v46_V_fu_389_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal v46_V_reg_782 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_39_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_39_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_39_reg_789_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_39_reg_789_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_795_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_420_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_2_reg_800 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_2_reg_800_pp0_iter4_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1145_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_807_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1145_fu_462_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1145_reg_814 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1148_fu_466_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1148_reg_819 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1144_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_824_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_824_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_565_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_829 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1159_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_reg_839 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_37_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal LD_fu_686_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal LD_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln810_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v48_fu_694_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v48_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_2_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j1_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln58_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_fu_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln57_1_fu_301_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i2_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten19_fu_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln57_1_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten19_load : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln58_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_281_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_344_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln60_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln60_fu_362_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln60_1_fu_368_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln60_fu_371_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_fu_415_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_s_fu_426_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_40_fu_436_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1244_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_448_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_479_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1148_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1148_fu_504_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_35_fu_510_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1147_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_527_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1150_fu_541_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_36_fu_546_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1159_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1158_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1159_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1160_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1160_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1159_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1160_fu_606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_612_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1162_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1165_fu_656_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_fu_649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_fu_661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1163_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_667_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_41_fu_674_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_mux_42_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        din3 : IN STD_LOGIC_VECTOR (23 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_24_1_1_U2670 : component Bert_layer_mux_42_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 24,
        din2_WIDTH => 24,
        din3_WIDTH => 24,
        din4_WIDTH => 2,
        dout_WIDTH => 24)
    port map (
        din0 => outp_V_q0,
        din1 => outp_V_1_q0,
        din2 => outp_V_2_q0,
        din3 => outp_V_3_q0,
        din4 => trunc_ln57_reg_731_pp0_iter1_reg,
        dout => v46_V_fu_389_p6);

    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i2_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_263_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i2_fu_132 <= select_ln57_1_fu_301_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i2_fu_132 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_263_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_136 <= add_ln57_1_fu_269_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_136 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j1_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_263_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j1_fu_128 <= add_ln58_fu_323_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j1_fu_128 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1136_reg_795_pp0_iter5_reg = ap_const_lv1_0))) then
                LD_reg_849 <= LD_fu_686_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1136_reg_795 <= icmp_ln1136_fu_410_p2;
                icmp_ln1136_reg_795_pp0_iter4_reg <= icmp_ln1136_reg_795;
                icmp_ln1136_reg_795_pp0_iter5_reg <= icmp_ln1136_reg_795_pp0_iter4_reg;
                icmp_ln1136_reg_795_pp0_iter6_reg <= icmp_ln1136_reg_795_pp0_iter5_reg;
                icmp_ln1136_reg_795_pp0_iter7_reg <= icmp_ln1136_reg_795_pp0_iter6_reg;
                icmp_ln1136_reg_795_pp0_iter8_reg <= icmp_ln1136_reg_795_pp0_iter7_reg;
                icmp_ln1136_reg_795_pp0_iter9_reg <= icmp_ln1136_reg_795_pp0_iter8_reg;
                p_Result_39_reg_789 <= v46_V_fu_389_p6(23 downto 23);
                p_Result_39_reg_789_pp0_iter3_reg <= p_Result_39_reg_789;
                p_Result_39_reg_789_pp0_iter4_reg <= p_Result_39_reg_789_pp0_iter3_reg;
                p_Result_39_reg_789_pp0_iter5_reg <= p_Result_39_reg_789_pp0_iter4_reg;
                sub_ln1145_reg_807 <= sub_ln1145_fu_456_p2;
                sub_ln1145_reg_807_pp0_iter4_reg <= sub_ln1145_reg_807;
                tmp_V_2_reg_800 <= tmp_V_2_fu_420_p3;
                tmp_V_2_reg_800_pp0_iter4_reg <= tmp_V_2_reg_800;
                trunc_ln1144_reg_824 <= trunc_ln1144_fu_470_p1;
                trunc_ln1144_reg_824_pp0_iter4_reg <= trunc_ln1144_reg_824;
                trunc_ln1144_reg_824_pp0_iter5_reg <= trunc_ln1144_reg_824_pp0_iter4_reg;
                trunc_ln1145_reg_814 <= trunc_ln1145_fu_462_p1;
                trunc_ln1148_reg_819 <= trunc_ln1148_fu_466_p1;
                trunc_ln57_reg_731_pp0_iter10_reg <= trunc_ln57_reg_731_pp0_iter9_reg;
                trunc_ln57_reg_731_pp0_iter2_reg <= trunc_ln57_reg_731_pp0_iter1_reg;
                trunc_ln57_reg_731_pp0_iter3_reg <= trunc_ln57_reg_731_pp0_iter2_reg;
                trunc_ln57_reg_731_pp0_iter4_reg <= trunc_ln57_reg_731_pp0_iter3_reg;
                trunc_ln57_reg_731_pp0_iter5_reg <= trunc_ln57_reg_731_pp0_iter4_reg;
                trunc_ln57_reg_731_pp0_iter6_reg <= trunc_ln57_reg_731_pp0_iter5_reg;
                trunc_ln57_reg_731_pp0_iter7_reg <= trunc_ln57_reg_731_pp0_iter6_reg;
                trunc_ln57_reg_731_pp0_iter8_reg <= trunc_ln57_reg_731_pp0_iter7_reg;
                trunc_ln57_reg_731_pp0_iter9_reg <= trunc_ln57_reg_731_pp0_iter8_reg;
                v100_1_addr_reg_767_pp0_iter10_reg <= v100_1_addr_reg_767_pp0_iter9_reg;
                v100_1_addr_reg_767_pp0_iter2_reg <= v100_1_addr_reg_767;
                v100_1_addr_reg_767_pp0_iter3_reg <= v100_1_addr_reg_767_pp0_iter2_reg;
                v100_1_addr_reg_767_pp0_iter4_reg <= v100_1_addr_reg_767_pp0_iter3_reg;
                v100_1_addr_reg_767_pp0_iter5_reg <= v100_1_addr_reg_767_pp0_iter4_reg;
                v100_1_addr_reg_767_pp0_iter6_reg <= v100_1_addr_reg_767_pp0_iter5_reg;
                v100_1_addr_reg_767_pp0_iter7_reg <= v100_1_addr_reg_767_pp0_iter6_reg;
                v100_1_addr_reg_767_pp0_iter8_reg <= v100_1_addr_reg_767_pp0_iter7_reg;
                v100_1_addr_reg_767_pp0_iter9_reg <= v100_1_addr_reg_767_pp0_iter8_reg;
                v100_2_addr_reg_772_pp0_iter10_reg <= v100_2_addr_reg_772_pp0_iter9_reg;
                v100_2_addr_reg_772_pp0_iter2_reg <= v100_2_addr_reg_772;
                v100_2_addr_reg_772_pp0_iter3_reg <= v100_2_addr_reg_772_pp0_iter2_reg;
                v100_2_addr_reg_772_pp0_iter4_reg <= v100_2_addr_reg_772_pp0_iter3_reg;
                v100_2_addr_reg_772_pp0_iter5_reg <= v100_2_addr_reg_772_pp0_iter4_reg;
                v100_2_addr_reg_772_pp0_iter6_reg <= v100_2_addr_reg_772_pp0_iter5_reg;
                v100_2_addr_reg_772_pp0_iter7_reg <= v100_2_addr_reg_772_pp0_iter6_reg;
                v100_2_addr_reg_772_pp0_iter8_reg <= v100_2_addr_reg_772_pp0_iter7_reg;
                v100_2_addr_reg_772_pp0_iter9_reg <= v100_2_addr_reg_772_pp0_iter8_reg;
                v100_3_addr_reg_777_pp0_iter10_reg <= v100_3_addr_reg_777_pp0_iter9_reg;
                v100_3_addr_reg_777_pp0_iter2_reg <= v100_3_addr_reg_777;
                v100_3_addr_reg_777_pp0_iter3_reg <= v100_3_addr_reg_777_pp0_iter2_reg;
                v100_3_addr_reg_777_pp0_iter4_reg <= v100_3_addr_reg_777_pp0_iter3_reg;
                v100_3_addr_reg_777_pp0_iter5_reg <= v100_3_addr_reg_777_pp0_iter4_reg;
                v100_3_addr_reg_777_pp0_iter6_reg <= v100_3_addr_reg_777_pp0_iter5_reg;
                v100_3_addr_reg_777_pp0_iter7_reg <= v100_3_addr_reg_777_pp0_iter6_reg;
                v100_3_addr_reg_777_pp0_iter8_reg <= v100_3_addr_reg_777_pp0_iter7_reg;
                v100_3_addr_reg_777_pp0_iter9_reg <= v100_3_addr_reg_777_pp0_iter8_reg;
                v100_addr_reg_762_pp0_iter10_reg <= v100_addr_reg_762_pp0_iter9_reg;
                v100_addr_reg_762_pp0_iter2_reg <= v100_addr_reg_762;
                v100_addr_reg_762_pp0_iter3_reg <= v100_addr_reg_762_pp0_iter2_reg;
                v100_addr_reg_762_pp0_iter4_reg <= v100_addr_reg_762_pp0_iter3_reg;
                v100_addr_reg_762_pp0_iter5_reg <= v100_addr_reg_762_pp0_iter4_reg;
                v100_addr_reg_762_pp0_iter6_reg <= v100_addr_reg_762_pp0_iter5_reg;
                v100_addr_reg_762_pp0_iter7_reg <= v100_addr_reg_762_pp0_iter6_reg;
                v100_addr_reg_762_pp0_iter8_reg <= v100_addr_reg_762_pp0_iter7_reg;
                v100_addr_reg_762_pp0_iter9_reg <= v100_addr_reg_762_pp0_iter8_reg;
                v46_V_reg_782 <= v46_V_fu_389_p6;
                v48_reg_859 <= v48_fu_694_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                trunc_ln57_reg_731_pp0_iter1_reg <= trunc_ln57_reg_731;
                v100_1_addr_reg_767 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);
                v100_2_addr_reg_772 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);
                v100_3_addr_reg_777 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);
                v100_addr_reg_762 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1136_reg_795 = ap_const_lv1_0))) then
                icmp_ln1159_reg_834 <= icmp_ln1159_fu_573_p2;
                    or_ln_reg_829(0) <= or_ln_fu_565_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1136_reg_795_pp0_iter4_reg = ap_const_lv1_0))) then
                m_4_reg_839 <= m_3_fu_622_p2(63 downto 1);
                p_Result_37_reg_844 <= m_3_fu_622_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_263_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_cast9_mid2_v_reg_736 <= select_ln57_1_fu_301_p3(3 downto 2);
                select_ln57_reg_726 <= select_ln57_fu_293_p3;
                trunc_ln57_reg_731 <= trunc_ln57_fu_309_p1;
            end if;
        end if;
    end process;
    or_ln_reg_829(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LD_fu_686_p1 <= p_Result_41_fu_674_p5(32 - 1 downto 0);
    a_fu_521_p2 <= (icmp_ln1148_fu_515_p2 and icmp_ln1147_fu_489_p2);
    add_ln1150_fu_541_p2 <= std_logic_vector(unsigned(trunc_ln1145_reg_814) + unsigned(ap_const_lv24_FFFFE8));
    add_ln1159_fu_582_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_807_pp0_iter4_reg) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1170_fu_661_p2 <= std_logic_vector(unsigned(sub_ln1165_fu_656_p2) + unsigned(select_ln1144_fu_649_p3));
    add_ln57_1_fu_269_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten19_load) + unsigned(ap_const_lv8_1));
    add_ln57_fu_281_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i2_load) + unsigned(ap_const_lv4_1));
    add_ln58_fu_323_p2 <= std_logic_vector(unsigned(select_ln57_fu_293_p3) + unsigned(ap_const_lv4_1));
    add_ln60_fu_371_p2 <= std_logic_vector(unsigned(sub_ln60_fu_362_p2) + unsigned(zext_ln60_1_fu_368_p1));
    and_ln1150_fu_553_p2 <= (xor_ln1150_fu_535_p2 and p_Result_36_fu_546_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln57_fu_263_p2)
    begin
        if (((icmp_ln57_fu_263_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i2_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i2_fu_132)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i2_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i2_load <= i2_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten19_fu_136)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten19_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten19_load <= indvar_flatten19_fu_136;
        end if; 
    end process;


    ap_sig_allocacmp_j1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j1_fu_128, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j1_load <= j1_fu_128;
        end if; 
    end process;

    bitcast_ln810_fu_690_p1 <= LD_reg_849;
    grp_fu_653_p_ce <= ap_const_logic_1;
    grp_fu_653_p_din0 <= bitcast_ln810_fu_690_p1;
    grp_fu_653_p_din1 <= ap_const_lv32_3E000000;
    icmp_ln1136_fu_410_p2 <= "1" when (v46_V_reg_782 = ap_const_lv24_0) else "0";
    icmp_ln1147_fu_489_p2 <= "1" when (signed(tmp_fu_479_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1148_fu_515_p2 <= "0" when (p_Result_35_fu_510_p2 = ap_const_lv24_0) else "1";
    icmp_ln1159_fu_573_p2 <= "1" when (signed(lsb_index_fu_474_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln57_fu_263_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten19_load = ap_const_lv8_90) else "0";
    icmp_ln58_fu_287_p2 <= "1" when (ap_sig_allocacmp_j1_load = ap_const_lv4_C) else "0";
    
    l_fu_448_p3_proc : process(sext_ln1244_fu_444_p1)
    begin
        l_fu_448_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1244_fu_444_p1(i) = '1' then
                l_fu_448_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_474_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_807) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1148_fu_504_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1148_fu_500_p1(24-1 downto 0)))));
    lshr_ln1159_fu_591_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1158_fu_579_p1),to_integer(unsigned('0' & zext_ln1159_fu_587_p1(31-1 downto 0)))));
    m_2_fu_612_p3 <= 
        lshr_ln1159_fu_591_p2 when (icmp_ln1159_reg_834(0) = '1') else 
        shl_ln1160_fu_606_p2;
    m_3_fu_622_p2 <= std_logic_vector(unsigned(m_2_fu_612_p3) + unsigned(zext_ln1162_fu_619_p1));
    or_ln1150_fu_559_p2 <= (and_ln1150_fu_553_p2 or a_fu_521_p2);
    or_ln_fu_565_p3 <= (ap_const_lv1_0 & or_ln1150_fu_559_p2);
    outp_V_1_address0 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);

    outp_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outp_V_1_ce0 <= ap_const_logic_1;
        else 
            outp_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outp_V_2_address0 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);

    outp_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outp_V_2_ce0 <= ap_const_logic_1;
        else 
            outp_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outp_V_3_address0 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);

    outp_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outp_V_3_ce0 <= ap_const_logic_1;
        else 
            outp_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outp_V_address0 <= zext_ln60_2_fu_377_p1(6 - 1 downto 0);

    outp_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outp_V_ce0 <= ap_const_logic_1;
        else 
            outp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_35_fu_510_p2 <= (tmp_V_2_reg_800 and lshr_ln1148_fu_504_p2);
    p_Result_36_fu_546_p3 <= tmp_V_2_reg_800(to_integer(unsigned(add_ln1150_fu_541_p2)) downto to_integer(unsigned(add_ln1150_fu_541_p2))) when (to_integer(unsigned(add_ln1150_fu_541_p2)) >= 0 and to_integer(unsigned(add_ln1150_fu_541_p2)) <=23) else "-";
    p_Result_40_fu_436_p3 <= (ap_const_lv1_1 & p_Result_s_fu_426_p4);
    p_Result_41_fu_674_p5 <= (zext_ln1163_fu_646_p1(63 downto 32) & tmp_3_fu_667_p3 & zext_ln1163_fu_646_p1(22 downto 0));
    
    p_Result_s_fu_426_p4_proc : process(tmp_V_2_fu_420_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_s_fu_426_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_2_fu_420_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for p_Result_s_fu_426_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_s_fu_426_p4_i) := tmp_V_2_fu_420_p3(24-1-p_Result_s_fu_426_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_426_p4 <= resvalue(24-1 downto 0);
    end process;

    select_ln1144_fu_649_p3 <= 
        ap_const_lv8_7F when (p_Result_37_reg_844(0) = '1') else 
        ap_const_lv8_7E;
    select_ln57_1_fu_301_p3 <= 
        add_ln57_fu_281_p2 when (icmp_ln58_fu_287_p2(0) = '1') else 
        ap_sig_allocacmp_i2_load;
    select_ln57_fu_293_p3 <= 
        ap_const_lv4_0 when (icmp_ln58_fu_287_p2(0) = '1') else 
        ap_sig_allocacmp_j1_load;
        sext_ln1244_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_40_fu_436_p3),32));

    shl_ln1160_fu_606_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1158_fu_579_p1),to_integer(unsigned('0' & zext_ln1160_fu_602_p1(31-1 downto 0)))));
    sub_ln1145_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(l_fu_448_p3));
    sub_ln1148_fu_495_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(trunc_ln1148_reg_819));
    sub_ln1160_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln1145_reg_807_pp0_iter4_reg));
    sub_ln1165_fu_656_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln1144_reg_824_pp0_iter5_reg));
    sub_ln60_fu_362_p2 <= std_logic_vector(unsigned(tmp_s_fu_344_p3) - unsigned(zext_ln60_fu_358_p1));
    tmp_24_fu_351_p3 <= (p_cast9_mid2_v_reg_736 & ap_const_lv2_0);
    tmp_27_fu_527_p3 <= lsb_index_fu_474_p2(31 downto 31);
    tmp_3_fu_667_p3 <= (p_Result_39_reg_789_pp0_iter5_reg & add_ln1170_fu_661_p2);
    tmp_V_2_fu_420_p3 <= 
        tmp_V_fu_415_p2 when (p_Result_39_reg_789(0) = '1') else 
        v46_V_reg_782;
    tmp_V_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(v46_V_reg_782));
    tmp_fu_479_p4 <= lsb_index_fu_474_p2(31 downto 1);
    tmp_s_fu_344_p3 <= (p_cast9_mid2_v_reg_736 & ap_const_lv4_0);
    trunc_ln1144_fu_470_p1 <= l_fu_448_p3(8 - 1 downto 0);
    trunc_ln1145_fu_462_p1 <= sub_ln1145_fu_456_p2(24 - 1 downto 0);
    trunc_ln1148_fu_466_p1 <= sub_ln1145_fu_456_p2(5 - 1 downto 0);
    trunc_ln57_fu_309_p1 <= select_ln57_1_fu_301_p3(2 - 1 downto 0);
    v100_1_address0 <= v100_1_addr_reg_767_pp0_iter10_reg;

    v100_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            v100_1_ce0 <= ap_const_logic_1;
        else 
            v100_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_1_d0 <= v48_reg_859;

    v100_1_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln57_reg_731_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln57_reg_731_pp0_iter10_reg = ap_const_lv2_1))) then 
            v100_1_we0 <= ap_const_logic_1;
        else 
            v100_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_2_address0 <= v100_2_addr_reg_772_pp0_iter10_reg;

    v100_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            v100_2_ce0 <= ap_const_logic_1;
        else 
            v100_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_2_d0 <= v48_reg_859;

    v100_2_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln57_reg_731_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln57_reg_731_pp0_iter10_reg = ap_const_lv2_2))) then 
            v100_2_we0 <= ap_const_logic_1;
        else 
            v100_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_3_address0 <= v100_3_addr_reg_777_pp0_iter10_reg;

    v100_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            v100_3_ce0 <= ap_const_logic_1;
        else 
            v100_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_3_d0 <= v48_reg_859;

    v100_3_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln57_reg_731_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln57_reg_731_pp0_iter10_reg = ap_const_lv2_3))) then 
            v100_3_we0 <= ap_const_logic_1;
        else 
            v100_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_address0 <= v100_addr_reg_762_pp0_iter10_reg;

    v100_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            v100_ce0 <= ap_const_logic_1;
        else 
            v100_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v100_d0 <= v48_reg_859;

    v100_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln57_reg_731_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln57_reg_731_pp0_iter10_reg = ap_const_lv2_0))) then 
            v100_we0 <= ap_const_logic_1;
        else 
            v100_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v48_fu_694_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_reg_795_pp0_iter9_reg(0) = '1') else 
        grp_fu_653_p_dout0;
    xor_ln1150_fu_535_p2 <= (tmp_27_fu_527_p3 xor ap_const_lv1_1);
    zext_ln1148_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_fu_495_p2),24));
    zext_ln1158_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_800_pp0_iter4_reg),64));
    zext_ln1159_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1159_fu_582_p2),64));
    zext_ln1160_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1160_fu_597_p2),64));
    zext_ln1162_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_829),64));
    zext_ln1163_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_reg_839),64));
    zext_ln60_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_reg_726),6));
    zext_ln60_2_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_fu_371_p2),64));
    zext_ln60_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_351_p3),6));
end behav;
