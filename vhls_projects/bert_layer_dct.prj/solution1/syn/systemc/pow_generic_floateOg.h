// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __pow_generic_floateOg_H__
#define __pow_generic_floateOg_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct pow_generic_floateOg_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 49;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(pow_generic_floateOg_ram) {
        ram[0] = "0b0000000000000000000000000000000000000000000000000";
        ram[1] = "0b0000010000000000000000000000000000010101010101010";
        ram[2] = "0b0000100000000000001000000000000100101010101101001";
        ram[3] = "0b0000110000000000011000000000010101000000010011100";
        ram[4] = "0b0001000000000000110000000000111001010110100000010";
        ram[5] = "0b0001010000000001010000000001111001101101110111110";
        ram[6] = "0b0001100000000001111000000011011110000111001001101";
        ram[7] = "0b0001110000000010101000000101101110100011010010011";
        ram[8] = "0b0010000000000011100000001000110011000011011001110";
        ram[9] = "0b0010010000000100100000001100110011101000110100001";
        ram[10] = "0b0010100000000101101000010001111000010101000001100";
        ram[11] = "0b0010110000000110111000011000001001001001101110011";
        ram[12] = "0b0011000000001000010000011111101110001000110010110";
        ram[13] = "0b0011010000001001110000101000101111010100010011010";
        ram[14] = "0b0011100000001011011000110011010100101110100000000";
        ram[15] = "0b0011110000001101001000111111100110011001110101110";
        ram[16] = "0b0100000000001111000001001101101100011000111101000";
        ram[17] = "0b0100010000010001000001011101101110101110101010011";
        ram[18] = "0b0100100000010011001001101111110101011101111110110";
        ram[19] = "0b0100110000010101011010000100001000101010000110110";
        ram[20] = "0b0101000000010111110010011010110000010110011011100";
        ram[21] = "0b0101010000011010010010110011110100100110100010001";
        ram[22] = "0b0101100000011100111011001111011101011110001011101";
        ram[23] = "0b0101110000011111101011101101110011000001010101011";
        ram[24] = "0b0110000000100010100100001110111101010100001000110";
        ram[25] = "0b0110010000100101100100110011000100011010111011011";
        ram[26] = "0b0110100000101000101101011010010000011010001111000";
        ram[27] = "0b0110110000101011111110000100101001010110110001010";
        ram[28] = "0b0111000000101111010110110010010111010101011100011";
        ram[29] = "0b0111010000110010110111100011100010011011010110011";
        ram[30] = "0b0111100000110110100000011000010010101101110001101";
        ram[31] = "0b0111110000111010010001010000110000010010001100100";
        ram[32] = "0b1000000000111110001010001101000011001110010001110";
        ram[33] = "0b1000010001000010001011001101010011100111111000010";
        ram[34] = "0b1000100001000110010100010001101001100101000011000";
        ram[35] = "0b1000110001001010100101011010001101001100000001000";
        ram[36] = "0b1001000001001110111110100111000110100011001110000";
        ram[37] = "0b1001010001010011011111111000011101110001010001011";
        ram[38] = "0b1001100001011000001001001110011010111100111111000";
        ram[39] = "0b1001110001011100111010101001000110001101010110111";
        ram[40] = "0b1010000001100001110100001000100111101001100101011";
        ram[41] = "0b1010010001100110110101101101000111011001000011000";
        ram[42] = "0b1010100001101011111111010110101101100011010100011";
        ram[43] = "0b1010110001110001010001000101100010010000001010101";
        ram[44] = "0b1011000001110110101010111001101101100111100010110";
        ram[45] = "0b1011010001111100001100110011010111110001100110010";
        ram[46] = "0b1011100010000001110110110010101000110110101011000";
        ram[47] = "0b1011110010000111101000110111101000111111010010111";
        ram[48] = "0b1100000010001101100011000010100000010100001100010";
        ram[49] = "0b1100010010010011100101010011010110111110010001100";
        ram[50] = "0b1100100010011001101111101010010101000110101001100";
        ram[51] = "0b1100110010100000000010000111100010110110100111011";
        ram[52] = "0b1101000010100110011100101011001000010111101010100";
        ram[53] = "0b1101010010101100111111010101001101110011011110110";
        ram[54] = "0b1101100010110011101010000101111011010011111011110";
        ram[55] = "0b1101110010111010011100111101011001000011000110010";
        ram[56] = "0b1110000011000001010111111011101111001011001110100";
        ram[57] = "0b1110010011001000011011000001000101110110110001110";
        ram[58] = "0b1110100011001111100110001101100101010000011001010";
        ram[59] = "0b1110110011010110111001100001010101100010111010100";
        ram[60] = "0b1111000011011110010100111100011110111001010111101";
        ram[61] = "0b1111010011100101111000011111001001011110111110110";
        ram[62] = "0b1111100011101101100100001001011101011111001010110";
        ram[63] = "0b1111110011110101010111111011100011000101100010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(pow_generic_floateOg) {


static const unsigned DataWidth = 49;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


pow_generic_floateOg_ram* meminst;


SC_CTOR(pow_generic_floateOg) {
meminst = new pow_generic_floateOg_ram("pow_generic_floateOg_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~pow_generic_floateOg() {
    delete meminst;
}


};//endmodule
#endif
