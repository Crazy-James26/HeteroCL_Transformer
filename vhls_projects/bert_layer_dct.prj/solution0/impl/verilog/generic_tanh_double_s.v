// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generic_tanh_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_in,
        ap_return
);

parameter    ap_ST_fsm_state1 = 123'd1;
parameter    ap_ST_fsm_state2 = 123'd2;
parameter    ap_ST_fsm_state3 = 123'd4;
parameter    ap_ST_fsm_state4 = 123'd8;
parameter    ap_ST_fsm_state5 = 123'd16;
parameter    ap_ST_fsm_state6 = 123'd32;
parameter    ap_ST_fsm_state7 = 123'd64;
parameter    ap_ST_fsm_state8 = 123'd128;
parameter    ap_ST_fsm_state9 = 123'd256;
parameter    ap_ST_fsm_state10 = 123'd512;
parameter    ap_ST_fsm_state11 = 123'd1024;
parameter    ap_ST_fsm_state12 = 123'd2048;
parameter    ap_ST_fsm_state13 = 123'd4096;
parameter    ap_ST_fsm_state14 = 123'd8192;
parameter    ap_ST_fsm_state15 = 123'd16384;
parameter    ap_ST_fsm_state16 = 123'd32768;
parameter    ap_ST_fsm_state17 = 123'd65536;
parameter    ap_ST_fsm_state18 = 123'd131072;
parameter    ap_ST_fsm_state19 = 123'd262144;
parameter    ap_ST_fsm_state20 = 123'd524288;
parameter    ap_ST_fsm_state21 = 123'd1048576;
parameter    ap_ST_fsm_state22 = 123'd2097152;
parameter    ap_ST_fsm_state23 = 123'd4194304;
parameter    ap_ST_fsm_state24 = 123'd8388608;
parameter    ap_ST_fsm_state25 = 123'd16777216;
parameter    ap_ST_fsm_state26 = 123'd33554432;
parameter    ap_ST_fsm_state27 = 123'd67108864;
parameter    ap_ST_fsm_state28 = 123'd134217728;
parameter    ap_ST_fsm_state29 = 123'd268435456;
parameter    ap_ST_fsm_state30 = 123'd536870912;
parameter    ap_ST_fsm_state31 = 123'd1073741824;
parameter    ap_ST_fsm_state32 = 123'd2147483648;
parameter    ap_ST_fsm_state33 = 123'd4294967296;
parameter    ap_ST_fsm_state34 = 123'd8589934592;
parameter    ap_ST_fsm_state35 = 123'd17179869184;
parameter    ap_ST_fsm_state36 = 123'd34359738368;
parameter    ap_ST_fsm_state37 = 123'd68719476736;
parameter    ap_ST_fsm_state38 = 123'd137438953472;
parameter    ap_ST_fsm_state39 = 123'd274877906944;
parameter    ap_ST_fsm_state40 = 123'd549755813888;
parameter    ap_ST_fsm_state41 = 123'd1099511627776;
parameter    ap_ST_fsm_state42 = 123'd2199023255552;
parameter    ap_ST_fsm_state43 = 123'd4398046511104;
parameter    ap_ST_fsm_state44 = 123'd8796093022208;
parameter    ap_ST_fsm_state45 = 123'd17592186044416;
parameter    ap_ST_fsm_state46 = 123'd35184372088832;
parameter    ap_ST_fsm_state47 = 123'd70368744177664;
parameter    ap_ST_fsm_state48 = 123'd140737488355328;
parameter    ap_ST_fsm_state49 = 123'd281474976710656;
parameter    ap_ST_fsm_state50 = 123'd562949953421312;
parameter    ap_ST_fsm_state51 = 123'd1125899906842624;
parameter    ap_ST_fsm_state52 = 123'd2251799813685248;
parameter    ap_ST_fsm_state53 = 123'd4503599627370496;
parameter    ap_ST_fsm_state54 = 123'd9007199254740992;
parameter    ap_ST_fsm_state55 = 123'd18014398509481984;
parameter    ap_ST_fsm_state56 = 123'd36028797018963968;
parameter    ap_ST_fsm_state57 = 123'd72057594037927936;
parameter    ap_ST_fsm_state58 = 123'd144115188075855872;
parameter    ap_ST_fsm_state59 = 123'd288230376151711744;
parameter    ap_ST_fsm_state60 = 123'd576460752303423488;
parameter    ap_ST_fsm_state61 = 123'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 123'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 123'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 123'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 123'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 123'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 123'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 123'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 123'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 123'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 123'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 123'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 123'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 123'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 123'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 123'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 123'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 123'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 123'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 123'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 123'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 123'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 123'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 123'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 123'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 123'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 123'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 123'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 123'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 123'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 123'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 123'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 123'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 123'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 123'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 123'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 123'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 123'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 123'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 123'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 123'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 123'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 123'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 123'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 123'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 123'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 123'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 123'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 123'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 123'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 123'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 123'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 123'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 123'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 123'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 123'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 123'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 123'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 123'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 123'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 123'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 123'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 123'd5316911983139663491615228241121378304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] t_in;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [122:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_98_p2;
reg   [63:0] reg_131;
wire    ap_CS_fsm_state7;
reg   [0:0] icmp_ln849_1_reg_368;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state116;
wire   [63:0] grp_fu_111_p2;
reg   [63:0] reg_138;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state111;
reg   [0:0] p_Result_s_reg_324;
wire   [10:0] tmp_V_fu_156_p4;
reg   [10:0] tmp_V_reg_329;
wire   [63:0] p_Result_115_fu_175_p3;
reg   [63:0] p_Result_115_reg_334;
wire   [63:0] abst_in_fu_183_p1;
reg   [63:0] abst_in_reg_339;
wire   [0:0] icmp_ln833_fu_189_p2;
reg   [0:0] icmp_ln833_reg_347;
wire   [0:0] icmp_ln849_fu_195_p2;
reg   [0:0] icmp_ln849_reg_351;
wire   [0:0] and_ln75_fu_207_p2;
reg   [0:0] and_ln75_reg_355;
wire   [63:0] select_ln67_fu_213_p3;
wire   [0:0] grp_fu_116_p2;
reg   [0:0] tmp_3_reg_364;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln849_1_fu_221_p2;
wire   [63:0] xor_ln84_fu_226_p2;
reg   [63:0] xor_ln84_reg_373;
wire   [63:0] bitcast_ln84_fu_231_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] x_2_fu_235_p3;
reg   [63:0] x_2_reg_383;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_exp_generic_double_s_fu_87_ap_return;
reg   [63:0] tmp_i_reg_399;
wire    ap_CS_fsm_state28;
reg   [63:0] tmp_i_168_reg_404;
wire    ap_CS_fsm_state33;
wire   [63:0] xor_ln95_fu_314_p2;
reg   [63:0] xor_ln95_reg_409;
wire   [63:0] bitcast_ln95_1_fu_320_p1;
wire    ap_CS_fsm_state81;
wire   [63:0] grp_fu_107_p2;
reg   [63:0] resultf_reg_419;
wire    ap_CS_fsm_state122;
wire    grp_exp_generic_double_s_fu_87_ap_start;
wire    grp_exp_generic_double_s_fu_87_ap_done;
wire    grp_exp_generic_double_s_fu_87_ap_idle;
wire    grp_exp_generic_double_s_fu_87_ap_ready;
reg   [63:0] expx_reg_58;
wire    ap_CS_fsm_state34;
wire   [0:0] p_Result_114_fu_246_p3;
wire   [0:0] or_ln9_fu_283_p2;
wire   [0:0] or_ln10_fu_271_p2;
reg   [63:0] ap_phi_mux_resultf_4_phi_fu_74_p10;
reg   [63:0] resultf_4_reg_70;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state76;
reg    grp_exp_generic_double_s_fu_87_ap_start_reg;
reg   [122:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
wire    ap_CS_fsm_state9;
reg   [63:0] grp_fu_98_p0;
reg   [63:0] grp_fu_98_p1;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state117;
reg   [63:0] grp_fu_111_p0;
wire    ap_CS_fsm_state40;
wire   [63:0] grp_fu_116_p0;
wire   [51:0] tmp_V_29_fu_166_p1;
wire   [10:0] tmp_V_30_fu_254_p4;
wire   [63:0] p_Val2_s_fu_144_p1;
wire   [62:0] trunc_ln368_fu_171_p1;
wire   [0:0] icmp_ln833_3_fu_201_p2;
wire   [0:0] grp_fu_121_p2;
wire   [63:0] p_Val2_143_fu_242_p1;
wire   [0:0] icmp_ln10_fu_265_p2;
wire   [0:0] grp_fu_126_p2;
wire   [0:0] icmp_ln9_fu_277_p2;
wire   [63:0] bitcast_ln112_fu_289_p1;
wire   [63:0] xor_ln112_fu_293_p2;
wire   [63:0] bitcast_ln112_1_fu_299_p1;
wire   [63:0] bitcast_ln95_fu_310_p1;
reg   [1:0] grp_fu_98_opcode;
wire   [63:0] select_ln775_fu_303_p3;
reg   [63:0] ap_return_preg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 123'd1;
#0 grp_exp_generic_double_s_fu_87_ap_start_reg = 1'b0;
#0 ap_return_preg = 64'd0;
end

exp_generic_double_s grp_exp_generic_double_s_fu_87(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_generic_double_s_fu_87_ap_start),
    .ap_done(grp_exp_generic_double_s_fu_87_ap_done),
    .ap_idle(grp_exp_generic_double_s_fu_87_ap_idle),
    .ap_ready(grp_exp_generic_double_s_fu_87_ap_ready),
    .x(x_2_reg_383),
    .ap_return(grp_exp_generic_double_s_fu_87_ap_return)
);

top_dadddsub_64nsyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_dadddsub_64nsyd2_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .opcode(grp_fu_98_opcode),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

top_dmul_64ns_64nzec #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_dmul_64ns_64nzec_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(abst_in_reg_339),
    .din1(reg_131),
    .ce(1'b1),
    .dout(grp_fu_107_p2)
);

top_ddiv_64ns_64nAem #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
top_ddiv_64ns_64nAem_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_111_p0),
    .din1(reg_131),
    .ce(1'b1),
    .dout(grp_fu_111_p2)
);

top_dcmp_64ns_64nBew #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
top_dcmp_64ns_64nBew_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(64'd4626885667169763328),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_116_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            ap_return_preg <= select_ln775_fu_303_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b1;
        end else if ((grp_exp_generic_double_s_fu_87_ap_ready == 1'b1)) begin
            grp_exp_generic_double_s_fu_87_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (or_ln10_fu_271_p2 == 1'd0) & (p_Result_114_fu_246_p3 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (or_ln9_fu_283_p2 == 1'd0) & (p_Result_114_fu_246_p3 == 1'd1)))) begin
        expx_reg_58 <= x_2_fu_235_p3;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        expx_reg_58 <= tmp_i_168_reg_404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_189_p2 == 1'd1) & (ap_start == 1'b1))) begin
        resultf_4_reg_70 <= select_ln67_fu_213_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_116_p2 == 1'd0))) begin
        resultf_4_reg_70 <= 64'd4607182418800017408;
    end else if (((1'b1 == ap_CS_fsm_state76) & (1'd0 == and_ln75_reg_355) & (icmp_ln849_reg_351 == 1'd0) & (icmp_ln833_reg_347 == 1'd0) & (tmp_3_reg_364 == 1'd1) & (icmp_ln849_1_reg_368 == 1'd0))) begin
        resultf_4_reg_70 <= reg_131;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        resultf_4_reg_70 <= reg_138;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        resultf_4_reg_70 <= resultf_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        abst_in_reg_339[62 : 0] <= abst_in_fu_183_p1[62 : 0];
        icmp_ln833_reg_347 <= icmp_ln833_fu_189_p2;
        p_Result_115_reg_334[62 : 0] <= p_Result_115_fu_175_p3[62 : 0];
        p_Result_s_reg_324 <= p_Val2_s_fu_144_p1[32'd63];
        tmp_V_reg_329 <= {{p_Val2_s_fu_144_p1[62:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln849_fu_195_p2 == 1'd0) & (icmp_ln833_fu_189_p2 == 1'd0) & (ap_start == 1'b1))) begin
        and_ln75_reg_355 <= and_ln75_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_116_p2 == 1'd1))) begin
        icmp_ln849_1_reg_368 <= icmp_ln849_1_fu_221_p2;
        xor_ln84_reg_373 <= xor_ln84_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_189_p2 == 1'd0) & (ap_start == 1'b1))) begin
        icmp_ln849_reg_351 <= icmp_ln849_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln849_1_reg_368 == 1'd1)))) begin
        reg_131 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state70))) begin
        reg_138 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        resultf_reg_419 <= grp_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_364 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_i_168_reg_404 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_i_reg_399 <= grp_exp_generic_double_s_fu_87_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_2_reg_383 <= x_2_fu_235_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        xor_ln95_reg_409 <= xor_ln95_fu_314_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) & (1'd0 == and_ln75_reg_355) & (icmp_ln849_reg_351 == 1'd0) & (icmp_ln833_reg_347 == 1'd0) & (tmp_3_reg_364 == 1'd1) & (icmp_ln849_1_reg_368 == 1'd0))) begin
        ap_phi_mux_resultf_4_phi_fu_74_p10 = reg_131;
    end else begin
        ap_phi_mux_resultf_4_phi_fu_74_p10 = resultf_4_reg_70;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        ap_return = select_ln775_fu_303_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_111_p0 = bitcast_ln95_1_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_111_p0 = 64'd4611686018427387904;
    end else begin
        grp_fu_111_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd1)))) begin
        grp_fu_98_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (((icmp_ln833_fu_189_p2 == 1'd0) & (icmp_ln849_fu_195_p2 == 1'd1)) | ((icmp_ln833_fu_189_p2 == 1'd0) & (1'd1 == and_ln75_fu_207_p2)))))) begin
        grp_fu_98_opcode = 2'd0;
    end else begin
        grp_fu_98_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_98_p0 = 64'd4607182418800017408;
    end else if ((((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd1)))) begin
        grp_fu_98_p0 = expx_reg_58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_98_p0 = tmp_i_reg_399;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd0))) begin
        grp_fu_98_p0 = abst_in_reg_339;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd1))) begin
        grp_fu_98_p0 = bitcast_ln84_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p0 = abst_in_fu_183_p1;
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_98_p1 = reg_138;
    end else if ((((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd1)))) begin
        grp_fu_98_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_98_p1 = 64'd13830554455654793216;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln849_1_reg_368 == 1'd1)))) begin
        grp_fu_98_p1 = abst_in_reg_339;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_98_p1 = 64'd4607182418800017408;
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln833_fu_189_p2 == 1'd1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln75_fu_207_p2) & (icmp_ln849_fu_195_p2 == 1'd0) & (icmp_ln833_fu_189_p2 == 1'd0) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (((icmp_ln833_fu_189_p2 == 1'd0) & (icmp_ln849_fu_195_p2 == 1'd1)) | ((icmp_ln833_fu_189_p2 == 1'd0) & (1'd1 == and_ln75_fu_207_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_116_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (((or_ln10_fu_271_p2 == 1'd0) & (p_Result_114_fu_246_p3 == 1'd0)) | ((or_ln9_fu_283_p2 == 1'd0) & (p_Result_114_fu_246_p3 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln849_1_reg_368 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abst_in_fu_183_p1 = p_Result_115_fu_175_p3;

assign and_ln75_fu_207_p2 = (icmp_ln833_3_fu_201_p2 & grp_fu_121_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd8];

assign bitcast_ln112_1_fu_299_p1 = xor_ln112_fu_293_p2;

assign bitcast_ln112_fu_289_p1 = ap_phi_mux_resultf_4_phi_fu_74_p10;

assign bitcast_ln84_fu_231_p1 = xor_ln84_reg_373;

assign bitcast_ln95_1_fu_320_p1 = xor_ln95_reg_409;

assign bitcast_ln95_fu_310_p1 = expx_reg_58;

assign grp_exp_generic_double_s_fu_87_ap_start = grp_exp_generic_double_s_fu_87_ap_start_reg;

assign grp_fu_116_p0 = p_Result_115_fu_175_p3;

assign grp_fu_121_p2 = ((tmp_V_29_fu_166_p1 == 52'd0) ? 1'b1 : 1'b0);

assign grp_fu_126_p2 = ((tmp_V_30_fu_254_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_265_p2 = ((tmp_V_30_fu_254_p4 > 11'd996) ? 1'b1 : 1'b0);

assign icmp_ln833_3_fu_201_p2 = ((tmp_V_fu_156_p4 == 11'd968) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_189_p2 = ((tmp_V_fu_156_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln849_1_fu_221_p2 = ((tmp_V_reg_329 < 11'd1023) ? 1'b1 : 1'b0);

assign icmp_ln849_fu_195_p2 = ((tmp_V_fu_156_p4 < 11'd968) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_277_p2 = ((tmp_V_30_fu_254_p4 > 11'd995) ? 1'b1 : 1'b0);

assign or_ln10_fu_271_p2 = (icmp_ln10_fu_265_p2 | grp_fu_126_p2);

assign or_ln9_fu_283_p2 = (icmp_ln9_fu_277_p2 | grp_fu_126_p2);

assign p_Result_114_fu_246_p3 = p_Val2_143_fu_242_p1[32'd63];

assign p_Result_115_fu_175_p3 = {{1'd0}, {trunc_ln368_fu_171_p1}};

assign p_Val2_143_fu_242_p1 = x_2_fu_235_p3;

assign p_Val2_s_fu_144_p1 = t_in;

assign select_ln67_fu_213_p3 = ((grp_fu_121_p2[0:0] === 1'b1) ? 64'd4607182418800017408 : 64'd9223372036854775807);

assign select_ln775_fu_303_p3 = ((p_Result_s_reg_324[0:0] === 1'b1) ? bitcast_ln112_1_fu_299_p1 : ap_phi_mux_resultf_4_phi_fu_74_p10);

assign tmp_V_29_fu_166_p1 = p_Val2_s_fu_144_p1[51:0];

assign tmp_V_30_fu_254_p4 = {{p_Val2_143_fu_242_p1[62:52]}};

assign tmp_V_fu_156_p4 = {{p_Val2_s_fu_144_p1[62:52]}};

assign trunc_ln368_fu_171_p1 = p_Val2_s_fu_144_p1[62:0];

assign x_2_fu_235_p3 = ((icmp_ln849_1_reg_368[0:0] === 1'b1) ? reg_131 : reg_131);

assign xor_ln112_fu_293_p2 = (bitcast_ln112_fu_289_p1 ^ 64'd9223372036854775808);

assign xor_ln84_fu_226_p2 = (p_Result_115_reg_334 ^ 64'd9223372036854775808);

assign xor_ln95_fu_314_p2 = (bitcast_ln95_fu_310_p1 ^ 64'd9223372036854775808);

always @ (posedge ap_clk) begin
    p_Result_115_reg_334[63] <= 1'b0;
    abst_in_reg_339[63] <= 1'b0;
end

endmodule //generic_tanh_double_s
