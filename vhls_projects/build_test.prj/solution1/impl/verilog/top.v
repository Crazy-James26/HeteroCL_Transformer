// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.653571,HLS_SYN_LAT=221,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=71,HLS_SYN_LUT=672,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_0_0,
        v0_0_1,
        v0_0_2,
        v0_0_3,
        v0_0_4,
        v0_0_5,
        v0_0_6,
        v0_0_7,
        v0_0_8,
        v0_0_9,
        v0_1_0,
        v0_1_1,
        v0_1_2,
        v0_1_3,
        v0_1_4,
        v0_1_5,
        v0_1_6,
        v0_1_7,
        v0_1_8,
        v0_1_9,
        v0_2_0,
        v0_2_1,
        v0_2_2,
        v0_2_3,
        v0_2_4,
        v0_2_5,
        v0_2_6,
        v0_2_7,
        v0_2_8,
        v0_2_9,
        v0_3_0,
        v0_3_1,
        v0_3_2,
        v0_3_3,
        v0_3_4,
        v0_3_5,
        v0_3_6,
        v0_3_7,
        v0_3_8,
        v0_3_9,
        v0_4_0,
        v0_4_1,
        v0_4_2,
        v0_4_3,
        v0_4_4,
        v0_4_5,
        v0_4_6,
        v0_4_7,
        v0_4_8,
        v0_4_9,
        v0_5_0,
        v0_5_1,
        v0_5_2,
        v0_5_3,
        v0_5_4,
        v0_5_5,
        v0_5_6,
        v0_5_7,
        v0_5_8,
        v0_5_9,
        v0_6_0,
        v0_6_1,
        v0_6_2,
        v0_6_3,
        v0_6_4,
        v0_6_5,
        v0_6_6,
        v0_6_7,
        v0_6_8,
        v0_6_9,
        v0_7_0,
        v0_7_1,
        v0_7_2,
        v0_7_3,
        v0_7_4,
        v0_7_5,
        v0_7_6,
        v0_7_7,
        v0_7_8,
        v0_7_9,
        v0_8_0,
        v0_8_1,
        v0_8_2,
        v0_8_3,
        v0_8_4,
        v0_8_5,
        v0_8_6,
        v0_8_7,
        v0_8_8,
        v0_8_9,
        v0_9_0,
        v0_9_1,
        v0_9_2,
        v0_9_3,
        v0_9_4,
        v0_9_5,
        v0_9_6,
        v0_9_7,
        v0_9_8,
        v0_9_9,
        v1_address0,
        v1_ce0,
        v1_we0,
        v1_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] v0_0_0;
input  [31:0] v0_0_1;
input  [31:0] v0_0_2;
input  [31:0] v0_0_3;
input  [31:0] v0_0_4;
input  [31:0] v0_0_5;
input  [31:0] v0_0_6;
input  [31:0] v0_0_7;
input  [31:0] v0_0_8;
input  [31:0] v0_0_9;
input  [31:0] v0_1_0;
input  [31:0] v0_1_1;
input  [31:0] v0_1_2;
input  [31:0] v0_1_3;
input  [31:0] v0_1_4;
input  [31:0] v0_1_5;
input  [31:0] v0_1_6;
input  [31:0] v0_1_7;
input  [31:0] v0_1_8;
input  [31:0] v0_1_9;
input  [31:0] v0_2_0;
input  [31:0] v0_2_1;
input  [31:0] v0_2_2;
input  [31:0] v0_2_3;
input  [31:0] v0_2_4;
input  [31:0] v0_2_5;
input  [31:0] v0_2_6;
input  [31:0] v0_2_7;
input  [31:0] v0_2_8;
input  [31:0] v0_2_9;
input  [31:0] v0_3_0;
input  [31:0] v0_3_1;
input  [31:0] v0_3_2;
input  [31:0] v0_3_3;
input  [31:0] v0_3_4;
input  [31:0] v0_3_5;
input  [31:0] v0_3_6;
input  [31:0] v0_3_7;
input  [31:0] v0_3_8;
input  [31:0] v0_3_9;
input  [31:0] v0_4_0;
input  [31:0] v0_4_1;
input  [31:0] v0_4_2;
input  [31:0] v0_4_3;
input  [31:0] v0_4_4;
input  [31:0] v0_4_5;
input  [31:0] v0_4_6;
input  [31:0] v0_4_7;
input  [31:0] v0_4_8;
input  [31:0] v0_4_9;
input  [31:0] v0_5_0;
input  [31:0] v0_5_1;
input  [31:0] v0_5_2;
input  [31:0] v0_5_3;
input  [31:0] v0_5_4;
input  [31:0] v0_5_5;
input  [31:0] v0_5_6;
input  [31:0] v0_5_7;
input  [31:0] v0_5_8;
input  [31:0] v0_5_9;
input  [31:0] v0_6_0;
input  [31:0] v0_6_1;
input  [31:0] v0_6_2;
input  [31:0] v0_6_3;
input  [31:0] v0_6_4;
input  [31:0] v0_6_5;
input  [31:0] v0_6_6;
input  [31:0] v0_6_7;
input  [31:0] v0_6_8;
input  [31:0] v0_6_9;
input  [31:0] v0_7_0;
input  [31:0] v0_7_1;
input  [31:0] v0_7_2;
input  [31:0] v0_7_3;
input  [31:0] v0_7_4;
input  [31:0] v0_7_5;
input  [31:0] v0_7_6;
input  [31:0] v0_7_7;
input  [31:0] v0_7_8;
input  [31:0] v0_7_9;
input  [31:0] v0_8_0;
input  [31:0] v0_8_1;
input  [31:0] v0_8_2;
input  [31:0] v0_8_3;
input  [31:0] v0_8_4;
input  [31:0] v0_8_5;
input  [31:0] v0_8_6;
input  [31:0] v0_8_7;
input  [31:0] v0_8_8;
input  [31:0] v0_8_9;
input  [31:0] v0_9_0;
input  [31:0] v0_9_1;
input  [31:0] v0_9_2;
input  [31:0] v0_9_3;
input  [31:0] v0_9_4;
input  [31:0] v0_9_5;
input  [31:0] v0_9_6;
input  [31:0] v0_9_7;
input  [31:0] v0_9_8;
input  [31:0] v0_9_9;
output  [3:0] v1_address0;
output   v1_ce0;
output   v1_we0;
output  [31:0] v1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v1_ce0;
reg v1_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] y_fu_898_p2;
reg   [3:0] y_reg_1172;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln28_fu_904_p1;
reg   [63:0] zext_ln28_reg_1177;
wire   [0:0] icmp_ln23_fu_892_p2;
wire   [6:0] shl_ln_fu_908_p3;
reg   [6:0] shl_ln_reg_1182;
wire   [5:0] zext_ln28_1_fu_924_p1;
reg   [5:0] zext_ln28_1_reg_1187;
wire   [3:0] r_fu_934_p2;
reg   [3:0] r_reg_1195;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln28_fu_953_p2;
reg   [6:0] add_ln28_reg_1200;
wire   [0:0] icmp_ln26_fu_928_p2;
wire   [31:0] v10_fu_1163_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] y_0_reg_857;
reg   [31:0] v6_reg_868;
reg   [3:0] r_0_reg_881;
wire   [4:0] shl_ln28_1_fu_916_p3;
wire   [5:0] zext_ln28_2_fu_940_p1;
wire   [5:0] add_ln28_1_fu_944_p2;
wire   [6:0] zext_ln28_3_fu_949_p1;
wire   [31:0] v5_fu_958_p102;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

top_mux_1007_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 32 ),
    .din65_WIDTH( 32 ),
    .din66_WIDTH( 32 ),
    .din67_WIDTH( 32 ),
    .din68_WIDTH( 32 ),
    .din69_WIDTH( 32 ),
    .din70_WIDTH( 32 ),
    .din71_WIDTH( 32 ),
    .din72_WIDTH( 32 ),
    .din73_WIDTH( 32 ),
    .din74_WIDTH( 32 ),
    .din75_WIDTH( 32 ),
    .din76_WIDTH( 32 ),
    .din77_WIDTH( 32 ),
    .din78_WIDTH( 32 ),
    .din79_WIDTH( 32 ),
    .din80_WIDTH( 32 ),
    .din81_WIDTH( 32 ),
    .din82_WIDTH( 32 ),
    .din83_WIDTH( 32 ),
    .din84_WIDTH( 32 ),
    .din85_WIDTH( 32 ),
    .din86_WIDTH( 32 ),
    .din87_WIDTH( 32 ),
    .din88_WIDTH( 32 ),
    .din89_WIDTH( 32 ),
    .din90_WIDTH( 32 ),
    .din91_WIDTH( 32 ),
    .din92_WIDTH( 32 ),
    .din93_WIDTH( 32 ),
    .din94_WIDTH( 32 ),
    .din95_WIDTH( 32 ),
    .din96_WIDTH( 32 ),
    .din97_WIDTH( 32 ),
    .din98_WIDTH( 32 ),
    .din99_WIDTH( 32 ),
    .din100_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
top_mux_1007_32_1_1_U1(
    .din0(v0_0_0),
    .din1(v0_0_1),
    .din2(v0_0_2),
    .din3(v0_0_3),
    .din4(v0_0_4),
    .din5(v0_0_5),
    .din6(v0_0_6),
    .din7(v0_0_7),
    .din8(v0_0_8),
    .din9(v0_0_9),
    .din10(v0_1_0),
    .din11(v0_1_1),
    .din12(v0_1_2),
    .din13(v0_1_3),
    .din14(v0_1_4),
    .din15(v0_1_5),
    .din16(v0_1_6),
    .din17(v0_1_7),
    .din18(v0_1_8),
    .din19(v0_1_9),
    .din20(v0_2_0),
    .din21(v0_2_1),
    .din22(v0_2_2),
    .din23(v0_2_3),
    .din24(v0_2_4),
    .din25(v0_2_5),
    .din26(v0_2_6),
    .din27(v0_2_7),
    .din28(v0_2_8),
    .din29(v0_2_9),
    .din30(v0_3_0),
    .din31(v0_3_1),
    .din32(v0_3_2),
    .din33(v0_3_3),
    .din34(v0_3_4),
    .din35(v0_3_5),
    .din36(v0_3_6),
    .din37(v0_3_7),
    .din38(v0_3_8),
    .din39(v0_3_9),
    .din40(v0_4_0),
    .din41(v0_4_1),
    .din42(v0_4_2),
    .din43(v0_4_3),
    .din44(v0_4_4),
    .din45(v0_4_5),
    .din46(v0_4_6),
    .din47(v0_4_7),
    .din48(v0_4_8),
    .din49(v0_4_9),
    .din50(v0_5_0),
    .din51(v0_5_1),
    .din52(v0_5_2),
    .din53(v0_5_3),
    .din54(v0_5_4),
    .din55(v0_5_5),
    .din56(v0_5_6),
    .din57(v0_5_7),
    .din58(v0_5_8),
    .din59(v0_5_9),
    .din60(v0_6_0),
    .din61(v0_6_1),
    .din62(v0_6_2),
    .din63(v0_6_3),
    .din64(v0_6_4),
    .din65(v0_6_5),
    .din66(v0_6_6),
    .din67(v0_6_7),
    .din68(v0_6_8),
    .din69(v0_6_9),
    .din70(v0_7_0),
    .din71(v0_7_1),
    .din72(v0_7_2),
    .din73(v0_7_3),
    .din74(v0_7_4),
    .din75(v0_7_5),
    .din76(v0_7_6),
    .din77(v0_7_7),
    .din78(v0_7_8),
    .din79(v0_7_9),
    .din80(v0_8_0),
    .din81(v0_8_1),
    .din82(v0_8_2),
    .din83(v0_8_3),
    .din84(v0_8_4),
    .din85(v0_8_5),
    .din86(v0_8_6),
    .din87(v0_8_7),
    .din88(v0_8_8),
    .din89(v0_8_9),
    .din90(v0_9_0),
    .din91(v0_9_1),
    .din92(v0_9_2),
    .din93(v0_9_3),
    .din94(v0_9_4),
    .din95(v0_9_5),
    .din96(v0_9_6),
    .din97(v0_9_7),
    .din98(v0_9_8),
    .din99(v0_9_9),
    .din100(add_ln28_reg_1200),
    .dout(v5_fu_958_p102)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_reg_881 <= r_reg_1195;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd0))) begin
        r_0_reg_881 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v6_reg_868 <= v10_fu_1163_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd0))) begin
        v6_reg_868 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_928_p2 == 1'd1))) begin
        y_0_reg_857 <= y_reg_1172;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_857 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_928_p2 == 1'd0))) begin
        add_ln28_reg_1200 <= add_ln28_fu_953_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_1195 <= r_fu_934_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd0))) begin
        shl_ln_reg_1182[6 : 3] <= shl_ln_fu_908_p3[6 : 3];
        zext_ln28_1_reg_1187[4 : 1] <= zext_ln28_1_fu_924_p1[4 : 1];
        zext_ln28_reg_1177[3 : 0] <= zext_ln28_fu_904_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_1172 <= y_fu_898_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_928_p2 == 1'd1))) begin
        v1_we0 = 1'b1;
    end else begin
        v1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_892_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_928_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_944_p2 = (zext_ln28_1_reg_1187 + zext_ln28_2_fu_940_p1);

assign add_ln28_fu_953_p2 = (zext_ln28_3_fu_949_p1 + shl_ln_reg_1182);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign icmp_ln23_fu_892_p2 = ((y_0_reg_857 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_928_p2 = ((r_0_reg_881 == 4'd10) ? 1'b1 : 1'b0);

assign r_fu_934_p2 = (r_0_reg_881 + 4'd1);

assign shl_ln28_1_fu_916_p3 = {{y_0_reg_857}, {1'd0}};

assign shl_ln_fu_908_p3 = {{y_0_reg_857}, {3'd0}};

assign v10_fu_1163_p2 = (v5_fu_958_p102 + v6_reg_868);

assign v1_address0 = zext_ln28_reg_1177;

assign v1_d0 = v6_reg_868;

assign y_fu_898_p2 = (y_0_reg_857 + 4'd1);

assign zext_ln28_1_fu_924_p1 = shl_ln28_1_fu_916_p3;

assign zext_ln28_2_fu_940_p1 = r_0_reg_881;

assign zext_ln28_3_fu_949_p1 = add_ln28_1_fu_944_p2;

assign zext_ln28_fu_904_p1 = y_0_reg_857;

always @ (posedge ap_clk) begin
    zext_ln28_reg_1177[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_1182[2:0] <= 3'b000;
    zext_ln28_1_reg_1187[0] <= 1'b0;
    zext_ln28_1_reg_1187[5] <= 1'b0;
end

endmodule //top
