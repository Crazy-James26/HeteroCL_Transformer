// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_HH_
#define _top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "top_mux_1007_32_1_1.h"

namespace ap_rtl {

struct top : public sc_module {
    // Port declarations 110
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > v0_0_0;
    sc_in< sc_lv<32> > v0_0_1;
    sc_in< sc_lv<32> > v0_0_2;
    sc_in< sc_lv<32> > v0_0_3;
    sc_in< sc_lv<32> > v0_0_4;
    sc_in< sc_lv<32> > v0_0_5;
    sc_in< sc_lv<32> > v0_0_6;
    sc_in< sc_lv<32> > v0_0_7;
    sc_in< sc_lv<32> > v0_0_8;
    sc_in< sc_lv<32> > v0_0_9;
    sc_in< sc_lv<32> > v0_1_0;
    sc_in< sc_lv<32> > v0_1_1;
    sc_in< sc_lv<32> > v0_1_2;
    sc_in< sc_lv<32> > v0_1_3;
    sc_in< sc_lv<32> > v0_1_4;
    sc_in< sc_lv<32> > v0_1_5;
    sc_in< sc_lv<32> > v0_1_6;
    sc_in< sc_lv<32> > v0_1_7;
    sc_in< sc_lv<32> > v0_1_8;
    sc_in< sc_lv<32> > v0_1_9;
    sc_in< sc_lv<32> > v0_2_0;
    sc_in< sc_lv<32> > v0_2_1;
    sc_in< sc_lv<32> > v0_2_2;
    sc_in< sc_lv<32> > v0_2_3;
    sc_in< sc_lv<32> > v0_2_4;
    sc_in< sc_lv<32> > v0_2_5;
    sc_in< sc_lv<32> > v0_2_6;
    sc_in< sc_lv<32> > v0_2_7;
    sc_in< sc_lv<32> > v0_2_8;
    sc_in< sc_lv<32> > v0_2_9;
    sc_in< sc_lv<32> > v0_3_0;
    sc_in< sc_lv<32> > v0_3_1;
    sc_in< sc_lv<32> > v0_3_2;
    sc_in< sc_lv<32> > v0_3_3;
    sc_in< sc_lv<32> > v0_3_4;
    sc_in< sc_lv<32> > v0_3_5;
    sc_in< sc_lv<32> > v0_3_6;
    sc_in< sc_lv<32> > v0_3_7;
    sc_in< sc_lv<32> > v0_3_8;
    sc_in< sc_lv<32> > v0_3_9;
    sc_in< sc_lv<32> > v0_4_0;
    sc_in< sc_lv<32> > v0_4_1;
    sc_in< sc_lv<32> > v0_4_2;
    sc_in< sc_lv<32> > v0_4_3;
    sc_in< sc_lv<32> > v0_4_4;
    sc_in< sc_lv<32> > v0_4_5;
    sc_in< sc_lv<32> > v0_4_6;
    sc_in< sc_lv<32> > v0_4_7;
    sc_in< sc_lv<32> > v0_4_8;
    sc_in< sc_lv<32> > v0_4_9;
    sc_in< sc_lv<32> > v0_5_0;
    sc_in< sc_lv<32> > v0_5_1;
    sc_in< sc_lv<32> > v0_5_2;
    sc_in< sc_lv<32> > v0_5_3;
    sc_in< sc_lv<32> > v0_5_4;
    sc_in< sc_lv<32> > v0_5_5;
    sc_in< sc_lv<32> > v0_5_6;
    sc_in< sc_lv<32> > v0_5_7;
    sc_in< sc_lv<32> > v0_5_8;
    sc_in< sc_lv<32> > v0_5_9;
    sc_in< sc_lv<32> > v0_6_0;
    sc_in< sc_lv<32> > v0_6_1;
    sc_in< sc_lv<32> > v0_6_2;
    sc_in< sc_lv<32> > v0_6_3;
    sc_in< sc_lv<32> > v0_6_4;
    sc_in< sc_lv<32> > v0_6_5;
    sc_in< sc_lv<32> > v0_6_6;
    sc_in< sc_lv<32> > v0_6_7;
    sc_in< sc_lv<32> > v0_6_8;
    sc_in< sc_lv<32> > v0_6_9;
    sc_in< sc_lv<32> > v0_7_0;
    sc_in< sc_lv<32> > v0_7_1;
    sc_in< sc_lv<32> > v0_7_2;
    sc_in< sc_lv<32> > v0_7_3;
    sc_in< sc_lv<32> > v0_7_4;
    sc_in< sc_lv<32> > v0_7_5;
    sc_in< sc_lv<32> > v0_7_6;
    sc_in< sc_lv<32> > v0_7_7;
    sc_in< sc_lv<32> > v0_7_8;
    sc_in< sc_lv<32> > v0_7_9;
    sc_in< sc_lv<32> > v0_8_0;
    sc_in< sc_lv<32> > v0_8_1;
    sc_in< sc_lv<32> > v0_8_2;
    sc_in< sc_lv<32> > v0_8_3;
    sc_in< sc_lv<32> > v0_8_4;
    sc_in< sc_lv<32> > v0_8_5;
    sc_in< sc_lv<32> > v0_8_6;
    sc_in< sc_lv<32> > v0_8_7;
    sc_in< sc_lv<32> > v0_8_8;
    sc_in< sc_lv<32> > v0_8_9;
    sc_in< sc_lv<32> > v0_9_0;
    sc_in< sc_lv<32> > v0_9_1;
    sc_in< sc_lv<32> > v0_9_2;
    sc_in< sc_lv<32> > v0_9_3;
    sc_in< sc_lv<32> > v0_9_4;
    sc_in< sc_lv<32> > v0_9_5;
    sc_in< sc_lv<32> > v0_9_6;
    sc_in< sc_lv<32> > v0_9_7;
    sc_in< sc_lv<32> > v0_9_8;
    sc_in< sc_lv<32> > v0_9_9;
    sc_out< sc_lv<4> > v1_address0;
    sc_out< sc_logic > v1_ce0;
    sc_out< sc_logic > v1_we0;
    sc_out< sc_lv<32> > v1_d0;


    // Module declarations
    top(sc_module_name name);
    SC_HAS_PROCESS(top);

    ~top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    top_mux_1007_32_1_1<1,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,7,32>* top_mux_1007_32_1_1_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > y_fu_898_p2;
    sc_signal< sc_lv<4> > y_reg_1172;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln28_fu_904_p1;
    sc_signal< sc_lv<64> > zext_ln28_reg_1177;
    sc_signal< sc_lv<1> > icmp_ln23_fu_892_p2;
    sc_signal< sc_lv<7> > shl_ln_fu_908_p3;
    sc_signal< sc_lv<7> > shl_ln_reg_1182;
    sc_signal< sc_lv<6> > zext_ln28_1_fu_924_p1;
    sc_signal< sc_lv<6> > zext_ln28_1_reg_1187;
    sc_signal< sc_lv<4> > r_fu_934_p2;
    sc_signal< sc_lv<4> > r_reg_1195;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > add_ln28_fu_953_p2;
    sc_signal< sc_lv<7> > add_ln28_reg_1200;
    sc_signal< sc_lv<1> > icmp_ln26_fu_928_p2;
    sc_signal< sc_lv<32> > v10_fu_1163_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > y_0_reg_857;
    sc_signal< sc_lv<32> > v6_reg_868;
    sc_signal< sc_lv<4> > r_0_reg_881;
    sc_signal< sc_lv<5> > shl_ln28_1_fu_916_p3;
    sc_signal< sc_lv<6> > zext_ln28_2_fu_940_p1;
    sc_signal< sc_lv<6> > add_ln28_1_fu_944_p2;
    sc_signal< sc_lv<7> > zext_ln28_3_fu_949_p1;
    sc_signal< sc_lv<32> > v5_fu_958_p102;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln28_1_fu_944_p2();
    void thread_add_ln28_fu_953_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_icmp_ln23_fu_892_p2();
    void thread_icmp_ln26_fu_928_p2();
    void thread_r_fu_934_p2();
    void thread_shl_ln28_1_fu_916_p3();
    void thread_shl_ln_fu_908_p3();
    void thread_v10_fu_1163_p2();
    void thread_v1_address0();
    void thread_v1_ce0();
    void thread_v1_d0();
    void thread_v1_we0();
    void thread_y_fu_898_p2();
    void thread_zext_ln28_1_fu_924_p1();
    void thread_zext_ln28_2_fu_940_p1();
    void thread_zext_ln28_3_fu_949_p1();
    void thread_zext_ln28_fu_904_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
