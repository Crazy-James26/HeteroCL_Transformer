// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=184191026,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=5,HLS_SYN_FF=927,HLS_SYN_LUT=1467,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_q0,
        v4_address0,
        v4_ce0,
        v4_q0,
        v5_address0,
        v5_ce0,
        v5_we0,
        v5_d0
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [9:0] v3_address0;
output   v3_ce0;
input  [31:0] v3_q0;
output  [9:0] v4_address0;
output   v4_ce0;
input  [31:0] v4_q0;
output  [13:0] v5_address0;
output   v5_ce0;
output   v5_we0;
output  [31:0] v5_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v0_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v4_ce0;
reg v5_ce0;
reg v5_we0;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] reg_271;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_259_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state38;
reg   [31:0] reg_282;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state44;
wire   [3:0] x_fu_294_p2;
reg   [3:0] x_reg_573;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln32_fu_324_p2;
reg   [14:0] sub_ln32_reg_578;
wire   [0:0] icmp_ln25_fu_288_p2;
wire   [9:0] y_fu_336_p2;
reg   [9:0] y_reg_587;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln33_fu_342_p1;
reg   [63:0] zext_ln33_reg_592;
wire   [0:0] icmp_ln26_fu_330_p2;
wire   [20:0] sub_ln33_fu_374_p2;
reg   [20:0] sub_ln33_reg_597;
reg   [13:0] B_outp_addr_reg_602;
wire   [9:0] r_fu_396_p2;
reg   [9:0] r_reg_610;
wire    ap_CS_fsm_state4;
wire   [14:0] add_ln32_fu_410_p2;
reg   [14:0] add_ln32_reg_615;
wire   [0:0] icmp_ln30_fu_390_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] v12_reg_635;
wire    ap_CS_fsm_state7;
reg   [31:0] v13_reg_640;
reg   [31:0] v18_reg_645;
wire    ap_CS_fsm_state17;
wire   [3:0] x_0_fu_435_p2;
reg   [3:0] x_0_reg_653;
wire    ap_CS_fsm_state24;
wire   [14:0] sub_ln64_fu_465_p2;
reg   [14:0] sub_ln64_reg_658;
wire   [0:0] icmp_ln46_fu_429_p2;
wire   [9:0] y_0_fu_477_p2;
reg   [9:0] y_0_reg_667;
wire    ap_CS_fsm_state25;
wire   [63:0] zext_ln54_fu_483_p1;
reg   [63:0] zext_ln54_reg_672;
wire   [0:0] icmp_ln47_fu_471_p2;
wire   [20:0] sub_ln54_fu_515_p2;
reg   [20:0] sub_ln54_reg_677;
reg   [13:0] v5_addr_reg_682;
wire   [9:0] r_0_fu_537_p2;
reg   [9:0] r_0_reg_690;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln51_fu_531_p2;
wire   [14:0] add_ln53_fu_561_p2;
reg   [14:0] add_ln53_reg_700;
wire    ap_CS_fsm_state28;
wire   [31:0] B_outp_q0;
reg   [31:0] v25_reg_715;
wire    ap_CS_fsm_state29;
reg   [31:0] v26_reg_720;
reg   [31:0] v31_reg_725;
wire    ap_CS_fsm_state39;
reg   [13:0] B_outp_address0;
reg    B_outp_ce0;
reg    B_outp_we0;
reg   [3:0] x_0_3_reg_169;
reg   [9:0] y_0_4_reg_180;
wire    ap_CS_fsm_state23;
reg   [31:0] v15_reg_191;
reg   [9:0] r_0_6_reg_203;
reg   [3:0] x_0_0_reg_214;
reg   [9:0] y_0_0_reg_225;
wire    ap_CS_fsm_state45;
reg   [31:0] v28_reg_236;
reg   [9:0] r_0_0_reg_248;
wire  signed [63:0] sext_ln43_fu_385_p1;
wire  signed [63:0] sext_ln33_fu_420_p1;
wire  signed [63:0] sext_ln32_fu_425_p1;
wire  signed [63:0] sext_ln64_fu_526_p1;
wire  signed [63:0] sext_ln54_fu_556_p1;
wire  signed [63:0] sext_ln53_fu_566_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state27;
reg   [31:0] grp_fu_259_p0;
reg   [31:0] grp_fu_259_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state40;
reg   [31:0] grp_fu_267_p0;
reg   [31:0] grp_fu_267_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state30;
wire   [13:0] tmp_4_fu_300_p3;
wire   [11:0] tmp_5_fu_312_p3;
wire   [14:0] zext_ln32_fu_308_p1;
wire   [14:0] zext_ln32_1_fu_320_p1;
wire   [19:0] tmp_8_fu_350_p3;
wire   [17:0] tmp_9_fu_362_p3;
wire   [20:0] zext_ln33_2_fu_358_p1;
wire   [20:0] zext_ln33_3_fu_370_p1;
wire   [14:0] zext_ln33_1_fu_346_p1;
wire   [14:0] add_ln43_fu_380_p2;
wire   [14:0] zext_ln32_3_fu_406_p1;
wire   [20:0] zext_ln32_2_fu_402_p1;
wire   [20:0] add_ln33_fu_415_p2;
wire   [13:0] tmp_6_fu_441_p3;
wire   [11:0] tmp_7_fu_453_p3;
wire   [14:0] zext_ln64_fu_449_p1;
wire   [14:0] zext_ln64_1_fu_461_p1;
wire   [19:0] tmp_s_fu_491_p3;
wire   [17:0] tmp_10_fu_503_p3;
wire   [20:0] zext_ln54_2_fu_499_p1;
wire   [20:0] zext_ln54_3_fu_511_p1;
wire   [14:0] zext_ln54_1_fu_487_p1;
wire   [14:0] add_ln64_fu_521_p2;
wire   [20:0] zext_ln54_5_fu_547_p1;
wire   [20:0] add_ln54_fu_551_p2;
wire   [14:0] zext_ln54_4_fu_543_p1;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
end

top_B_outp #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_outp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_outp_address0),
    .ce0(B_outp_ce0),
    .we0(B_outp_we0),
    .d0(reg_282),
    .q0(B_outp_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_259_p0),
    .din1(grp_fu_259_p1),
    .ce(1'b1),
    .dout(grp_fu_259_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        r_0_0_reg_248 <= r_0_reg_690;
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln47_fu_471_p2 == 1'd0))) begin
        r_0_0_reg_248 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_0_6_reg_203 <= r_reg_610;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        r_0_6_reg_203 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v15_reg_191 <= grp_fu_259_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        v15_reg_191 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        v28_reg_236 <= grp_fu_259_p2;
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln47_fu_471_p2 == 1'd0))) begin
        v28_reg_236 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_288_p2 == 1'd1))) begin
        x_0_0_reg_214 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln47_fu_471_p2 == 1'd1))) begin
        x_0_0_reg_214 <= x_0_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd1))) begin
        x_0_3_reg_169 <= x_reg_573;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_3_reg_169 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        y_0_0_reg_225 <= y_0_reg_667;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln46_fu_429_p2 == 1'd0))) begin
        y_0_0_reg_225 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        y_0_4_reg_180 <= y_reg_587;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_288_p2 == 1'd0))) begin
        y_0_4_reg_180 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        B_outp_addr_reg_602 <= sext_ln43_fu_385_p1;
        sub_ln33_reg_597[20 : 8] <= sub_ln33_fu_374_p2[20 : 8];
        zext_ln33_reg_592[9 : 0] <= zext_ln33_fu_342_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_390_p2 == 1'd0))) begin
        add_ln32_reg_615 <= add_ln32_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln51_fu_531_p2 == 1'd0))) begin
        add_ln53_reg_700 <= add_ln53_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        r_0_reg_690 <= r_0_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_reg_610 <= r_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_271 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_282 <= grp_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_288_p2 == 1'd0))) begin
        sub_ln32_reg_578[14 : 8] <= sub_ln32_fu_324_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln47_fu_471_p2 == 1'd0))) begin
        sub_ln54_reg_677[20 : 8] <= sub_ln54_fu_515_p2[20 : 8];
        v5_addr_reg_682 <= sext_ln64_fu_526_p1;
        zext_ln54_reg_672[9 : 0] <= zext_ln54_fu_483_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln46_fu_429_p2 == 1'd0))) begin
        sub_ln64_reg_658[14 : 8] <= sub_ln64_fu_465_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v12_reg_635 <= v0_q0;
        v13_reg_640 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        v18_reg_645 <= v3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        v25_reg_715 <= B_outp_q0;
        v26_reg_720 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        v31_reg_725 <= v4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        x_0_reg_653 <= x_0_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_573 <= x_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        y_0_reg_667 <= y_0_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_587 <= y_fu_336_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        B_outp_address0 = sext_ln53_fu_566_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        B_outp_address0 = B_outp_addr_reg_602;
    end else begin
        B_outp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state28))) begin
        B_outp_ce0 = 1'b1;
    end else begin
        B_outp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        B_outp_we0 = 1'b1;
    end else begin
        B_outp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln46_fu_429_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln46_fu_429_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_259_p0 = v28_reg_236;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_259_p0 = v15_reg_191;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_259_p0 = reg_271;
    end else begin
        grp_fu_259_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_259_p1 = v31_reg_725;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_259_p1 = v28_reg_236;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_259_p1 = v18_reg_645;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_259_p1 = v15_reg_191;
    end else begin
        grp_fu_259_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_267_p0 = v25_reg_715;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_267_p0 = v12_reg_635;
    end else begin
        grp_fu_267_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_267_p1 = v26_reg_720;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_267_p1 = v13_reg_640;
    end else begin
        grp_fu_267_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        v4_ce0 = 1'b1;
    end else begin
        v4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        v5_ce0 = 1'b1;
    end else begin
        v5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        v5_we0 = 1'b1;
    end else begin
        v5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_288_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln46_fu_429_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln47_fu_471_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln51_fu_531_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_410_p2 = (sub_ln32_reg_578 + zext_ln32_3_fu_406_p1);

assign add_ln33_fu_415_p2 = (sub_ln33_reg_597 + zext_ln32_2_fu_402_p1);

assign add_ln43_fu_380_p2 = (sub_ln32_reg_578 + zext_ln33_1_fu_346_p1);

assign add_ln53_fu_561_p2 = (sub_ln64_reg_658 + zext_ln54_4_fu_543_p1);

assign add_ln54_fu_551_p2 = (sub_ln54_reg_677 + zext_ln54_5_fu_547_p1);

assign add_ln64_fu_521_p2 = (sub_ln64_reg_658 + zext_ln54_1_fu_487_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln25_fu_288_p2 = ((x_0_3_reg_169 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_330_p2 = ((y_0_4_reg_180 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_390_p2 = ((r_0_6_reg_203 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_429_p2 = ((x_0_0_reg_214 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_471_p2 = ((y_0_0_reg_225 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_531_p2 = ((r_0_0_reg_248 == 10'd768) ? 1'b1 : 1'b0);

assign r_0_fu_537_p2 = (r_0_0_reg_248 + 10'd1);

assign r_fu_396_p2 = (r_0_6_reg_203 + 10'd1);

assign sext_ln32_fu_425_p1 = $signed(add_ln32_reg_615);

assign sext_ln33_fu_420_p1 = $signed(add_ln33_fu_415_p2);

assign sext_ln43_fu_385_p1 = $signed(add_ln43_fu_380_p2);

assign sext_ln53_fu_566_p1 = $signed(add_ln53_reg_700);

assign sext_ln54_fu_556_p1 = $signed(add_ln54_fu_551_p2);

assign sext_ln64_fu_526_p1 = $signed(add_ln64_fu_521_p2);

assign sub_ln32_fu_324_p2 = (zext_ln32_fu_308_p1 - zext_ln32_1_fu_320_p1);

assign sub_ln33_fu_374_p2 = (zext_ln33_2_fu_358_p1 - zext_ln33_3_fu_370_p1);

assign sub_ln54_fu_515_p2 = (zext_ln54_2_fu_499_p1 - zext_ln54_3_fu_511_p1);

assign sub_ln64_fu_465_p2 = (zext_ln64_fu_449_p1 - zext_ln64_1_fu_461_p1);

assign tmp_10_fu_503_p3 = {{y_0_0_reg_225}, {8'd0}};

assign tmp_4_fu_300_p3 = {{x_0_3_reg_169}, {10'd0}};

assign tmp_5_fu_312_p3 = {{x_0_3_reg_169}, {8'd0}};

assign tmp_6_fu_441_p3 = {{x_0_0_reg_214}, {10'd0}};

assign tmp_7_fu_453_p3 = {{x_0_0_reg_214}, {8'd0}};

assign tmp_8_fu_350_p3 = {{y_0_4_reg_180}, {10'd0}};

assign tmp_9_fu_362_p3 = {{y_0_4_reg_180}, {8'd0}};

assign tmp_s_fu_491_p3 = {{y_0_0_reg_225}, {10'd0}};

assign v0_address0 = sext_ln32_fu_425_p1;

assign v1_address0 = sext_ln33_fu_420_p1;

assign v2_address0 = sext_ln54_fu_556_p1;

assign v3_address0 = zext_ln33_reg_592;

assign v4_address0 = zext_ln54_reg_672;

assign v5_address0 = v5_addr_reg_682;

assign v5_d0 = reg_282;

assign x_0_fu_435_p2 = (x_0_0_reg_214 + 4'd1);

assign x_fu_294_p2 = (x_0_3_reg_169 + 4'd1);

assign y_0_fu_477_p2 = (y_0_0_reg_225 + 10'd1);

assign y_fu_336_p2 = (y_0_4_reg_180 + 10'd1);

assign zext_ln32_1_fu_320_p1 = tmp_5_fu_312_p3;

assign zext_ln32_2_fu_402_p1 = r_0_6_reg_203;

assign zext_ln32_3_fu_406_p1 = r_0_6_reg_203;

assign zext_ln32_fu_308_p1 = tmp_4_fu_300_p3;

assign zext_ln33_1_fu_346_p1 = y_0_4_reg_180;

assign zext_ln33_2_fu_358_p1 = tmp_8_fu_350_p3;

assign zext_ln33_3_fu_370_p1 = tmp_9_fu_362_p3;

assign zext_ln33_fu_342_p1 = y_0_4_reg_180;

assign zext_ln54_1_fu_487_p1 = y_0_0_reg_225;

assign zext_ln54_2_fu_499_p1 = tmp_s_fu_491_p3;

assign zext_ln54_3_fu_511_p1 = tmp_10_fu_503_p3;

assign zext_ln54_4_fu_543_p1 = r_0_0_reg_248;

assign zext_ln54_5_fu_547_p1 = r_0_0_reg_248;

assign zext_ln54_fu_483_p1 = y_0_0_reg_225;

assign zext_ln64_1_fu_461_p1 = tmp_7_fu_453_p3;

assign zext_ln64_fu_449_p1 = tmp_6_fu_441_p3;

always @ (posedge ap_clk) begin
    sub_ln32_reg_578[7:0] <= 8'b00000000;
    zext_ln33_reg_592[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    sub_ln33_reg_597[7:0] <= 8'b00000000;
    sub_ln64_reg_658[7:0] <= 8'b00000000;
    zext_ln54_reg_672[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    sub_ln54_reg_677[7:0] <= 8'b00000000;
end

endmodule //top
