// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=184126514,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=5,HLS_SYN_FF=958,HLS_SYN_LUT=1523,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_0_address0,
        v0_0_ce0,
        v0_0_q0,
        v0_1_address0,
        v0_1_ce0,
        v0_1_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] v0_0_address0;
output   v0_0_ce0;
input  [31:0] v0_0_q0;
output  [12:0] v0_1_address0;
output   v0_1_ce0;
input  [31:0] v0_1_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] v0_0_address0;
reg v0_0_ce0;
reg[12:0] v0_1_address0;
reg v0_1_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v3_we0;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] reg_310;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] reg_315;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state37;
wire   [3:0] x_0_fu_327_p2;
reg   [3:0] x_0_reg_644;
wire    ap_CS_fsm_state2;
wire   [13:0] sub_ln33_fu_357_p2;
reg   [13:0] sub_ln33_reg_649;
wire   [0:0] icmp_ln26_fu_321_p2;
wire   [14:0] sub_ln42_fu_387_p2;
reg   [14:0] sub_ln42_reg_655;
wire   [9:0] y_0_fu_399_p2;
reg   [9:0] y_0_reg_663;
wire    ap_CS_fsm_state3;
wire   [20:0] sub_ln34_fu_433_p2;
reg   [20:0] sub_ln34_reg_668;
wire   [0:0] icmp_ln27_fu_393_p2;
reg   [13:0] B_addr_1_reg_674;
reg   [13:0] C_addr_1_reg_679;
wire   [9:0] r_fu_456_p2;
reg   [9:0] r_reg_687;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln31_fu_450_p2;
wire   [0:0] trunc_ln33_fu_476_p1;
reg   [0:0] trunc_ln33_reg_697;
wire    ap_CS_fsm_state5;
wire   [13:0] add_ln33_fu_494_p2;
reg   [13:0] add_ln33_reg_702;
wire    ap_CS_fsm_state6;
wire   [31:0] v11_fu_504_p3;
reg   [31:0] v11_reg_717;
wire    ap_CS_fsm_state7;
reg   [31:0] v12_reg_722;
wire   [9:0] r1_fu_517_p2;
reg   [9:0] r1_reg_730;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln45_fu_511_p2;
wire   [0:0] trunc_ln47_fu_537_p1;
reg   [0:0] trunc_ln47_reg_740;
wire   [13:0] add_ln47_fu_555_p2;
reg   [13:0] add_ln47_reg_745;
wire    ap_CS_fsm_state19;
wire   [31:0] v19_fu_565_p3;
reg   [31:0] v19_reg_760;
wire    ap_CS_fsm_state20;
reg   [31:0] v20_reg_765;
wire    ap_CS_fsm_state29;
wire   [3:0] x_1_fu_578_p2;
reg   [3:0] x_1_reg_778;
wire    ap_CS_fsm_state30;
wire   [14:0] sub_ln64_fu_608_p2;
reg   [14:0] sub_ln64_reg_783;
wire   [0:0] icmp_ln59_fu_572_p2;
wire   [9:0] y_1_fu_620_p2;
reg   [9:0] y_1_reg_791;
wire    ap_CS_fsm_state31;
wire  signed [63:0] sext_ln64_fu_635_p1;
reg  signed [63:0] sext_ln64_reg_796;
wire   [0:0] icmp_ln60_fu_614_p2;
wire   [31:0] B_q0;
reg   [31:0] v27_reg_811;
wire    ap_CS_fsm_state32;
wire   [31:0] C_q0;
reg   [31:0] v28_reg_816;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [13:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [3:0] x_0_0_reg_207;
reg   [9:0] y_0_0_reg_218;
reg   [9:0] r_0_reg_229;
reg   [31:0] v14_reg_241;
reg   [31:0] v22_reg_254;
reg   [9:0] r1_0_reg_267;
reg   [3:0] x_1_0_reg_278;
reg   [9:0] y_1_0_reg_289;
wire    ap_CS_fsm_state38;
wire  signed [63:0] sext_ln42_fu_444_p1;
wire  signed [63:0] sext_ln34_fu_471_p1;
wire  signed [63:0] sext_ln33_fu_499_p1;
wire  signed [63:0] sext_ln48_fu_532_p1;
wire  signed [63:0] sext_ln47_fu_560_p1;
wire    ap_CS_fsm_state18;
reg   [31:0] grp_fu_300_p0;
reg   [31:0] grp_fu_300_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_306_p0;
reg   [31:0] grp_fu_306_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state21;
wire   [12:0] tmp_3_fu_333_p3;
wire   [10:0] tmp_4_fu_345_p3;
wire   [13:0] zext_ln33_fu_341_p1;
wire   [13:0] zext_ln33_1_fu_353_p1;
wire   [13:0] tmp_5_fu_363_p3;
wire   [11:0] tmp_6_fu_375_p3;
wire   [14:0] zext_ln42_fu_371_p1;
wire   [14:0] zext_ln42_1_fu_383_p1;
wire   [19:0] tmp_9_fu_409_p3;
wire   [17:0] tmp_s_fu_421_p3;
wire   [20:0] zext_ln34_1_fu_417_p1;
wire   [20:0] zext_ln34_2_fu_429_p1;
wire   [14:0] zext_ln34_fu_405_p1;
wire   [14:0] add_ln42_fu_439_p2;
wire   [20:0] zext_ln34_3_fu_462_p1;
wire   [20:0] add_ln34_fu_466_p2;
wire   [8:0] tmp_10_fu_480_p4;
wire   [13:0] zext_ln33_2_fu_490_p1;
wire   [20:0] zext_ln48_fu_523_p1;
wire   [20:0] add_ln48_fu_527_p2;
wire   [8:0] tmp_11_fu_541_p4;
wire   [13:0] zext_ln47_fu_551_p1;
wire   [13:0] tmp_7_fu_584_p3;
wire   [11:0] tmp_8_fu_596_p3;
wire   [14:0] zext_ln64_fu_592_p1;
wire   [14:0] zext_ln64_1_fu_604_p1;
wire   [14:0] zext_ln64_2_fu_626_p1;
wire   [14:0] add_ln64_fu_630_p2;
reg   [37:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
end

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(v14_reg_241),
    .q0(B_q0)
);

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(v22_reg_254),
    .q0(C_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_300_p0),
    .din1(grp_fu_300_p1),
    .ce(1'b1),
    .dout(grp_fu_300_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        r1_0_reg_267 <= r1_reg_730;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln31_fu_450_p2 == 1'd1))) begin
        r1_0_reg_267 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_0_reg_229 <= r_reg_687;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_393_p2 == 1'd0))) begin
        r_0_reg_229 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v14_reg_241 <= grp_fu_300_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_393_p2 == 1'd0))) begin
        v14_reg_241 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        v22_reg_254 <= grp_fu_300_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln31_fu_450_p2 == 1'd1))) begin
        v22_reg_254 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_393_p2 == 1'd1))) begin
        x_0_0_reg_207 <= x_0_reg_644;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_0_reg_207 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_321_p2 == 1'd1))) begin
        x_1_0_reg_278 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln60_fu_614_p2 == 1'd1))) begin
        x_1_0_reg_278 <= x_1_reg_778;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_511_p2 == 1'd1))) begin
        y_0_0_reg_218 <= y_0_reg_663;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_321_p2 == 1'd0))) begin
        y_0_0_reg_218 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        y_1_0_reg_289 <= y_1_reg_791;
    end else if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln59_fu_572_p2 == 1'd0))) begin
        y_1_0_reg_289 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_393_p2 == 1'd0))) begin
        B_addr_1_reg_674 <= sext_ln42_fu_444_p1;
        C_addr_1_reg_679 <= sext_ln42_fu_444_p1;
        sub_ln34_reg_668[20 : 8] <= sub_ln34_fu_433_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln33_reg_702 <= add_ln33_fu_494_p2;
        trunc_ln33_reg_697 <= trunc_ln33_fu_476_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_511_p2 == 1'd0))) begin
        add_ln47_reg_745 <= add_ln47_fu_555_p2;
        trunc_ln47_reg_740 <= trunc_ln47_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        r1_reg_730 <= r1_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_reg_687 <= r_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_310 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_315 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln60_fu_614_p2 == 1'd0))) begin
        sext_ln64_reg_796 <= sext_ln64_fu_635_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_321_p2 == 1'd0))) begin
        sub_ln33_reg_649[13 : 7] <= sub_ln33_fu_357_p2[13 : 7];
        sub_ln42_reg_655[14 : 8] <= sub_ln42_fu_387_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln59_fu_572_p2 == 1'd0))) begin
        sub_ln64_reg_783[14 : 8] <= sub_ln64_fu_608_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v11_reg_717 <= v11_fu_504_p3;
        v12_reg_722 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        v19_reg_760 <= v19_fu_565_p3;
        v20_reg_765 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        v27_reg_811 <= B_q0;
        v28_reg_816 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_0_reg_644 <= x_0_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        x_1_reg_778 <= x_1_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_0_reg_663 <= y_0_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        y_1_reg_791 <= y_1_fu_620_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        B_address0 = sext_ln64_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = B_addr_1_reg_674;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln31_fu_450_p2 == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        C_address0 = sext_ln64_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        C_address0 = C_addr_1_reg_679;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_511_p2 == 1'd1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln59_fu_572_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln59_fu_572_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_300_p0 = v27_reg_811;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_300_p0 = reg_310;
    end else begin
        grp_fu_300_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_300_p1 = v28_reg_816;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_300_p1 = v22_reg_254;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_300_p1 = v14_reg_241;
    end else begin
        grp_fu_300_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_306_p0 = v19_reg_760;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_306_p0 = v11_reg_717;
    end else begin
        grp_fu_306_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_306_p1 = v20_reg_765;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_306_p1 = v12_reg_722;
    end else begin
        grp_fu_306_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v0_0_address0 = sext_ln47_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_0_address0 = sext_ln33_fu_499_p1;
    end else begin
        v0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6))) begin
        v0_0_ce0 = 1'b1;
    end else begin
        v0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v0_1_address0 = sext_ln47_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_1_address0 = sext_ln33_fu_499_p1;
    end else begin
        v0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state6))) begin
        v0_1_ce0 = 1'b1;
    end else begin
        v0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_321_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln27_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln31_fu_450_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_511_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln59_fu_572_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (icmp_ln60_fu_614_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_494_p2 = (sub_ln33_reg_649 + zext_ln33_2_fu_490_p1);

assign add_ln34_fu_466_p2 = (sub_ln34_reg_668 + zext_ln34_3_fu_462_p1);

assign add_ln42_fu_439_p2 = (sub_ln42_reg_655 + zext_ln34_fu_405_p1);

assign add_ln47_fu_555_p2 = (sub_ln33_reg_649 + zext_ln47_fu_551_p1);

assign add_ln48_fu_527_p2 = (sub_ln34_reg_668 + zext_ln48_fu_523_p1);

assign add_ln64_fu_630_p2 = (sub_ln64_reg_783 + zext_ln64_2_fu_626_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln26_fu_321_p2 = ((x_0_0_reg_207 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_393_p2 = ((y_0_0_reg_218 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_450_p2 = ((r_0_reg_229 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_511_p2 = ((r1_0_reg_267 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_572_p2 = ((x_1_0_reg_278 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_614_p2 = ((y_1_0_reg_289 == 10'd768) ? 1'b1 : 1'b0);

assign r1_fu_517_p2 = (r1_0_reg_267 + 10'd1);

assign r_fu_456_p2 = (r_0_reg_229 + 10'd1);

assign sext_ln33_fu_499_p1 = $signed(add_ln33_reg_702);

assign sext_ln34_fu_471_p1 = $signed(add_ln34_fu_466_p2);

assign sext_ln42_fu_444_p1 = $signed(add_ln42_fu_439_p2);

assign sext_ln47_fu_560_p1 = $signed(add_ln47_reg_745);

assign sext_ln48_fu_532_p1 = $signed(add_ln48_fu_527_p2);

assign sext_ln64_fu_635_p1 = $signed(add_ln64_fu_630_p2);

assign sub_ln33_fu_357_p2 = (zext_ln33_fu_341_p1 - zext_ln33_1_fu_353_p1);

assign sub_ln34_fu_433_p2 = (zext_ln34_1_fu_417_p1 - zext_ln34_2_fu_429_p1);

assign sub_ln42_fu_387_p2 = (zext_ln42_fu_371_p1 - zext_ln42_1_fu_383_p1);

assign sub_ln64_fu_608_p2 = (zext_ln64_fu_592_p1 - zext_ln64_1_fu_604_p1);

assign tmp_10_fu_480_p4 = {{r_0_reg_229[9:1]}};

assign tmp_11_fu_541_p4 = {{r1_0_reg_267[9:1]}};

assign tmp_3_fu_333_p3 = {{x_0_0_reg_207}, {9'd0}};

assign tmp_4_fu_345_p3 = {{x_0_0_reg_207}, {7'd0}};

assign tmp_5_fu_363_p3 = {{x_0_0_reg_207}, {10'd0}};

assign tmp_6_fu_375_p3 = {{x_0_0_reg_207}, {8'd0}};

assign tmp_7_fu_584_p3 = {{x_1_0_reg_278}, {10'd0}};

assign tmp_8_fu_596_p3 = {{x_1_0_reg_278}, {8'd0}};

assign tmp_9_fu_409_p3 = {{y_0_0_reg_218}, {10'd0}};

assign tmp_s_fu_421_p3 = {{y_0_0_reg_218}, {8'd0}};

assign trunc_ln33_fu_476_p1 = r_0_reg_229[0:0];

assign trunc_ln47_fu_537_p1 = r1_0_reg_267[0:0];

assign v11_fu_504_p3 = ((trunc_ln33_reg_697[0:0] === 1'b1) ? v0_1_q0 : v0_0_q0);

assign v19_fu_565_p3 = ((trunc_ln47_reg_740[0:0] === 1'b1) ? v0_1_q0 : v0_0_q0);

assign v1_address0 = sext_ln34_fu_471_p1;

assign v2_address0 = sext_ln48_fu_532_p1;

assign v3_address0 = sext_ln64_reg_796;

assign v3_d0 = reg_315;

assign x_0_fu_327_p2 = (x_0_0_reg_207 + 4'd1);

assign x_1_fu_578_p2 = (x_1_0_reg_278 + 4'd1);

assign y_0_fu_399_p2 = (y_0_0_reg_218 + 10'd1);

assign y_1_fu_620_p2 = (y_1_0_reg_289 + 10'd1);

assign zext_ln33_1_fu_353_p1 = tmp_4_fu_345_p3;

assign zext_ln33_2_fu_490_p1 = tmp_10_fu_480_p4;

assign zext_ln33_fu_341_p1 = tmp_3_fu_333_p3;

assign zext_ln34_1_fu_417_p1 = tmp_9_fu_409_p3;

assign zext_ln34_2_fu_429_p1 = tmp_s_fu_421_p3;

assign zext_ln34_3_fu_462_p1 = r_0_reg_229;

assign zext_ln34_fu_405_p1 = y_0_0_reg_218;

assign zext_ln42_1_fu_383_p1 = tmp_6_fu_375_p3;

assign zext_ln42_fu_371_p1 = tmp_5_fu_363_p3;

assign zext_ln47_fu_551_p1 = tmp_11_fu_541_p4;

assign zext_ln48_fu_523_p1 = r1_0_reg_267;

assign zext_ln64_1_fu_604_p1 = tmp_8_fu_596_p3;

assign zext_ln64_2_fu_626_p1 = y_1_0_reg_289;

assign zext_ln64_fu_592_p1 = tmp_7_fu_584_p3;

always @ (posedge ap_clk) begin
    sub_ln33_reg_649[6:0] <= 7'b0000000;
    sub_ln42_reg_655[7:0] <= 8'b00000000;
    sub_ln34_reg_668[7:0] <= 8'b00000000;
    sub_ln64_reg_783[7:0] <= 8'b00000000;
end

endmodule //top
