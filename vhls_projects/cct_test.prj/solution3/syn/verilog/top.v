// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=56641561,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=855,HLS_SYN_LUT=1405,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_0_address0,
        v0_0_ce0,
        v0_0_q0,
        v0_1_address0,
        v0_1_ce0,
        v0_1_q0,
        v1_0_address0,
        v1_0_ce0,
        v1_0_q0,
        v1_1_address0,
        v1_1_ce0,
        v1_1_q0,
        v2_address0,
        v2_ce0,
        v2_we0,
        v2_d0
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] v0_0_address0;
output   v0_0_ce0;
input  [31:0] v0_0_q0;
output  [12:0] v0_1_address0;
output   v0_1_ce0;
input  [31:0] v0_1_q0;
output  [18:0] v1_0_address0;
output   v1_0_ce0;
input  [31:0] v1_0_q0;
output  [18:0] v1_1_address0;
output   v1_1_ce0;
input  [31:0] v1_1_q0;
output  [13:0] v2_address0;
output   v2_ce0;
output   v2_we0;
output  [31:0] v2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v0_0_ce0;
reg v0_1_ce0;
reg v1_0_ce0;
reg v1_1_ce0;
reg v2_ce0;
reg v2_we0;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] x_fu_207_p2;
reg   [3:0] x_reg_384;
wire    ap_CS_fsm_state2;
wire   [13:0] sub_ln33_fu_237_p2;
reg   [13:0] sub_ln33_reg_389;
wire   [0:0] icmp_ln25_fu_201_p2;
wire   [14:0] sub_ln42_fu_267_p2;
reg   [14:0] sub_ln42_reg_394;
wire   [9:0] y_fu_279_p2;
reg   [9:0] y_reg_402;
wire    ap_CS_fsm_state3;
wire   [19:0] sub_ln34_fu_313_p2;
reg   [19:0] sub_ln34_reg_407;
wire   [0:0] icmp_ln26_fu_273_p2;
reg   [13:0] v2_addr_reg_412;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln30_fu_329_p2;
wire   [9:0] add_ln30_fu_375_p2;
reg   [9:0] add_ln30_reg_440;
reg   [31:0] v0_0_load_reg_445;
wire    ap_CS_fsm_state5;
reg   [31:0] v1_0_load_reg_450;
reg   [31:0] v0_1_load_reg_455;
reg   [31:0] v1_1_load_reg_460;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] v_reg_465;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] v10_1_reg_470;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] v1_reg_475;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
reg   [3:0] x_0_reg_142;
reg   [9:0] y_0_reg_153;
reg   [31:0] v11_0_reg_164;
reg   [9:0] r_0_0_reg_177;
wire  signed [63:0] sext_ln42_fu_324_p1;
wire  signed [63:0] sext_ln33_fu_358_p1;
wire  signed [63:0] sext_ln34_fu_369_p1;
reg   [31:0] grp_fu_188_p0;
reg   [31:0] grp_fu_188_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_2_fu_213_p3;
wire   [10:0] tmp_3_fu_225_p3;
wire   [13:0] zext_ln33_fu_221_p1;
wire   [13:0] zext_ln33_1_fu_233_p1;
wire   [13:0] tmp_4_fu_243_p3;
wire   [11:0] tmp_5_fu_255_p3;
wire   [14:0] zext_ln42_fu_251_p1;
wire   [14:0] zext_ln42_1_fu_263_p1;
wire   [18:0] tmp_6_fu_289_p3;
wire   [16:0] tmp_7_fu_301_p3;
wire   [19:0] zext_ln34_1_fu_297_p1;
wire   [19:0] zext_ln34_2_fu_309_p1;
wire   [14:0] zext_ln34_fu_285_p1;
wire   [14:0] add_ln42_fu_319_p2;
wire   [8:0] tmp_8_fu_335_p4;
wire   [13:0] zext_ln33_3_fu_349_p1;
wire   [13:0] add_ln33_fu_353_p2;
wire   [19:0] zext_ln33_2_fu_345_p1;
wire   [19:0] add_ln34_fu_364_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_188_p0),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_0_load_reg_445),
    .din1(v1_0_load_reg_450),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_1_load_reg_455),
    .din1(v1_1_load_reg_460),
    .ce(1'b1),
    .dout(grp_fu_197_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_0_0_reg_177 <= add_ln30_reg_440;
    end else if (((icmp_ln26_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_0_reg_177 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v11_0_reg_164 <= grp_fu_188_p2;
    end else if (((icmp_ln26_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v11_0_reg_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        x_0_reg_142 <= x_reg_384;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_329_p2 == 1'd1))) begin
        y_0_reg_153 <= y_reg_402;
    end else if (((icmp_ln25_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_0_reg_153 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln30_reg_440 <= add_ln30_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln33_reg_389[13 : 7] <= sub_ln33_fu_237_p2[13 : 7];
        sub_ln42_reg_394[14 : 8] <= sub_ln42_fu_267_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln34_reg_407[19 : 7] <= sub_ln34_fu_313_p2[19 : 7];
        v2_addr_reg_412 <= sext_ln42_fu_324_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v0_0_load_reg_445 <= v0_0_q0;
        v0_1_load_reg_455 <= v0_1_q0;
        v1_0_load_reg_450 <= v1_0_q0;
        v1_1_load_reg_460 <= v1_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v10_1_reg_470 <= grp_fu_197_p2;
        v_reg_465 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        v1_reg_475 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_384 <= x_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_402 <= y_fu_279_p2;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_188_p0 = v10_1_reg_470;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_188_p0 = v_reg_465;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_188_p1 = v1_reg_475;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_188_p1 = v11_0_reg_164;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_0_ce0 = 1'b1;
    end else begin
        v0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_1_ce0 = 1'b1;
    end else begin
        v0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_0_ce0 = 1'b1;
    end else begin
        v1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_1_ce0 = 1'b1;
    end else begin
        v1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_329_p2 == 1'd1))) begin
        v2_we0 = 1'b1;
    end else begin
        v2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_329_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_375_p2 = (r_0_0_reg_177 + 10'd2);

assign add_ln33_fu_353_p2 = (zext_ln33_3_fu_349_p1 + sub_ln33_reg_389);

assign add_ln34_fu_364_p2 = (zext_ln33_2_fu_345_p1 + sub_ln34_reg_407);

assign add_ln42_fu_319_p2 = (sub_ln42_reg_394 + zext_ln34_fu_285_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln25_fu_201_p2 = ((x_0_reg_142 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_273_p2 = ((y_0_reg_153 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_329_p2 = ((r_0_0_reg_177 == 10'd768) ? 1'b1 : 1'b0);

assign sext_ln33_fu_358_p1 = $signed(add_ln33_fu_353_p2);

assign sext_ln34_fu_369_p1 = $signed(add_ln34_fu_364_p2);

assign sext_ln42_fu_324_p1 = $signed(add_ln42_fu_319_p2);

assign sub_ln33_fu_237_p2 = (zext_ln33_fu_221_p1 - zext_ln33_1_fu_233_p1);

assign sub_ln34_fu_313_p2 = (zext_ln34_1_fu_297_p1 - zext_ln34_2_fu_309_p1);

assign sub_ln42_fu_267_p2 = (zext_ln42_fu_251_p1 - zext_ln42_1_fu_263_p1);

assign tmp_2_fu_213_p3 = {{x_0_reg_142}, {9'd0}};

assign tmp_3_fu_225_p3 = {{x_0_reg_142}, {7'd0}};

assign tmp_4_fu_243_p3 = {{x_0_reg_142}, {10'd0}};

assign tmp_5_fu_255_p3 = {{x_0_reg_142}, {8'd0}};

assign tmp_6_fu_289_p3 = {{y_0_reg_153}, {9'd0}};

assign tmp_7_fu_301_p3 = {{y_0_reg_153}, {7'd0}};

assign tmp_8_fu_335_p4 = {{r_0_0_reg_177[9:1]}};

assign v0_0_address0 = sext_ln33_fu_358_p1;

assign v0_1_address0 = sext_ln33_fu_358_p1;

assign v1_0_address0 = sext_ln34_fu_369_p1;

assign v1_1_address0 = sext_ln34_fu_369_p1;

assign v2_address0 = v2_addr_reg_412;

assign v2_d0 = v11_0_reg_164;

assign x_fu_207_p2 = (x_0_reg_142 + 4'd1);

assign y_fu_279_p2 = (y_0_reg_153 + 10'd1);

assign zext_ln33_1_fu_233_p1 = tmp_3_fu_225_p3;

assign zext_ln33_2_fu_345_p1 = tmp_8_fu_335_p4;

assign zext_ln33_3_fu_349_p1 = tmp_8_fu_335_p4;

assign zext_ln33_fu_221_p1 = tmp_2_fu_213_p3;

assign zext_ln34_1_fu_297_p1 = tmp_6_fu_289_p3;

assign zext_ln34_2_fu_309_p1 = tmp_7_fu_301_p3;

assign zext_ln34_fu_285_p1 = y_0_reg_153;

assign zext_ln42_1_fu_263_p1 = tmp_5_fu_255_p3;

assign zext_ln42_fu_251_p1 = tmp_4_fu_243_p3;

always @ (posedge ap_clk) begin
    sub_ln33_reg_389[6:0] <= 7'b0000000;
    sub_ln42_reg_394[7:0] <= 8'b00000000;
    sub_ln34_reg_407[6:0] <= 7'b0000000;
end

endmodule //top
