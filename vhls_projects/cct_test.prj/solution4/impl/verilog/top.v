// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=46024729,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1339,HLS_SYN_LUT=2092,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_0_address0,
        v0_0_ce0,
        v0_0_q0,
        v0_1_address0,
        v0_1_ce0,
        v0_1_q0,
        v0_2_address0,
        v0_2_ce0,
        v0_2_q0,
        v0_3_address0,
        v0_3_ce0,
        v0_3_q0,
        v1_0_address0,
        v1_0_ce0,
        v1_0_q0,
        v1_1_address0,
        v1_1_ce0,
        v1_1_q0,
        v1_2_address0,
        v1_2_ce0,
        v1_2_q0,
        v1_3_address0,
        v1_3_ce0,
        v1_3_q0,
        v2_address0,
        v2_ce0,
        v2_we0,
        v2_d0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] v0_0_address0;
output   v0_0_ce0;
input  [31:0] v0_0_q0;
output  [11:0] v0_1_address0;
output   v0_1_ce0;
input  [31:0] v0_1_q0;
output  [11:0] v0_2_address0;
output   v0_2_ce0;
input  [31:0] v0_2_q0;
output  [11:0] v0_3_address0;
output   v0_3_ce0;
input  [31:0] v0_3_q0;
output  [17:0] v1_0_address0;
output   v1_0_ce0;
input  [31:0] v1_0_q0;
output  [17:0] v1_1_address0;
output   v1_1_ce0;
input  [31:0] v1_1_q0;
output  [17:0] v1_2_address0;
output   v1_2_ce0;
input  [31:0] v1_2_q0;
output  [17:0] v1_3_address0;
output   v1_3_ce0;
input  [31:0] v1_3_q0;
output  [13:0] v2_address0;
output   v2_ce0;
output   v2_we0;
output  [31:0] v2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v0_0_ce0;
reg v0_1_ce0;
reg v0_2_ce0;
reg v0_3_ce0;
reg v1_0_ce0;
reg v1_1_ce0;
reg v1_2_ce0;
reg v1_3_ce0;
reg v2_ce0;
reg v2_we0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_240_p2;
reg   [31:0] reg_261;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire   [3:0] x_fu_272_p2;
reg   [3:0] x_reg_435;
wire    ap_CS_fsm_state2;
wire   [12:0] sub_ln35_fu_306_p2;
reg   [12:0] sub_ln35_reg_440;
wire   [0:0] icmp_ln25_fu_266_p2;
wire   [14:0] sub_ln45_fu_324_p2;
reg   [14:0] sub_ln45_reg_445;
wire   [9:0] y_fu_336_p2;
reg   [9:0] y_reg_453;
wire    ap_CS_fsm_state3;
wire   [18:0] sub_ln36_fu_370_p2;
reg   [18:0] sub_ln36_reg_458;
wire   [0:0] icmp_ln26_fu_330_p2;
reg   [13:0] v2_addr_reg_463;
wire   [7:0] r_outer_fu_392_p2;
reg   [7:0] r_outer_reg_471;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln30_fu_386_p2;
reg   [31:0] v0_0_load_reg_516;
wire    ap_CS_fsm_state5;
reg   [31:0] v1_0_load_reg_521;
reg   [31:0] v0_1_load_reg_526;
reg   [31:0] v1_1_load_reg_531;
reg   [31:0] v0_2_load_reg_536;
reg   [31:0] v1_2_load_reg_541;
reg   [31:0] v0_3_load_reg_546;
reg   [31:0] v1_3_load_reg_551;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] v_reg_556;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] v12_1_reg_561;
wire   [31:0] grp_fu_253_p2;
reg   [31:0] v12_2_reg_566;
wire   [31:0] grp_fu_257_p2;
reg   [31:0] v12_3_reg_571;
wire    ap_CS_fsm_state29;
reg   [3:0] x_0_reg_194;
reg   [9:0] y_0_reg_205;
reg   [31:0] v15_reg_216;
reg   [7:0] r_outer_0_reg_229;
wire  signed [63:0] sext_ln45_fu_381_p1;
wire  signed [63:0] sext_ln35_fu_411_p1;
wire  signed [63:0] sext_ln36_fu_424_p1;
reg   [31:0] grp_fu_240_p0;
reg   [31:0] grp_fu_240_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state6;
wire   [11:0] tmp_2_fu_278_p3;
wire   [9:0] tmp_3_fu_294_p3;
wire   [12:0] zext_ln35_1_fu_290_p1;
wire   [12:0] zext_ln35_2_fu_302_p1;
wire   [13:0] tmp_4_fu_312_p3;
wire   [14:0] zext_ln45_fu_320_p1;
wire   [14:0] zext_ln35_fu_286_p1;
wire   [17:0] tmp_6_fu_346_p3;
wire   [15:0] tmp_7_fu_358_p3;
wire   [18:0] zext_ln36_1_fu_354_p1;
wire   [18:0] zext_ln36_2_fu_366_p1;
wire   [14:0] zext_ln36_fu_342_p1;
wire   [14:0] add_ln45_fu_376_p2;
wire   [12:0] zext_ln35_4_fu_402_p1;
wire   [12:0] add_ln35_fu_406_p2;
wire   [18:0] zext_ln35_3_fu_398_p1;
wire   [18:0] add_ln36_fu_419_p2;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_240_p0),
    .din1(grp_fu_240_p1),
    .ce(1'b1),
    .dout(grp_fu_240_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_0_load_reg_516),
    .din1(v1_0_load_reg_521),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_1_load_reg_526),
    .din1(v1_1_load_reg_531),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_2_load_reg_536),
    .din1(v1_2_load_reg_541),
    .ce(1'b1),
    .dout(grp_fu_253_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v0_3_load_reg_546),
    .din1(v1_3_load_reg_551),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        r_outer_0_reg_229 <= r_outer_reg_471;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        r_outer_0_reg_229 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        v15_reg_216 <= grp_fu_240_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        v15_reg_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd1))) begin
        x_0_reg_194 <= x_reg_435;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_194 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_386_p2 == 1'd1))) begin
        y_0_reg_205 <= y_reg_453;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_266_p2 == 1'd0))) begin
        y_0_reg_205 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_outer_reg_471 <= r_outer_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_261 <= grp_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_266_p2 == 1'd0))) begin
        sub_ln35_reg_440[12 : 6] <= sub_ln35_fu_306_p2[12 : 6];
        sub_ln45_reg_445[14 : 8] <= sub_ln45_fu_324_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd0))) begin
        sub_ln36_reg_458[18 : 6] <= sub_ln36_fu_370_p2[18 : 6];
        v2_addr_reg_463 <= sext_ln45_fu_381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v0_0_load_reg_516 <= v0_0_q0;
        v0_1_load_reg_526 <= v0_1_q0;
        v0_2_load_reg_536 <= v0_2_q0;
        v0_3_load_reg_546 <= v0_3_q0;
        v1_0_load_reg_521 <= v1_0_q0;
        v1_1_load_reg_531 <= v1_1_q0;
        v1_2_load_reg_541 <= v1_2_q0;
        v1_3_load_reg_551 <= v1_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v12_1_reg_561 <= grp_fu_249_p2;
        v12_2_reg_566 <= grp_fu_253_p2;
        v12_3_reg_571 <= grp_fu_257_p2;
        v_reg_556 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_435 <= x_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_453 <= y_fu_336_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_266_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_266_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_240_p0 = v12_3_reg_571;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_240_p0 = v12_2_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_240_p0 = v12_1_reg_561;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_240_p0 = v_reg_556;
    end else begin
        grp_fu_240_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_240_p1 = reg_261;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_240_p1 = v15_reg_216;
    end else begin
        grp_fu_240_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_0_ce0 = 1'b1;
    end else begin
        v0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_1_ce0 = 1'b1;
    end else begin
        v0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_2_ce0 = 1'b1;
    end else begin
        v0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v0_3_ce0 = 1'b1;
    end else begin
        v0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_0_ce0 = 1'b1;
    end else begin
        v1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_1_ce0 = 1'b1;
    end else begin
        v1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_2_ce0 = 1'b1;
    end else begin
        v1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v1_3_ce0 = 1'b1;
    end else begin
        v1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_386_p2 == 1'd1))) begin
        v2_we0 = 1'b1;
    end else begin
        v2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_266_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_406_p2 = (sub_ln35_reg_440 + zext_ln35_4_fu_402_p1);

assign add_ln36_fu_419_p2 = (sub_ln36_reg_458 + zext_ln35_3_fu_398_p1);

assign add_ln45_fu_376_p2 = (sub_ln45_reg_445 + zext_ln36_fu_342_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln25_fu_266_p2 = ((x_0_reg_194 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_330_p2 = ((y_0_reg_205 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_386_p2 = ((r_outer_0_reg_229 == 8'd192) ? 1'b1 : 1'b0);

assign r_outer_fu_392_p2 = (r_outer_0_reg_229 + 8'd1);

assign sext_ln35_fu_411_p1 = $signed(add_ln35_fu_406_p2);

assign sext_ln36_fu_424_p1 = $signed(add_ln36_fu_419_p2);

assign sext_ln45_fu_381_p1 = $signed(add_ln45_fu_376_p2);

assign sub_ln35_fu_306_p2 = (zext_ln35_1_fu_290_p1 - zext_ln35_2_fu_302_p1);

assign sub_ln36_fu_370_p2 = (zext_ln36_1_fu_354_p1 - zext_ln36_2_fu_366_p1);

assign sub_ln45_fu_324_p2 = (zext_ln45_fu_320_p1 - zext_ln35_fu_286_p1);

assign tmp_2_fu_278_p3 = {{x_0_reg_194}, {8'd0}};

assign tmp_3_fu_294_p3 = {{x_0_reg_194}, {6'd0}};

assign tmp_4_fu_312_p3 = {{x_0_reg_194}, {10'd0}};

assign tmp_6_fu_346_p3 = {{y_0_reg_205}, {8'd0}};

assign tmp_7_fu_358_p3 = {{y_0_reg_205}, {6'd0}};

assign v0_0_address0 = sext_ln35_fu_411_p1;

assign v0_1_address0 = sext_ln35_fu_411_p1;

assign v0_2_address0 = sext_ln35_fu_411_p1;

assign v0_3_address0 = sext_ln35_fu_411_p1;

assign v1_0_address0 = sext_ln36_fu_424_p1;

assign v1_1_address0 = sext_ln36_fu_424_p1;

assign v1_2_address0 = sext_ln36_fu_424_p1;

assign v1_3_address0 = sext_ln36_fu_424_p1;

assign v2_address0 = v2_addr_reg_463;

assign v2_d0 = v15_reg_216;

assign x_fu_272_p2 = (x_0_reg_194 + 4'd1);

assign y_fu_336_p2 = (y_0_reg_205 + 10'd1);

assign zext_ln35_1_fu_290_p1 = tmp_2_fu_278_p3;

assign zext_ln35_2_fu_302_p1 = tmp_3_fu_294_p3;

assign zext_ln35_3_fu_398_p1 = r_outer_0_reg_229;

assign zext_ln35_4_fu_402_p1 = r_outer_0_reg_229;

assign zext_ln35_fu_286_p1 = tmp_2_fu_278_p3;

assign zext_ln36_1_fu_354_p1 = tmp_6_fu_346_p3;

assign zext_ln36_2_fu_366_p1 = tmp_7_fu_358_p3;

assign zext_ln36_fu_342_p1 = y_0_reg_205;

assign zext_ln45_fu_320_p1 = tmp_4_fu_312_p3;

always @ (posedge ap_clk) begin
    sub_ln35_reg_440[5:0] <= 6'b000000;
    sub_ln45_reg_445[7:0] <= 8'b00000000;
    sub_ln36_reg_458[5:0] <= 6'b000000;
end

endmodule //top
