-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v0_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v0_0_ce0 : OUT STD_LOGIC;
    v0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v0_1_ce0 : OUT STD_LOGIC;
    v0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v0_2_ce0 : OUT STD_LOGIC;
    v0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v0_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    v0_3_ce0 : OUT STD_LOGIC;
    v0_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_0_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v1_0_ce0 : OUT STD_LOGIC;
    v1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_1_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v1_1_ce0 : OUT STD_LOGIC;
    v1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_2_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v1_2_ce0 : OUT STD_LOGIC;
    v1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v1_3_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    v1_3_ce0 : OUT STD_LOGIC;
    v1_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v2_ce0 : OUT STD_LOGIC;
    v2_we0 : OUT STD_LOGIC;
    v2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=46024729,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1339,HLS_SYN_LUT=2092,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal x_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_435 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln35_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln35_reg_440 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln25_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln45_fu_324_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln45_reg_445 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_fu_336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_453 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln36_fu_370_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln36_reg_458 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln26_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_addr_reg_463 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_outer_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_outer_reg_471 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln30_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v0_0_load_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v1_0_load_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_1_load_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_1_load_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_2_load_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_2_load_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_3_load_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_3_load_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v12_1_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v12_2_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v12_3_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal x_0_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_reg_205 : STD_LOGIC_VECTOR (9 downto 0);
    signal v15_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_outer_0_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln45_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_2_fu_278_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_294_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_1_fu_290_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_2_fu_302_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_312_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln45_fu_320_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln35_fu_286_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_fu_346_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_1_fu_354_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln36_2_fu_366_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln36_fu_342_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln45_fu_376_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln35_4_fu_402_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln35_fu_406_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_3_fu_398_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln36_fu_419_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component top_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    top_fadd_32ns_32nbkb_U1 : component top_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_240_p0,
        din1 => grp_fu_240_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    top_fmul_32ns_32ncud_U2 : component top_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v0_0_load_reg_516,
        din1 => v1_0_load_reg_521,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    top_fmul_32ns_32ncud_U3 : component top_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v0_1_load_reg_526,
        din1 => v1_1_load_reg_531,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    top_fmul_32ns_32ncud_U4 : component top_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v0_2_load_reg_536,
        din1 => v1_2_load_reg_541,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    top_fmul_32ns_32ncud_U5 : component top_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v0_3_load_reg_546,
        din1 => v1_3_load_reg_551,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    r_outer_0_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                r_outer_0_reg_229 <= r_outer_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_330_p2 = ap_const_lv1_0))) then 
                r_outer_0_reg_229 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    v15_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                v15_reg_216 <= grp_fu_240_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_330_p2 = ap_const_lv1_0))) then 
                v15_reg_216 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_330_p2 = ap_const_lv1_1))) then 
                x_0_reg_194 <= x_reg_435;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_194 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_386_p2 = ap_const_lv1_1))) then 
                y_0_reg_205 <= y_reg_453;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_266_p2 = ap_const_lv1_0))) then 
                y_0_reg_205 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_outer_reg_471 <= r_outer_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_261 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_266_p2 = ap_const_lv1_0))) then
                    sub_ln35_reg_440(12 downto 6) <= sub_ln35_fu_306_p2(12 downto 6);
                    sub_ln45_reg_445(14 downto 8) <= sub_ln45_fu_324_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_330_p2 = ap_const_lv1_0))) then
                    sub_ln36_reg_458(18 downto 6) <= sub_ln36_fu_370_p2(18 downto 6);
                v2_addr_reg_463 <= sext_ln45_fu_381_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                v0_0_load_reg_516 <= v0_0_q0;
                v0_1_load_reg_526 <= v0_1_q0;
                v0_2_load_reg_536 <= v0_2_q0;
                v0_3_load_reg_546 <= v0_3_q0;
                v1_0_load_reg_521 <= v1_0_q0;
                v1_1_load_reg_531 <= v1_1_q0;
                v1_2_load_reg_541 <= v1_2_q0;
                v1_3_load_reg_551 <= v1_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v12_1_reg_561 <= grp_fu_249_p2;
                v12_2_reg_566 <= grp_fu_253_p2;
                v12_3_reg_571 <= grp_fu_257_p2;
                v_reg_556 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_reg_435 <= x_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_reg_453 <= y_fu_336_p2;
            end if;
        end if;
    end process;
    sub_ln35_reg_440(5 downto 0) <= "000000";
    sub_ln45_reg_445(7 downto 0) <= "00000000";
    sub_ln36_reg_458(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln25_fu_266_p2, ap_CS_fsm_state3, icmp_ln26_fu_330_p2, ap_CS_fsm_state4, icmp_ln30_fu_386_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln26_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_386_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln35_fu_406_p2 <= std_logic_vector(unsigned(sub_ln35_reg_440) + unsigned(zext_ln35_4_fu_402_p1));
    add_ln36_fu_419_p2 <= std_logic_vector(unsigned(sub_ln36_reg_458) + unsigned(zext_ln35_3_fu_398_p1));
    add_ln45_fu_376_p2 <= std_logic_vector(unsigned(sub_ln45_reg_445) + unsigned(zext_ln36_fu_342_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_266_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_266_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln25_fu_266_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln25_fu_266_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_p0_assign_proc : process(v_reg_556, v12_1_reg_561, v12_2_reg_566, v12_3_reg_571, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_240_p0 <= v12_3_reg_571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_240_p0 <= v12_2_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_240_p0 <= v12_1_reg_561;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_240_p0 <= v_reg_556;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_240_p1_assign_proc : process(reg_261, v15_reg_216, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_240_p1 <= reg_261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_240_p1 <= v15_reg_216;
        else 
            grp_fu_240_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln25_fu_266_p2 <= "1" when (x_0_reg_194 = ap_const_lv4_C) else "0";
    icmp_ln26_fu_330_p2 <= "1" when (y_0_reg_205 = ap_const_lv10_300) else "0";
    icmp_ln30_fu_386_p2 <= "1" when (r_outer_0_reg_229 = ap_const_lv8_C0) else "0";
    r_outer_fu_392_p2 <= std_logic_vector(unsigned(r_outer_0_reg_229) + unsigned(ap_const_lv8_1));
        sext_ln35_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_406_p2),64));

        sext_ln36_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln36_fu_419_p2),64));

        sext_ln45_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_fu_376_p2),64));

    sub_ln35_fu_306_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_290_p1) - unsigned(zext_ln35_2_fu_302_p1));
    sub_ln36_fu_370_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_354_p1) - unsigned(zext_ln36_2_fu_366_p1));
    sub_ln45_fu_324_p2 <= std_logic_vector(unsigned(zext_ln45_fu_320_p1) - unsigned(zext_ln35_fu_286_p1));
    tmp_2_fu_278_p3 <= (x_0_reg_194 & ap_const_lv8_0);
    tmp_3_fu_294_p3 <= (x_0_reg_194 & ap_const_lv6_0);
    tmp_4_fu_312_p3 <= (x_0_reg_194 & ap_const_lv10_0);
    tmp_6_fu_346_p3 <= (y_0_reg_205 & ap_const_lv8_0);
    tmp_7_fu_358_p3 <= (y_0_reg_205 & ap_const_lv6_0);
    v0_0_address0 <= sext_ln35_fu_411_p1(12 - 1 downto 0);

    v0_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v0_0_ce0 <= ap_const_logic_1;
        else 
            v0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_1_address0 <= sext_ln35_fu_411_p1(12 - 1 downto 0);

    v0_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v0_1_ce0 <= ap_const_logic_1;
        else 
            v0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_2_address0 <= sext_ln35_fu_411_p1(12 - 1 downto 0);

    v0_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v0_2_ce0 <= ap_const_logic_1;
        else 
            v0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_3_address0 <= sext_ln35_fu_411_p1(12 - 1 downto 0);

    v0_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v0_3_ce0 <= ap_const_logic_1;
        else 
            v0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_0_address0 <= sext_ln36_fu_424_p1(18 - 1 downto 0);

    v1_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v1_0_ce0 <= ap_const_logic_1;
        else 
            v1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_1_address0 <= sext_ln36_fu_424_p1(18 - 1 downto 0);

    v1_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v1_1_ce0 <= ap_const_logic_1;
        else 
            v1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_2_address0 <= sext_ln36_fu_424_p1(18 - 1 downto 0);

    v1_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v1_2_ce0 <= ap_const_logic_1;
        else 
            v1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_3_address0 <= sext_ln36_fu_424_p1(18 - 1 downto 0);

    v1_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v1_3_ce0 <= ap_const_logic_1;
        else 
            v1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_address0 <= v2_addr_reg_463;

    v2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v2_ce0 <= ap_const_logic_1;
        else 
            v2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_d0 <= v15_reg_216;

    v2_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln30_fu_386_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_386_p2 = ap_const_lv1_1))) then 
            v2_we0 <= ap_const_logic_1;
        else 
            v2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_272_p2 <= std_logic_vector(unsigned(x_0_reg_194) + unsigned(ap_const_lv4_1));
    y_fu_336_p2 <= std_logic_vector(unsigned(y_0_reg_205) + unsigned(ap_const_lv10_1));
    zext_ln35_1_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_278_p3),13));
    zext_ln35_2_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_294_p3),13));
    zext_ln35_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_outer_0_reg_229),19));
    zext_ln35_4_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_outer_0_reg_229),13));
    zext_ln35_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_278_p3),15));
    zext_ln36_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_346_p3),19));
    zext_ln36_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_358_p3),19));
    zext_ln36_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_205),15));
    zext_ln45_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_312_p3),15));
end behav;
