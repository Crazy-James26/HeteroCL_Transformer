// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=184144971,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=5,HLS_SYN_FF=1053,HLS_SYN_LUT=1565,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_state11 = 41'd1024;
parameter    ap_ST_fsm_state12 = 41'd2048;
parameter    ap_ST_fsm_state13 = 41'd4096;
parameter    ap_ST_fsm_state14 = 41'd8192;
parameter    ap_ST_fsm_state15 = 41'd16384;
parameter    ap_ST_fsm_state16 = 41'd32768;
parameter    ap_ST_fsm_state17 = 41'd65536;
parameter    ap_ST_fsm_state18 = 41'd131072;
parameter    ap_ST_fsm_state19 = 41'd262144;
parameter    ap_ST_fsm_state20 = 41'd524288;
parameter    ap_ST_fsm_state21 = 41'd1048576;
parameter    ap_ST_fsm_state22 = 41'd2097152;
parameter    ap_ST_fsm_state23 = 41'd4194304;
parameter    ap_ST_fsm_state24 = 41'd8388608;
parameter    ap_ST_fsm_state25 = 41'd16777216;
parameter    ap_ST_fsm_state26 = 41'd33554432;
parameter    ap_ST_fsm_state27 = 41'd67108864;
parameter    ap_ST_fsm_state28 = 41'd134217728;
parameter    ap_ST_fsm_state29 = 41'd268435456;
parameter    ap_ST_fsm_state30 = 41'd536870912;
parameter    ap_ST_fsm_state31 = 41'd1073741824;
parameter    ap_ST_fsm_state32 = 41'd2147483648;
parameter    ap_ST_fsm_state33 = 41'd4294967296;
parameter    ap_ST_fsm_state34 = 41'd8589934592;
parameter    ap_ST_fsm_state35 = 41'd17179869184;
parameter    ap_ST_fsm_state36 = 41'd34359738368;
parameter    ap_ST_fsm_state37 = 41'd68719476736;
parameter    ap_ST_fsm_state38 = 41'd137438953472;
parameter    ap_ST_fsm_state39 = 41'd274877906944;
parameter    ap_ST_fsm_state40 = 41'd549755813888;
parameter    ap_ST_fsm_state41 = 41'd1099511627776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] v0_address0;
reg v0_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v3_we0;

(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] reg_323;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] reg_328;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state40;
wire   [3:0] x_fu_340_p2;
reg   [3:0] x_reg_651;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln25_fu_370_p2;
reg   [14:0] sub_ln25_reg_656;
wire   [0:0] icmp_ln23_fu_334_p2;
wire   [9:0] y_fu_382_p2;
reg   [9:0] y_reg_664;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln25_fu_397_p1;
reg  signed [63:0] sext_ln25_reg_669;
wire   [0:0] icmp_ln24_fu_376_p2;
wire   [3:0] x_1_fu_408_p2;
reg   [3:0] x_1_reg_682;
wire    ap_CS_fsm_state5;
wire   [14:0] sub_ln38_fu_438_p2;
reg   [14:0] sub_ln38_reg_687;
wire   [0:0] icmp_ln31_fu_402_p2;
wire   [9:0] y_1_fu_450_p2;
reg   [9:0] y_1_reg_697;
wire    ap_CS_fsm_state6;
wire   [20:0] sub_ln39_fu_484_p2;
reg   [20:0] sub_ln39_reg_702;
wire   [0:0] icmp_ln32_fu_444_p2;
reg   [13:0] B_addr_1_reg_708;
reg   [13:0] C_addr_1_reg_713;
wire   [9:0] r_fu_507_p2;
reg   [9:0] r_reg_721;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln36_fu_501_p2;
wire   [14:0] add_ln38_fu_531_p2;
reg   [14:0] add_ln38_reg_731;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [31:0] v15_reg_741;
wire    ap_CS_fsm_state10;
reg   [31:0] v16_reg_746;
wire   [9:0] r1_fu_546_p2;
reg   [9:0] r1_reg_754;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln50_fu_540_p2;
wire   [14:0] add_ln52_fu_570_p2;
reg   [14:0] add_ln52_reg_764;
wire    ap_CS_fsm_state22;
wire   [31:0] A4_q0;
reg   [31:0] v23_reg_774;
wire    ap_CS_fsm_state23;
reg   [31:0] v24_reg_779;
wire    ap_CS_fsm_state32;
wire   [3:0] x_2_fu_585_p2;
reg   [3:0] x_2_reg_792;
wire    ap_CS_fsm_state33;
wire   [14:0] sub_ln69_fu_615_p2;
reg   [14:0] sub_ln69_reg_797;
wire   [0:0] icmp_ln64_fu_579_p2;
wire   [9:0] y_2_fu_627_p2;
reg   [9:0] y_2_reg_805;
wire    ap_CS_fsm_state34;
wire  signed [63:0] sext_ln69_fu_642_p1;
reg  signed [63:0] sext_ln69_reg_810;
wire   [0:0] icmp_ln65_fu_621_p2;
wire   [31:0] B_q0;
reg   [31:0] v31_reg_825;
wire    ap_CS_fsm_state35;
wire   [31:0] C_q0;
reg   [31:0] v32_reg_830;
reg   [13:0] A4_address0;
reg    A4_ce0;
reg    A4_we0;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [13:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [3:0] x_0_reg_198;
reg   [9:0] y_0_reg_209;
wire    ap_CS_fsm_state4;
reg   [3:0] x_1_0_reg_220;
reg   [9:0] y_1_0_reg_231;
reg   [31:0] v18_reg_242;
reg   [9:0] r_0_reg_255;
reg   [31:0] v26_reg_267;
reg   [9:0] r1_0_reg_280;
reg   [3:0] x_2_0_reg_291;
reg   [9:0] y_2_0_reg_302;
wire    ap_CS_fsm_state41;
wire  signed [63:0] sext_ln47_fu_495_p1;
wire  signed [63:0] sext_ln39_fu_522_p1;
wire  signed [63:0] sext_ln38_fu_536_p1;
wire  signed [63:0] sext_ln53_fu_565_p1;
wire  signed [63:0] sext_ln52_fu_575_p1;
wire    ap_CS_fsm_state21;
reg   [31:0] grp_fu_313_p0;
reg   [31:0] grp_fu_313_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
reg   [31:0] grp_fu_319_p0;
reg   [31:0] grp_fu_319_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
wire   [13:0] tmp_4_fu_346_p3;
wire   [11:0] tmp_5_fu_358_p3;
wire   [14:0] zext_ln25_fu_354_p1;
wire   [14:0] zext_ln25_1_fu_366_p1;
wire   [14:0] zext_ln25_2_fu_388_p1;
wire   [14:0] add_ln25_fu_392_p2;
wire   [13:0] tmp_6_fu_414_p3;
wire   [11:0] tmp_7_fu_426_p3;
wire   [14:0] zext_ln38_fu_422_p1;
wire   [14:0] zext_ln38_1_fu_434_p1;
wire   [19:0] tmp_s_fu_460_p3;
wire   [17:0] tmp_10_fu_472_p3;
wire   [20:0] zext_ln39_1_fu_468_p1;
wire   [20:0] zext_ln39_2_fu_480_p1;
wire   [14:0] zext_ln39_fu_456_p1;
wire   [14:0] add_ln47_fu_490_p2;
wire   [20:0] zext_ln38_2_fu_513_p1;
wire   [20:0] add_ln39_fu_517_p2;
wire   [14:0] zext_ln38_3_fu_527_p1;
wire   [20:0] zext_ln53_1_fu_556_p1;
wire   [20:0] add_ln53_fu_560_p2;
wire   [14:0] zext_ln53_fu_552_p1;
wire   [13:0] tmp_8_fu_591_p3;
wire   [11:0] tmp_9_fu_603_p3;
wire   [14:0] zext_ln69_fu_599_p1;
wire   [14:0] zext_ln69_1_fu_611_p1;
wire   [14:0] zext_ln69_2_fu_633_p1;
wire   [14:0] add_ln69_fu_637_p2;
reg   [40:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
end

top_A4 #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
A4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A4_address0),
    .ce0(A4_ce0),
    .we0(A4_we0),
    .d0(v0_q0),
    .q0(A4_q0)
);

top_A4 #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(v18_reg_242),
    .q0(B_q0)
);

top_A4 #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(v26_reg_267),
    .q0(C_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(grp_fu_313_p1),
    .ce(1'b1),
    .dout(grp_fu_313_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_319_p0),
    .din1(grp_fu_319_p1),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        r1_0_reg_280 <= r1_reg_754;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln36_fu_501_p2 == 1'd1))) begin
        r1_0_reg_280 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_0_reg_255 <= r_reg_721;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_444_p2 == 1'd0))) begin
        r_0_reg_255 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v18_reg_242 <= grp_fu_313_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_444_p2 == 1'd0))) begin
        v18_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        v26_reg_267 <= grp_fu_313_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln36_fu_501_p2 == 1'd1))) begin
        v26_reg_267 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_376_p2 == 1'd1))) begin
        x_0_reg_198 <= x_reg_651;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_198 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_334_p2 == 1'd1))) begin
        x_1_0_reg_220 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_444_p2 == 1'd1))) begin
        x_1_0_reg_220 <= x_1_reg_682;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_402_p2 == 1'd1))) begin
        x_2_0_reg_291 <= 4'd0;
    end else if (((icmp_ln65_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        x_2_0_reg_291 <= x_2_reg_792;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_reg_209 <= y_reg_664;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_334_p2 == 1'd0))) begin
        y_0_reg_209 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        y_1_0_reg_231 <= y_1_reg_697;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_402_p2 == 1'd0))) begin
        y_1_0_reg_231 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        y_2_0_reg_302 <= y_2_reg_805;
    end else if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln64_fu_579_p2 == 1'd0))) begin
        y_2_0_reg_302 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_444_p2 == 1'd0))) begin
        B_addr_1_reg_708 <= sext_ln47_fu_495_p1;
        C_addr_1_reg_713 <= sext_ln47_fu_495_p1;
        sub_ln39_reg_702[20 : 8] <= sub_ln39_fu_484_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln38_reg_731 <= add_ln38_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln50_fu_540_p2 == 1'd0))) begin
        add_ln52_reg_764 <= add_ln52_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        r1_reg_754 <= r1_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_reg_721 <= r_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_323 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_328 <= grp_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_376_p2 == 1'd0))) begin
        sext_ln25_reg_669 <= sext_ln25_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (icmp_ln65_fu_621_p2 == 1'd0))) begin
        sext_ln69_reg_810 <= sext_ln69_fu_642_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_334_p2 == 1'd0))) begin
        sub_ln25_reg_656[14 : 8] <= sub_ln25_fu_370_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_402_p2 == 1'd0))) begin
        sub_ln38_reg_687[14 : 8] <= sub_ln38_fu_438_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln64_fu_579_p2 == 1'd0))) begin
        sub_ln69_reg_797[14 : 8] <= sub_ln69_fu_615_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v15_reg_741 <= v0_q0;
        v16_reg_746 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        v23_reg_774 <= A4_q0;
        v24_reg_779 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        v31_reg_825 <= B_q0;
        v32_reg_830 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_1_reg_682 <= x_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        x_2_reg_792 <= x_2_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_651 <= x_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_1_reg_697 <= y_1_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        y_2_reg_805 <= y_2_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_664 <= y_fu_382_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        A4_address0 = sext_ln52_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A4_address0 = sext_ln25_reg_669;
    end else begin
        A4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state22))) begin
        A4_ce0 = 1'b1;
    end else begin
        A4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A4_we0 = 1'b1;
    end else begin
        A4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        B_address0 = sext_ln69_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = B_addr_1_reg_708;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state7))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln36_fu_501_p2 == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        C_address0 = sext_ln69_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        C_address0 = C_addr_1_reg_713;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state20))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_313_p0 = v31_reg_825;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_313_p0 = reg_323;
    end else begin
        grp_fu_313_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_313_p1 = v32_reg_830;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_313_p1 = v26_reg_267;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_313_p1 = v18_reg_242;
    end else begin
        grp_fu_313_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_319_p0 = v23_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_319_p0 = v15_reg_741;
    end else begin
        grp_fu_319_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_319_p1 = v24_reg_779;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_319_p1 = v16_reg_746;
    end else begin
        grp_fu_319_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v0_address0 = sext_ln38_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v0_address0 = sext_ln25_fu_397_p1;
    end else begin
        v0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state3))) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_376_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln31_fu_402_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln32_fu_444_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln36_fu_501_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln50_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln64_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln65_fu_621_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_392_p2 = (sub_ln25_reg_656 + zext_ln25_2_fu_388_p1);

assign add_ln38_fu_531_p2 = (sub_ln38_reg_687 + zext_ln38_3_fu_527_p1);

assign add_ln39_fu_517_p2 = (sub_ln39_reg_702 + zext_ln38_2_fu_513_p1);

assign add_ln47_fu_490_p2 = (sub_ln38_reg_687 + zext_ln39_fu_456_p1);

assign add_ln52_fu_570_p2 = (sub_ln38_reg_687 + zext_ln53_fu_552_p1);

assign add_ln53_fu_560_p2 = (sub_ln39_reg_702 + zext_ln53_1_fu_556_p1);

assign add_ln69_fu_637_p2 = (sub_ln69_reg_797 + zext_ln69_2_fu_633_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln23_fu_334_p2 = ((x_0_reg_198 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_376_p2 = ((y_0_reg_209 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_402_p2 = ((x_1_0_reg_220 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_444_p2 = ((y_1_0_reg_231 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_501_p2 = ((r_0_reg_255 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_540_p2 = ((r1_0_reg_280 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_579_p2 = ((x_2_0_reg_291 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_621_p2 = ((y_2_0_reg_302 == 10'd768) ? 1'b1 : 1'b0);

assign r1_fu_546_p2 = (r1_0_reg_280 + 10'd1);

assign r_fu_507_p2 = (r_0_reg_255 + 10'd1);

assign sext_ln25_fu_397_p1 = $signed(add_ln25_fu_392_p2);

assign sext_ln38_fu_536_p1 = $signed(add_ln38_reg_731);

assign sext_ln39_fu_522_p1 = $signed(add_ln39_fu_517_p2);

assign sext_ln47_fu_495_p1 = $signed(add_ln47_fu_490_p2);

assign sext_ln52_fu_575_p1 = $signed(add_ln52_reg_764);

assign sext_ln53_fu_565_p1 = $signed(add_ln53_fu_560_p2);

assign sext_ln69_fu_642_p1 = $signed(add_ln69_fu_637_p2);

assign sub_ln25_fu_370_p2 = (zext_ln25_fu_354_p1 - zext_ln25_1_fu_366_p1);

assign sub_ln38_fu_438_p2 = (zext_ln38_fu_422_p1 - zext_ln38_1_fu_434_p1);

assign sub_ln39_fu_484_p2 = (zext_ln39_1_fu_468_p1 - zext_ln39_2_fu_480_p1);

assign sub_ln69_fu_615_p2 = (zext_ln69_fu_599_p1 - zext_ln69_1_fu_611_p1);

assign tmp_10_fu_472_p3 = {{y_1_0_reg_231}, {8'd0}};

assign tmp_4_fu_346_p3 = {{x_0_reg_198}, {10'd0}};

assign tmp_5_fu_358_p3 = {{x_0_reg_198}, {8'd0}};

assign tmp_6_fu_414_p3 = {{x_1_0_reg_220}, {10'd0}};

assign tmp_7_fu_426_p3 = {{x_1_0_reg_220}, {8'd0}};

assign tmp_8_fu_591_p3 = {{x_2_0_reg_291}, {10'd0}};

assign tmp_9_fu_603_p3 = {{x_2_0_reg_291}, {8'd0}};

assign tmp_s_fu_460_p3 = {{y_1_0_reg_231}, {10'd0}};

assign v1_address0 = sext_ln39_fu_522_p1;

assign v2_address0 = sext_ln53_fu_565_p1;

assign v3_address0 = sext_ln69_reg_810;

assign v3_d0 = reg_328;

assign x_1_fu_408_p2 = (x_1_0_reg_220 + 4'd1);

assign x_2_fu_585_p2 = (x_2_0_reg_291 + 4'd1);

assign x_fu_340_p2 = (x_0_reg_198 + 4'd1);

assign y_1_fu_450_p2 = (y_1_0_reg_231 + 10'd1);

assign y_2_fu_627_p2 = (y_2_0_reg_302 + 10'd1);

assign y_fu_382_p2 = (y_0_reg_209 + 10'd1);

assign zext_ln25_1_fu_366_p1 = tmp_5_fu_358_p3;

assign zext_ln25_2_fu_388_p1 = y_0_reg_209;

assign zext_ln25_fu_354_p1 = tmp_4_fu_346_p3;

assign zext_ln38_1_fu_434_p1 = tmp_7_fu_426_p3;

assign zext_ln38_2_fu_513_p1 = r_0_reg_255;

assign zext_ln38_3_fu_527_p1 = r_0_reg_255;

assign zext_ln38_fu_422_p1 = tmp_6_fu_414_p3;

assign zext_ln39_1_fu_468_p1 = tmp_s_fu_460_p3;

assign zext_ln39_2_fu_480_p1 = tmp_10_fu_472_p3;

assign zext_ln39_fu_456_p1 = y_1_0_reg_231;

assign zext_ln53_1_fu_556_p1 = r1_0_reg_280;

assign zext_ln53_fu_552_p1 = r1_0_reg_280;

assign zext_ln69_1_fu_611_p1 = tmp_9_fu_603_p3;

assign zext_ln69_2_fu_633_p1 = y_2_0_reg_302;

assign zext_ln69_fu_599_p1 = tmp_8_fu_591_p3;

always @ (posedge ap_clk) begin
    sub_ln25_reg_656[7:0] <= 8'b00000000;
    sub_ln38_reg_687[7:0] <= 8'b00000000;
    sub_ln39_reg_702[7:0] <= 8'b00000000;
    sub_ln69_reg_797[7:0] <= 8'b00000000;
end

endmodule //top
