// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.303250,HLS_SYN_LAT=198273098,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=5,HLS_SYN_FF=809,HLS_SYN_LUT=1529,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_q0,
        v4_address0,
        v4_ce0,
        v4_q0,
        v5_address0,
        v5_ce0,
        v5_we0,
        v5_d0,
        v5_q0
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [9:0] v3_address0;
output   v3_ce0;
input  [31:0] v3_q0;
output  [9:0] v4_address0;
output   v4_ce0;
input  [31:0] v4_q0;
output  [13:0] v5_address0;
output   v5_ce0;
output   v5_we0;
output  [31:0] v5_d0;
input  [31:0] v5_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v0_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v4_ce0;
reg[13:0] v5_address0;
reg v5_ce0;
reg v5_we0;
reg[31:0] v5_d0;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] B_outp_q0;
reg   [31:0] reg_288;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] reg_294;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_280_p2;
reg   [31:0] reg_299;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state38;
wire   [3:0] B_i_fu_311_p2;
reg   [3:0] B_i_reg_646;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln33_fu_341_p2;
reg   [14:0] sub_ln33_reg_651;
wire   [0:0] icmp_ln25_fu_305_p2;
wire   [9:0] y_fu_353_p2;
reg   [9:0] y_reg_661;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln26_fu_347_p2;
wire   [9:0] B_k_fu_384_p2;
reg   [9:0] B_k_reg_674;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln30_fu_378_p2;
wire   [20:0] zext_ln33_2_fu_404_p1;
reg   [20:0] zext_ln33_2_reg_684;
wire    ap_CS_fsm_state6;
reg   [31:0] v13_reg_689;
wire   [9:0] B_j_fu_414_p2;
reg   [9:0] B_j_reg_697;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln31_fu_408_p2;
reg   [13:0] B_outp_addr_2_reg_707;
reg   [31:0] v14_reg_712;
wire    ap_CS_fsm_state10;
wire   [3:0] C_i_fu_480_p2;
reg   [3:0] C_i_reg_720;
wire    ap_CS_fsm_state21;
wire   [14:0] sub_ln44_fu_510_p2;
reg   [14:0] sub_ln44_reg_725;
wire   [0:0] icmp_ln41_fu_474_p2;
wire   [9:0] y_0_fu_522_p2;
reg   [9:0] y_0_reg_735;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln42_fu_516_p2;
wire   [9:0] C_k_fu_553_p2;
reg   [9:0] C_k_reg_748;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln46_fu_547_p2;
wire   [20:0] zext_ln49_fu_573_p1;
reg   [20:0] zext_ln49_reg_758;
wire   [9:0] C_j_fu_583_p2;
reg   [9:0] C_j_reg_766;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln47_fu_577_p2;
reg   [13:0] v5_addr_1_reg_776;
reg   [31:0] v24_reg_781;
wire    ap_CS_fsm_state29;
reg   [31:0] v22_reg_786;
reg   [13:0] B_outp_address0;
reg    B_outp_ce0;
reg    B_outp_we0;
reg   [31:0] B_outp_d0;
reg   [3:0] B_i_0_reg_188;
reg   [9:0] y_0_3_reg_199;
wire    ap_CS_fsm_state4;
reg   [9:0] B_k_0_reg_211;
reg   [9:0] B_j_0_reg_223;
wire    ap_CS_fsm_state20;
reg   [3:0] C_i_0_reg_234;
reg   [9:0] y_0_0_reg_245;
wire    ap_CS_fsm_state23;
reg   [9:0] C_k_0_reg_257;
reg   [9:0] C_j_0_reg_269;
wire    ap_CS_fsm_state39;
wire   [63:0] zext_ln27_fu_359_p1;
wire  signed [63:0] sext_ln28_fu_373_p1;
wire  signed [63:0] sext_ln33_fu_399_p1;
wire  signed [63:0] sext_ln34_fu_459_p1;
wire  signed [63:0] sext_ln32_fu_469_p1;
wire   [63:0] zext_ln43_fu_528_p1;
wire  signed [63:0] sext_ln44_fu_542_p1;
wire  signed [63:0] sext_ln49_fu_568_p1;
wire  signed [63:0] sext_ln50_fu_628_p1;
wire  signed [63:0] sext_ln48_fu_638_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_280_p0;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_284_p0;
reg   [31:0] grp_fu_284_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state30;
wire   [13:0] tmp_4_fu_317_p3;
wire   [11:0] tmp_5_fu_329_p3;
wire   [14:0] zext_ln33_fu_325_p1;
wire   [14:0] zext_ln33_1_fu_337_p1;
wire   [14:0] zext_ln28_fu_364_p1;
wire   [14:0] add_ln28_fu_368_p2;
wire   [14:0] zext_ln33_3_fu_390_p1;
wire   [14:0] add_ln33_fu_394_p2;
wire   [19:0] tmp_8_fu_424_p3;
wire   [17:0] tmp_9_fu_436_p3;
wire   [20:0] zext_ln34_1_fu_432_p1;
wire   [20:0] zext_ln34_2_fu_444_p1;
wire   [20:0] sub_ln34_fu_448_p2;
wire   [20:0] add_ln34_fu_454_p2;
wire   [14:0] zext_ln34_fu_420_p1;
wire   [14:0] add_ln32_fu_464_p2;
wire   [13:0] tmp_6_fu_486_p3;
wire   [11:0] tmp_7_fu_498_p3;
wire   [14:0] zext_ln44_fu_494_p1;
wire   [14:0] zext_ln44_1_fu_506_p1;
wire   [14:0] zext_ln44_2_fu_533_p1;
wire   [14:0] add_ln44_fu_537_p2;
wire   [14:0] zext_ln49_1_fu_559_p1;
wire   [14:0] add_ln49_fu_563_p2;
wire   [19:0] tmp_s_fu_593_p3;
wire   [17:0] tmp_10_fu_605_p3;
wire   [20:0] zext_ln50_1_fu_601_p1;
wire   [20:0] zext_ln50_2_fu_613_p1;
wire   [20:0] sub_ln50_fu_617_p2;
wire   [20:0] add_ln50_fu_623_p2;
wire   [14:0] zext_ln50_fu_589_p1;
wire   [14:0] add_ln48_fu_633_p2;
reg   [38:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
end

top_B_outp #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_outp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_outp_address0),
    .ce0(B_outp_ce0),
    .we0(B_outp_we0),
    .d0(B_outp_d0),
    .q0(B_outp_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_280_p0),
    .din1(reg_294),
    .ce(1'b1),
    .dout(grp_fu_280_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_378_p2 == 1'd1))) begin
        B_i_0_reg_188 <= B_i_reg_646;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        B_i_0_reg_188 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        B_j_0_reg_223 <= B_j_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_j_0_reg_223 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_347_p2 == 1'd1))) begin
        B_k_0_reg_211 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln31_fu_408_p2 == 1'd1))) begin
        B_k_0_reg_211 <= B_k_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_305_p2 == 1'd1))) begin
        C_i_0_reg_234 <= 4'd0;
    end else if (((icmp_ln46_fu_547_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        C_i_0_reg_234 <= C_i_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        C_j_0_reg_269 <= C_j_reg_766;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        C_j_0_reg_269 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_516_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        C_k_0_reg_257 <= 10'd0;
    end else if (((icmp_ln47_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        C_k_0_reg_257 <= C_k_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        y_0_0_reg_245 <= y_0_reg_735;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln41_fu_474_p2 == 1'd0))) begin
        y_0_0_reg_245 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_0_3_reg_199 <= y_reg_661;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_305_p2 == 1'd0))) begin
        y_0_3_reg_199 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_i_reg_646 <= B_i_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_j_reg_697 <= B_j_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        B_k_reg_674 <= B_k_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln31_fu_408_p2 == 1'd0))) begin
        B_outp_addr_2_reg_707 <= sext_ln32_fu_469_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_i_reg_720 <= C_i_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        C_j_reg_766 <= C_j_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        C_k_reg_748 <= C_k_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_288 <= B_outp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_294 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_299 <= grp_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_305_p2 == 1'd0))) begin
        sub_ln33_reg_651[14 : 8] <= sub_ln33_fu_341_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln41_fu_474_p2 == 1'd0))) begin
        sub_ln44_reg_725[14 : 8] <= sub_ln44_fu_510_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v13_reg_689 <= v0_q0;
        zext_ln33_2_reg_684[9 : 0] <= zext_ln33_2_fu_404_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        v14_reg_712 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        v22_reg_786 <= v5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        v24_reg_781 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln47_fu_577_p2 == 1'd0))) begin
        v5_addr_1_reg_776 <= sext_ln48_fu_638_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        y_0_reg_735 <= y_0_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_661 <= y_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        zext_ln49_reg_758[9 : 0] <= zext_ln49_fu_573_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        B_outp_address0 = sext_ln49_fu_568_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20))) begin
        B_outp_address0 = B_outp_addr_2_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_outp_address0 = sext_ln28_fu_373_p1;
    end else begin
        B_outp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state24))) begin
        B_outp_ce0 = 1'b1;
    end else begin
        B_outp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        B_outp_d0 = reg_299;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_outp_d0 = v3_q0;
    end else begin
        B_outp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4))) begin
        B_outp_we0 = 1'b1;
    end else begin
        B_outp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_280_p0 = v22_reg_786;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_280_p0 = reg_288;
    end else begin
        grp_fu_280_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_284_p0 = reg_288;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_284_p0 = v13_reg_689;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_284_p1 = v24_reg_781;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_284_p1 = v14_reg_712;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v4_ce0 = 1'b1;
    end else begin
        v4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state39))) begin
        v5_address0 = v5_addr_1_reg_776;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        v5_address0 = sext_ln44_fu_542_p1;
    end else begin
        v5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state23))) begin
        v5_ce0 = 1'b1;
    end else begin
        v5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        v5_d0 = reg_299;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        v5_d0 = v4_q0;
    end else begin
        v5_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state23))) begin
        v5_we0 = 1'b1;
    end else begin
        v5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln30_fu_378_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln31_fu_408_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln41_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln42_fu_516_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln46_fu_547_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln47_fu_577_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_i_fu_311_p2 = (B_i_0_reg_188 + 4'd1);

assign B_j_fu_414_p2 = (B_j_0_reg_223 + 10'd1);

assign B_k_fu_384_p2 = (B_k_0_reg_211 + 10'd1);

assign C_i_fu_480_p2 = (C_i_0_reg_234 + 4'd1);

assign C_j_fu_583_p2 = (C_j_0_reg_269 + 10'd1);

assign C_k_fu_553_p2 = (C_k_0_reg_257 + 10'd1);

assign add_ln28_fu_368_p2 = (sub_ln33_reg_651 + zext_ln28_fu_364_p1);

assign add_ln32_fu_464_p2 = (sub_ln33_reg_651 + zext_ln34_fu_420_p1);

assign add_ln33_fu_394_p2 = (sub_ln33_reg_651 + zext_ln33_3_fu_390_p1);

assign add_ln34_fu_454_p2 = (sub_ln34_fu_448_p2 + zext_ln33_2_reg_684);

assign add_ln44_fu_537_p2 = (sub_ln44_reg_725 + zext_ln44_2_fu_533_p1);

assign add_ln48_fu_633_p2 = (sub_ln44_reg_725 + zext_ln50_fu_589_p1);

assign add_ln49_fu_563_p2 = (sub_ln44_reg_725 + zext_ln49_1_fu_559_p1);

assign add_ln50_fu_623_p2 = (sub_ln50_fu_617_p2 + zext_ln49_reg_758);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln25_fu_305_p2 = ((B_i_0_reg_188 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_347_p2 = ((y_0_3_reg_199 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_378_p2 = ((B_k_0_reg_211 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_408_p2 = ((B_j_0_reg_223 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_474_p2 = ((C_i_0_reg_234 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_516_p2 = ((y_0_0_reg_245 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_547_p2 = ((C_k_0_reg_257 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_577_p2 = ((C_j_0_reg_269 == 10'd768) ? 1'b1 : 1'b0);

assign sext_ln28_fu_373_p1 = $signed(add_ln28_fu_368_p2);

assign sext_ln32_fu_469_p1 = $signed(add_ln32_fu_464_p2);

assign sext_ln33_fu_399_p1 = $signed(add_ln33_fu_394_p2);

assign sext_ln34_fu_459_p1 = $signed(add_ln34_fu_454_p2);

assign sext_ln44_fu_542_p1 = $signed(add_ln44_fu_537_p2);

assign sext_ln48_fu_638_p1 = $signed(add_ln48_fu_633_p2);

assign sext_ln49_fu_568_p1 = $signed(add_ln49_fu_563_p2);

assign sext_ln50_fu_628_p1 = $signed(add_ln50_fu_623_p2);

assign sub_ln33_fu_341_p2 = (zext_ln33_fu_325_p1 - zext_ln33_1_fu_337_p1);

assign sub_ln34_fu_448_p2 = (zext_ln34_1_fu_432_p1 - zext_ln34_2_fu_444_p1);

assign sub_ln44_fu_510_p2 = (zext_ln44_fu_494_p1 - zext_ln44_1_fu_506_p1);

assign sub_ln50_fu_617_p2 = (zext_ln50_1_fu_601_p1 - zext_ln50_2_fu_613_p1);

assign tmp_10_fu_605_p3 = {{C_j_0_reg_269}, {8'd0}};

assign tmp_4_fu_317_p3 = {{B_i_0_reg_188}, {10'd0}};

assign tmp_5_fu_329_p3 = {{B_i_0_reg_188}, {8'd0}};

assign tmp_6_fu_486_p3 = {{C_i_0_reg_234}, {10'd0}};

assign tmp_7_fu_498_p3 = {{C_i_0_reg_234}, {8'd0}};

assign tmp_8_fu_424_p3 = {{B_j_0_reg_223}, {10'd0}};

assign tmp_9_fu_436_p3 = {{B_j_0_reg_223}, {8'd0}};

assign tmp_s_fu_593_p3 = {{C_j_0_reg_269}, {10'd0}};

assign v0_address0 = sext_ln33_fu_399_p1;

assign v1_address0 = sext_ln34_fu_459_p1;

assign v2_address0 = sext_ln50_fu_628_p1;

assign v3_address0 = zext_ln27_fu_359_p1;

assign v4_address0 = zext_ln43_fu_528_p1;

assign y_0_fu_522_p2 = (y_0_0_reg_245 + 10'd1);

assign y_fu_353_p2 = (y_0_3_reg_199 + 10'd1);

assign zext_ln27_fu_359_p1 = y_0_3_reg_199;

assign zext_ln28_fu_364_p1 = y_0_3_reg_199;

assign zext_ln33_1_fu_337_p1 = tmp_5_fu_329_p3;

assign zext_ln33_2_fu_404_p1 = B_k_0_reg_211;

assign zext_ln33_3_fu_390_p1 = B_k_0_reg_211;

assign zext_ln33_fu_325_p1 = tmp_4_fu_317_p3;

assign zext_ln34_1_fu_432_p1 = tmp_8_fu_424_p3;

assign zext_ln34_2_fu_444_p1 = tmp_9_fu_436_p3;

assign zext_ln34_fu_420_p1 = B_j_0_reg_223;

assign zext_ln43_fu_528_p1 = y_0_0_reg_245;

assign zext_ln44_1_fu_506_p1 = tmp_7_fu_498_p3;

assign zext_ln44_2_fu_533_p1 = y_0_0_reg_245;

assign zext_ln44_fu_494_p1 = tmp_6_fu_486_p3;

assign zext_ln49_1_fu_559_p1 = C_k_0_reg_257;

assign zext_ln49_fu_573_p1 = C_k_0_reg_257;

assign zext_ln50_1_fu_601_p1 = tmp_s_fu_593_p3;

assign zext_ln50_2_fu_613_p1 = tmp_10_fu_605_p3;

assign zext_ln50_fu_589_p1 = C_j_0_reg_269;

always @ (posedge ap_clk) begin
    sub_ln33_reg_651[7:0] <= 8'b00000000;
    zext_ln33_2_reg_684[20:10] <= 11'b00000000000;
    sub_ln44_reg_725[7:0] <= 8'b00000000;
    zext_ln49_reg_758[20:10] <= 11'b00000000000;
end

endmodule //top
