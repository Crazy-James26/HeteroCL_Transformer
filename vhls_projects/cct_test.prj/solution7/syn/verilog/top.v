// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=184135755,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=5,HLS_SYN_FF=969,HLS_SYN_LUT=1559,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_address0,
        v0_ce0,
        v0_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v0_address0;
output   v0_ce0;
input  [31:0] v0_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] v0_address0;
reg v0_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v3_we0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_298;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] reg_303;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] reg_308;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state39;
wire   [3:0] x_fu_321_p2;
reg   [3:0] x_reg_661;
wire    ap_CS_fsm_state2;
wire   [14:0] sub_ln30_fu_351_p2;
reg   [14:0] sub_ln30_reg_666;
wire   [0:0] icmp_ln23_fu_315_p2;
wire   [9:0] y_fu_363_p2;
reg   [9:0] y_reg_675;
wire    ap_CS_fsm_state3;
wire   [20:0] sub_ln31_fu_397_p2;
reg   [20:0] sub_ln31_reg_680;
wire   [0:0] icmp_ln24_fu_357_p2;
reg   [13:0] B_addr_reg_685;
wire   [9:0] r_fu_419_p2;
reg   [9:0] r_reg_693;
wire    ap_CS_fsm_state4;
wire   [14:0] add_ln30_fu_433_p2;
reg   [14:0] add_ln30_reg_698;
wire   [0:0] icmp_ln28_fu_413_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] v11_reg_713;
wire   [3:0] x_0_fu_458_p2;
reg   [3:0] x_0_reg_721;
wire    ap_CS_fsm_state17;
wire   [14:0] sub_ln50_fu_488_p2;
reg   [14:0] sub_ln50_reg_726;
wire   [0:0] icmp_ln43_fu_452_p2;
wire   [9:0] y_0_fu_500_p2;
reg   [9:0] y_0_reg_735;
wire    ap_CS_fsm_state18;
wire   [20:0] sub_ln51_fu_534_p2;
reg   [20:0] sub_ln51_reg_740;
wire   [0:0] icmp_ln44_fu_494_p2;
reg   [13:0] C_addr_1_reg_745;
wire   [9:0] r1_fu_556_p2;
reg   [9:0] r1_reg_753;
wire    ap_CS_fsm_state19;
wire   [14:0] add_ln50_fu_570_p2;
reg   [14:0] add_ln50_reg_758;
wire   [0:0] icmp_ln48_fu_550_p2;
wire    ap_CS_fsm_state21;
reg   [31:0] v23_reg_773;
wire   [3:0] x_1_fu_595_p2;
reg   [3:0] x_1_reg_781;
wire    ap_CS_fsm_state32;
wire   [14:0] sub_ln67_fu_625_p2;
reg   [14:0] sub_ln67_reg_786;
wire   [0:0] icmp_ln62_fu_589_p2;
wire   [9:0] y_1_fu_637_p2;
reg   [9:0] y_1_reg_794;
wire    ap_CS_fsm_state33;
wire  signed [63:0] sext_ln67_fu_652_p1;
reg  signed [63:0] sext_ln67_reg_799;
wire   [0:0] icmp_ln63_fu_631_p2;
wire   [31:0] B_q0;
reg   [31:0] v30_reg_814;
wire    ap_CS_fsm_state34;
wire   [31:0] C_q0;
reg   [31:0] v31_reg_819;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [13:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [3:0] x_0_3_reg_174;
reg   [9:0] y_0_4_reg_185;
reg   [9:0] r_0_reg_196;
reg   [31:0] v13_reg_207;
reg   [3:0] x_0_0_reg_220;
reg   [9:0] y_0_0_reg_231;
reg   [31:0] v25_reg_242;
reg   [9:0] r1_0_reg_255;
reg   [3:0] x_1_0_reg_266;
reg   [9:0] y_1_0_reg_277;
wire    ap_CS_fsm_state40;
wire  signed [63:0] sext_ln39_fu_408_p1;
wire  signed [63:0] sext_ln31_fu_443_p1;
wire  signed [63:0] sext_ln30_fu_448_p1;
wire  signed [63:0] sext_ln59_fu_545_p1;
wire  signed [63:0] sext_ln51_fu_580_p1;
wire  signed [63:0] sext_ln50_fu_585_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state20;
reg   [31:0] grp_fu_288_p0;
reg   [31:0] grp_fu_288_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_294_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state23;
wire   [13:0] tmp_5_fu_327_p3;
wire   [11:0] tmp_6_fu_339_p3;
wire   [14:0] zext_ln30_fu_335_p1;
wire   [14:0] zext_ln30_1_fu_347_p1;
wire   [19:0] tmp_9_fu_373_p3;
wire   [17:0] tmp_s_fu_385_p3;
wire   [20:0] zext_ln31_1_fu_381_p1;
wire   [20:0] zext_ln31_2_fu_393_p1;
wire   [14:0] zext_ln31_fu_369_p1;
wire   [14:0] add_ln39_fu_403_p2;
wire   [14:0] zext_ln30_3_fu_429_p1;
wire   [20:0] zext_ln30_2_fu_425_p1;
wire   [20:0] add_ln31_fu_438_p2;
wire   [13:0] tmp_7_fu_464_p3;
wire   [11:0] tmp_8_fu_476_p3;
wire   [14:0] zext_ln50_fu_472_p1;
wire   [14:0] zext_ln50_1_fu_484_p1;
wire   [19:0] tmp_12_fu_510_p3;
wire   [17:0] tmp_13_fu_522_p3;
wire   [20:0] zext_ln51_1_fu_518_p1;
wire   [20:0] zext_ln51_2_fu_530_p1;
wire   [14:0] zext_ln51_fu_506_p1;
wire   [14:0] add_ln59_fu_540_p2;
wire   [14:0] zext_ln50_3_fu_566_p1;
wire   [20:0] zext_ln50_2_fu_562_p1;
wire   [20:0] add_ln51_fu_575_p2;
wire   [13:0] tmp_10_fu_601_p3;
wire   [11:0] tmp_11_fu_613_p3;
wire   [14:0] zext_ln67_fu_609_p1;
wire   [14:0] zext_ln67_1_fu_621_p1;
wire   [14:0] zext_ln67_2_fu_643_p1;
wire   [14:0] add_ln67_fu_647_p2;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(v13_reg_207),
    .q0(B_q0)
);

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(v25_reg_242),
    .q0(C_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .din1(grp_fu_288_p1),
    .ce(1'b1),
    .dout(grp_fu_288_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_298),
    .din1(grp_fu_294_p1),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        r1_0_reg_255 <= r1_reg_753;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln44_fu_494_p2 == 1'd0))) begin
        r1_0_reg_255 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_0_reg_196 <= r_reg_693;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_357_p2 == 1'd0))) begin
        r_0_reg_196 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v13_reg_207 <= grp_fu_288_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_357_p2 == 1'd0))) begin
        v13_reg_207 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        v25_reg_242 <= grp_fu_288_p2;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln44_fu_494_p2 == 1'd0))) begin
        v25_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_315_p2 == 1'd1))) begin
        x_0_0_reg_220 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln44_fu_494_p2 == 1'd1))) begin
        x_0_0_reg_220 <= x_0_reg_721;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_357_p2 == 1'd1))) begin
        x_0_3_reg_174 <= x_reg_661;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_3_reg_174 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_452_p2 == 1'd1))) begin
        x_1_0_reg_266 <= 4'd0;
    end else if (((icmp_ln63_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        x_1_0_reg_266 <= x_1_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_550_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        y_0_0_reg_231 <= y_0_reg_735;
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_452_p2 == 1'd0))) begin
        y_0_0_reg_231 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln28_fu_413_p2 == 1'd1))) begin
        y_0_4_reg_185 <= y_reg_675;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_315_p2 == 1'd0))) begin
        y_0_4_reg_185 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        y_1_0_reg_277 <= y_1_reg_794;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln62_fu_589_p2 == 1'd0))) begin
        y_1_0_reg_277 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_357_p2 == 1'd0))) begin
        B_addr_reg_685 <= sext_ln39_fu_408_p1;
        sub_ln31_reg_680[20 : 8] <= sub_ln31_fu_397_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln44_fu_494_p2 == 1'd0))) begin
        C_addr_1_reg_745 <= sext_ln59_fu_545_p1;
        sub_ln51_reg_740[20 : 8] <= sub_ln51_fu_534_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln28_fu_413_p2 == 1'd0))) begin
        add_ln30_reg_698 <= add_ln30_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln48_fu_550_p2 == 1'd0))) begin
        add_ln50_reg_758 <= add_ln50_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r1_reg_753 <= r1_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_reg_693 <= r_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_298 <= v0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_303 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_308 <= grp_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln63_fu_631_p2 == 1'd0))) begin
        sext_ln67_reg_799 <= sext_ln67_fu_652_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_315_p2 == 1'd0))) begin
        sub_ln30_reg_666[14 : 8] <= sub_ln30_fu_351_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_452_p2 == 1'd0))) begin
        sub_ln50_reg_726[14 : 8] <= sub_ln50_fu_488_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln62_fu_589_p2 == 1'd0))) begin
        sub_ln67_reg_786[14 : 8] <= sub_ln67_fu_625_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v11_reg_713 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v23_reg_773 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        v30_reg_814 <= B_q0;
        v31_reg_819 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_0_reg_721 <= x_0_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        x_1_reg_781 <= x_1_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_661 <= x_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        y_0_reg_735 <= y_0_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        y_1_reg_794 <= y_1_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_675 <= y_fu_363_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        B_address0 = sext_ln67_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = B_addr_reg_685;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln28_fu_413_p2 == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        C_address0 = sext_ln67_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        C_address0 = C_addr_1_reg_745;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_550_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_288_p0 = v30_reg_814;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_288_p0 = reg_303;
    end else begin
        grp_fu_288_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_288_p1 = v31_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_288_p1 = v25_reg_242;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_288_p1 = v13_reg_207;
    end else begin
        grp_fu_288_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_294_p1 = v23_reg_773;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_294_p1 = v11_reg_713;
    end else begin
        grp_fu_294_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        v0_address0 = sext_ln50_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_address0 = sext_ln30_fu_448_p1;
    end else begin
        v0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6))) begin
        v0_ce0 = 1'b1;
    end else begin
        v0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_357_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln28_fu_413_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_452_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln44_fu_494_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln48_fu_550_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln62_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((icmp_ln63_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_433_p2 = (sub_ln30_reg_666 + zext_ln30_3_fu_429_p1);

assign add_ln31_fu_438_p2 = (sub_ln31_reg_680 + zext_ln30_2_fu_425_p1);

assign add_ln39_fu_403_p2 = (sub_ln30_reg_666 + zext_ln31_fu_369_p1);

assign add_ln50_fu_570_p2 = (sub_ln50_reg_726 + zext_ln50_3_fu_566_p1);

assign add_ln51_fu_575_p2 = (sub_ln51_reg_740 + zext_ln50_2_fu_562_p1);

assign add_ln59_fu_540_p2 = (sub_ln50_reg_726 + zext_ln51_fu_506_p1);

assign add_ln67_fu_647_p2 = (sub_ln67_reg_786 + zext_ln67_2_fu_643_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln23_fu_315_p2 = ((x_0_3_reg_174 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_357_p2 = ((y_0_4_reg_185 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_413_p2 = ((r_0_reg_196 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_452_p2 = ((x_0_0_reg_220 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_494_p2 = ((y_0_0_reg_231 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_550_p2 = ((r1_0_reg_255 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_589_p2 = ((x_1_0_reg_266 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_631_p2 = ((y_1_0_reg_277 == 10'd768) ? 1'b1 : 1'b0);

assign r1_fu_556_p2 = (r1_0_reg_255 + 10'd1);

assign r_fu_419_p2 = (r_0_reg_196 + 10'd1);

assign sext_ln30_fu_448_p1 = $signed(add_ln30_reg_698);

assign sext_ln31_fu_443_p1 = $signed(add_ln31_fu_438_p2);

assign sext_ln39_fu_408_p1 = $signed(add_ln39_fu_403_p2);

assign sext_ln50_fu_585_p1 = $signed(add_ln50_reg_758);

assign sext_ln51_fu_580_p1 = $signed(add_ln51_fu_575_p2);

assign sext_ln59_fu_545_p1 = $signed(add_ln59_fu_540_p2);

assign sext_ln67_fu_652_p1 = $signed(add_ln67_fu_647_p2);

assign sub_ln30_fu_351_p2 = (zext_ln30_fu_335_p1 - zext_ln30_1_fu_347_p1);

assign sub_ln31_fu_397_p2 = (zext_ln31_1_fu_381_p1 - zext_ln31_2_fu_393_p1);

assign sub_ln50_fu_488_p2 = (zext_ln50_fu_472_p1 - zext_ln50_1_fu_484_p1);

assign sub_ln51_fu_534_p2 = (zext_ln51_1_fu_518_p1 - zext_ln51_2_fu_530_p1);

assign sub_ln67_fu_625_p2 = (zext_ln67_fu_609_p1 - zext_ln67_1_fu_621_p1);

assign tmp_10_fu_601_p3 = {{x_1_0_reg_266}, {10'd0}};

assign tmp_11_fu_613_p3 = {{x_1_0_reg_266}, {8'd0}};

assign tmp_12_fu_510_p3 = {{y_0_0_reg_231}, {10'd0}};

assign tmp_13_fu_522_p3 = {{y_0_0_reg_231}, {8'd0}};

assign tmp_5_fu_327_p3 = {{x_0_3_reg_174}, {10'd0}};

assign tmp_6_fu_339_p3 = {{x_0_3_reg_174}, {8'd0}};

assign tmp_7_fu_464_p3 = {{x_0_0_reg_220}, {10'd0}};

assign tmp_8_fu_476_p3 = {{x_0_0_reg_220}, {8'd0}};

assign tmp_9_fu_373_p3 = {{y_0_4_reg_185}, {10'd0}};

assign tmp_s_fu_385_p3 = {{y_0_4_reg_185}, {8'd0}};

assign v1_address0 = sext_ln31_fu_443_p1;

assign v2_address0 = sext_ln51_fu_580_p1;

assign v3_address0 = sext_ln67_reg_799;

assign v3_d0 = reg_308;

assign x_0_fu_458_p2 = (x_0_0_reg_220 + 4'd1);

assign x_1_fu_595_p2 = (x_1_0_reg_266 + 4'd1);

assign x_fu_321_p2 = (x_0_3_reg_174 + 4'd1);

assign y_0_fu_500_p2 = (y_0_0_reg_231 + 10'd1);

assign y_1_fu_637_p2 = (y_1_0_reg_277 + 10'd1);

assign y_fu_363_p2 = (y_0_4_reg_185 + 10'd1);

assign zext_ln30_1_fu_347_p1 = tmp_6_fu_339_p3;

assign zext_ln30_2_fu_425_p1 = r_0_reg_196;

assign zext_ln30_3_fu_429_p1 = r_0_reg_196;

assign zext_ln30_fu_335_p1 = tmp_5_fu_327_p3;

assign zext_ln31_1_fu_381_p1 = tmp_9_fu_373_p3;

assign zext_ln31_2_fu_393_p1 = tmp_s_fu_385_p3;

assign zext_ln31_fu_369_p1 = y_0_4_reg_185;

assign zext_ln50_1_fu_484_p1 = tmp_8_fu_476_p3;

assign zext_ln50_2_fu_562_p1 = r1_0_reg_255;

assign zext_ln50_3_fu_566_p1 = r1_0_reg_255;

assign zext_ln50_fu_472_p1 = tmp_7_fu_464_p3;

assign zext_ln51_1_fu_518_p1 = tmp_12_fu_510_p3;

assign zext_ln51_2_fu_530_p1 = tmp_13_fu_522_p3;

assign zext_ln51_fu_506_p1 = y_0_0_reg_231;

assign zext_ln67_1_fu_621_p1 = tmp_11_fu_613_p3;

assign zext_ln67_2_fu_643_p1 = y_1_0_reg_277;

assign zext_ln67_fu_609_p1 = tmp_10_fu_601_p3;

always @ (posedge ap_clk) begin
    sub_ln30_reg_666[7:0] <= 8'b00000000;
    sub_ln31_reg_680[7:0] <= 8'b00000000;
    sub_ln50_reg_726[7:0] <= 8'b00000000;
    sub_ln51_reg_740[7:0] <= 8'b00000000;
    sub_ln67_reg_786[7:0] <= 8'b00000000;
end

endmodule //top
