// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=184135755,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=5,HLS_SYN_FF=1015,HLS_SYN_LUT=1687,HLS_VERSION=2019_2_1}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v0_0_address0,
        v0_0_ce0,
        v0_0_q0,
        v0_1_address0,
        v0_1_ce0,
        v0_1_q0,
        v1_address0,
        v1_ce0,
        v1_q0,
        v2_address0,
        v2_ce0,
        v2_q0,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] v0_0_address0;
output   v0_0_ce0;
input  [31:0] v0_0_q0;
output  [12:0] v0_1_address0;
output   v0_1_ce0;
input  [31:0] v0_1_q0;
output  [19:0] v1_address0;
output   v1_ce0;
input  [31:0] v1_q0;
output  [19:0] v2_address0;
output   v2_ce0;
input  [31:0] v2_q0;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [31:0] v3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] v0_0_address0;
reg v0_0_ce0;
reg[12:0] v0_1_address0;
reg v0_1_ce0;
reg v1_ce0;
reg v2_ce0;
reg v3_ce0;
reg v3_we0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_331_p2;
reg   [31:0] reg_335;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_325_p2;
reg   [31:0] reg_340;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state39;
wire   [3:0] x_fu_353_p2;
reg   [3:0] x_reg_797;
wire    ap_CS_fsm_state2;
wire   [13:0] sub_ln32_fu_383_p2;
reg   [13:0] sub_ln32_reg_802;
wire   [0:0] icmp_ln25_fu_347_p2;
wire   [14:0] sub_ln41_fu_413_p2;
reg   [14:0] sub_ln41_reg_807;
wire   [9:0] y_fu_425_p2;
reg   [9:0] y_reg_815;
wire    ap_CS_fsm_state3;
wire   [20:0] sub_ln33_fu_459_p2;
reg   [20:0] sub_ln33_reg_820;
wire   [0:0] icmp_ln26_fu_419_p2;
reg   [13:0] B_addr_reg_825;
wire   [9:0] r_fu_481_p2;
reg   [9:0] r_reg_833;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln30_fu_475_p2;
wire   [0:0] trunc_ln32_fu_501_p1;
reg   [0:0] trunc_ln32_reg_843;
wire   [13:0] add_ln32_fu_519_p2;
reg   [13:0] add_ln32_reg_848;
wire    ap_CS_fsm_state6;
wire   [31:0] v10_fu_529_p3;
reg   [31:0] v10_reg_863;
wire    ap_CS_fsm_state7;
reg   [31:0] v11_reg_868;
wire   [3:0] x_0_fu_542_p2;
reg   [3:0] x_0_reg_876;
wire    ap_CS_fsm_state17;
wire   [13:0] sub_ln52_fu_572_p2;
reg   [13:0] sub_ln52_reg_881;
wire   [0:0] icmp_ln45_fu_536_p2;
wire   [14:0] sub_ln61_fu_602_p2;
reg   [14:0] sub_ln61_reg_886;
wire   [9:0] y_0_fu_614_p2;
reg   [9:0] y_0_reg_894;
wire    ap_CS_fsm_state18;
wire   [20:0] sub_ln53_fu_648_p2;
reg   [20:0] sub_ln53_reg_899;
wire   [0:0] icmp_ln46_fu_608_p2;
reg   [13:0] C_addr_1_reg_904;
wire   [9:0] r1_fu_670_p2;
reg   [9:0] r1_reg_912;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln50_fu_664_p2;
wire   [0:0] trunc_ln52_fu_690_p1;
reg   [0:0] trunc_ln52_reg_922;
wire   [13:0] add_ln52_fu_708_p2;
reg   [13:0] add_ln52_reg_927;
wire    ap_CS_fsm_state21;
wire   [31:0] v22_fu_718_p3;
reg   [31:0] v22_reg_942;
wire    ap_CS_fsm_state22;
reg   [31:0] v23_reg_947;
wire   [3:0] x_1_fu_731_p2;
reg   [3:0] x_1_reg_955;
wire    ap_CS_fsm_state32;
wire   [14:0] sub_ln69_fu_761_p2;
reg   [14:0] sub_ln69_reg_960;
wire   [0:0] icmp_ln64_fu_725_p2;
wire   [9:0] y_1_fu_773_p2;
reg   [9:0] y_1_reg_968;
wire    ap_CS_fsm_state33;
wire  signed [63:0] sext_ln69_fu_788_p1;
reg  signed [63:0] sext_ln69_reg_973;
wire   [0:0] icmp_ln65_fu_767_p2;
wire   [31:0] B_q0;
reg   [31:0] v30_reg_988;
wire    ap_CS_fsm_state34;
wire   [31:0] C_q0;
reg   [31:0] v31_reg_993;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [13:0] C_address0;
reg    C_ce0;
reg    C_we0;
reg   [3:0] x_0_5_reg_211;
reg   [9:0] y_0_6_reg_222;
reg   [9:0] r_0_reg_233;
reg   [31:0] v13_reg_244;
reg   [3:0] x_0_0_reg_257;
reg   [9:0] y_0_0_reg_268;
reg   [31:0] v25_reg_279;
reg   [9:0] r1_0_reg_292;
reg   [3:0] x_1_0_reg_303;
reg   [9:0] y_1_0_reg_314;
wire    ap_CS_fsm_state40;
wire  signed [63:0] sext_ln41_fu_470_p1;
wire  signed [63:0] sext_ln33_fu_496_p1;
wire  signed [63:0] sext_ln32_fu_524_p1;
wire  signed [63:0] sext_ln61_fu_659_p1;
wire  signed [63:0] sext_ln53_fu_685_p1;
wire  signed [63:0] sext_ln52_fu_713_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state20;
reg   [31:0] grp_fu_325_p0;
reg   [31:0] grp_fu_325_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_331_p0;
reg   [31:0] grp_fu_331_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state23;
wire   [12:0] tmp_5_fu_359_p3;
wire   [10:0] tmp_6_fu_371_p3;
wire   [13:0] zext_ln32_fu_367_p1;
wire   [13:0] zext_ln32_1_fu_379_p1;
wire   [13:0] tmp_7_fu_389_p3;
wire   [11:0] tmp_8_fu_401_p3;
wire   [14:0] zext_ln41_fu_397_p1;
wire   [14:0] zext_ln41_1_fu_409_p1;
wire   [19:0] tmp_12_fu_435_p3;
wire   [17:0] tmp_13_fu_447_p3;
wire   [20:0] zext_ln33_1_fu_443_p1;
wire   [20:0] zext_ln33_2_fu_455_p1;
wire   [14:0] zext_ln33_fu_431_p1;
wire   [14:0] add_ln41_fu_465_p2;
wire   [20:0] zext_ln33_3_fu_487_p1;
wire   [20:0] add_ln33_fu_491_p2;
wire   [8:0] tmp_18_fu_505_p4;
wire   [13:0] zext_ln32_2_fu_515_p1;
wire   [12:0] tmp_9_fu_548_p3;
wire   [10:0] tmp_s_fu_560_p3;
wire   [13:0] zext_ln52_fu_556_p1;
wire   [13:0] zext_ln52_1_fu_568_p1;
wire   [13:0] tmp_10_fu_578_p3;
wire   [11:0] tmp_11_fu_590_p3;
wire   [14:0] zext_ln61_fu_586_p1;
wire   [14:0] zext_ln61_1_fu_598_p1;
wire   [19:0] tmp_16_fu_624_p3;
wire   [17:0] tmp_17_fu_636_p3;
wire   [20:0] zext_ln53_1_fu_632_p1;
wire   [20:0] zext_ln53_2_fu_644_p1;
wire   [14:0] zext_ln53_fu_620_p1;
wire   [14:0] add_ln61_fu_654_p2;
wire   [20:0] zext_ln53_3_fu_676_p1;
wire   [20:0] add_ln53_fu_680_p2;
wire   [8:0] tmp_19_fu_694_p4;
wire   [13:0] zext_ln52_2_fu_704_p1;
wire   [13:0] tmp_14_fu_737_p3;
wire   [11:0] tmp_15_fu_749_p3;
wire   [14:0] zext_ln69_fu_745_p1;
wire   [14:0] zext_ln69_1_fu_757_p1;
wire   [14:0] zext_ln69_2_fu_779_p1;
wire   [14:0] add_ln69_fu_783_p2;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(v13_reg_244),
    .q0(B_q0)
);

top_B #(
    .DataWidth( 32 ),
    .AddressRange( 9216 ),
    .AddressWidth( 14 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(v25_reg_279),
    .q0(C_q0)
);

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_325_p0),
    .din1(grp_fu_325_p1),
    .ce(1'b1),
    .dout(grp_fu_325_p2)
);

top_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fmul_32ns_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_331_p0),
    .din1(grp_fu_331_p1),
    .ce(1'b1),
    .dout(grp_fu_331_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        r1_0_reg_292 <= r1_reg_912;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln46_fu_608_p2 == 1'd0))) begin
        r1_0_reg_292 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_0_reg_233 <= r_reg_833;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_419_p2 == 1'd0))) begin
        r_0_reg_233 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v13_reg_244 <= grp_fu_325_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_419_p2 == 1'd0))) begin
        v13_reg_244 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        v25_reg_279 <= grp_fu_325_p2;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln46_fu_608_p2 == 1'd0))) begin
        v25_reg_279 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_347_p2 == 1'd1))) begin
        x_0_0_reg_257 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln46_fu_608_p2 == 1'd1))) begin
        x_0_0_reg_257 <= x_0_reg_876;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_419_p2 == 1'd1))) begin
        x_0_5_reg_211 <= x_reg_797;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_5_reg_211 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_536_p2 == 1'd1))) begin
        x_1_0_reg_303 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln65_fu_767_p2 == 1'd1))) begin
        x_1_0_reg_303 <= x_1_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln50_fu_664_p2 == 1'd1))) begin
        y_0_0_reg_268 <= y_0_reg_894;
    end else if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_536_p2 == 1'd0))) begin
        y_0_0_reg_268 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_475_p2 == 1'd1))) begin
        y_0_6_reg_222 <= y_reg_815;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_347_p2 == 1'd0))) begin
        y_0_6_reg_222 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        y_1_0_reg_314 <= y_1_reg_968;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln64_fu_725_p2 == 1'd0))) begin
        y_1_0_reg_314 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_419_p2 == 1'd0))) begin
        B_addr_reg_825 <= sext_ln41_fu_470_p1;
        sub_ln33_reg_820[20 : 8] <= sub_ln33_fu_459_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln46_fu_608_p2 == 1'd0))) begin
        C_addr_1_reg_904 <= sext_ln61_fu_659_p1;
        sub_ln53_reg_899[20 : 8] <= sub_ln53_fu_648_p2[20 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_475_p2 == 1'd0))) begin
        add_ln32_reg_848 <= add_ln32_fu_519_p2;
        trunc_ln32_reg_843 <= trunc_ln32_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln50_fu_664_p2 == 1'd0))) begin
        add_ln52_reg_927 <= add_ln52_fu_708_p2;
        trunc_ln52_reg_922 <= trunc_ln52_fu_690_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r1_reg_912 <= r1_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_reg_833 <= r_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_335 <= grp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_340 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln65_fu_767_p2 == 1'd0))) begin
        sext_ln69_reg_973 <= sext_ln69_fu_788_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_347_p2 == 1'd0))) begin
        sub_ln32_reg_802[13 : 7] <= sub_ln32_fu_383_p2[13 : 7];
        sub_ln41_reg_807[14 : 8] <= sub_ln41_fu_413_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_536_p2 == 1'd0))) begin
        sub_ln52_reg_881[13 : 7] <= sub_ln52_fu_572_p2[13 : 7];
        sub_ln61_reg_886[14 : 8] <= sub_ln61_fu_602_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln64_fu_725_p2 == 1'd0))) begin
        sub_ln69_reg_960[14 : 8] <= sub_ln69_fu_761_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v10_reg_863 <= v10_fu_529_p3;
        v11_reg_868 <= v1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        v22_reg_942 <= v22_fu_718_p3;
        v23_reg_947 <= v2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        v30_reg_988 <= B_q0;
        v31_reg_993 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        x_0_reg_876 <= x_0_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        x_1_reg_955 <= x_1_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_797 <= x_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        y_0_reg_894 <= y_0_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        y_1_reg_968 <= y_1_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_815 <= y_fu_425_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        B_address0 = sext_ln69_fu_788_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = B_addr_reg_825;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_475_p2 == 1'd1))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        C_address0 = sext_ln69_fu_788_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        C_address0 = C_addr_1_reg_904;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state19))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln50_fu_664_p2 == 1'd1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln64_fu_725_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln64_fu_725_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_325_p0 = v30_reg_988;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_325_p0 = reg_335;
    end else begin
        grp_fu_325_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_325_p1 = v31_reg_993;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_325_p1 = v25_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_325_p1 = v13_reg_244;
    end else begin
        grp_fu_325_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_331_p0 = v22_reg_942;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_331_p0 = v10_reg_863;
    end else begin
        grp_fu_331_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_331_p1 = v23_reg_947;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_331_p1 = v11_reg_868;
    end else begin
        grp_fu_331_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        v0_0_address0 = sext_ln52_fu_713_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_0_address0 = sext_ln32_fu_524_p1;
    end else begin
        v0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6))) begin
        v0_0_ce0 = 1'b1;
    end else begin
        v0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        v0_1_address0 = sext_ln52_fu_713_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_1_address0 = sext_ln32_fu_524_p1;
    end else begin
        v0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state6))) begin
        v0_1_ce0 = 1'b1;
    end else begin
        v0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        v1_ce0 = 1'b1;
    end else begin
        v1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        v2_ce0 = 1'b1;
    end else begin
        v2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln25_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_419_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_475_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln45_fu_536_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln46_fu_608_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln50_fu_664_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln64_fu_725_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (icmp_ln65_fu_767_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_519_p2 = (sub_ln32_reg_802 + zext_ln32_2_fu_515_p1);

assign add_ln33_fu_491_p2 = (sub_ln33_reg_820 + zext_ln33_3_fu_487_p1);

assign add_ln41_fu_465_p2 = (sub_ln41_reg_807 + zext_ln33_fu_431_p1);

assign add_ln52_fu_708_p2 = (sub_ln52_reg_881 + zext_ln52_2_fu_704_p1);

assign add_ln53_fu_680_p2 = (sub_ln53_reg_899 + zext_ln53_3_fu_676_p1);

assign add_ln61_fu_654_p2 = (sub_ln61_reg_886 + zext_ln53_fu_620_p1);

assign add_ln69_fu_783_p2 = (sub_ln69_reg_960 + zext_ln69_2_fu_779_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign icmp_ln25_fu_347_p2 = ((x_0_5_reg_211 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_419_p2 = ((y_0_6_reg_222 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_475_p2 = ((r_0_reg_233 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_536_p2 = ((x_0_0_reg_257 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_608_p2 = ((y_0_0_reg_268 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_664_p2 = ((r1_0_reg_292 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_725_p2 = ((x_1_0_reg_303 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_767_p2 = ((y_1_0_reg_314 == 10'd768) ? 1'b1 : 1'b0);

assign r1_fu_670_p2 = (r1_0_reg_292 + 10'd1);

assign r_fu_481_p2 = (r_0_reg_233 + 10'd1);

assign sext_ln32_fu_524_p1 = $signed(add_ln32_reg_848);

assign sext_ln33_fu_496_p1 = $signed(add_ln33_fu_491_p2);

assign sext_ln41_fu_470_p1 = $signed(add_ln41_fu_465_p2);

assign sext_ln52_fu_713_p1 = $signed(add_ln52_reg_927);

assign sext_ln53_fu_685_p1 = $signed(add_ln53_fu_680_p2);

assign sext_ln61_fu_659_p1 = $signed(add_ln61_fu_654_p2);

assign sext_ln69_fu_788_p1 = $signed(add_ln69_fu_783_p2);

assign sub_ln32_fu_383_p2 = (zext_ln32_fu_367_p1 - zext_ln32_1_fu_379_p1);

assign sub_ln33_fu_459_p2 = (zext_ln33_1_fu_443_p1 - zext_ln33_2_fu_455_p1);

assign sub_ln41_fu_413_p2 = (zext_ln41_fu_397_p1 - zext_ln41_1_fu_409_p1);

assign sub_ln52_fu_572_p2 = (zext_ln52_fu_556_p1 - zext_ln52_1_fu_568_p1);

assign sub_ln53_fu_648_p2 = (zext_ln53_1_fu_632_p1 - zext_ln53_2_fu_644_p1);

assign sub_ln61_fu_602_p2 = (zext_ln61_fu_586_p1 - zext_ln61_1_fu_598_p1);

assign sub_ln69_fu_761_p2 = (zext_ln69_fu_745_p1 - zext_ln69_1_fu_757_p1);

assign tmp_10_fu_578_p3 = {{x_0_0_reg_257}, {10'd0}};

assign tmp_11_fu_590_p3 = {{x_0_0_reg_257}, {8'd0}};

assign tmp_12_fu_435_p3 = {{y_0_6_reg_222}, {10'd0}};

assign tmp_13_fu_447_p3 = {{y_0_6_reg_222}, {8'd0}};

assign tmp_14_fu_737_p3 = {{x_1_0_reg_303}, {10'd0}};

assign tmp_15_fu_749_p3 = {{x_1_0_reg_303}, {8'd0}};

assign tmp_16_fu_624_p3 = {{y_0_0_reg_268}, {10'd0}};

assign tmp_17_fu_636_p3 = {{y_0_0_reg_268}, {8'd0}};

assign tmp_18_fu_505_p4 = {{r_0_reg_233[9:1]}};

assign tmp_19_fu_694_p4 = {{r1_0_reg_292[9:1]}};

assign tmp_5_fu_359_p3 = {{x_0_5_reg_211}, {9'd0}};

assign tmp_6_fu_371_p3 = {{x_0_5_reg_211}, {7'd0}};

assign tmp_7_fu_389_p3 = {{x_0_5_reg_211}, {10'd0}};

assign tmp_8_fu_401_p3 = {{x_0_5_reg_211}, {8'd0}};

assign tmp_9_fu_548_p3 = {{x_0_0_reg_257}, {9'd0}};

assign tmp_s_fu_560_p3 = {{x_0_0_reg_257}, {7'd0}};

assign trunc_ln32_fu_501_p1 = r_0_reg_233[0:0];

assign trunc_ln52_fu_690_p1 = r1_0_reg_292[0:0];

assign v10_fu_529_p3 = ((trunc_ln32_reg_843[0:0] === 1'b1) ? v0_1_q0 : v0_0_q0);

assign v1_address0 = sext_ln33_fu_496_p1;

assign v22_fu_718_p3 = ((trunc_ln52_reg_922[0:0] === 1'b1) ? v0_1_q0 : v0_0_q0);

assign v2_address0 = sext_ln53_fu_685_p1;

assign v3_address0 = sext_ln69_reg_973;

assign v3_d0 = reg_340;

assign x_0_fu_542_p2 = (x_0_0_reg_257 + 4'd1);

assign x_1_fu_731_p2 = (x_1_0_reg_303 + 4'd1);

assign x_fu_353_p2 = (x_0_5_reg_211 + 4'd1);

assign y_0_fu_614_p2 = (y_0_0_reg_268 + 10'd1);

assign y_1_fu_773_p2 = (y_1_0_reg_314 + 10'd1);

assign y_fu_425_p2 = (y_0_6_reg_222 + 10'd1);

assign zext_ln32_1_fu_379_p1 = tmp_6_fu_371_p3;

assign zext_ln32_2_fu_515_p1 = tmp_18_fu_505_p4;

assign zext_ln32_fu_367_p1 = tmp_5_fu_359_p3;

assign zext_ln33_1_fu_443_p1 = tmp_12_fu_435_p3;

assign zext_ln33_2_fu_455_p1 = tmp_13_fu_447_p3;

assign zext_ln33_3_fu_487_p1 = r_0_reg_233;

assign zext_ln33_fu_431_p1 = y_0_6_reg_222;

assign zext_ln41_1_fu_409_p1 = tmp_8_fu_401_p3;

assign zext_ln41_fu_397_p1 = tmp_7_fu_389_p3;

assign zext_ln52_1_fu_568_p1 = tmp_s_fu_560_p3;

assign zext_ln52_2_fu_704_p1 = tmp_19_fu_694_p4;

assign zext_ln52_fu_556_p1 = tmp_9_fu_548_p3;

assign zext_ln53_1_fu_632_p1 = tmp_16_fu_624_p3;

assign zext_ln53_2_fu_644_p1 = tmp_17_fu_636_p3;

assign zext_ln53_3_fu_676_p1 = r1_0_reg_292;

assign zext_ln53_fu_620_p1 = y_0_0_reg_268;

assign zext_ln61_1_fu_598_p1 = tmp_11_fu_590_p3;

assign zext_ln61_fu_586_p1 = tmp_10_fu_578_p3;

assign zext_ln69_1_fu_757_p1 = tmp_15_fu_749_p3;

assign zext_ln69_2_fu_779_p1 = y_1_0_reg_314;

assign zext_ln69_fu_745_p1 = tmp_14_fu_737_p3;

always @ (posedge ap_clk) begin
    sub_ln32_reg_802[6:0] <= 7'b0000000;
    sub_ln41_reg_807[7:0] <= 8'b00000000;
    sub_ln33_reg_820[7:0] <= 8'b00000000;
    sub_ln52_reg_881[6:0] <= 7'b0000000;
    sub_ln61_reg_886[7:0] <= 8'b00000000;
    sub_ln53_reg_899[7:0] <= 8'b00000000;
    sub_ln69_reg_960[7:0] <= 8'b00000000;
end

endmodule //top
