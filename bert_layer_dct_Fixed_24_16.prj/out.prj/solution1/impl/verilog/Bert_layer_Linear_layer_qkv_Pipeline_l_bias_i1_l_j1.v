// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Linear_layer_qkv_Pipeline_l_bias_i1_l_j1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v3_address0,
        v3_ce0,
        v3_we0,
        v3_d0,
        v3_address1,
        v3_ce1,
        v3_q1,
        v244_address0,
        v244_ce0,
        v244_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v3_address0;
output   v3_ce0;
output   v3_we0;
output  [23:0] v3_d0;
output  [13:0] v3_address1;
output   v3_ce1;
input  [23:0] v3_q1;
output  [9:0] v244_address0;
output   v244_ce0;
input  [23:0] v244_q0;

reg ap_idle;
reg v3_ce0;
reg v3_we0;
reg v3_ce1;
reg v244_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] select_ln43_fu_144_p3;
reg   [9:0] select_ln43_reg_254;
wire   [3:0] select_ln43_1_fu_152_p3;
reg   [3:0] select_ln43_1_reg_260;
reg   [13:0] v3_addr_reg_266;
reg   [13:0] v3_addr_reg_266_pp0_iter2_reg;
wire   [23:0] v22_V_fu_223_p2;
reg   [23:0] v22_V_reg_277;
wire   [63:0] zext_ln46_2_fu_218_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] j1_cast_fu_205_p1;
reg   [9:0] j1_fu_54;
wire   [9:0] add_ln44_fu_160_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j1_load;
reg   [3:0] i1_fu_58;
reg   [3:0] ap_sig_allocacmp_i1_load;
reg   [13:0] indvar_flatten13_fu_62;
wire   [13:0] add_ln43_1_fu_120_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [0:0] icmp_ln44_fu_138_p2;
wire   [3:0] add_ln43_fu_132_p2;
wire   [11:0] tmp_25_fu_188_p3;
wire   [13:0] tmp_s_fu_181_p3;
wire   [13:0] zext_ln46_fu_195_p1;
wire   [13:0] sub_ln46_fu_199_p2;
wire   [13:0] zext_ln46_1_fu_209_p1;
wire   [13:0] add_ln46_fu_212_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i1_fu_58 <= select_ln43_1_fu_152_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i1_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_62 <= add_ln43_1_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_62 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j1_fu_54 <= add_ln44_fu_160_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j1_fu_54 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        v3_addr_reg_266 <= zext_ln46_2_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_114_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln43_1_reg_260 <= select_ln43_1_fu_152_p3;
        select_ln43_reg_254 <= select_ln43_fu_144_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        v22_V_reg_277 <= v22_V_fu_223_p2;
        v3_addr_reg_266_pp0_iter2_reg <= v3_addr_reg_266;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i1_load = i1_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j1_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j1_load = j1_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v244_ce0 = 1'b1;
    end else begin
        v244_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v3_ce0 = 1'b1;
    end else begin
        v3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v3_ce1 = 1'b1;
    end else begin
        v3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        v3_we0 = 1'b1;
    end else begin
        v3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_1_fu_120_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 14'd1);

assign add_ln43_fu_132_p2 = (ap_sig_allocacmp_i1_load + 4'd1);

assign add_ln44_fu_160_p2 = (select_ln43_fu_144_p3 + 10'd1);

assign add_ln46_fu_212_p2 = (sub_ln46_fu_199_p2 + zext_ln46_1_fu_209_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln43_fu_114_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_138_p2 = ((ap_sig_allocacmp_j1_load == 10'd768) ? 1'b1 : 1'b0);

assign j1_cast_fu_205_p1 = select_ln43_reg_254;

assign select_ln43_1_fu_152_p3 = ((icmp_ln44_fu_138_p2[0:0] == 1'b1) ? add_ln43_fu_132_p2 : ap_sig_allocacmp_i1_load);

assign select_ln43_fu_144_p3 = ((icmp_ln44_fu_138_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j1_load);

assign sub_ln46_fu_199_p2 = (tmp_s_fu_181_p3 - zext_ln46_fu_195_p1);

assign tmp_25_fu_188_p3 = {{select_ln43_1_reg_260}, {8'd0}};

assign tmp_s_fu_181_p3 = {{select_ln43_1_reg_260}, {10'd0}};

assign v22_V_fu_223_p2 = (v3_q1 + v244_q0);

assign v244_address0 = j1_cast_fu_205_p1;

assign v3_address0 = v3_addr_reg_266_pp0_iter2_reg;

assign v3_address1 = zext_ln46_2_fu_218_p1;

assign v3_d0 = v22_V_reg_277;

assign zext_ln46_1_fu_209_p1 = select_ln43_reg_254;

assign zext_ln46_2_fu_218_p1 = add_ln46_fu_212_p2;

assign zext_ln46_fu_195_p1 = tmp_25_fu_188_p3;

endmodule //Bert_layer_Linear_layer_qkv_Pipeline_l_bias_i1_l_j1
