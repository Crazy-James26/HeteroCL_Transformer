-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Softmax_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v48_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v48_ce0 : OUT STD_LOGIC;
    v48_we0 : OUT STD_LOGIC;
    v48_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v48_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v49_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v49_V_ce0 : OUT STD_LOGIC;
    v49_V_we0 : OUT STD_LOGIC;
    v49_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Softmax_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal inp_sumRow_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal v51_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i4_fu_249_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i4_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln105_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln105_reg_676 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln103_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inp_sumRow_addr_1_reg_681 : STD_LOGIC_VECTOR (3 downto 0);
    signal j4_fu_296_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j4_reg_689 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal v48_addr_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln104_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v55_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v58_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i5_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i5_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln114_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln116_fu_357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln116_reg_723 : STD_LOGIC_VECTOR (8 downto 0);
    signal j5_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j5_reg_731 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sext_ln116_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln116_reg_736 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln115_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v63_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal man_V_2_fu_441_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_752 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal icmp_ln571_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_479_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_769 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_493_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln583_reg_782 : STD_LOGIC_VECTOR (23 downto 0);
    signal v64_V_fu_652_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v64_V_reg_788 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal inp_sumRow_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal inp_sumRow_ce0 : STD_LOGIC;
    signal inp_sumRow_we0 : STD_LOGIC;
    signal inp_sumRow_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v51_0_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln100_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_0_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal j4_0_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i5_0_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal j5_0_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln101_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln105_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_15_fu_260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_272_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln105_1_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln105_2_fu_280_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln105_3_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln105_fu_306_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_333_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_345_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln116_1_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln116_2_fu_353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln116_3_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln116_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_405_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_419_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_423_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_67_fu_431_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_397_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_435_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_393_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_455_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_467_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_473_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_510_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_514_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_542_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln571_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_546_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln586_fu_519_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln585_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_534_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln582_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_611_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln603_1_fu_625_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln603_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_638_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);

    component Bert_layer_fadd_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fdiv_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fpext_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Bert_layer_fexp_3hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Softmax_layer_inpdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inp_sumRow_U : component Softmax_layer_inpdEe
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inp_sumRow_address0,
        ce0 => inp_sumRow_ce0,
        we0 => inp_sumRow_we0,
        d0 => inp_sumRow_d0,
        q0 => inp_sumRow_q0);

    Bert_layer_fadd_3eOg_U11 : component Bert_layer_fadd_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_220,
        din1 => v55_reg_699,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    Bert_layer_fdiv_3fYi_U12 : component Bert_layer_fdiv_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_214,
        din1 => reg_220,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    Bert_layer_fpext_g8j_U13 : component Bert_layer_fpext_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v63_reg_746,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p1);

    Bert_layer_fexp_3hbi_U14 : component Bert_layer_fexp_3hbi
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => reg_214,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_0_reg_153 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln104_fu_290_p2 = ap_const_lv1_1))) then 
                i4_0_reg_153 <= i4_reg_671;
            end if; 
        end if;
    end process;

    i5_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_243_p2 = ap_const_lv1_1))) then 
                i5_0_reg_175 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln115_fu_363_p2 = ap_const_lv1_1))) then 
                i5_0_reg_175 <= i5_reg_713;
            end if; 
        end if;
    end process;

    j4_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j4_0_reg_164 <= j4_reg_689;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_243_p2 = ap_const_lv1_0))) then 
                j4_0_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j5_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j5_0_reg_187 <= j5_reg_731;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j5_0_reg_187 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v51_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln100_fu_226_p2 = ap_const_lv1_0))) then 
                v51_0_reg_142 <= v51_fu_232_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v51_0_reg_142 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i4_reg_671 <= i4_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i5_reg_713 <= i5_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                icmp_ln571_reg_757 <= icmp_ln571_fu_449_p2;
                icmp_ln581_reg_763 <= icmp_ln581_fu_461_p2;
                icmp_ln582_reg_776 <= icmp_ln582_fu_487_p2;
                man_V_2_reg_752 <= man_V_2_fu_441_p3;
                sh_amt_reg_769 <= sh_amt_fu_479_p3;
                trunc_ln583_reg_782 <= trunc_ln583_fu_493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_243_p2 = ap_const_lv1_0))) then
                inp_sumRow_addr_1_reg_681 <= zext_ln105_fu_255_p1(4 - 1 downto 0);
                    sub_ln105_reg_676(8 downto 2) <= sub_ln105_fu_284_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j4_reg_689 <= j4_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                j5_reg_731 <= j5_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_214 <= v48_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_220 <= inp_sumRow_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln115_fu_363_p2 = ap_const_lv1_0))) then
                sext_ln116_reg_736 <= sext_ln116_fu_384_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    sub_ln116_reg_723(8 downto 2) <= sub_ln116_fu_357_p2(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln104_fu_290_p2 = ap_const_lv1_0))) then
                v48_addr_reg_694 <= sext_ln105_fu_311_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                v55_reg_699 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                v58_reg_705 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                v63_reg_746 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                v64_V_reg_788 <= v64_V_fu_652_p3;
            end if;
        end if;
    end process;
    sub_ln105_reg_676(1 downto 0) <= "00";
    sub_ln116_reg_723(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln103_fu_243_p2, ap_CS_fsm_state4, icmp_ln104_fu_290_p2, ap_CS_fsm_state21, icmp_ln114_fu_316_p2, ap_CS_fsm_state23, icmp_ln115_fu_363_p2, icmp_ln100_fu_226_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln100_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln103_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln104_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln114_fu_316_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln115_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_415_p1));
    add_ln105_fu_306_p2 <= std_logic_vector(unsigned(sub_ln105_reg_676) + unsigned(zext_ln105_3_fu_302_p1));
    add_ln116_fu_379_p2 <= std_logic_vector(unsigned(sub_ln116_reg_723) + unsigned(zext_ln116_3_fu_375_p1));
    add_ln581_fu_467_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_455_p2));
    and_ln581_fu_571_p2 <= (xor_ln582_fu_565_p2 and icmp_ln581_reg_763);
    and_ln582_fu_556_p2 <= (xor_ln571_fu_551_p2 and icmp_ln582_reg_776);
    and_ln585_1_fu_588_p2 <= (icmp_ln585_fu_500_p2 and and_ln581_fu_571_p2);
    and_ln585_fu_582_p2 <= (xor_ln585_fu_576_p2 and and_ln581_fu_571_p2);
    and_ln603_fu_605_p2 <= (xor_ln581_fu_599_p2 and icmp_ln603_fu_505_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21, icmp_ln114_fu_316_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln114_fu_316_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln114_fu_316_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln114_fu_316_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_514_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_752),to_integer(unsigned('0' & zext_ln586_fu_510_p1(31-1 downto 0)))));
    bitcast_ln696_fu_523_p1 <= v63_reg_746;
    exp_tmp_V_fu_405_p4 <= ireg_V_fu_389_p1(62 downto 52);
    i4_fu_249_p2 <= std_logic_vector(unsigned(i4_0_reg_153) + unsigned(ap_const_lv4_1));
    i5_fu_322_p2 <= std_logic_vector(unsigned(i5_0_reg_175) + unsigned(ap_const_lv4_1));
    icmp_ln100_fu_226_p2 <= "1" when (v51_0_reg_142 = ap_const_lv4_C) else "0";
    icmp_ln103_fu_243_p2 <= "1" when (i4_0_reg_153 = ap_const_lv4_C) else "0";
    icmp_ln104_fu_290_p2 <= "1" when (j4_0_reg_164 = ap_const_lv4_C) else "0";
    icmp_ln114_fu_316_p2 <= "1" when (i5_0_reg_175 = ap_const_lv4_C) else "0";
    icmp_ln115_fu_363_p2 <= "1" when (j5_0_reg_187 = ap_const_lv4_C) else "0";
    icmp_ln571_fu_449_p2 <= "1" when (trunc_ln556_fu_393_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_461_p2 <= "1" when (signed(F2_fu_455_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln582_fu_487_p2 <= "1" when (F2_fu_455_p2 = ap_const_lv12_10) else "0";
    icmp_ln585_fu_500_p2 <= "1" when (unsigned(sh_amt_reg_769) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_505_p2 <= "1" when (unsigned(sh_amt_reg_769) < unsigned(ap_const_lv12_18)) else "0";

    inp_sumRow_address0_assign_proc : process(ap_CS_fsm_state2, inp_sumRow_addr_1_reg_681, ap_CS_fsm_state21, ap_CS_fsm_state20, zext_ln101_fu_238_p1, zext_ln116_fu_328_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inp_sumRow_address0 <= zext_ln116_fu_328_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inp_sumRow_address0 <= inp_sumRow_addr_1_reg_681;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inp_sumRow_address0 <= zext_ln101_fu_238_p1(4 - 1 downto 0);
        else 
            inp_sumRow_address0 <= "XXXX";
        end if; 
    end process;


    inp_sumRow_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inp_sumRow_ce0 <= ap_const_logic_1;
        else 
            inp_sumRow_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inp_sumRow_d0_assign_proc : process(ap_CS_fsm_state2, v58_reg_705, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inp_sumRow_d0 <= v58_reg_705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inp_sumRow_d0 <= ap_const_lv32_0;
        else 
            inp_sumRow_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inp_sumRow_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln100_fu_226_p2, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln100_fu_226_p2 = ap_const_lv1_0)))) then 
            inp_sumRow_we0 <= ap_const_logic_1;
        else 
            inp_sumRow_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_389_p1 <= grp_fu_206_p1;
    j4_fu_296_p2 <= std_logic_vector(unsigned(j4_0_reg_164) + unsigned(ap_const_lv4_1));
    j5_fu_369_p2 <= std_logic_vector(unsigned(j5_0_reg_187) + unsigned(ap_const_lv4_1));
    man_V_1_fu_435_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_67_fu_431_p1));
    man_V_2_fu_441_p3 <= 
        man_V_1_fu_435_p2 when (p_Result_s_fu_397_p3(0) = '1') else 
        p_Result_67_fu_431_p1;
    or_ln581_fu_594_p2 <= (or_ln582_fu_561_p2 or icmp_ln581_reg_763);
    or_ln582_fu_561_p2 <= (icmp_ln582_reg_776 or icmp_ln571_reg_757);
    or_ln603_1_fu_632_p2 <= (and_ln585_fu_582_p2 or and_ln582_fu_556_p2);
    or_ln603_2_fu_646_p2 <= (or_ln603_fu_619_p2 or or_ln603_1_fu_632_p2);
    or_ln603_fu_619_p2 <= (and_ln603_fu_605_p2 or and_ln585_1_fu_588_p2);
    p_Result_67_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_423_p3),54));
    p_Result_s_fu_397_p3 <= ireg_V_fu_389_p1(63 downto 63);
    select_ln588_fu_534_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_28_fu_526_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln603_1_fu_625_p3 <= 
        select_ln588_fu_534_p3 when (and_ln585_fu_582_p2(0) = '1') else 
        trunc_ln583_reg_782;
    select_ln603_2_fu_638_p3 <= 
        select_ln603_fu_611_p3 when (or_ln603_fu_619_p2(0) = '1') else 
        select_ln603_1_fu_625_p3;
    select_ln603_fu_611_p3 <= 
        shl_ln604_fu_546_p2 when (and_ln603_fu_605_p2(0) = '1') else 
        trunc_ln586_fu_519_p1;
        sext_ln105_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln105_fu_306_p2),64));

        sext_ln116_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln116_fu_379_p2),64));

        sext_ln581_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_769),32));

    sext_ln581cast_fu_542_p1 <= sext_ln581_fu_497_p1(24 - 1 downto 0);
    sh_amt_fu_479_p3 <= 
        add_ln581_fu_467_p2 when (icmp_ln581_fu_461_p2(0) = '1') else 
        sub_ln581_fu_473_p2;
    shl_ln604_fu_546_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_782),to_integer(unsigned('0' & sext_ln581cast_fu_542_p1(24-1 downto 0)))));
    sub_ln105_fu_284_p2 <= std_logic_vector(unsigned(zext_ln105_1_fu_268_p1) - unsigned(zext_ln105_2_fu_280_p1));
    sub_ln116_fu_357_p2 <= std_logic_vector(unsigned(zext_ln116_1_fu_341_p1) - unsigned(zext_ln116_2_fu_353_p1));
    sub_ln581_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_455_p2));
    tmp_15_fu_260_p3 <= (i4_0_reg_153 & ap_const_lv4_0);
    tmp_16_fu_272_p3 <= (i4_0_reg_153 & ap_const_lv2_0);
    tmp_17_fu_333_p3 <= (i5_0_reg_175 & ap_const_lv4_0);
    tmp_18_fu_345_p3 <= (i5_0_reg_175 & ap_const_lv2_0);
    tmp_28_fu_526_p3 <= bitcast_ln696_fu_523_p1(31 downto 31);
    tmp_5_fu_423_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_419_p1);
    trunc_ln556_fu_393_p1 <= ireg_V_fu_389_p1(63 - 1 downto 0);
    trunc_ln565_fu_419_p1 <= ireg_V_fu_389_p1(52 - 1 downto 0);
    trunc_ln583_fu_493_p1 <= man_V_2_fu_441_p3(24 - 1 downto 0);
    trunc_ln586_fu_519_p1 <= ashr_ln586_fu_514_p2(24 - 1 downto 0);

    v48_address0_assign_proc : process(ap_CS_fsm_state4, v48_addr_reg_694, ap_CS_fsm_state23, sext_ln116_fu_384_p1, sext_ln105_fu_311_p1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            v48_address0 <= sext_ln116_fu_384_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v48_address0 <= v48_addr_reg_694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            v48_address0 <= sext_ln105_fu_311_p1(8 - 1 downto 0);
        else 
            v48_address0 <= "XXXXXXXX";
        end if; 
    end process;


    v48_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            v48_ce0 <= ap_const_logic_1;
        else 
            v48_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v48_d0 <= v55_reg_699;

    v48_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v48_we0 <= ap_const_logic_1;
        else 
            v48_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v49_V_address0 <= sext_ln116_reg_736(8 - 1 downto 0);

    v49_V_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v49_V_ce0 <= ap_const_logic_1;
        else 
            v49_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v49_V_d0 <= v64_V_reg_788;

    v49_V_we0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            v49_V_we0 <= ap_const_logic_1;
        else 
            v49_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v51_fu_232_p2 <= std_logic_vector(unsigned(v51_0_reg_142) + unsigned(ap_const_lv4_1));
    v64_V_fu_652_p3 <= 
        select_ln603_2_fu_638_p3 when (or_ln603_2_fu_646_p2(0) = '1') else 
        ap_const_lv24_0;
    xor_ln571_fu_551_p2 <= (icmp_ln571_reg_757 xor ap_const_lv1_1);
    xor_ln581_fu_599_p2 <= (or_ln581_fu_594_p2 xor ap_const_lv1_1);
    xor_ln582_fu_565_p2 <= (or_ln582_fu_561_p2 xor ap_const_lv1_1);
    xor_ln585_fu_576_p2 <= (icmp_ln585_fu_500_p2 xor ap_const_lv1_1);
    zext_ln101_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v51_0_reg_142),64));
    zext_ln105_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_260_p3),9));
    zext_ln105_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_272_p3),9));
    zext_ln105_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_0_reg_164),9));
    zext_ln105_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_reg_153),64));
    zext_ln116_1_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_333_p3),9));
    zext_ln116_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_345_p3),9));
    zext_ln116_3_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_reg_187),9));
    zext_ln116_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_175),64));
    zext_ln461_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_405_p4),12));
    zext_ln586_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_497_p1),54));
end behav;
