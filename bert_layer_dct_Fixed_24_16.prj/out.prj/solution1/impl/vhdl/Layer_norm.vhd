-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Layer_norm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v135_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v135_ce0 : OUT STD_LOGIC;
    v135_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v136_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v136_ce0 : OUT STD_LOGIC;
    v136_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v137_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v137_ce0 : OUT STD_LOGIC;
    v137_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v138_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v138_V_ce0 : OUT STD_LOGIC;
    v138_V_we0 : OUT STD_LOGIC;
    v138_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Layer_norm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (89 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (89 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (89 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (89 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (89 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (89 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (89 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (89 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (89 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (89 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (89 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (89 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_44400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000100010000000000000000000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv64_3EE4F8B588E368F1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111011100100111110001011010110001000111000110110100011110001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal mean_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal mean2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal v140_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal v142_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i12_fu_442_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i12_reg_898 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln260_fu_478_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln260_reg_903 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln258_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_addr_1_reg_908 : STD_LOGIC_VECTOR (3 downto 0);
    signal mean2_addr_1_reg_913 : STD_LOGIC_VECTOR (3 downto 0);
    signal j12_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j12_reg_921 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln259_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i13_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i13_reg_934 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln272_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln271_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_addr_2_reg_945 : STD_LOGIC_VECTOR (3 downto 0);
    signal mean2_addr_2_reg_950 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i14_fu_533_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i14_reg_958 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln284_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal var_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_978 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal sub_ln287_fu_569_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln287_reg_988 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v170_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal j13_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j13_reg_1001 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal sext_ln287_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln287_reg_1006 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal v164_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal v173_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v171_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal man_V_4_fu_659_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_4_reg_1041 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal icmp_ln571_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_697_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1058 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_711_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln583_reg_1071 : STD_LOGIC_VECTOR (23 downto 0);
    signal v175_V_fu_871_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v175_V_reg_1077 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal mean_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mean_ce0 : STD_LOGIC;
    signal mean_we0 : STD_LOGIC;
    signal mean_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mean2_ce0 : STD_LOGIC;
    signal mean2_we0 : STD_LOGIC;
    signal mean2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal var_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal var_ce0 : STD_LOGIC;
    signal var_we0 : STD_LOGIC;
    signal v140_0_reg_246 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln250_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v142_0_reg_257 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln254_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i12_0_reg_268 : STD_LOGIC_VECTOR (3 downto 0);
    signal j12_0_reg_279 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i13_0_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal i14_0_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln285_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j13_0_reg_313 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal zext_ln251_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln260_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln260_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln286_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_62_fu_454_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_63_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln260_1_fu_462_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln260_2_fu_474_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln260_3_fu_496_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln260_fu_500_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_64_fu_545_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_65_fu_557_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln287_1_fu_553_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln287_2_fu_565_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln287_3_fu_587_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln287_fu_591_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ireg_V_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_623_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_637_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_641_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_86_fu_649_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_3_fu_653_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_611_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_633_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_673_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_691_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln581_fu_715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_728_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_732_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_761_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln571_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_765_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln586_fu_737_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln585_2_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_753_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln582_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_830_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln603_4_fu_844_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln603_3_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_4_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_5_fu_857_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_325_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (89 downto 0);

    component Bert_layer_faddfsmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fdiv_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fptrunncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fpext_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Bert_layer_fsqrt_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_dadd_6pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Softmax_layer_inpdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mean_U : component Softmax_layer_inpdEe
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean_address0,
        ce0 => mean_ce0,
        we0 => mean_we0,
        d0 => mean_d0,
        q0 => mean_q0);

    mean2_U : component Softmax_layer_inpdEe
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mean2_address0,
        ce0 => mean2_ce0,
        we0 => mean2_we0,
        d0 => mean2_d0,
        q0 => mean2_q0);

    var_U : component Softmax_layer_inpdEe
    generic map (
        DataWidth => 32,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => var_address0,
        ce0 => var_ce0,
        we0 => var_we0,
        d0 => reg_386,
        q0 => var_q0);

    Bert_layer_faddfsmb6_U38 : component Bert_layer_faddfsmb6
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        opcode => grp_fu_325_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    Bert_layer_fmul_3cud_U39 : component Bert_layer_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_329_p0,
        din1 => grp_fu_329_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    Bert_layer_fdiv_3fYi_U40 : component Bert_layer_fdiv_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    Bert_layer_fptrunncg_U41 : component Bert_layer_fptrunncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_983,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p1);

    Bert_layer_fpext_g8j_U42 : component Bert_layer_fpext_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_345_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p1);

    Bert_layer_fsqrt_ocq_U43 : component Bert_layer_fsqrt_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => v170_reg_993,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    Bert_layer_dadd_6pcA_U44 : component Bert_layer_dadd_6pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_978,
        din1 => ap_const_lv64_3EE4F8B588E368F1,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i12_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln254_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i12_0_reg_268 <= ap_const_lv4_0;
            elsif (((icmp_ln259_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i12_0_reg_268 <= i12_reg_898;
            end if; 
        end if;
    end process;

    i13_0_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln258_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i13_0_reg_290 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i13_0_reg_290 <= i13_reg_934;
            end if; 
        end if;
    end process;

    i14_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln271_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i14_0_reg_301 <= ap_const_lv4_0;
            elsif (((icmp_ln285_fu_575_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                i14_0_reg_301 <= i14_reg_958;
            end if; 
        end if;
    end process;

    j12_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j12_0_reg_279 <= j12_reg_921;
            elsif (((icmp_ln258_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j12_0_reg_279 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j13_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                j13_0_reg_313 <= j13_reg_1001;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                j13_0_reg_313 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    v140_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v140_0_reg_246 <= v140_fu_408_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v140_0_reg_246 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v142_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_402_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v142_0_reg_257 <= ap_const_lv4_0;
            elsif (((icmp_ln254_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v142_0_reg_257 <= v142_fu_425_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i12_reg_898 <= i12_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i13_reg_934 <= i13_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                i14_reg_958 <= i14_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                icmp_ln571_reg_1046 <= icmp_ln571_fu_667_p2;
                icmp_ln581_reg_1052 <= icmp_ln581_fu_679_p2;
                icmp_ln582_reg_1065 <= icmp_ln582_fu_705_p2;
                man_V_4_reg_1041 <= man_V_4_fu_659_p3;
                sh_amt_reg_1058 <= sh_amt_fu_697_p3;
                trunc_ln583_reg_1071 <= trunc_ln583_fu_711_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j12_reg_921 <= j12_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                j13_reg_1001 <= j13_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln258_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                mean2_addr_1_reg_913 <= zext_ln260_fu_448_p1(4 - 1 downto 0);
                mean_addr_1_reg_908 <= zext_ln260_fu_448_p1(4 - 1 downto 0);
                    sub_ln260_reg_903(14 downto 8) <= sub_ln260_fu_478_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                mean2_addr_2_reg_950 <= zext_ln272_reg_939(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln271_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                mean_addr_2_reg_945 <= zext_ln272_fu_522_p1(4 - 1 downto 0);
                    zext_ln272_reg_939(3 downto 0) <= zext_ln272_fu_522_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_359 <= v135_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_367 <= mean_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_374 <= grp_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_380 <= mean2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_386 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_395 <= grp_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                sext_ln287_reg_1006 <= sext_ln287_fu_596_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                    sub_ln287_reg_988(14 downto 8) <= sub_ln287_fu_569_p2(14 downto 8);
                v170_reg_993 <= grp_fu_342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tmp_reg_978 <= grp_fu_345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_s_reg_983 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                v164_reg_1026 <= v136_q0;
                v173_reg_1031 <= v137_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                v171_reg_1036 <= grp_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                v175_V_reg_1077 <= v175_V_fu_871_p3;
            end if;
        end if;
    end process;
    sub_ln260_reg_903(7 downto 0) <= "00000000";
    zext_ln272_reg_939(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    sub_ln287_reg_988(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln258_fu_436_p2, ap_CS_fsm_state5, icmp_ln259_fu_484_p2, ap_CS_fsm_state17, icmp_ln271_fu_510_p2, ap_CS_fsm_state44, icmp_ln284_fu_527_p2, ap_CS_fsm_state54, icmp_ln250_fu_402_p2, icmp_ln254_fu_419_p2, icmp_ln285_fu_575_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln250_fu_402_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln254_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln258_fu_436_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln259_fu_484_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln271_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln284_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((icmp_ln285_fu_575_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_673_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_633_p1));
    add_ln260_fu_500_p2 <= std_logic_vector(unsigned(sub_ln260_reg_903) + unsigned(zext_ln260_3_fu_496_p1));
    add_ln287_fu_591_p2 <= std_logic_vector(unsigned(sub_ln287_reg_988) + unsigned(zext_ln287_3_fu_587_p1));
    add_ln581_fu_685_p2 <= std_logic_vector(signed(ap_const_lv12_FF0) + signed(F2_fu_673_p2));
    and_ln581_fu_790_p2 <= (xor_ln582_fu_784_p2 and icmp_ln581_reg_1052);
    and_ln582_fu_775_p2 <= (xor_ln571_fu_770_p2 and icmp_ln582_reg_1065);
    and_ln585_2_fu_807_p2 <= (icmp_ln585_fu_718_p2 and and_ln581_fu_790_p2);
    and_ln585_fu_801_p2 <= (xor_ln585_fu_795_p2 and and_ln581_fu_790_p2);
    and_ln603_fu_824_p2 <= (xor_ln581_fu_818_p2 and icmp_ln603_fu_723_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state44, icmp_ln284_fu_527_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln284_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state44, icmp_ln284_fu_527_p2)
    begin
        if (((icmp_ln284_fu_527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_732_p2 <= std_logic_vector(shift_right(signed(man_V_4_reg_1041),to_integer(unsigned('0' & zext_ln586_fu_728_p1(31-1 downto 0)))));
    bitcast_ln696_fu_741_p1 <= reg_386;
    exp_tmp_V_fu_623_p4 <= ireg_V_fu_607_p1(62 downto 52);

    grp_fu_325_opcode_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state38, ap_CS_fsm_state57, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_325_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_325_opcode <= ap_const_lv2_0;
        else 
            grp_fu_325_opcode <= "XX";
        end if; 
    end process;


    grp_fu_325_p0_assign_proc : process(reg_359, reg_367, reg_380, ap_CS_fsm_state11, reg_395, ap_CS_fsm_state7, ap_CS_fsm_state38, ap_CS_fsm_state57, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_325_p0 <= reg_359;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_325_p0 <= reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_325_p0 <= reg_380;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_325_p0 <= reg_367;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(reg_359, reg_367, reg_374, ap_CS_fsm_state11, v173_reg_1031, ap_CS_fsm_state7, ap_CS_fsm_state38, ap_CS_fsm_state57, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_fu_325_p1 <= v173_reg_1031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_325_p1 <= reg_367;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_325_p1 <= reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_325_p1 <= reg_359;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p0_assign_proc : process(reg_359, reg_395, v164_reg_1026, ap_CS_fsm_state7, ap_CS_fsm_state34, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_329_p0 <= v164_reg_1026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_329_p0 <= reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_329_p0 <= reg_359;
        else 
            grp_fu_329_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_329_p1_assign_proc : process(reg_359, reg_386, reg_395, ap_CS_fsm_state7, ap_CS_fsm_state34, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_329_p1 <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_329_p1 <= reg_395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_329_p1 <= reg_359;
        else 
            grp_fu_329_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p0_assign_proc : process(mean_q0, ap_CS_fsm_state18, reg_374, mean2_q0, ap_CS_fsm_state22, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_333_p0 <= reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_333_p0 <= mean2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_333_p0 <= mean_q0;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state22, v171_reg_1036, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_fu_333_p1 <= v171_reg_1036;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_333_p1 <= ap_const_lv32_44400000;
        else 
            grp_fu_333_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p0_assign_proc : process(ap_CS_fsm_state45, reg_386, var_q0, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            grp_fu_345_p0 <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_345_p0 <= var_q0;
        else 
            grp_fu_345_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i12_fu_442_p2 <= std_logic_vector(unsigned(i12_0_reg_268) + unsigned(ap_const_lv4_1));
    i13_fu_516_p2 <= std_logic_vector(unsigned(i13_0_reg_290) + unsigned(ap_const_lv4_1));
    i14_fu_533_p2 <= std_logic_vector(unsigned(i14_0_reg_301) + unsigned(ap_const_lv4_1));
    icmp_ln250_fu_402_p2 <= "1" when (v140_0_reg_246 = ap_const_lv4_C) else "0";
    icmp_ln254_fu_419_p2 <= "1" when (v142_0_reg_257 = ap_const_lv4_C) else "0";
    icmp_ln258_fu_436_p2 <= "1" when (i12_0_reg_268 = ap_const_lv4_C) else "0";
    icmp_ln259_fu_484_p2 <= "1" when (j12_0_reg_279 = ap_const_lv10_300) else "0";
    icmp_ln271_fu_510_p2 <= "1" when (i13_0_reg_290 = ap_const_lv4_C) else "0";
    icmp_ln284_fu_527_p2 <= "1" when (i14_0_reg_301 = ap_const_lv4_C) else "0";
    icmp_ln285_fu_575_p2 <= "1" when (j13_0_reg_313 = ap_const_lv10_300) else "0";
    icmp_ln571_fu_667_p2 <= "1" when (trunc_ln556_fu_611_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_679_p2 <= "1" when (signed(F2_fu_673_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln582_fu_705_p2 <= "1" when (F2_fu_673_p2 = ap_const_lv12_10) else "0";
    icmp_ln585_fu_718_p2 <= "1" when (unsigned(sh_amt_reg_1058) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_723_p2 <= "1" when (unsigned(sh_amt_reg_1058) < unsigned(ap_const_lv12_18)) else "0";
    ireg_V_fu_607_p1 <= grp_fu_345_p1;
    j12_fu_490_p2 <= std_logic_vector(unsigned(j12_0_reg_279) + unsigned(ap_const_lv10_1));
    j13_fu_581_p2 <= std_logic_vector(unsigned(j13_0_reg_313) + unsigned(ap_const_lv10_1));
    man_V_3_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_86_fu_649_p1));
    man_V_4_fu_659_p3 <= 
        man_V_3_fu_653_p2 when (p_Result_s_fu_615_p3(0) = '1') else 
        p_Result_86_fu_649_p1;

    mean2_address0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state3, mean2_addr_1_reg_913, zext_ln272_reg_939, mean2_addr_2_reg_950, ap_CS_fsm_state21, ap_CS_fsm_state16, zext_ln255_fu_431_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            mean2_address0 <= mean2_addr_2_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            mean2_address0 <= zext_ln272_reg_939(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            mean2_address0 <= mean2_addr_1_reg_913;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mean2_address0 <= zext_ln255_fu_431_p1(4 - 1 downto 0);
        else 
            mean2_address0 <= "XXXX";
        end if; 
    end process;


    mean2_ce0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state3, ap_CS_fsm_state21, ap_CS_fsm_state16, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            mean2_ce0 <= ap_const_logic_1;
        else 
            mean2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mean2_d0_assign_proc : process(ap_CS_fsm_state37, reg_386, grp_fu_333_p2, ap_CS_fsm_state3, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            mean2_d0 <= grp_fu_333_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mean2_d0 <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mean2_d0 <= ap_const_lv32_0;
        else 
            mean2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mean2_we0_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state3, icmp_ln254_fu_419_p2, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((icmp_ln254_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            mean2_we0 <= ap_const_logic_1;
        else 
            mean2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mean_address0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state2, mean_addr_1_reg_908, ap_CS_fsm_state5, ap_CS_fsm_state17, zext_ln272_fu_522_p1, mean_addr_2_reg_945, ap_CS_fsm_state44, zext_ln251_fu_414_p1, zext_ln287_fu_539_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            mean_address0 <= zext_ln287_fu_539_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            mean_address0 <= mean_addr_2_reg_945;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            mean_address0 <= zext_ln272_fu_522_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mean_address0 <= mean_addr_1_reg_908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mean_address0 <= zext_ln251_fu_414_p1(4 - 1 downto 0);
        else 
            mean_address0 <= "XXXX";
        end if; 
    end process;


    mean_ce0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_state44, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            mean_ce0 <= ap_const_logic_1;
        else 
            mean_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mean_d0_assign_proc : process(reg_386, grp_fu_333_p2, ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            mean_d0 <= grp_fu_333_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mean_d0 <= reg_386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mean_d0 <= ap_const_lv32_0;
        else 
            mean_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mean_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state2, icmp_ln250_fu_402_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((icmp_ln250_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            mean_we0 <= ap_const_logic_1;
        else 
            mean_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln581_fu_813_p2 <= (or_ln582_fu_780_p2 or icmp_ln581_reg_1052);
    or_ln582_fu_780_p2 <= (icmp_ln582_reg_1065 or icmp_ln571_reg_1046);
    or_ln603_3_fu_851_p2 <= (and_ln585_fu_801_p2 or and_ln582_fu_775_p2);
    or_ln603_4_fu_865_p2 <= (or_ln603_fu_838_p2 or or_ln603_3_fu_851_p2);
    or_ln603_fu_838_p2 <= (and_ln603_fu_824_p2 or and_ln585_2_fu_807_p2);
    p_Result_86_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_641_p3),54));
    p_Result_s_fu_615_p3 <= ireg_V_fu_607_p1(63 downto 63);
    select_ln588_fu_753_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_38_fu_745_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln603_4_fu_844_p3 <= 
        select_ln588_fu_753_p3 when (and_ln585_fu_801_p2(0) = '1') else 
        trunc_ln583_reg_1071;
    select_ln603_5_fu_857_p3 <= 
        select_ln603_fu_830_p3 when (or_ln603_fu_838_p2(0) = '1') else 
        select_ln603_4_fu_844_p3;
    select_ln603_fu_830_p3 <= 
        shl_ln604_fu_765_p2 when (and_ln603_fu_824_p2(0) = '1') else 
        trunc_ln586_fu_737_p1;
        sext_ln260_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln260_fu_500_p2),64));

        sext_ln287_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln287_fu_591_p2),64));

        sext_ln581_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1058),32));

    sext_ln581cast_fu_761_p1 <= sext_ln581_fu_715_p1(24 - 1 downto 0);
    sh_amt_fu_697_p3 <= 
        add_ln581_fu_685_p2 when (icmp_ln581_fu_679_p2(0) = '1') else 
        sub_ln581_fu_691_p2;
    shl_ln604_fu_765_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1071),to_integer(unsigned('0' & sext_ln581cast_fu_761_p1(24-1 downto 0)))));
    sub_ln260_fu_478_p2 <= std_logic_vector(unsigned(zext_ln260_1_fu_462_p1) - unsigned(zext_ln260_2_fu_474_p1));
    sub_ln287_fu_569_p2 <= std_logic_vector(unsigned(zext_ln287_1_fu_553_p1) - unsigned(zext_ln287_2_fu_565_p1));
    sub_ln581_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_673_p2));
    tmp_38_fu_745_p3 <= bitcast_ln696_fu_741_p1(31 downto 31);
    tmp_62_fu_454_p3 <= (i12_0_reg_268 & ap_const_lv10_0);
    tmp_63_fu_466_p3 <= (i12_0_reg_268 & ap_const_lv8_0);
    tmp_64_fu_545_p3 <= (i14_0_reg_301 & ap_const_lv10_0);
    tmp_65_fu_557_p3 <= (i14_0_reg_301 & ap_const_lv8_0);
    tmp_6_fu_641_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_637_p1);
    trunc_ln556_fu_611_p1 <= ireg_V_fu_607_p1(63 - 1 downto 0);
    trunc_ln565_fu_637_p1 <= ireg_V_fu_607_p1(52 - 1 downto 0);
    trunc_ln583_fu_711_p1 <= man_V_4_fu_659_p3(24 - 1 downto 0);
    trunc_ln586_fu_737_p1 <= ashr_ln586_fu_732_p2(24 - 1 downto 0);

    v135_address0_assign_proc : process(ap_CS_fsm_state5, sext_ln287_fu_596_p1, ap_CS_fsm_state55, sext_ln260_fu_505_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            v135_address0 <= sext_ln287_fu_596_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            v135_address0 <= sext_ln260_fu_505_p1(14 - 1 downto 0);
        else 
            v135_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    v135_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            v135_ce0 <= ap_const_logic_1;
        else 
            v135_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v136_address0 <= zext_ln286_fu_601_p1(10 - 1 downto 0);

    v136_ce0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            v136_ce0 <= ap_const_logic_1;
        else 
            v136_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v137_address0 <= zext_ln286_fu_601_p1(10 - 1 downto 0);

    v137_ce0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            v137_ce0 <= ap_const_logic_1;
        else 
            v137_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v138_V_address0 <= sext_ln287_reg_1006(14 - 1 downto 0);

    v138_V_ce0_assign_proc : process(ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            v138_V_ce0 <= ap_const_logic_1;
        else 
            v138_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v138_V_d0 <= v175_V_reg_1077;

    v138_V_we0_assign_proc : process(ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            v138_V_we0 <= ap_const_logic_1;
        else 
            v138_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v140_fu_408_p2 <= std_logic_vector(unsigned(v140_0_reg_246) + unsigned(ap_const_lv4_1));
    v142_fu_425_p2 <= std_logic_vector(unsigned(v142_0_reg_257) + unsigned(ap_const_lv4_1));
    v175_V_fu_871_p3 <= 
        select_ln603_5_fu_857_p3 when (or_ln603_4_fu_865_p2(0) = '1') else 
        ap_const_lv24_0;

    var_address0_assign_proc : process(zext_ln272_reg_939, ap_CS_fsm_state44, ap_CS_fsm_state43, zext_ln287_fu_539_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            var_address0 <= zext_ln287_fu_539_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            var_address0 <= zext_ln272_reg_939(4 - 1 downto 0);
        else 
            var_address0 <= "XXXX";
        end if; 
    end process;


    var_ce0_assign_proc : process(ap_CS_fsm_state44, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            var_ce0 <= ap_const_logic_1;
        else 
            var_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    var_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            var_we0 <= ap_const_logic_1;
        else 
            var_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_770_p2 <= (icmp_ln571_reg_1046 xor ap_const_lv1_1);
    xor_ln581_fu_818_p2 <= (or_ln581_fu_813_p2 xor ap_const_lv1_1);
    xor_ln582_fu_784_p2 <= (or_ln582_fu_780_p2 xor ap_const_lv1_1);
    xor_ln585_fu_795_p2 <= (icmp_ln585_fu_718_p2 xor ap_const_lv1_1);
    zext_ln251_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v140_0_reg_246),64));
    zext_ln255_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v142_0_reg_257),64));
    zext_ln260_1_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_454_p3),15));
    zext_ln260_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_466_p3),15));
    zext_ln260_3_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j12_0_reg_279),15));
    zext_ln260_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i12_0_reg_268),64));
    zext_ln272_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i13_0_reg_290),64));
    zext_ln286_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j13_0_reg_313),64));
    zext_ln287_1_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_545_p3),15));
    zext_ln287_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_fu_557_p3),15));
    zext_ln287_3_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j13_0_reg_313),15));
    zext_ln287_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i14_0_reg_301),64));
    zext_ln461_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_623_p4),12));
    zext_ln586_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_715_p1),54));
end behav;
