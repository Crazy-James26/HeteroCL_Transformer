-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i11_l_j119 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v266_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v266_V_ce0 : OUT STD_LOGIC;
    v266_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v269_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v269_V_ce0 : OUT STD_LOGIC;
    v269_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v270_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v270_ce0 : OUT STD_LOGIC;
    v270_we0 : OUT STD_LOGIC;
    v270_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i11_l_j119 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_lv25_1FFFFE8 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln230_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln233_fu_255_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln233_reg_619 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln233_2_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_2_reg_624_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v133_fu_295_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal v133_reg_639 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_50_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_50_reg_646_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_50_reg_646_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_50_reg_646_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_652_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1136_reg_652_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_319_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_4_reg_657 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_4_reg_657_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal l_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_664_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1145_reg_669_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1145_fu_361_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1145_reg_675 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1148_fu_365_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1148_reg_680 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1144_fu_369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_685 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_685_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1144_reg_685_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln1150_1_fu_464_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln1150_1_reg_690 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1159_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1159_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_reg_700 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_48_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal v134_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v134_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j11_fu_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln231_fu_261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j11_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i11_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln230_1_fu_217_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i11_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten59_fu_118 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln230_fu_185_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten59_load : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln231_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln230_1_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_fu_233_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_225_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln233_fu_241_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln230_fu_209_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln233_fu_245_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln233_1_fu_251_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln859_2_fu_291_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln859_fu_287_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_314_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_s_fu_325_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_51_fu_335_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1244_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_378_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln1148_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1148_fu_399_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln1148_fu_403_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_46_fu_409_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln1147_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1148_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1150_fu_440_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_47_fu_445_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1150_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1150_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1150_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1159_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1158_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1159_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1160_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln1159_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1160_fu_499_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_505_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1162_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_6_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1165_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1144_fu_542_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1170_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1163_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_560_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_52_fu_567_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal LD_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln810_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i11_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln230_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i11_fu_114 <= select_ln230_1_fu_217_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i11_fu_114 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten59_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln230_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten59_fu_118 <= add_ln230_fu_185_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten59_fu_118 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j11_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln230_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j11_fu_110 <= add_ln231_fu_261_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j11_fu_110 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln230_fu_179_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln233_reg_619 <= add_ln233_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln233_2_reg_624(13 downto 0) <= zext_ln233_2_fu_282_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln1136_reg_652 <= icmp_ln1136_fu_309_p2;
                icmp_ln1136_reg_652_pp0_iter4_reg <= icmp_ln1136_reg_652;
                icmp_ln1136_reg_652_pp0_iter5_reg <= icmp_ln1136_reg_652_pp0_iter4_reg;
                l_reg_664 <= l_fu_347_p3;
                l_reg_664_pp0_iter4_reg <= l_reg_664;
                p_Result_50_reg_646 <= v133_fu_295_p2(24 downto 24);
                p_Result_50_reg_646_pp0_iter3_reg <= p_Result_50_reg_646;
                p_Result_50_reg_646_pp0_iter4_reg <= p_Result_50_reg_646_pp0_iter3_reg;
                p_Result_50_reg_646_pp0_iter5_reg <= p_Result_50_reg_646_pp0_iter4_reg;
                sub_ln1145_reg_669 <= sub_ln1145_fu_355_p2;
                sub_ln1145_reg_669_pp0_iter4_reg <= sub_ln1145_reg_669;
                tmp_V_4_reg_657 <= tmp_V_4_fu_319_p3;
                tmp_V_4_reg_657_pp0_iter4_reg <= tmp_V_4_reg_657;
                trunc_ln1144_reg_685 <= trunc_ln1144_fu_369_p1;
                trunc_ln1144_reg_685_pp0_iter4_reg <= trunc_ln1144_reg_685;
                trunc_ln1144_reg_685_pp0_iter5_reg <= trunc_ln1144_reg_685_pp0_iter4_reg;
                trunc_ln1145_reg_675 <= trunc_ln1145_fu_361_p1;
                trunc_ln1148_reg_680 <= trunc_ln1148_fu_365_p1;
                v133_reg_639 <= v133_fu_295_p2;
                v134_reg_710 <= v134_fu_587_p3;
                    zext_ln233_2_reg_624_pp0_iter2_reg(13 downto 0) <= zext_ln233_2_reg_624(13 downto 0);
                    zext_ln233_2_reg_624_pp0_iter3_reg(13 downto 0) <= zext_ln233_2_reg_624_pp0_iter2_reg(13 downto 0);
                    zext_ln233_2_reg_624_pp0_iter4_reg(13 downto 0) <= zext_ln233_2_reg_624_pp0_iter3_reg(13 downto 0);
                    zext_ln233_2_reg_624_pp0_iter5_reg(13 downto 0) <= zext_ln233_2_reg_624_pp0_iter4_reg(13 downto 0);
                    zext_ln233_2_reg_624_pp0_iter6_reg(13 downto 0) <= zext_ln233_2_reg_624_pp0_iter5_reg(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1136_reg_652 = ap_const_lv1_0))) then
                icmp_ln1159_reg_695 <= icmp_ln1159_fu_472_p2;
                    or_ln1150_1_reg_690(0) <= or_ln1150_1_fu_464_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1136_reg_652_pp0_iter4_reg = ap_const_lv1_0))) then
                m_reg_700 <= m_6_fu_515_p2(63 downto 1);
                p_Result_48_reg_705 <= m_6_fu_515_p2(25 downto 25);
            end if;
        end if;
    end process;
    zext_ln233_2_reg_624(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln233_2_reg_624_pp0_iter2_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln233_2_reg_624_pp0_iter3_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln233_2_reg_624_pp0_iter4_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln233_2_reg_624_pp0_iter5_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln233_2_reg_624_pp0_iter6_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    or_ln1150_1_reg_690(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    LD_fu_579_p1 <= p_Result_52_fu_567_p5(32 - 1 downto 0);
    a_fu_420_p2 <= (icmp_ln1148_fu_414_p2 and icmp_ln1147_fu_388_p2);
    add_ln1150_fu_440_p2 <= std_logic_vector(unsigned(trunc_ln1145_reg_675) + unsigned(ap_const_lv25_1FFFFE8));
    add_ln1159_fu_481_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_669_pp0_iter4_reg) + unsigned(ap_const_lv32_FFFFFFE7));
    add_ln1170_fu_554_p2 <= std_logic_vector(unsigned(sub_ln1165_fu_549_p2) + unsigned(select_ln1144_fu_542_p3));
    add_ln230_1_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i11_load) + unsigned(ap_const_lv4_1));
    add_ln230_fu_185_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten59_load) + unsigned(ap_const_lv14_1));
    add_ln231_fu_261_p2 <= std_logic_vector(unsigned(select_ln230_fu_209_p3) + unsigned(ap_const_lv10_1));
    add_ln233_fu_255_p2 <= std_logic_vector(unsigned(sub_ln233_fu_245_p2) + unsigned(zext_ln233_1_fu_251_p1));
    and_ln1150_fu_452_p2 <= (xor_ln1150_fu_434_p2 and p_Result_47_fu_445_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln230_fu_179_p2)
    begin
        if (((icmp_ln230_fu_179_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i11_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i11_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i11_load <= i11_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten59_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten59_fu_118)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten59_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten59_load <= indvar_flatten59_fu_118;
        end if; 
    end process;


    ap_sig_allocacmp_j11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j11_fu_110, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j11_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j11_load <= j11_fu_110;
        end if; 
    end process;

    bitcast_ln810_fu_583_p1 <= LD_fu_579_p1;
    icmp_ln1136_fu_309_p2 <= "1" when (v133_reg_639 = ap_const_lv25_0) else "0";
    icmp_ln1147_fu_388_p2 <= "1" when (signed(tmp_fu_378_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1148_fu_414_p2 <= "0" when (p_Result_46_fu_409_p2 = ap_const_lv25_0) else "1";
    icmp_ln1159_fu_472_p2 <= "1" when (signed(lsb_index_fu_373_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln230_fu_179_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten59_load = ap_const_lv14_2400) else "0";
    icmp_ln231_fu_203_p2 <= "1" when (ap_sig_allocacmp_j11_load = ap_const_lv10_300) else "0";
    
    l_fu_347_p3_proc : process(sext_ln1244_fu_343_p1)
    begin
        l_fu_347_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1244_fu_343_p1(i) = '1' then
                l_fu_347_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_373_p2 <= std_logic_vector(unsigned(sub_ln1145_reg_669) + unsigned(ap_const_lv32_FFFFFFE8));
    lshr_ln1148_fu_403_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv25_1FFFFFF),to_integer(unsigned('0' & zext_ln1148_fu_399_p1(25-1 downto 0)))));
    lshr_ln1159_fu_490_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1158_fu_478_p1),to_integer(unsigned('0' & zext_ln1159_fu_486_p1(31-1 downto 0)))));
    m_5_fu_505_p3 <= 
        lshr_ln1159_fu_490_p2 when (icmp_ln1159_reg_695(0) = '1') else 
        shl_ln1160_fu_499_p2;
    m_6_fu_515_p2 <= std_logic_vector(unsigned(m_5_fu_505_p3) + unsigned(zext_ln1162_fu_512_p1));
    or_ln1150_1_fu_464_p3 <= (ap_const_lv1_0 & or_ln1150_fu_458_p2);
    or_ln1150_fu_458_p2 <= (and_ln1150_fu_452_p2 or a_fu_420_p2);
    p_Result_46_fu_409_p2 <= (tmp_V_4_reg_657 and lshr_ln1148_fu_403_p2);
    p_Result_47_fu_445_p3 <= tmp_V_4_reg_657(to_integer(unsigned(add_ln1150_fu_440_p2)) downto to_integer(unsigned(add_ln1150_fu_440_p2))) when (to_integer(unsigned(add_ln1150_fu_440_p2)) >= 0 and to_integer(unsigned(add_ln1150_fu_440_p2)) <=24) else "-";
    p_Result_51_fu_335_p3 <= (ap_const_lv1_1 & p_Result_s_fu_325_p4);
    p_Result_52_fu_567_p5 <= (zext_ln1163_fu_539_p1(63 downto 32) & tmp_12_fu_560_p3 & zext_ln1163_fu_539_p1(22 downto 0));
    
    p_Result_s_fu_325_p4_proc : process(tmp_V_4_fu_319_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(25+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(25+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(25 - 1 downto 0);
    variable p_Result_s_fu_325_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(25 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(25 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(25 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_18(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_319_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(25-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(25-1-unsigned(ap_const_lv32_18(5-1 downto 0)));
            for p_Result_s_fu_325_p4_i in 0 to 25-1 loop
                v0_cpy(p_Result_s_fu_325_p4_i) := tmp_V_4_fu_319_p3(25-1-p_Result_s_fu_325_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(25-1 downto 0)))));
        res_mask := res_mask(25-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_325_p4 <= resvalue(25-1 downto 0);
    end process;

    select_ln1144_fu_542_p3 <= 
        ap_const_lv8_7F when (p_Result_48_reg_705(0) = '1') else 
        ap_const_lv8_7E;
    select_ln230_1_fu_217_p3 <= 
        add_ln230_1_fu_197_p2 when (icmp_ln231_fu_203_p2(0) = '1') else 
        ap_sig_allocacmp_i11_load;
    select_ln230_fu_209_p3 <= 
        ap_const_lv10_0 when (icmp_ln231_fu_203_p2(0) = '1') else 
        ap_sig_allocacmp_j11_load;
        sext_ln1244_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_51_fu_335_p3),32));

        sext_ln859_2_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v266_V_q0),25));

        sext_ln859_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v269_V_q0),25));

    shl_ln1160_fu_499_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1158_fu_478_p1),to_integer(unsigned('0' & zext_ln1160_fu_496_p1(31-1 downto 0)))));
    sub_ln1145_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(l_fu_347_p3));
    sub_ln1148_fu_394_p2 <= std_logic_vector(signed(ap_const_lv5_12) - signed(trunc_ln1148_reg_680));
    sub_ln1165_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) - unsigned(trunc_ln1144_reg_685_pp0_iter5_reg));
    sub_ln233_fu_245_p2 <= std_logic_vector(unsigned(tmp_s_fu_225_p3) - unsigned(zext_ln233_fu_241_p1));
    tmp_12_fu_560_p3 <= (p_Result_50_reg_646_pp0_iter5_reg & add_ln1170_fu_554_p2);
    tmp_45_fu_233_p3 <= (select_ln230_1_fu_217_p3 & ap_const_lv8_0);
    tmp_54_fu_426_p3 <= lsb_index_fu_373_p2(31 downto 31);
    tmp_V_4_fu_319_p3 <= 
        tmp_V_fu_314_p2 when (p_Result_50_reg_646(0) = '1') else 
        v133_reg_639;
    tmp_V_fu_314_p2 <= std_logic_vector(unsigned(ap_const_lv25_0) - unsigned(v133_reg_639));
    tmp_fu_378_p4 <= lsb_index_fu_373_p2(31 downto 1);
    tmp_s_fu_225_p3 <= (select_ln230_1_fu_217_p3 & ap_const_lv10_0);
    trunc_ln1144_fu_369_p1 <= l_fu_347_p3(8 - 1 downto 0);
    trunc_ln1145_fu_361_p1 <= sub_ln1145_fu_355_p2(25 - 1 downto 0);
    trunc_ln1148_fu_365_p1 <= sub_ln1145_fu_355_p2(5 - 1 downto 0);
    v133_fu_295_p2 <= std_logic_vector(signed(sext_ln859_2_fu_291_p1) + signed(sext_ln859_fu_287_p1));
    v134_fu_587_p3 <= 
        ap_const_lv32_0 when (icmp_ln1136_reg_652_pp0_iter5_reg(0) = '1') else 
        bitcast_ln810_fu_583_p1;
    v266_V_address0 <= zext_ln233_2_fu_282_p1(14 - 1 downto 0);

    v266_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v266_V_ce0 <= ap_const_logic_1;
        else 
            v266_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v269_V_address0 <= zext_ln233_2_fu_282_p1(14 - 1 downto 0);

    v269_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v269_V_ce0 <= ap_const_logic_1;
        else 
            v269_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v270_address0 <= zext_ln233_2_reg_624_pp0_iter6_reg(14 - 1 downto 0);

    v270_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            v270_ce0 <= ap_const_logic_1;
        else 
            v270_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v270_d0 <= v134_reg_710;

    v270_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            v270_we0 <= ap_const_logic_1;
        else 
            v270_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1150_fu_434_p2 <= (tmp_54_fu_426_p3 xor ap_const_lv1_1);
    zext_ln1148_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1148_fu_394_p2),25));
    zext_ln1158_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_657_pp0_iter4_reg),64));
    zext_ln1159_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1159_fu_481_p2),64));
    zext_ln1160_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_664_pp0_iter4_reg),64));
    zext_ln1162_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1150_1_reg_690),64));
    zext_ln1163_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_700),64));
    zext_ln233_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln230_fu_209_p3),14));
    zext_ln233_2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_reg_619),64));
    zext_ln233_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_233_p3),14));
end behav;
