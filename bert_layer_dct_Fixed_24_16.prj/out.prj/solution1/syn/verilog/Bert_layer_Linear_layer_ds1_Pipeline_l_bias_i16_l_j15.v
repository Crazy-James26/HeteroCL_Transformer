// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Linear_layer_ds1_Pipeline_l_bias_i16_l_j15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v179_address0,
        v179_ce0,
        v179_we0,
        v179_d0,
        outp1_V_address0,
        outp1_V_ce0,
        outp1_V_q0,
        v252_address0,
        v252_ce0,
        v252_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] v179_address0;
output   v179_ce0;
output   v179_we0;
output  [31:0] v179_d0;
output  [15:0] outp1_V_address0;
output   outp1_V_ce0;
input  [23:0] outp1_V_q0;
output  [11:0] v252_address0;
output   v252_ce0;
input  [23:0] v252_q0;

reg ap_idle;
reg v179_ce0;
reg v179_we0;
reg outp1_V_ce0;
reg v252_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln336_fu_185_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] select_ln336_fu_215_p3;
reg   [11:0] select_ln336_reg_626;
wire   [3:0] select_ln336_1_fu_223_p3;
reg   [3:0] select_ln336_1_reg_632;
wire   [63:0] zext_ln344_2_fu_289_p1;
reg   [63:0] zext_ln344_2_reg_638;
reg   [63:0] zext_ln344_2_reg_638_pp0_iter2_reg;
reg   [63:0] zext_ln344_2_reg_638_pp0_iter3_reg;
reg   [63:0] zext_ln344_2_reg_638_pp0_iter4_reg;
reg   [63:0] zext_ln344_2_reg_638_pp0_iter5_reg;
reg   [63:0] zext_ln344_2_reg_638_pp0_iter6_reg;
wire   [24:0] v203_fu_302_p2;
reg   [24:0] v203_reg_653;
reg   [0:0] p_Result_39_reg_660;
reg   [0:0] p_Result_39_reg_660_pp0_iter3_reg;
reg   [0:0] p_Result_39_reg_660_pp0_iter4_reg;
reg   [0:0] p_Result_39_reg_660_pp0_iter5_reg;
wire   [0:0] icmp_ln1136_fu_316_p2;
reg   [0:0] icmp_ln1136_reg_666;
reg   [0:0] icmp_ln1136_reg_666_pp0_iter4_reg;
reg   [0:0] icmp_ln1136_reg_666_pp0_iter5_reg;
wire   [24:0] tmp_V_2_fu_326_p3;
reg   [24:0] tmp_V_2_reg_671;
reg   [24:0] tmp_V_2_reg_671_pp0_iter4_reg;
reg   [31:0] l_fu_354_p3;
reg   [31:0] l_reg_678;
reg   [31:0] l_reg_678_pp0_iter4_reg;
wire   [31:0] sub_ln1145_fu_362_p2;
reg   [31:0] sub_ln1145_reg_683;
reg   [31:0] sub_ln1145_reg_683_pp0_iter4_reg;
wire   [24:0] trunc_ln1145_fu_368_p1;
reg   [24:0] trunc_ln1145_reg_689;
wire   [4:0] trunc_ln1148_fu_372_p1;
reg   [4:0] trunc_ln1148_reg_694;
wire   [7:0] trunc_ln1144_fu_376_p1;
reg   [7:0] trunc_ln1144_reg_699;
reg   [7:0] trunc_ln1144_reg_699_pp0_iter4_reg;
reg   [7:0] trunc_ln1144_reg_699_pp0_iter5_reg;
wire   [1:0] or_ln_fu_471_p3;
reg   [1:0] or_ln_reg_704;
wire   [0:0] icmp_ln1159_fu_479_p2;
reg   [0:0] icmp_ln1159_reg_709;
reg   [62:0] m_4_reg_714;
reg   [0:0] p_Result_37_reg_719;
wire   [31:0] v204_fu_594_p3;
reg   [31:0] v204_reg_724;
wire    ap_block_pp0_stage0;
wire   [63:0] j15_cast_fu_276_p1;
reg   [11:0] j15_fu_116;
wire   [11:0] add_ln337_fu_231_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_j15_load;
reg   [3:0] i16_fu_120;
reg   [3:0] ap_sig_allocacmp_i16_load;
reg   [15:0] indvar_flatten20_fu_124;
wire   [15:0] add_ln336_1_fu_191_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten20_load;
wire   [0:0] icmp_ln337_fu_209_p2;
wire   [3:0] add_ln336_fu_203_p2;
wire   [13:0] tmp_30_fu_259_p3;
wire   [15:0] tmp_29_fu_252_p3;
wire   [15:0] zext_ln344_fu_266_p1;
wire   [15:0] sub_ln344_fu_270_p2;
wire   [15:0] zext_ln344_1_fu_280_p1;
wire   [15:0] add_ln344_fu_283_p2;
wire  signed [24:0] sext_ln859_1_fu_298_p1;
wire  signed [24:0] sext_ln859_fu_294_p1;
wire   [24:0] tmp_V_fu_321_p2;
reg   [24:0] p_Result_s_fu_332_p4;
wire   [25:0] p_Result_40_fu_342_p3;
wire  signed [31:0] sext_ln1244_fu_350_p1;
wire   [31:0] lsb_index_fu_380_p2;
wire   [30:0] tmp_fu_385_p4;
wire   [4:0] sub_ln1148_fu_401_p2;
wire   [24:0] zext_ln1148_fu_406_p1;
wire   [24:0] lshr_ln1148_fu_410_p2;
wire   [24:0] p_Result_35_fu_416_p2;
wire   [0:0] icmp_ln1147_fu_395_p2;
wire   [0:0] icmp_ln1148_fu_421_p2;
wire   [0:0] tmp_50_fu_433_p3;
wire   [24:0] add_ln1150_fu_447_p2;
wire   [0:0] p_Result_36_fu_452_p3;
wire   [0:0] xor_ln1150_fu_441_p2;
wire   [0:0] and_ln1150_fu_459_p2;
wire   [0:0] a_fu_427_p2;
wire   [0:0] or_ln1150_fu_465_p2;
wire   [31:0] add_ln1159_fu_488_p2;
wire   [63:0] zext_ln1158_fu_485_p1;
wire   [63:0] zext_ln1159_fu_493_p1;
wire   [63:0] zext_ln1160_fu_503_p1;
wire   [63:0] lshr_ln1159_fu_497_p2;
wire   [63:0] shl_ln1160_fu_506_p2;
wire   [63:0] m_2_fu_512_p3;
wire   [63:0] zext_ln1162_fu_519_p1;
wire   [63:0] m_3_fu_522_p2;
wire   [7:0] sub_ln1165_fu_556_p2;
wire   [7:0] select_ln1144_fu_549_p3;
wire   [7:0] add_ln1170_fu_561_p2;
wire   [63:0] zext_ln1163_fu_546_p1;
wire   [8:0] tmp_s_fu_567_p3;
wire   [63:0] p_Result_41_fu_574_p5;
wire   [31:0] LD_fu_586_p1;
wire   [31:0] bitcast_ln810_fu_590_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln336_fu_185_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i16_fu_120 <= select_ln336_1_fu_223_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i16_fu_120 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln336_fu_185_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten20_fu_124 <= add_ln336_1_fu_191_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_124 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln336_fu_185_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j15_fu_116 <= add_ln337_fu_231_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j15_fu_116 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln344_2_reg_638[15 : 0] <= zext_ln344_2_fu_289_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln1136_reg_666 <= icmp_ln1136_fu_316_p2;
        icmp_ln1136_reg_666_pp0_iter4_reg <= icmp_ln1136_reg_666;
        icmp_ln1136_reg_666_pp0_iter5_reg <= icmp_ln1136_reg_666_pp0_iter4_reg;
        l_reg_678 <= l_fu_354_p3;
        l_reg_678_pp0_iter4_reg <= l_reg_678;
        p_Result_39_reg_660 <= v203_fu_302_p2[32'd24];
        p_Result_39_reg_660_pp0_iter3_reg <= p_Result_39_reg_660;
        p_Result_39_reg_660_pp0_iter4_reg <= p_Result_39_reg_660_pp0_iter3_reg;
        p_Result_39_reg_660_pp0_iter5_reg <= p_Result_39_reg_660_pp0_iter4_reg;
        sub_ln1145_reg_683 <= sub_ln1145_fu_362_p2;
        sub_ln1145_reg_683_pp0_iter4_reg <= sub_ln1145_reg_683;
        tmp_V_2_reg_671 <= tmp_V_2_fu_326_p3;
        tmp_V_2_reg_671_pp0_iter4_reg <= tmp_V_2_reg_671;
        trunc_ln1144_reg_699 <= trunc_ln1144_fu_376_p1;
        trunc_ln1144_reg_699_pp0_iter4_reg <= trunc_ln1144_reg_699;
        trunc_ln1144_reg_699_pp0_iter5_reg <= trunc_ln1144_reg_699_pp0_iter4_reg;
        trunc_ln1145_reg_689 <= trunc_ln1145_fu_368_p1;
        trunc_ln1148_reg_694 <= trunc_ln1148_fu_372_p1;
        v203_reg_653 <= v203_fu_302_p2;
        v204_reg_724 <= v204_fu_594_p3;
        zext_ln344_2_reg_638_pp0_iter2_reg[15 : 0] <= zext_ln344_2_reg_638[15 : 0];
        zext_ln344_2_reg_638_pp0_iter3_reg[15 : 0] <= zext_ln344_2_reg_638_pp0_iter2_reg[15 : 0];
        zext_ln344_2_reg_638_pp0_iter4_reg[15 : 0] <= zext_ln344_2_reg_638_pp0_iter3_reg[15 : 0];
        zext_ln344_2_reg_638_pp0_iter5_reg[15 : 0] <= zext_ln344_2_reg_638_pp0_iter4_reg[15 : 0];
        zext_ln344_2_reg_638_pp0_iter6_reg[15 : 0] <= zext_ln344_2_reg_638_pp0_iter5_reg[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_666 == 1'd0))) begin
        icmp_ln1159_reg_709 <= icmp_ln1159_fu_479_p2;
        or_ln_reg_704[0] <= or_ln_fu_471_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_666_pp0_iter4_reg == 1'd0))) begin
        m_4_reg_714 <= {{m_3_fu_522_p2[63:1]}};
        p_Result_37_reg_719 <= m_3_fu_522_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln336_1_reg_632 <= select_ln336_1_fu_223_p3;
        select_ln336_reg_626 <= select_ln336_fu_215_p3;
    end
end

always @ (*) begin
    if (((icmp_ln336_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i16_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i16_load = i16_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j15_load = 12'd0;
    end else begin
        ap_sig_allocacmp_j15_load = j15_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outp1_V_ce0 = 1'b1;
    end else begin
        outp1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v179_ce0 = 1'b1;
    end else begin
        v179_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v179_we0 = 1'b1;
    end else begin
        v179_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v252_ce0 = 1'b1;
    end else begin
        v252_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_586_p1 = p_Result_41_fu_574_p5[31:0];

assign a_fu_427_p2 = (icmp_ln1148_fu_421_p2 & icmp_ln1147_fu_395_p2);

assign add_ln1150_fu_447_p2 = ($signed(trunc_ln1145_reg_689) + $signed(25'd33554408));

assign add_ln1159_fu_488_p2 = ($signed(sub_ln1145_reg_683_pp0_iter4_reg) + $signed(32'd4294967271));

assign add_ln1170_fu_561_p2 = (sub_ln1165_fu_556_p2 + select_ln1144_fu_549_p3);

assign add_ln336_1_fu_191_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 16'd1);

assign add_ln336_fu_203_p2 = (ap_sig_allocacmp_i16_load + 4'd1);

assign add_ln337_fu_231_p2 = (select_ln336_fu_215_p3 + 12'd1);

assign add_ln344_fu_283_p2 = (sub_ln344_fu_270_p2 + zext_ln344_1_fu_280_p1);

assign and_ln1150_fu_459_p2 = (xor_ln1150_fu_441_p2 & p_Result_36_fu_452_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln810_fu_590_p1 = LD_fu_586_p1;

assign icmp_ln1136_fu_316_p2 = ((v203_reg_653 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_395_p2 = (($signed(tmp_fu_385_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_421_p2 = ((p_Result_35_fu_416_p2 != 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_479_p2 = (($signed(lsb_index_fu_380_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln336_fu_185_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 16'd36864) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_209_p2 = ((ap_sig_allocacmp_j15_load == 12'd3072) ? 1'b1 : 1'b0);

assign j15_cast_fu_276_p1 = select_ln336_reg_626;


always @ (sext_ln1244_fu_350_p1) begin
    if (sext_ln1244_fu_350_p1[0] == 1'b1) begin
        l_fu_354_p3 = 32'd0;
    end else if (sext_ln1244_fu_350_p1[1] == 1'b1) begin
        l_fu_354_p3 = 32'd1;
    end else if (sext_ln1244_fu_350_p1[2] == 1'b1) begin
        l_fu_354_p3 = 32'd2;
    end else if (sext_ln1244_fu_350_p1[3] == 1'b1) begin
        l_fu_354_p3 = 32'd3;
    end else if (sext_ln1244_fu_350_p1[4] == 1'b1) begin
        l_fu_354_p3 = 32'd4;
    end else if (sext_ln1244_fu_350_p1[5] == 1'b1) begin
        l_fu_354_p3 = 32'd5;
    end else if (sext_ln1244_fu_350_p1[6] == 1'b1) begin
        l_fu_354_p3 = 32'd6;
    end else if (sext_ln1244_fu_350_p1[7] == 1'b1) begin
        l_fu_354_p3 = 32'd7;
    end else if (sext_ln1244_fu_350_p1[8] == 1'b1) begin
        l_fu_354_p3 = 32'd8;
    end else if (sext_ln1244_fu_350_p1[9] == 1'b1) begin
        l_fu_354_p3 = 32'd9;
    end else if (sext_ln1244_fu_350_p1[10] == 1'b1) begin
        l_fu_354_p3 = 32'd10;
    end else if (sext_ln1244_fu_350_p1[11] == 1'b1) begin
        l_fu_354_p3 = 32'd11;
    end else if (sext_ln1244_fu_350_p1[12] == 1'b1) begin
        l_fu_354_p3 = 32'd12;
    end else if (sext_ln1244_fu_350_p1[13] == 1'b1) begin
        l_fu_354_p3 = 32'd13;
    end else if (sext_ln1244_fu_350_p1[14] == 1'b1) begin
        l_fu_354_p3 = 32'd14;
    end else if (sext_ln1244_fu_350_p1[15] == 1'b1) begin
        l_fu_354_p3 = 32'd15;
    end else if (sext_ln1244_fu_350_p1[16] == 1'b1) begin
        l_fu_354_p3 = 32'd16;
    end else if (sext_ln1244_fu_350_p1[17] == 1'b1) begin
        l_fu_354_p3 = 32'd17;
    end else if (sext_ln1244_fu_350_p1[18] == 1'b1) begin
        l_fu_354_p3 = 32'd18;
    end else if (sext_ln1244_fu_350_p1[19] == 1'b1) begin
        l_fu_354_p3 = 32'd19;
    end else if (sext_ln1244_fu_350_p1[20] == 1'b1) begin
        l_fu_354_p3 = 32'd20;
    end else if (sext_ln1244_fu_350_p1[21] == 1'b1) begin
        l_fu_354_p3 = 32'd21;
    end else if (sext_ln1244_fu_350_p1[22] == 1'b1) begin
        l_fu_354_p3 = 32'd22;
    end else if (sext_ln1244_fu_350_p1[23] == 1'b1) begin
        l_fu_354_p3 = 32'd23;
    end else if (sext_ln1244_fu_350_p1[24] == 1'b1) begin
        l_fu_354_p3 = 32'd24;
    end else if (sext_ln1244_fu_350_p1[25] == 1'b1) begin
        l_fu_354_p3 = 32'd25;
    end else if (sext_ln1244_fu_350_p1[26] == 1'b1) begin
        l_fu_354_p3 = 32'd26;
    end else if (sext_ln1244_fu_350_p1[27] == 1'b1) begin
        l_fu_354_p3 = 32'd27;
    end else if (sext_ln1244_fu_350_p1[28] == 1'b1) begin
        l_fu_354_p3 = 32'd28;
    end else if (sext_ln1244_fu_350_p1[29] == 1'b1) begin
        l_fu_354_p3 = 32'd29;
    end else if (sext_ln1244_fu_350_p1[30] == 1'b1) begin
        l_fu_354_p3 = 32'd30;
    end else if (sext_ln1244_fu_350_p1[31] == 1'b1) begin
        l_fu_354_p3 = 32'd31;
    end else begin
        l_fu_354_p3 = 32'd32;
    end
end

assign lsb_index_fu_380_p2 = ($signed(sub_ln1145_reg_683) + $signed(32'd4294967272));

assign lshr_ln1148_fu_410_p2 = 25'd33554431 >> zext_ln1148_fu_406_p1;

assign lshr_ln1159_fu_497_p2 = zext_ln1158_fu_485_p1 >> zext_ln1159_fu_493_p1;

assign m_2_fu_512_p3 = ((icmp_ln1159_reg_709[0:0] == 1'b1) ? lshr_ln1159_fu_497_p2 : shl_ln1160_fu_506_p2);

assign m_3_fu_522_p2 = (m_2_fu_512_p3 + zext_ln1162_fu_519_p1);

assign or_ln1150_fu_465_p2 = (and_ln1150_fu_459_p2 | a_fu_427_p2);

assign or_ln_fu_471_p3 = {{1'd0}, {or_ln1150_fu_465_p2}};

assign outp1_V_address0 = zext_ln344_2_fu_289_p1;

assign p_Result_35_fu_416_p2 = (tmp_V_2_reg_671 & lshr_ln1148_fu_410_p2);

assign p_Result_36_fu_452_p3 = tmp_V_2_reg_671[add_ln1150_fu_447_p2];

assign p_Result_40_fu_342_p3 = {{1'd1}, {p_Result_s_fu_332_p4}};

assign p_Result_41_fu_574_p5 = {{zext_ln1163_fu_546_p1[63:32]}, {tmp_s_fu_567_p3}, {zext_ln1163_fu_546_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_2_fu_326_p3) begin
    for (ap_tvar_int_0 = 25 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 24 - 0) begin
            p_Result_s_fu_332_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_332_p4[ap_tvar_int_0] = tmp_V_2_fu_326_p3[24 - ap_tvar_int_0];
        end
    end
end

assign select_ln1144_fu_549_p3 = ((p_Result_37_reg_719[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln336_1_fu_223_p3 = ((icmp_ln337_fu_209_p2[0:0] == 1'b1) ? add_ln336_fu_203_p2 : ap_sig_allocacmp_i16_load);

assign select_ln336_fu_215_p3 = ((icmp_ln337_fu_209_p2[0:0] == 1'b1) ? 12'd0 : ap_sig_allocacmp_j15_load);

assign sext_ln1244_fu_350_p1 = $signed(p_Result_40_fu_342_p3);

assign sext_ln859_1_fu_298_p1 = $signed(v252_q0);

assign sext_ln859_fu_294_p1 = $signed(outp1_V_q0);

assign shl_ln1160_fu_506_p2 = zext_ln1158_fu_485_p1 << zext_ln1160_fu_503_p1;

assign sub_ln1145_fu_362_p2 = (32'd25 - l_fu_354_p3);

assign sub_ln1148_fu_401_p2 = ($signed(5'd18) - $signed(trunc_ln1148_reg_694));

assign sub_ln1165_fu_556_p2 = (8'd9 - trunc_ln1144_reg_699_pp0_iter5_reg);

assign sub_ln344_fu_270_p2 = (tmp_29_fu_252_p3 - zext_ln344_fu_266_p1);

assign tmp_29_fu_252_p3 = {{select_ln336_1_reg_632}, {12'd0}};

assign tmp_30_fu_259_p3 = {{select_ln336_1_reg_632}, {10'd0}};

assign tmp_50_fu_433_p3 = lsb_index_fu_380_p2[32'd31];

assign tmp_V_2_fu_326_p3 = ((p_Result_39_reg_660[0:0] == 1'b1) ? tmp_V_fu_321_p2 : v203_reg_653);

assign tmp_V_fu_321_p2 = (25'd0 - v203_reg_653);

assign tmp_fu_385_p4 = {{lsb_index_fu_380_p2[31:1]}};

assign tmp_s_fu_567_p3 = {{p_Result_39_reg_660_pp0_iter5_reg}, {add_ln1170_fu_561_p2}};

assign trunc_ln1144_fu_376_p1 = l_fu_354_p3[7:0];

assign trunc_ln1145_fu_368_p1 = sub_ln1145_fu_362_p2[24:0];

assign trunc_ln1148_fu_372_p1 = sub_ln1145_fu_362_p2[4:0];

assign v179_address0 = zext_ln344_2_reg_638_pp0_iter6_reg;

assign v179_d0 = v204_reg_724;

assign v203_fu_302_p2 = ($signed(sext_ln859_1_fu_298_p1) + $signed(sext_ln859_fu_294_p1));

assign v204_fu_594_p3 = ((icmp_ln1136_reg_666_pp0_iter5_reg[0:0] == 1'b1) ? 32'd0 : bitcast_ln810_fu_590_p1);

assign v252_address0 = j15_cast_fu_276_p1;

assign xor_ln1150_fu_441_p2 = (tmp_50_fu_433_p3 ^ 1'd1);

assign zext_ln1148_fu_406_p1 = sub_ln1148_fu_401_p2;

assign zext_ln1158_fu_485_p1 = tmp_V_2_reg_671_pp0_iter4_reg;

assign zext_ln1159_fu_493_p1 = add_ln1159_fu_488_p2;

assign zext_ln1160_fu_503_p1 = l_reg_678_pp0_iter4_reg;

assign zext_ln1162_fu_519_p1 = or_ln_reg_704;

assign zext_ln1163_fu_546_p1 = m_4_reg_714;

assign zext_ln344_1_fu_280_p1 = select_ln336_reg_626;

assign zext_ln344_2_fu_289_p1 = add_ln344_fu_283_p2;

assign zext_ln344_fu_266_p1 = tmp_30_fu_259_p3;

always @ (posedge ap_clk) begin
    zext_ln344_2_reg_638[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln344_2_reg_638_pp0_iter2_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln344_2_reg_638_pp0_iter3_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln344_2_reg_638_pp0_iter4_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln344_2_reg_638_pp0_iter5_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln344_2_reg_638_pp0_iter6_reg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    or_ln_reg_704[1] <= 1'b0;
end

endmodule //Bert_layer_Linear_layer_ds1_Pipeline_l_bias_i16_l_j15
