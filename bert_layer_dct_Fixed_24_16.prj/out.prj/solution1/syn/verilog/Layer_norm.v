// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Layer_norm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v135_address0,
        v135_ce0,
        v135_q0,
        v136_address0,
        v136_ce0,
        v136_q0,
        v137_address0,
        v137_ce0,
        v137_q0,
        v138_V_address0,
        v138_V_ce0,
        v138_V_we0,
        v138_V_d0
);

parameter    ap_ST_fsm_state1 = 90'd1;
parameter    ap_ST_fsm_state2 = 90'd2;
parameter    ap_ST_fsm_state3 = 90'd4;
parameter    ap_ST_fsm_state4 = 90'd8;
parameter    ap_ST_fsm_state5 = 90'd16;
parameter    ap_ST_fsm_state6 = 90'd32;
parameter    ap_ST_fsm_state7 = 90'd64;
parameter    ap_ST_fsm_state8 = 90'd128;
parameter    ap_ST_fsm_state9 = 90'd256;
parameter    ap_ST_fsm_state10 = 90'd512;
parameter    ap_ST_fsm_state11 = 90'd1024;
parameter    ap_ST_fsm_state12 = 90'd2048;
parameter    ap_ST_fsm_state13 = 90'd4096;
parameter    ap_ST_fsm_state14 = 90'd8192;
parameter    ap_ST_fsm_state15 = 90'd16384;
parameter    ap_ST_fsm_state16 = 90'd32768;
parameter    ap_ST_fsm_state17 = 90'd65536;
parameter    ap_ST_fsm_state18 = 90'd131072;
parameter    ap_ST_fsm_state19 = 90'd262144;
parameter    ap_ST_fsm_state20 = 90'd524288;
parameter    ap_ST_fsm_state21 = 90'd1048576;
parameter    ap_ST_fsm_state22 = 90'd2097152;
parameter    ap_ST_fsm_state23 = 90'd4194304;
parameter    ap_ST_fsm_state24 = 90'd8388608;
parameter    ap_ST_fsm_state25 = 90'd16777216;
parameter    ap_ST_fsm_state26 = 90'd33554432;
parameter    ap_ST_fsm_state27 = 90'd67108864;
parameter    ap_ST_fsm_state28 = 90'd134217728;
parameter    ap_ST_fsm_state29 = 90'd268435456;
parameter    ap_ST_fsm_state30 = 90'd536870912;
parameter    ap_ST_fsm_state31 = 90'd1073741824;
parameter    ap_ST_fsm_state32 = 90'd2147483648;
parameter    ap_ST_fsm_state33 = 90'd4294967296;
parameter    ap_ST_fsm_state34 = 90'd8589934592;
parameter    ap_ST_fsm_state35 = 90'd17179869184;
parameter    ap_ST_fsm_state36 = 90'd34359738368;
parameter    ap_ST_fsm_state37 = 90'd68719476736;
parameter    ap_ST_fsm_state38 = 90'd137438953472;
parameter    ap_ST_fsm_state39 = 90'd274877906944;
parameter    ap_ST_fsm_state40 = 90'd549755813888;
parameter    ap_ST_fsm_state41 = 90'd1099511627776;
parameter    ap_ST_fsm_state42 = 90'd2199023255552;
parameter    ap_ST_fsm_state43 = 90'd4398046511104;
parameter    ap_ST_fsm_state44 = 90'd8796093022208;
parameter    ap_ST_fsm_state45 = 90'd17592186044416;
parameter    ap_ST_fsm_state46 = 90'd35184372088832;
parameter    ap_ST_fsm_state47 = 90'd70368744177664;
parameter    ap_ST_fsm_state48 = 90'd140737488355328;
parameter    ap_ST_fsm_state49 = 90'd281474976710656;
parameter    ap_ST_fsm_state50 = 90'd562949953421312;
parameter    ap_ST_fsm_state51 = 90'd1125899906842624;
parameter    ap_ST_fsm_state52 = 90'd2251799813685248;
parameter    ap_ST_fsm_state53 = 90'd4503599627370496;
parameter    ap_ST_fsm_state54 = 90'd9007199254740992;
parameter    ap_ST_fsm_state55 = 90'd18014398509481984;
parameter    ap_ST_fsm_state56 = 90'd36028797018963968;
parameter    ap_ST_fsm_state57 = 90'd72057594037927936;
parameter    ap_ST_fsm_state58 = 90'd144115188075855872;
parameter    ap_ST_fsm_state59 = 90'd288230376151711744;
parameter    ap_ST_fsm_state60 = 90'd576460752303423488;
parameter    ap_ST_fsm_state61 = 90'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 90'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 90'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 90'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 90'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 90'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 90'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 90'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 90'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 90'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 90'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 90'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 90'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 90'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 90'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 90'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 90'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 90'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 90'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 90'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 90'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 90'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 90'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 90'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 90'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 90'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 90'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 90'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 90'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 90'd618970019642690137449562112;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v135_address0;
output   v135_ce0;
input  [31:0] v135_q0;
output  [9:0] v136_address0;
output   v136_ce0;
input  [31:0] v136_q0;
output  [9:0] v137_address0;
output   v137_ce0;
input  [31:0] v137_q0;
output  [13:0] v138_V_address0;
output   v138_V_ce0;
output   v138_V_we0;
output  [23:0] v138_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] v135_address0;
reg v135_ce0;
reg v136_ce0;
reg v137_ce0;
reg v138_V_ce0;
reg v138_V_we0;

(* fsm_encoding = "none" *) reg   [89:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_359;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state56;
wire   [31:0] mean_q0;
reg   [31:0] reg_367;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_329_p2;
reg   [31:0] reg_374;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state65;
wire   [31:0] mean2_q0;
reg   [31:0] reg_380;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_325_p2;
reg   [31:0] reg_386;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state86;
wire   [31:0] grp_fu_333_p2;
reg   [31:0] reg_395;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state81;
wire   [3:0] v140_fu_408_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] v142_fu_425_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i12_fu_442_p2;
reg   [3:0] i12_reg_898;
wire    ap_CS_fsm_state4;
wire   [14:0] sub_ln260_fu_478_p2;
reg   [14:0] sub_ln260_reg_903;
wire   [0:0] icmp_ln258_fu_436_p2;
reg   [3:0] mean_addr_1_reg_908;
reg   [3:0] mean2_addr_1_reg_913;
wire   [9:0] j12_fu_490_p2;
reg   [9:0] j12_reg_921;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln259_fu_484_p2;
wire   [3:0] i13_fu_516_p2;
reg   [3:0] i13_reg_934;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln272_fu_522_p1;
reg   [63:0] zext_ln272_reg_939;
wire   [0:0] icmp_ln271_fu_510_p2;
reg   [3:0] mean_addr_2_reg_945;
reg   [3:0] mean2_addr_2_reg_950;
wire    ap_CS_fsm_state21;
wire   [3:0] i14_fu_533_p2;
reg   [3:0] i14_reg_958;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln284_fu_527_p2;
wire   [31:0] var_q0;
wire   [63:0] grp_fu_345_p1;
reg   [63:0] tmp_reg_978;
wire    ap_CS_fsm_state46;
wire   [63:0] grp_fu_354_p2;
reg   [63:0] tmp_s_reg_983;
wire    ap_CS_fsm_state51;
wire   [14:0] sub_ln287_fu_569_p2;
reg   [14:0] sub_ln287_reg_988;
wire    ap_CS_fsm_state53;
wire   [31:0] grp_fu_342_p1;
reg   [31:0] v170_reg_993;
wire   [9:0] j13_fu_581_p2;
reg   [9:0] j13_reg_1001;
wire    ap_CS_fsm_state54;
wire  signed [63:0] sext_ln287_fu_596_p1;
reg  signed [63:0] sext_ln287_reg_1006;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
reg   [31:0] v164_reg_1026;
reg   [31:0] v173_reg_1031;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] v171_reg_1036;
wire   [53:0] man_V_4_fu_659_p3;
reg   [53:0] man_V_4_reg_1041;
wire    ap_CS_fsm_state88;
wire   [0:0] icmp_ln571_fu_667_p2;
reg   [0:0] icmp_ln571_reg_1046;
wire   [0:0] icmp_ln581_fu_679_p2;
reg   [0:0] icmp_ln581_reg_1052;
wire  signed [11:0] sh_amt_fu_697_p3;
reg  signed [11:0] sh_amt_reg_1058;
wire   [0:0] icmp_ln582_fu_705_p2;
reg   [0:0] icmp_ln582_reg_1065;
wire   [23:0] trunc_ln583_fu_711_p1;
reg   [23:0] trunc_ln583_reg_1071;
wire   [23:0] v175_V_fu_871_p3;
reg   [23:0] v175_V_reg_1077;
wire    ap_CS_fsm_state89;
reg   [3:0] mean_address0;
reg    mean_ce0;
reg    mean_we0;
reg   [31:0] mean_d0;
reg   [3:0] mean2_address0;
reg    mean2_ce0;
reg    mean2_we0;
reg   [31:0] mean2_d0;
reg   [3:0] var_address0;
reg    var_ce0;
reg    var_we0;
reg   [3:0] v140_0_reg_246;
wire   [0:0] icmp_ln250_fu_402_p2;
reg   [3:0] v142_0_reg_257;
wire   [0:0] icmp_ln254_fu_419_p2;
reg   [3:0] i12_0_reg_268;
reg   [9:0] j12_0_reg_279;
wire    ap_CS_fsm_state16;
reg   [3:0] i13_0_reg_290;
wire    ap_CS_fsm_state43;
reg   [3:0] i14_0_reg_301;
wire   [0:0] icmp_ln285_fu_575_p2;
reg   [9:0] j13_0_reg_313;
wire    ap_CS_fsm_state90;
wire   [63:0] zext_ln251_fu_414_p1;
wire   [63:0] zext_ln255_fu_431_p1;
wire   [63:0] zext_ln260_fu_448_p1;
wire  signed [63:0] sext_ln260_fu_505_p1;
wire   [63:0] zext_ln287_fu_539_p1;
wire   [63:0] zext_ln286_fu_601_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_325_p0;
reg   [31:0] grp_fu_325_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state82;
reg   [31:0] grp_fu_329_p0;
reg   [31:0] grp_fu_329_p1;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state62;
reg   [31:0] grp_fu_333_p0;
reg   [31:0] grp_fu_333_p1;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state52;
reg   [31:0] grp_fu_345_p0;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state47;
wire   [13:0] tmp_62_fu_454_p3;
wire   [11:0] tmp_63_fu_466_p3;
wire   [14:0] zext_ln260_1_fu_462_p1;
wire   [14:0] zext_ln260_2_fu_474_p1;
wire   [14:0] zext_ln260_3_fu_496_p1;
wire   [14:0] add_ln260_fu_500_p2;
wire   [13:0] tmp_64_fu_545_p3;
wire   [11:0] tmp_65_fu_557_p3;
wire   [14:0] zext_ln287_1_fu_553_p1;
wire   [14:0] zext_ln287_2_fu_565_p1;
wire   [14:0] zext_ln287_3_fu_587_p1;
wire   [14:0] add_ln287_fu_591_p2;
wire   [63:0] ireg_V_fu_607_p1;
wire   [10:0] exp_tmp_V_fu_623_p4;
wire   [51:0] trunc_ln565_fu_637_p1;
wire   [52:0] tmp_6_fu_641_p3;
wire   [53:0] p_Result_86_fu_649_p1;
wire   [0:0] p_Result_s_fu_615_p3;
wire   [53:0] man_V_3_fu_653_p2;
wire   [62:0] trunc_ln556_fu_611_p1;
wire   [11:0] zext_ln461_fu_633_p1;
wire   [11:0] F2_fu_673_p2;
wire   [11:0] add_ln581_fu_685_p2;
wire   [11:0] sub_ln581_fu_691_p2;
wire  signed [31:0] sext_ln581_fu_715_p1;
wire   [53:0] zext_ln586_fu_728_p1;
wire   [53:0] ashr_ln586_fu_732_p2;
wire   [31:0] bitcast_ln696_fu_741_p1;
wire   [0:0] tmp_38_fu_745_p3;
wire   [23:0] sext_ln581cast_fu_761_p1;
wire   [0:0] xor_ln571_fu_770_p2;
wire   [0:0] or_ln582_fu_780_p2;
wire   [0:0] xor_ln582_fu_784_p2;
wire   [0:0] icmp_ln585_fu_718_p2;
wire   [0:0] and_ln581_fu_790_p2;
wire   [0:0] xor_ln585_fu_795_p2;
wire   [0:0] or_ln581_fu_813_p2;
wire   [0:0] icmp_ln603_fu_723_p2;
wire   [0:0] xor_ln581_fu_818_p2;
wire   [0:0] and_ln603_fu_824_p2;
wire   [23:0] shl_ln604_fu_765_p2;
wire   [23:0] trunc_ln586_fu_737_p1;
wire   [0:0] and_ln585_2_fu_807_p2;
wire   [0:0] and_ln585_fu_801_p2;
wire   [23:0] select_ln588_fu_753_p3;
wire   [0:0] and_ln582_fu_775_p2;
wire   [0:0] or_ln603_fu_838_p2;
wire   [23:0] select_ln603_fu_830_p3;
wire   [23:0] select_ln603_4_fu_844_p3;
wire   [0:0] or_ln603_3_fu_851_p2;
wire   [0:0] or_ln603_4_fu_865_p2;
wire   [23:0] select_ln603_5_fu_857_p3;
reg   [1:0] grp_fu_325_opcode;
reg   [89:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 90'd1;
end

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mean_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean_address0),
    .ce0(mean_ce0),
    .we0(mean_we0),
    .d0(mean_d0),
    .q0(mean_q0)
);

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
mean2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mean2_address0),
    .ce0(mean2_ce0),
    .we0(mean2_we0),
    .d0(mean2_d0),
    .q0(mean2_q0)
);

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
var_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(var_address0),
    .ce0(var_ce0),
    .we0(var_we0),
    .d0(reg_386),
    .q0(var_q0)
);

Bert_layer_faddfsmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_faddfsmb6_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_325_p0),
    .din1(grp_fu_325_p1),
    .opcode(grp_fu_325_opcode),
    .ce(1'b1),
    .dout(grp_fu_325_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

Bert_layer_fdiv_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3fYi_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

Bert_layer_fptrunncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Bert_layer_fptrunncg_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_983),
    .ce(1'b1),
    .dout(grp_fu_342_p1)
);

Bert_layer_fpext_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Bert_layer_fpext_g8j_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_345_p0),
    .ce(1'b1),
    .dout(grp_fu_345_p1)
);

Bert_layer_fsqrt_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fsqrt_ocq_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(v170_reg_993),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

Bert_layer_dadd_6pcA #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Bert_layer_dadd_6pcA_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_978),
    .din1(64'd4532020583610935537),
    .ce(1'b1),
    .dout(grp_fu_354_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i12_0_reg_268 <= 4'd0;
    end else if (((icmp_ln259_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i12_0_reg_268 <= i12_reg_898;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln258_fu_436_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i13_0_reg_290 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i13_0_reg_290 <= i13_reg_934;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln271_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i14_0_reg_301 <= 4'd0;
    end else if (((icmp_ln285_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        i14_0_reg_301 <= i14_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j12_0_reg_279 <= j12_reg_921;
    end else if (((icmp_ln258_fu_436_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j12_0_reg_279 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        j13_0_reg_313 <= j13_reg_1001;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        j13_0_reg_313 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v140_0_reg_246 <= v140_fu_408_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v140_0_reg_246 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln250_fu_402_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        v142_0_reg_257 <= 4'd0;
    end else if (((icmp_ln254_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v142_0_reg_257 <= v142_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i12_reg_898 <= i12_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i13_reg_934 <= i13_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i14_reg_958 <= i14_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        icmp_ln571_reg_1046 <= icmp_ln571_fu_667_p2;
        icmp_ln581_reg_1052 <= icmp_ln581_fu_679_p2;
        icmp_ln582_reg_1065 <= icmp_ln582_fu_705_p2;
        man_V_4_reg_1041 <= man_V_4_fu_659_p3;
        sh_amt_reg_1058 <= sh_amt_fu_697_p3;
        trunc_ln583_reg_1071 <= trunc_ln583_fu_711_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j12_reg_921 <= j12_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j13_reg_1001 <= j13_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln258_fu_436_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mean2_addr_1_reg_913 <= zext_ln260_fu_448_p1;
        mean_addr_1_reg_908 <= zext_ln260_fu_448_p1;
        sub_ln260_reg_903[14 : 8] <= sub_ln260_fu_478_p2[14 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        mean2_addr_2_reg_950 <= zext_ln272_reg_939;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln271_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        mean_addr_2_reg_945 <= zext_ln272_fu_522_p1;
        zext_ln272_reg_939[3 : 0] <= zext_ln272_fu_522_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_359 <= v135_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_367 <= mean_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_374 <= grp_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_380 <= mean2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_386 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_395 <= grp_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        sext_ln287_reg_1006 <= sext_ln287_fu_596_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        sub_ln287_reg_988[14 : 8] <= sub_ln287_fu_569_p2[14 : 8];
        v170_reg_993 <= grp_fu_342_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_reg_978 <= grp_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_s_reg_983 <= grp_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        v164_reg_1026 <= v136_q0;
        v173_reg_1031 <= v137_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        v171_reg_1036 <= grp_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        v175_V_reg_1077 <= v175_V_fu_871_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln284_fu_527_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln284_fu_527_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_325_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_325_opcode = 2'd0;
    end else begin
        grp_fu_325_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_325_p0 = reg_359;
    end else if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state38))) begin
        grp_fu_325_p0 = reg_395;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_325_p0 = reg_380;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_325_p0 = reg_367;
    end else begin
        grp_fu_325_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_325_p1 = v173_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        grp_fu_325_p1 = reg_367;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_325_p1 = reg_374;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_325_p1 = reg_359;
    end else begin
        grp_fu_325_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_329_p0 = v164_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_329_p0 = reg_395;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_329_p0 = reg_359;
    end else begin
        grp_fu_329_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_329_p1 = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_329_p1 = reg_395;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_329_p1 = reg_359;
    end else begin
        grp_fu_329_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_333_p0 = reg_374;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_333_p0 = mean2_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_333_p0 = mean_q0;
    end else begin
        grp_fu_333_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_333_p1 = v171_reg_1036;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_333_p1 = 32'd1145044992;
    end else begin
        grp_fu_333_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        grp_fu_345_p0 = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_345_p0 = var_q0;
    end else begin
        grp_fu_345_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mean2_address0 = mean2_addr_2_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        mean2_address0 = zext_ln272_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        mean2_address0 = mean2_addr_1_reg_913;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mean2_address0 = zext_ln255_fu_431_p1;
    end else begin
        mean2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37))) begin
        mean2_ce0 = 1'b1;
    end else begin
        mean2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mean2_d0 = grp_fu_333_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        mean2_d0 = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mean2_d0 = 32'd0;
    end else begin
        mean2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state37) | ((icmp_ln254_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        mean2_we0 = 1'b1;
    end else begin
        mean2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        mean_address0 = zext_ln287_fu_539_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        mean_address0 = mean_addr_2_reg_945;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        mean_address0 = zext_ln272_fu_522_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        mean_address0 = mean_addr_1_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mean_address0 = zext_ln251_fu_414_p1;
    end else begin
        mean_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state33))) begin
        mean_ce0 = 1'b1;
    end else begin
        mean_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        mean_d0 = grp_fu_333_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        mean_d0 = reg_386;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        mean_d0 = 32'd0;
    end else begin
        mean_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state33) | ((icmp_ln250_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        mean_we0 = 1'b1;
    end else begin
        mean_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        v135_address0 = sext_ln287_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        v135_address0 = sext_ln260_fu_505_p1;
    end else begin
        v135_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state5))) begin
        v135_ce0 = 1'b1;
    end else begin
        v135_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        v136_ce0 = 1'b1;
    end else begin
        v136_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        v137_ce0 = 1'b1;
    end else begin
        v137_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        v138_V_ce0 = 1'b1;
    end else begin
        v138_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        v138_V_we0 = 1'b1;
    end else begin
        v138_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        var_address0 = zext_ln287_fu_539_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        var_address0 = zext_ln272_reg_939;
    end else begin
        var_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44))) begin
        var_ce0 = 1'b1;
    end else begin
        var_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        var_we0 = 1'b1;
    end else begin
        var_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln250_fu_402_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln254_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln258_fu_436_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln259_fu_484_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln271_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln284_fu_527_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((icmp_ln285_fu_575_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_673_p2 = (12'd1075 - zext_ln461_fu_633_p1);

assign add_ln260_fu_500_p2 = (sub_ln260_reg_903 + zext_ln260_3_fu_496_p1);

assign add_ln287_fu_591_p2 = (sub_ln287_reg_988 + zext_ln287_3_fu_587_p1);

assign add_ln581_fu_685_p2 = ($signed(12'd4080) + $signed(F2_fu_673_p2));

assign and_ln581_fu_790_p2 = (xor_ln582_fu_784_p2 & icmp_ln581_reg_1052);

assign and_ln582_fu_775_p2 = (xor_ln571_fu_770_p2 & icmp_ln582_reg_1065);

assign and_ln585_2_fu_807_p2 = (icmp_ln585_fu_718_p2 & and_ln581_fu_790_p2);

assign and_ln585_fu_801_p2 = (xor_ln585_fu_795_p2 & and_ln581_fu_790_p2);

assign and_ln603_fu_824_p2 = (xor_ln581_fu_818_p2 & icmp_ln603_fu_723_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ashr_ln586_fu_732_p2 = $signed(man_V_4_reg_1041) >>> zext_ln586_fu_728_p1;

assign bitcast_ln696_fu_741_p1 = reg_386;

assign exp_tmp_V_fu_623_p4 = {{ireg_V_fu_607_p1[62:52]}};

assign i12_fu_442_p2 = (i12_0_reg_268 + 4'd1);

assign i13_fu_516_p2 = (i13_0_reg_290 + 4'd1);

assign i14_fu_533_p2 = (i14_0_reg_301 + 4'd1);

assign icmp_ln250_fu_402_p2 = ((v140_0_reg_246 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_419_p2 = ((v142_0_reg_257 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln258_fu_436_p2 = ((i12_0_reg_268 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln259_fu_484_p2 = ((j12_0_reg_279 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln271_fu_510_p2 = ((i13_0_reg_290 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_527_p2 = ((i14_0_reg_301 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_575_p2 = ((j13_0_reg_313 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_667_p2 = ((trunc_ln556_fu_611_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_679_p2 = (($signed(F2_fu_673_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_705_p2 = ((F2_fu_673_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_718_p2 = ((sh_amt_reg_1058 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_723_p2 = ((sh_amt_reg_1058 < 12'd24) ? 1'b1 : 1'b0);

assign ireg_V_fu_607_p1 = grp_fu_345_p1;

assign j12_fu_490_p2 = (j12_0_reg_279 + 10'd1);

assign j13_fu_581_p2 = (j13_0_reg_313 + 10'd1);

assign man_V_3_fu_653_p2 = (54'd0 - p_Result_86_fu_649_p1);

assign man_V_4_fu_659_p3 = ((p_Result_s_fu_615_p3[0:0] === 1'b1) ? man_V_3_fu_653_p2 : p_Result_86_fu_649_p1);

assign or_ln581_fu_813_p2 = (or_ln582_fu_780_p2 | icmp_ln581_reg_1052);

assign or_ln582_fu_780_p2 = (icmp_ln582_reg_1065 | icmp_ln571_reg_1046);

assign or_ln603_3_fu_851_p2 = (and_ln585_fu_801_p2 | and_ln582_fu_775_p2);

assign or_ln603_4_fu_865_p2 = (or_ln603_fu_838_p2 | or_ln603_3_fu_851_p2);

assign or_ln603_fu_838_p2 = (and_ln603_fu_824_p2 | and_ln585_2_fu_807_p2);

assign p_Result_86_fu_649_p1 = tmp_6_fu_641_p3;

assign p_Result_s_fu_615_p3 = ireg_V_fu_607_p1[32'd63];

assign select_ln588_fu_753_p3 = ((tmp_38_fu_745_p3[0:0] === 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln603_4_fu_844_p3 = ((and_ln585_fu_801_p2[0:0] === 1'b1) ? select_ln588_fu_753_p3 : trunc_ln583_reg_1071);

assign select_ln603_5_fu_857_p3 = ((or_ln603_fu_838_p2[0:0] === 1'b1) ? select_ln603_fu_830_p3 : select_ln603_4_fu_844_p3);

assign select_ln603_fu_830_p3 = ((and_ln603_fu_824_p2[0:0] === 1'b1) ? shl_ln604_fu_765_p2 : trunc_ln586_fu_737_p1);

assign sext_ln260_fu_505_p1 = $signed(add_ln260_fu_500_p2);

assign sext_ln287_fu_596_p1 = $signed(add_ln287_fu_591_p2);

assign sext_ln581_fu_715_p1 = sh_amt_reg_1058;

assign sext_ln581cast_fu_761_p1 = sext_ln581_fu_715_p1[23:0];

assign sh_amt_fu_697_p3 = ((icmp_ln581_fu_679_p2[0:0] === 1'b1) ? add_ln581_fu_685_p2 : sub_ln581_fu_691_p2);

assign shl_ln604_fu_765_p2 = trunc_ln583_reg_1071 << sext_ln581cast_fu_761_p1;

assign sub_ln260_fu_478_p2 = (zext_ln260_1_fu_462_p1 - zext_ln260_2_fu_474_p1);

assign sub_ln287_fu_569_p2 = (zext_ln287_1_fu_553_p1 - zext_ln287_2_fu_565_p1);

assign sub_ln581_fu_691_p2 = (12'd16 - F2_fu_673_p2);

assign tmp_38_fu_745_p3 = bitcast_ln696_fu_741_p1[32'd31];

assign tmp_62_fu_454_p3 = {{i12_0_reg_268}, {10'd0}};

assign tmp_63_fu_466_p3 = {{i12_0_reg_268}, {8'd0}};

assign tmp_64_fu_545_p3 = {{i14_0_reg_301}, {10'd0}};

assign tmp_65_fu_557_p3 = {{i14_0_reg_301}, {8'd0}};

assign tmp_6_fu_641_p3 = {{1'd1}, {trunc_ln565_fu_637_p1}};

assign trunc_ln556_fu_611_p1 = ireg_V_fu_607_p1[62:0];

assign trunc_ln565_fu_637_p1 = ireg_V_fu_607_p1[51:0];

assign trunc_ln583_fu_711_p1 = man_V_4_fu_659_p3[23:0];

assign trunc_ln586_fu_737_p1 = ashr_ln586_fu_732_p2[23:0];

assign v136_address0 = zext_ln286_fu_601_p1;

assign v137_address0 = zext_ln286_fu_601_p1;

assign v138_V_address0 = sext_ln287_reg_1006;

assign v138_V_d0 = v175_V_reg_1077;

assign v140_fu_408_p2 = (v140_0_reg_246 + 4'd1);

assign v142_fu_425_p2 = (v142_0_reg_257 + 4'd1);

assign v175_V_fu_871_p3 = ((or_ln603_4_fu_865_p2[0:0] === 1'b1) ? select_ln603_5_fu_857_p3 : 24'd0);

assign xor_ln571_fu_770_p2 = (icmp_ln571_reg_1046 ^ 1'd1);

assign xor_ln581_fu_818_p2 = (or_ln581_fu_813_p2 ^ 1'd1);

assign xor_ln582_fu_784_p2 = (or_ln582_fu_780_p2 ^ 1'd1);

assign xor_ln585_fu_795_p2 = (icmp_ln585_fu_718_p2 ^ 1'd1);

assign zext_ln251_fu_414_p1 = v140_0_reg_246;

assign zext_ln255_fu_431_p1 = v142_0_reg_257;

assign zext_ln260_1_fu_462_p1 = tmp_62_fu_454_p3;

assign zext_ln260_2_fu_474_p1 = tmp_63_fu_466_p3;

assign zext_ln260_3_fu_496_p1 = j12_0_reg_279;

assign zext_ln260_fu_448_p1 = i12_0_reg_268;

assign zext_ln272_fu_522_p1 = i13_0_reg_290;

assign zext_ln286_fu_601_p1 = j13_0_reg_313;

assign zext_ln287_1_fu_553_p1 = tmp_64_fu_545_p3;

assign zext_ln287_2_fu_565_p1 = tmp_65_fu_557_p3;

assign zext_ln287_3_fu_587_p1 = j13_0_reg_313;

assign zext_ln287_fu_539_p1 = i14_0_reg_301;

assign zext_ln461_fu_633_p1 = exp_tmp_V_fu_623_p4;

assign zext_ln586_fu_728_p1 = $unsigned(sext_ln581_fu_715_p1);

always @ (posedge ap_clk) begin
    sub_ln260_reg_903[7:0] <= 8'b00000000;
    zext_ln272_reg_939[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    sub_ln287_reg_988[7:0] <= 8'b00000000;
end

endmodule //Layer_norm
