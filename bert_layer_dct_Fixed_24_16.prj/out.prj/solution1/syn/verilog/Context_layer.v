// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Context_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v65_V_address0,
        v65_V_ce0,
        v65_V_q0,
        v66_V_address0,
        v66_V_ce0,
        v66_V_q0,
        v67_V_address0,
        v67_V_ce0,
        v67_V_we0,
        v67_V_d0,
        v67_V_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v65_V_address0;
output   v65_V_ce0;
input  [23:0] v65_V_q0;
output  [9:0] v66_V_address0;
output   v66_V_ce0;
input  [23:0] v66_V_q0;
output  [9:0] v67_V_address0;
output   v67_V_ce0;
output   v67_V_we0;
output  [23:0] v67_V_d0;
input  [23:0] v67_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v65_V_ce0;
reg v66_V_ce0;
reg[9:0] v67_V_address0;
reg v67_V_ce0;
reg v67_V_we0;
reg[23:0] v67_V_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] v69_fu_168_p2;
reg   [3:0] v69_reg_386;
wire    ap_CS_fsm_state2;
wire   [10:0] zext_ln132_fu_182_p1;
reg   [10:0] zext_ln132_reg_391;
wire   [0:0] icmp_ln131_fu_162_p2;
wire   [6:0] v70_fu_192_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i6_fu_218_p2;
reg   [3:0] i6_reg_407;
wire    ap_CS_fsm_state4;
wire   [8:0] sub_ln139_fu_248_p2;
reg   [8:0] sub_ln139_reg_412;
wire   [0:0] icmp_ln136_fu_212_p2;
wire   [10:0] zext_ln137_fu_262_p1;
reg   [10:0] zext_ln137_reg_417;
wire   [6:0] j6_fu_272_p2;
reg   [6:0] j6_reg_425;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln144_fu_278_p1;
reg   [10:0] zext_ln144_reg_430;
wire   [0:0] icmp_ln137_fu_266_p2;
reg   [9:0] v67_V_addr_1_reg_435;
wire   [3:0] k2_fu_298_p2;
reg   [3:0] k2_reg_443;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln138_fu_292_p2;
reg   [23:0] v74_V_reg_458;
wire    ap_CS_fsm_state7;
reg   [23:0] v75_V_reg_463;
reg   [23:0] v79_V_reg_468;
wire    ap_CS_fsm_state8;
reg   [23:0] v80_V_reg_473;
reg   [3:0] v69_0_reg_107;
wire   [0:0] icmp_ln132_fu_186_p2;
reg   [6:0] v70_0_reg_118;
reg   [3:0] i6_0_reg_129;
reg   [6:0] j6_0_reg_140;
reg   [3:0] k2_0_reg_151;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln203_17_fu_207_p1;
wire   [63:0] zext_ln144_1_fu_287_p1;
wire  signed [63:0] sext_ln139_fu_313_p1;
wire   [63:0] zext_ln140_1_fu_335_p1;
wire   [23:0] v81_V_fu_378_p2;
wire   [9:0] tmp_67_fu_174_p3;
wire   [10:0] zext_ln203_fu_198_p1;
wire   [10:0] add_ln203_fu_202_p2;
wire   [7:0] tmp_68_fu_224_p3;
wire   [5:0] tmp_69_fu_236_p3;
wire   [8:0] zext_ln139_fu_232_p1;
wire   [8:0] zext_ln139_1_fu_244_p1;
wire   [9:0] tmp_70_fu_254_p3;
wire   [10:0] add_ln144_fu_282_p2;
wire   [8:0] zext_ln139_2_fu_304_p1;
wire   [8:0] add_ln139_fu_308_p2;
wire   [9:0] tmp_71_fu_318_p3;
wire   [10:0] zext_ln140_fu_326_p1;
wire   [10:0] add_ln140_fu_330_p2;
wire   [39:0] v76_V_fu_340_p3;
wire   [39:0] v77_V_fu_347_p3;
wire  signed [39:0] r_V_fu_362_p0;
wire  signed [39:0] r_V_fu_362_p1;
wire   [71:0] r_V_fu_362_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i6_0_reg_129 <= 4'd0;
    end else if (((icmp_ln137_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i6_0_reg_129 <= i6_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln138_fu_292_p2 == 1'd1))) begin
        j6_0_reg_140 <= j6_reg_425;
    end else if (((icmp_ln136_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j6_0_reg_140 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k2_0_reg_151 <= k2_reg_443;
    end else if (((icmp_ln137_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k2_0_reg_151 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln132_fu_186_p2 == 1'd1))) begin
        v69_0_reg_107 <= v69_reg_386;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        v69_0_reg_107 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        v70_0_reg_118 <= 7'd0;
    end else if (((icmp_ln132_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v70_0_reg_118 <= v70_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i6_reg_407 <= i6_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j6_reg_425 <= j6_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k2_reg_443 <= k2_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln136_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln139_reg_412[8 : 2] <= sub_ln139_fu_248_p2[8 : 2];
        zext_ln137_reg_417[9 : 6] <= zext_ln137_fu_262_p1[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        v67_V_addr_1_reg_435 <= zext_ln144_1_fu_287_p1;
        zext_ln144_reg_430[6 : 0] <= zext_ln144_fu_278_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        v69_reg_386 <= v69_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        v74_V_reg_458 <= v65_V_q0;
        v75_V_reg_463 <= v66_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v79_V_reg_468 <= v67_V_q0;
        v80_V_reg_473 <= {{r_V_fu_362_p2[71:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln132_reg_391[9 : 6] <= zext_ln132_fu_182_p1[9 : 6];
    end
end

always @ (*) begin
    if ((((icmp_ln136_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln136_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v65_V_ce0 = 1'b1;
    end else begin
        v65_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v66_V_ce0 = 1'b1;
    end else begin
        v66_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        v67_V_address0 = v67_V_addr_1_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v67_V_address0 = zext_ln203_17_fu_207_p1;
    end else begin
        v67_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        v67_V_ce0 = 1'b1;
    end else begin
        v67_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        v67_V_d0 = v81_V_fu_378_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v67_V_d0 = 24'd0;
    end else begin
        v67_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((icmp_ln132_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        v67_V_we0 = 1'b1;
    end else begin
        v67_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln131_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln132_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln136_fu_212_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln137_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln138_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln139_fu_308_p2 = (zext_ln139_2_fu_304_p1 + sub_ln139_reg_412);

assign add_ln140_fu_330_p2 = (zext_ln144_reg_430 + zext_ln140_fu_326_p1);

assign add_ln144_fu_282_p2 = (zext_ln137_reg_417 + zext_ln144_fu_278_p1);

assign add_ln203_fu_202_p2 = (zext_ln132_reg_391 + zext_ln203_fu_198_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i6_fu_218_p2 = (i6_0_reg_129 + 4'd1);

assign icmp_ln131_fu_162_p2 = ((v69_0_reg_107 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_186_p2 = ((v70_0_reg_118 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_212_p2 = ((i6_0_reg_129 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_266_p2 = ((j6_0_reg_140 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_292_p2 = ((k2_0_reg_151 == 4'd12) ? 1'b1 : 1'b0);

assign j6_fu_272_p2 = (j6_0_reg_140 + 7'd1);

assign k2_fu_298_p2 = (k2_0_reg_151 + 4'd1);

assign r_V_fu_362_p0 = v76_V_fu_340_p3;

assign r_V_fu_362_p1 = v77_V_fu_347_p3;

assign r_V_fu_362_p2 = ($signed(r_V_fu_362_p0) * $signed(r_V_fu_362_p1));

assign sext_ln139_fu_313_p1 = $signed(add_ln139_fu_308_p2);

assign sub_ln139_fu_248_p2 = (zext_ln139_fu_232_p1 - zext_ln139_1_fu_244_p1);

assign tmp_67_fu_174_p3 = {{v69_0_reg_107}, {6'd0}};

assign tmp_68_fu_224_p3 = {{i6_0_reg_129}, {4'd0}};

assign tmp_69_fu_236_p3 = {{i6_0_reg_129}, {2'd0}};

assign tmp_70_fu_254_p3 = {{i6_0_reg_129}, {6'd0}};

assign tmp_71_fu_318_p3 = {{k2_0_reg_151}, {6'd0}};

assign v65_V_address0 = sext_ln139_fu_313_p1;

assign v66_V_address0 = zext_ln140_1_fu_335_p1;

assign v69_fu_168_p2 = (v69_0_reg_107 + 4'd1);

assign v70_fu_192_p2 = (v70_0_reg_118 + 7'd1);

assign v76_V_fu_340_p3 = {{v74_V_reg_458}, {16'd0}};

assign v77_V_fu_347_p3 = {{v75_V_reg_463}, {16'd0}};

assign v81_V_fu_378_p2 = (v79_V_reg_468 + v80_V_reg_473);

assign zext_ln132_fu_182_p1 = tmp_67_fu_174_p3;

assign zext_ln137_fu_262_p1 = tmp_70_fu_254_p3;

assign zext_ln139_1_fu_244_p1 = tmp_69_fu_236_p3;

assign zext_ln139_2_fu_304_p1 = k2_0_reg_151;

assign zext_ln139_fu_232_p1 = tmp_68_fu_224_p3;

assign zext_ln140_1_fu_335_p1 = add_ln140_fu_330_p2;

assign zext_ln140_fu_326_p1 = tmp_71_fu_318_p3;

assign zext_ln144_1_fu_287_p1 = add_ln144_fu_282_p2;

assign zext_ln144_fu_278_p1 = j6_0_reg_140;

assign zext_ln203_17_fu_207_p1 = add_ln203_fu_202_p2;

assign zext_ln203_fu_198_p1 = v70_0_reg_118;

always @ (posedge ap_clk) begin
    zext_ln132_reg_391[5:0] <= 6'b000000;
    zext_ln132_reg_391[10] <= 1'b0;
    sub_ln139_reg_412[1:0] <= 2'b00;
    zext_ln137_reg_417[5:0] <= 6'b000000;
    zext_ln137_reg_417[10] <= 1'b0;
    zext_ln144_reg_430[10:7] <= 4'b0000;
end

endmodule //Context_layer
