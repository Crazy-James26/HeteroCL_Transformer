// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i11_l_j119 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v266_V_address0,
        v266_V_ce0,
        v266_V_q0,
        v269_V_address0,
        v269_V_ce0,
        v269_V_q0,
        v270_address0,
        v270_ce0,
        v270_we0,
        v270_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] v266_V_address0;
output   v266_V_ce0;
input  [23:0] v266_V_q0;
output  [13:0] v269_V_address0;
output   v269_V_ce0;
input  [23:0] v269_V_q0;
output  [13:0] v270_address0;
output   v270_ce0;
output   v270_we0;
output  [31:0] v270_d0;

reg ap_idle;
reg v266_V_ce0;
reg v269_V_ce0;
reg v270_ce0;
reg v270_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln230_fu_179_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] add_ln233_fu_255_p2;
reg   [13:0] add_ln233_reg_619;
wire   [63:0] zext_ln233_2_fu_282_p1;
reg   [63:0] zext_ln233_2_reg_624;
reg   [63:0] zext_ln233_2_reg_624_pp0_iter2_reg;
reg   [63:0] zext_ln233_2_reg_624_pp0_iter3_reg;
reg   [63:0] zext_ln233_2_reg_624_pp0_iter4_reg;
reg   [63:0] zext_ln233_2_reg_624_pp0_iter5_reg;
reg   [63:0] zext_ln233_2_reg_624_pp0_iter6_reg;
wire   [24:0] v133_fu_295_p2;
reg   [24:0] v133_reg_639;
reg   [0:0] p_Result_50_reg_646;
reg   [0:0] p_Result_50_reg_646_pp0_iter3_reg;
reg   [0:0] p_Result_50_reg_646_pp0_iter4_reg;
reg   [0:0] p_Result_50_reg_646_pp0_iter5_reg;
wire   [0:0] icmp_ln1136_fu_309_p2;
reg   [0:0] icmp_ln1136_reg_652;
reg   [0:0] icmp_ln1136_reg_652_pp0_iter4_reg;
reg   [0:0] icmp_ln1136_reg_652_pp0_iter5_reg;
wire   [24:0] tmp_V_4_fu_319_p3;
reg   [24:0] tmp_V_4_reg_657;
reg   [24:0] tmp_V_4_reg_657_pp0_iter4_reg;
reg   [31:0] l_fu_347_p3;
reg   [31:0] l_reg_664;
reg   [31:0] l_reg_664_pp0_iter4_reg;
wire   [31:0] sub_ln1145_fu_355_p2;
reg   [31:0] sub_ln1145_reg_669;
reg   [31:0] sub_ln1145_reg_669_pp0_iter4_reg;
wire   [24:0] trunc_ln1145_fu_361_p1;
reg   [24:0] trunc_ln1145_reg_675;
wire   [4:0] trunc_ln1148_fu_365_p1;
reg   [4:0] trunc_ln1148_reg_680;
wire   [7:0] trunc_ln1144_fu_369_p1;
reg   [7:0] trunc_ln1144_reg_685;
reg   [7:0] trunc_ln1144_reg_685_pp0_iter4_reg;
reg   [7:0] trunc_ln1144_reg_685_pp0_iter5_reg;
wire   [1:0] or_ln1150_1_fu_464_p3;
reg   [1:0] or_ln1150_1_reg_690;
wire   [0:0] icmp_ln1159_fu_472_p2;
reg   [0:0] icmp_ln1159_reg_695;
reg   [62:0] m_reg_700;
reg   [0:0] p_Result_48_reg_705;
wire   [31:0] v134_fu_587_p3;
reg   [31:0] v134_reg_710;
wire    ap_block_pp0_stage0;
reg   [9:0] j11_fu_110;
wire   [9:0] add_ln231_fu_261_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_j11_load;
reg   [3:0] i11_fu_114;
wire   [3:0] select_ln230_1_fu_217_p3;
reg   [3:0] ap_sig_allocacmp_i11_load;
reg   [13:0] indvar_flatten59_fu_118;
wire   [13:0] add_ln230_fu_185_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten59_load;
wire   [0:0] icmp_ln231_fu_203_p2;
wire   [3:0] add_ln230_1_fu_197_p2;
wire   [11:0] tmp_45_fu_233_p3;
wire   [13:0] tmp_s_fu_225_p3;
wire   [13:0] zext_ln233_fu_241_p1;
wire   [9:0] select_ln230_fu_209_p3;
wire   [13:0] sub_ln233_fu_245_p2;
wire   [13:0] zext_ln233_1_fu_251_p1;
wire  signed [24:0] sext_ln859_2_fu_291_p1;
wire  signed [24:0] sext_ln859_fu_287_p1;
wire   [24:0] tmp_V_fu_314_p2;
reg   [24:0] p_Result_s_fu_325_p4;
wire   [25:0] p_Result_51_fu_335_p3;
wire  signed [31:0] sext_ln1244_fu_343_p1;
wire   [31:0] lsb_index_fu_373_p2;
wire   [30:0] tmp_fu_378_p4;
wire   [4:0] sub_ln1148_fu_394_p2;
wire   [24:0] zext_ln1148_fu_399_p1;
wire   [24:0] lshr_ln1148_fu_403_p2;
wire   [24:0] p_Result_46_fu_409_p2;
wire   [0:0] icmp_ln1147_fu_388_p2;
wire   [0:0] icmp_ln1148_fu_414_p2;
wire   [0:0] tmp_54_fu_426_p3;
wire   [24:0] add_ln1150_fu_440_p2;
wire   [0:0] p_Result_47_fu_445_p3;
wire   [0:0] xor_ln1150_fu_434_p2;
wire   [0:0] and_ln1150_fu_452_p2;
wire   [0:0] a_fu_420_p2;
wire   [0:0] or_ln1150_fu_458_p2;
wire   [31:0] add_ln1159_fu_481_p2;
wire   [63:0] zext_ln1158_fu_478_p1;
wire   [63:0] zext_ln1159_fu_486_p1;
wire   [63:0] zext_ln1160_fu_496_p1;
wire   [63:0] lshr_ln1159_fu_490_p2;
wire   [63:0] shl_ln1160_fu_499_p2;
wire   [63:0] m_5_fu_505_p3;
wire   [63:0] zext_ln1162_fu_512_p1;
wire   [63:0] m_6_fu_515_p2;
wire   [7:0] sub_ln1165_fu_549_p2;
wire   [7:0] select_ln1144_fu_542_p3;
wire   [7:0] add_ln1170_fu_554_p2;
wire   [63:0] zext_ln1163_fu_539_p1;
wire   [8:0] tmp_12_fu_560_p3;
wire   [63:0] p_Result_52_fu_567_p5;
wire   [31:0] LD_fu_579_p1;
wire   [31:0] bitcast_ln810_fu_583_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

Bert_layer_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln230_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i11_fu_114 <= select_ln230_1_fu_217_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i11_fu_114 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln230_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten59_fu_118 <= add_ln230_fu_185_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten59_fu_118 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln230_fu_179_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j11_fu_110 <= add_ln231_fu_261_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j11_fu_110 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln230_fu_179_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln233_reg_619 <= add_ln233_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln233_2_reg_624[13 : 0] <= zext_ln233_2_fu_282_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln1136_reg_652 <= icmp_ln1136_fu_309_p2;
        icmp_ln1136_reg_652_pp0_iter4_reg <= icmp_ln1136_reg_652;
        icmp_ln1136_reg_652_pp0_iter5_reg <= icmp_ln1136_reg_652_pp0_iter4_reg;
        l_reg_664 <= l_fu_347_p3;
        l_reg_664_pp0_iter4_reg <= l_reg_664;
        p_Result_50_reg_646 <= v133_fu_295_p2[32'd24];
        p_Result_50_reg_646_pp0_iter3_reg <= p_Result_50_reg_646;
        p_Result_50_reg_646_pp0_iter4_reg <= p_Result_50_reg_646_pp0_iter3_reg;
        p_Result_50_reg_646_pp0_iter5_reg <= p_Result_50_reg_646_pp0_iter4_reg;
        sub_ln1145_reg_669 <= sub_ln1145_fu_355_p2;
        sub_ln1145_reg_669_pp0_iter4_reg <= sub_ln1145_reg_669;
        tmp_V_4_reg_657 <= tmp_V_4_fu_319_p3;
        tmp_V_4_reg_657_pp0_iter4_reg <= tmp_V_4_reg_657;
        trunc_ln1144_reg_685 <= trunc_ln1144_fu_369_p1;
        trunc_ln1144_reg_685_pp0_iter4_reg <= trunc_ln1144_reg_685;
        trunc_ln1144_reg_685_pp0_iter5_reg <= trunc_ln1144_reg_685_pp0_iter4_reg;
        trunc_ln1145_reg_675 <= trunc_ln1145_fu_361_p1;
        trunc_ln1148_reg_680 <= trunc_ln1148_fu_365_p1;
        v133_reg_639 <= v133_fu_295_p2;
        v134_reg_710 <= v134_fu_587_p3;
        zext_ln233_2_reg_624_pp0_iter2_reg[13 : 0] <= zext_ln233_2_reg_624[13 : 0];
        zext_ln233_2_reg_624_pp0_iter3_reg[13 : 0] <= zext_ln233_2_reg_624_pp0_iter2_reg[13 : 0];
        zext_ln233_2_reg_624_pp0_iter4_reg[13 : 0] <= zext_ln233_2_reg_624_pp0_iter3_reg[13 : 0];
        zext_ln233_2_reg_624_pp0_iter5_reg[13 : 0] <= zext_ln233_2_reg_624_pp0_iter4_reg[13 : 0];
        zext_ln233_2_reg_624_pp0_iter6_reg[13 : 0] <= zext_ln233_2_reg_624_pp0_iter5_reg[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_652 == 1'd0))) begin
        icmp_ln1159_reg_695 <= icmp_ln1159_fu_472_p2;
        or_ln1150_1_reg_690[0] <= or_ln1150_1_fu_464_p3[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1136_reg_652_pp0_iter4_reg == 1'd0))) begin
        m_reg_700 <= {{m_6_fu_515_p2[63:1]}};
        p_Result_48_reg_705 <= m_6_fu_515_p2[32'd25];
    end
end

always @ (*) begin
    if (((icmp_ln230_fu_179_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i11_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i11_load = i11_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten59_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten59_load = indvar_flatten59_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j11_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j11_load = j11_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v266_V_ce0 = 1'b1;
    end else begin
        v266_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        v269_V_ce0 = 1'b1;
    end else begin
        v269_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v270_ce0 = 1'b1;
    end else begin
        v270_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        v270_we0 = 1'b1;
    end else begin
        v270_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_579_p1 = p_Result_52_fu_567_p5[31:0];

assign a_fu_420_p2 = (icmp_ln1148_fu_414_p2 & icmp_ln1147_fu_388_p2);

assign add_ln1150_fu_440_p2 = ($signed(trunc_ln1145_reg_675) + $signed(25'd33554408));

assign add_ln1159_fu_481_p2 = ($signed(sub_ln1145_reg_669_pp0_iter4_reg) + $signed(32'd4294967271));

assign add_ln1170_fu_554_p2 = (sub_ln1165_fu_549_p2 + select_ln1144_fu_542_p3);

assign add_ln230_1_fu_197_p2 = (ap_sig_allocacmp_i11_load + 4'd1);

assign add_ln230_fu_185_p2 = (ap_sig_allocacmp_indvar_flatten59_load + 14'd1);

assign add_ln231_fu_261_p2 = (select_ln230_fu_209_p3 + 10'd1);

assign add_ln233_fu_255_p2 = (sub_ln233_fu_245_p2 + zext_ln233_1_fu_251_p1);

assign and_ln1150_fu_452_p2 = (xor_ln1150_fu_434_p2 & p_Result_47_fu_445_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln810_fu_583_p1 = LD_fu_579_p1;

assign icmp_ln1136_fu_309_p2 = ((v133_reg_639 == 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1147_fu_388_p2 = (($signed(tmp_fu_378_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1148_fu_414_p2 = ((p_Result_46_fu_409_p2 != 25'd0) ? 1'b1 : 1'b0);

assign icmp_ln1159_fu_472_p2 = (($signed(lsb_index_fu_373_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_179_p2 = ((ap_sig_allocacmp_indvar_flatten59_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln231_fu_203_p2 = ((ap_sig_allocacmp_j11_load == 10'd768) ? 1'b1 : 1'b0);


always @ (sext_ln1244_fu_343_p1) begin
    if (sext_ln1244_fu_343_p1[0] == 1'b1) begin
        l_fu_347_p3 = 32'd0;
    end else if (sext_ln1244_fu_343_p1[1] == 1'b1) begin
        l_fu_347_p3 = 32'd1;
    end else if (sext_ln1244_fu_343_p1[2] == 1'b1) begin
        l_fu_347_p3 = 32'd2;
    end else if (sext_ln1244_fu_343_p1[3] == 1'b1) begin
        l_fu_347_p3 = 32'd3;
    end else if (sext_ln1244_fu_343_p1[4] == 1'b1) begin
        l_fu_347_p3 = 32'd4;
    end else if (sext_ln1244_fu_343_p1[5] == 1'b1) begin
        l_fu_347_p3 = 32'd5;
    end else if (sext_ln1244_fu_343_p1[6] == 1'b1) begin
        l_fu_347_p3 = 32'd6;
    end else if (sext_ln1244_fu_343_p1[7] == 1'b1) begin
        l_fu_347_p3 = 32'd7;
    end else if (sext_ln1244_fu_343_p1[8] == 1'b1) begin
        l_fu_347_p3 = 32'd8;
    end else if (sext_ln1244_fu_343_p1[9] == 1'b1) begin
        l_fu_347_p3 = 32'd9;
    end else if (sext_ln1244_fu_343_p1[10] == 1'b1) begin
        l_fu_347_p3 = 32'd10;
    end else if (sext_ln1244_fu_343_p1[11] == 1'b1) begin
        l_fu_347_p3 = 32'd11;
    end else if (sext_ln1244_fu_343_p1[12] == 1'b1) begin
        l_fu_347_p3 = 32'd12;
    end else if (sext_ln1244_fu_343_p1[13] == 1'b1) begin
        l_fu_347_p3 = 32'd13;
    end else if (sext_ln1244_fu_343_p1[14] == 1'b1) begin
        l_fu_347_p3 = 32'd14;
    end else if (sext_ln1244_fu_343_p1[15] == 1'b1) begin
        l_fu_347_p3 = 32'd15;
    end else if (sext_ln1244_fu_343_p1[16] == 1'b1) begin
        l_fu_347_p3 = 32'd16;
    end else if (sext_ln1244_fu_343_p1[17] == 1'b1) begin
        l_fu_347_p3 = 32'd17;
    end else if (sext_ln1244_fu_343_p1[18] == 1'b1) begin
        l_fu_347_p3 = 32'd18;
    end else if (sext_ln1244_fu_343_p1[19] == 1'b1) begin
        l_fu_347_p3 = 32'd19;
    end else if (sext_ln1244_fu_343_p1[20] == 1'b1) begin
        l_fu_347_p3 = 32'd20;
    end else if (sext_ln1244_fu_343_p1[21] == 1'b1) begin
        l_fu_347_p3 = 32'd21;
    end else if (sext_ln1244_fu_343_p1[22] == 1'b1) begin
        l_fu_347_p3 = 32'd22;
    end else if (sext_ln1244_fu_343_p1[23] == 1'b1) begin
        l_fu_347_p3 = 32'd23;
    end else if (sext_ln1244_fu_343_p1[24] == 1'b1) begin
        l_fu_347_p3 = 32'd24;
    end else if (sext_ln1244_fu_343_p1[25] == 1'b1) begin
        l_fu_347_p3 = 32'd25;
    end else if (sext_ln1244_fu_343_p1[26] == 1'b1) begin
        l_fu_347_p3 = 32'd26;
    end else if (sext_ln1244_fu_343_p1[27] == 1'b1) begin
        l_fu_347_p3 = 32'd27;
    end else if (sext_ln1244_fu_343_p1[28] == 1'b1) begin
        l_fu_347_p3 = 32'd28;
    end else if (sext_ln1244_fu_343_p1[29] == 1'b1) begin
        l_fu_347_p3 = 32'd29;
    end else if (sext_ln1244_fu_343_p1[30] == 1'b1) begin
        l_fu_347_p3 = 32'd30;
    end else if (sext_ln1244_fu_343_p1[31] == 1'b1) begin
        l_fu_347_p3 = 32'd31;
    end else begin
        l_fu_347_p3 = 32'd32;
    end
end

assign lsb_index_fu_373_p2 = ($signed(sub_ln1145_reg_669) + $signed(32'd4294967272));

assign lshr_ln1148_fu_403_p2 = 25'd33554431 >> zext_ln1148_fu_399_p1;

assign lshr_ln1159_fu_490_p2 = zext_ln1158_fu_478_p1 >> zext_ln1159_fu_486_p1;

assign m_5_fu_505_p3 = ((icmp_ln1159_reg_695[0:0] == 1'b1) ? lshr_ln1159_fu_490_p2 : shl_ln1160_fu_499_p2);

assign m_6_fu_515_p2 = (m_5_fu_505_p3 + zext_ln1162_fu_512_p1);

assign or_ln1150_1_fu_464_p3 = {{1'd0}, {or_ln1150_fu_458_p2}};

assign or_ln1150_fu_458_p2 = (and_ln1150_fu_452_p2 | a_fu_420_p2);

assign p_Result_46_fu_409_p2 = (tmp_V_4_reg_657 & lshr_ln1148_fu_403_p2);

assign p_Result_47_fu_445_p3 = tmp_V_4_reg_657[add_ln1150_fu_440_p2];

assign p_Result_51_fu_335_p3 = {{1'd1}, {p_Result_s_fu_325_p4}};

assign p_Result_52_fu_567_p5 = {{zext_ln1163_fu_539_p1[63:32]}, {tmp_12_fu_560_p3}, {zext_ln1163_fu_539_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_319_p3) begin
    for (ap_tvar_int_0 = 25 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 24 - 0) begin
            p_Result_s_fu_325_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_325_p4[ap_tvar_int_0] = tmp_V_4_fu_319_p3[24 - ap_tvar_int_0];
        end
    end
end

assign select_ln1144_fu_542_p3 = ((p_Result_48_reg_705[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln230_1_fu_217_p3 = ((icmp_ln231_fu_203_p2[0:0] == 1'b1) ? add_ln230_1_fu_197_p2 : ap_sig_allocacmp_i11_load);

assign select_ln230_fu_209_p3 = ((icmp_ln231_fu_203_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j11_load);

assign sext_ln1244_fu_343_p1 = $signed(p_Result_51_fu_335_p3);

assign sext_ln859_2_fu_291_p1 = $signed(v266_V_q0);

assign sext_ln859_fu_287_p1 = $signed(v269_V_q0);

assign shl_ln1160_fu_499_p2 = zext_ln1158_fu_478_p1 << zext_ln1160_fu_496_p1;

assign sub_ln1145_fu_355_p2 = (32'd25 - l_fu_347_p3);

assign sub_ln1148_fu_394_p2 = ($signed(5'd18) - $signed(trunc_ln1148_reg_680));

assign sub_ln1165_fu_549_p2 = (8'd9 - trunc_ln1144_reg_685_pp0_iter5_reg);

assign sub_ln233_fu_245_p2 = (tmp_s_fu_225_p3 - zext_ln233_fu_241_p1);

assign tmp_12_fu_560_p3 = {{p_Result_50_reg_646_pp0_iter5_reg}, {add_ln1170_fu_554_p2}};

assign tmp_45_fu_233_p3 = {{select_ln230_1_fu_217_p3}, {8'd0}};

assign tmp_54_fu_426_p3 = lsb_index_fu_373_p2[32'd31];

assign tmp_V_4_fu_319_p3 = ((p_Result_50_reg_646[0:0] == 1'b1) ? tmp_V_fu_314_p2 : v133_reg_639);

assign tmp_V_fu_314_p2 = (25'd0 - v133_reg_639);

assign tmp_fu_378_p4 = {{lsb_index_fu_373_p2[31:1]}};

assign tmp_s_fu_225_p3 = {{select_ln230_1_fu_217_p3}, {10'd0}};

assign trunc_ln1144_fu_369_p1 = l_fu_347_p3[7:0];

assign trunc_ln1145_fu_361_p1 = sub_ln1145_fu_355_p2[24:0];

assign trunc_ln1148_fu_365_p1 = sub_ln1145_fu_355_p2[4:0];

assign v133_fu_295_p2 = ($signed(sext_ln859_2_fu_291_p1) + $signed(sext_ln859_fu_287_p1));

assign v134_fu_587_p3 = ((icmp_ln1136_reg_652_pp0_iter5_reg[0:0] == 1'b1) ? 32'd0 : bitcast_ln810_fu_583_p1);

assign v266_V_address0 = zext_ln233_2_fu_282_p1;

assign v269_V_address0 = zext_ln233_2_fu_282_p1;

assign v270_address0 = zext_ln233_2_reg_624_pp0_iter6_reg;

assign v270_d0 = v134_reg_710;

assign xor_ln1150_fu_434_p2 = (tmp_54_fu_426_p3 ^ 1'd1);

assign zext_ln1148_fu_399_p1 = sub_ln1148_fu_394_p2;

assign zext_ln1158_fu_478_p1 = tmp_V_4_reg_657_pp0_iter4_reg;

assign zext_ln1159_fu_486_p1 = add_ln1159_fu_481_p2;

assign zext_ln1160_fu_496_p1 = l_reg_664_pp0_iter4_reg;

assign zext_ln1162_fu_512_p1 = or_ln1150_1_reg_690;

assign zext_ln1163_fu_539_p1 = m_reg_700;

assign zext_ln233_1_fu_251_p1 = select_ln230_fu_209_p3;

assign zext_ln233_2_fu_282_p1 = add_ln233_reg_619;

assign zext_ln233_fu_241_p1 = tmp_45_fu_233_p3;

always @ (posedge ap_clk) begin
    zext_ln233_2_reg_624[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln233_2_reg_624_pp0_iter2_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln233_2_reg_624_pp0_iter3_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln233_2_reg_624_pp0_iter4_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln233_2_reg_624_pp0_iter5_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln233_2_reg_624_pp0_iter6_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    or_ln1150_1_reg_690[1] <= 1'b0;
end

endmodule //Bert_layer_Bert_layer_Pipeline_l_S_i_j_0_i11_l_j119
