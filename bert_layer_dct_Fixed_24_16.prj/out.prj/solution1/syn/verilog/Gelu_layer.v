// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Gelu_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v205_address0,
        v205_ce0,
        v205_q0,
        v206_V_address0,
        v206_V_ce0,
        v206_V_we0,
        v206_V_d0
);

parameter    ap_ST_fsm_state1 = 119'd1;
parameter    ap_ST_fsm_state2 = 119'd2;
parameter    ap_ST_fsm_state3 = 119'd4;
parameter    ap_ST_fsm_state4 = 119'd8;
parameter    ap_ST_fsm_state5 = 119'd16;
parameter    ap_ST_fsm_state6 = 119'd32;
parameter    ap_ST_fsm_state7 = 119'd64;
parameter    ap_ST_fsm_state8 = 119'd128;
parameter    ap_ST_fsm_state9 = 119'd256;
parameter    ap_ST_fsm_state10 = 119'd512;
parameter    ap_ST_fsm_state11 = 119'd1024;
parameter    ap_ST_fsm_state12 = 119'd2048;
parameter    ap_ST_fsm_state13 = 119'd4096;
parameter    ap_ST_fsm_state14 = 119'd8192;
parameter    ap_ST_fsm_state15 = 119'd16384;
parameter    ap_ST_fsm_state16 = 119'd32768;
parameter    ap_ST_fsm_state17 = 119'd65536;
parameter    ap_ST_fsm_state18 = 119'd131072;
parameter    ap_ST_fsm_state19 = 119'd262144;
parameter    ap_ST_fsm_state20 = 119'd524288;
parameter    ap_ST_fsm_state21 = 119'd1048576;
parameter    ap_ST_fsm_state22 = 119'd2097152;
parameter    ap_ST_fsm_state23 = 119'd4194304;
parameter    ap_ST_fsm_state24 = 119'd8388608;
parameter    ap_ST_fsm_state25 = 119'd16777216;
parameter    ap_ST_fsm_state26 = 119'd33554432;
parameter    ap_ST_fsm_state27 = 119'd67108864;
parameter    ap_ST_fsm_state28 = 119'd134217728;
parameter    ap_ST_fsm_state29 = 119'd268435456;
parameter    ap_ST_fsm_state30 = 119'd536870912;
parameter    ap_ST_fsm_state31 = 119'd1073741824;
parameter    ap_ST_fsm_state32 = 119'd2147483648;
parameter    ap_ST_fsm_state33 = 119'd4294967296;
parameter    ap_ST_fsm_state34 = 119'd8589934592;
parameter    ap_ST_fsm_state35 = 119'd17179869184;
parameter    ap_ST_fsm_state36 = 119'd34359738368;
parameter    ap_ST_fsm_state37 = 119'd68719476736;
parameter    ap_ST_fsm_state38 = 119'd137438953472;
parameter    ap_ST_fsm_state39 = 119'd274877906944;
parameter    ap_ST_fsm_state40 = 119'd549755813888;
parameter    ap_ST_fsm_state41 = 119'd1099511627776;
parameter    ap_ST_fsm_state42 = 119'd2199023255552;
parameter    ap_ST_fsm_state43 = 119'd4398046511104;
parameter    ap_ST_fsm_state44 = 119'd8796093022208;
parameter    ap_ST_fsm_state45 = 119'd17592186044416;
parameter    ap_ST_fsm_state46 = 119'd35184372088832;
parameter    ap_ST_fsm_state47 = 119'd70368744177664;
parameter    ap_ST_fsm_state48 = 119'd140737488355328;
parameter    ap_ST_fsm_state49 = 119'd281474976710656;
parameter    ap_ST_fsm_state50 = 119'd562949953421312;
parameter    ap_ST_fsm_state51 = 119'd1125899906842624;
parameter    ap_ST_fsm_state52 = 119'd2251799813685248;
parameter    ap_ST_fsm_state53 = 119'd4503599627370496;
parameter    ap_ST_fsm_state54 = 119'd9007199254740992;
parameter    ap_ST_fsm_state55 = 119'd18014398509481984;
parameter    ap_ST_fsm_state56 = 119'd36028797018963968;
parameter    ap_ST_fsm_state57 = 119'd72057594037927936;
parameter    ap_ST_fsm_state58 = 119'd144115188075855872;
parameter    ap_ST_fsm_state59 = 119'd288230376151711744;
parameter    ap_ST_fsm_state60 = 119'd576460752303423488;
parameter    ap_ST_fsm_state61 = 119'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 119'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 119'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 119'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 119'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 119'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 119'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 119'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 119'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 119'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 119'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 119'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 119'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 119'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 119'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 119'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 119'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 119'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 119'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 119'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 119'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 119'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 119'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 119'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 119'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 119'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 119'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 119'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 119'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 119'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 119'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 119'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 119'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 119'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 119'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 119'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 119'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 119'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 119'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 119'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 119'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 119'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 119'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 119'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 119'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 119'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 119'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 119'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 119'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 119'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 119'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 119'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 119'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 119'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 119'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 119'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 119'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 119'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 119'd332306998946228968225951765070086144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] v205_address0;
output   v205_ce0;
input  [31:0] v205_q0;
output  [15:0] v206_V_address0;
output   v206_V_ce0;
output   v206_V_we0;
output  [23:0] v206_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v205_ce0;
reg v206_V_ce0;
reg v206_V_we0;

(* fsm_encoding = "none" *) reg   [118:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_219_p1;
reg   [63:0] reg_229;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state96;
wire   [31:0] grp_fu_216_p1;
reg   [31:0] reg_235;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state104;
wire   [63:0] grp_fu_223_p2;
reg   [63:0] reg_242;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state102;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] reg_247;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state111;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] reg_253;
wire    ap_CS_fsm_state115;
wire   [3:0] i17_fu_265_p2;
reg   [3:0] i17_reg_602;
wire    ap_CS_fsm_state2;
wire   [16:0] sub_ln355_fu_295_p2;
reg   [16:0] sub_ln355_reg_607;
wire   [0:0] icmp_ln353_fu_259_p2;
wire   [11:0] j16_fu_307_p2;
reg   [11:0] j16_reg_615;
wire    ap_CS_fsm_state3;
wire  signed [63:0] sext_ln355_fu_322_p1;
reg  signed [63:0] sext_ln355_reg_620;
wire   [0:0] icmp_ln354_fu_301_p2;
reg   [31:0] v209_reg_630;
wire    ap_CS_fsm_state4;
wire   [63:0] grp_pow_generic_double_s_fu_166_ap_return;
reg   [63:0] tmp_i_i_reg_637;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_generic_tanh_float_s_fu_195_ap_return;
reg   [31:0] v215_reg_642;
wire    ap_CS_fsm_state106;
wire    grp_generic_tanh_float_s_fu_195_ap_ready;
wire    grp_generic_tanh_float_s_fu_195_ap_done;
wire   [53:0] man_V_6_fu_379_p3;
reg   [53:0] man_V_6_reg_647;
wire    ap_CS_fsm_state117;
wire   [0:0] icmp_ln571_fu_387_p2;
reg   [0:0] icmp_ln571_reg_652;
wire   [0:0] icmp_ln581_fu_399_p2;
reg   [0:0] icmp_ln581_reg_658;
wire  signed [11:0] sh_amt_fu_417_p3;
reg  signed [11:0] sh_amt_reg_664;
wire   [0:0] icmp_ln582_fu_425_p2;
reg   [0:0] icmp_ln582_reg_671;
wire   [23:0] trunc_ln583_fu_431_p1;
reg   [23:0] trunc_ln583_reg_677;
wire   [23:0] v218_V_fu_591_p3;
reg   [23:0] v218_V_reg_683;
wire    ap_CS_fsm_state118;
wire    grp_pow_generic_double_s_fu_166_ap_start;
wire    grp_pow_generic_double_s_fu_166_ap_done;
wire    grp_pow_generic_double_s_fu_166_ap_idle;
wire    grp_pow_generic_double_s_fu_166_ap_ready;
wire    grp_generic_tanh_float_s_fu_195_ap_start;
wire    grp_generic_tanh_float_s_fu_195_ap_idle;
reg   [3:0] i17_0_reg_144;
reg   [11:0] j16_0_reg_155;
wire    ap_CS_fsm_state119;
reg    grp_pow_generic_double_s_fu_166_ap_start_reg;
reg   [118:0] ap_NS_fsm;
wire    ap_NS_fsm_state6;
wire    ap_CS_fsm_state6;
reg    grp_generic_tanh_float_s_fu_195_ap_start_reg;
wire    ap_CS_fsm_state105;
reg   [31:0] grp_fu_206_p0;
reg   [31:0] grp_fu_206_p1;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state107;
reg   [31:0] grp_fu_211_p0;
reg   [31:0] grp_fu_211_p1;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state112;
reg   [63:0] grp_fu_216_p0;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state103;
reg   [31:0] grp_fu_219_p0;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state116;
reg   [63:0] grp_fu_223_p1;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state97;
wire   [15:0] tmp_fu_271_p3;
wire   [13:0] tmp_66_fu_283_p3;
wire   [16:0] zext_ln355_fu_279_p1;
wire   [16:0] zext_ln355_1_fu_291_p1;
wire   [16:0] zext_ln355_2_fu_313_p1;
wire   [16:0] add_ln355_fu_317_p2;
wire   [63:0] ireg_V_fu_327_p1;
wire   [10:0] exp_tmp_V_fu_343_p4;
wire   [51:0] trunc_ln565_fu_357_p1;
wire   [52:0] tmp_2_fu_361_p3;
wire   [53:0] p_Result_87_fu_369_p1;
wire   [0:0] p_Result_s_fu_335_p3;
wire   [53:0] man_V_5_fu_373_p2;
wire   [62:0] trunc_ln556_fu_331_p1;
wire   [11:0] zext_ln461_fu_353_p1;
wire   [11:0] F2_fu_393_p2;
wire   [11:0] add_ln581_fu_405_p2;
wire   [11:0] sub_ln581_fu_411_p2;
wire  signed [31:0] sext_ln581_fu_435_p1;
wire   [53:0] zext_ln586_fu_448_p1;
wire   [53:0] ashr_ln586_fu_452_p2;
wire   [31:0] bitcast_ln696_fu_461_p1;
wire   [0:0] tmp_40_fu_465_p3;
wire   [23:0] sext_ln581cast_fu_481_p1;
wire   [0:0] xor_ln571_fu_490_p2;
wire   [0:0] or_ln582_fu_500_p2;
wire   [0:0] xor_ln582_fu_504_p2;
wire   [0:0] icmp_ln585_fu_438_p2;
wire   [0:0] and_ln581_fu_510_p2;
wire   [0:0] xor_ln585_fu_515_p2;
wire   [0:0] or_ln581_fu_533_p2;
wire   [0:0] icmp_ln603_fu_443_p2;
wire   [0:0] xor_ln581_fu_538_p2;
wire   [0:0] and_ln603_fu_544_p2;
wire   [23:0] shl_ln604_fu_485_p2;
wire   [23:0] trunc_ln586_fu_457_p1;
wire   [0:0] and_ln585_3_fu_527_p2;
wire   [0:0] and_ln585_fu_521_p2;
wire   [23:0] select_ln588_fu_473_p3;
wire   [0:0] and_ln582_fu_495_p2;
wire   [0:0] or_ln603_fu_558_p2;
wire   [23:0] select_ln603_fu_550_p3;
wire   [23:0] select_ln603_7_fu_564_p3;
wire   [0:0] or_ln603_5_fu_571_p2;
wire   [0:0] or_ln603_6_fu_585_p2;
wire   [23:0] select_ln603_8_fu_577_p3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 119'd1;
#0 grp_pow_generic_double_s_fu_166_ap_start_reg = 1'b0;
#0 grp_generic_tanh_float_s_fu_195_ap_start_reg = 1'b0;
end

pow_generic_double_s grp_pow_generic_double_s_fu_166(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_166_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_166_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_166_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_166_ap_ready),
    .base_r(reg_229),
    .ap_return(grp_pow_generic_double_s_fu_166_ap_return)
);

generic_tanh_float_s grp_generic_tanh_float_s_fu_195(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_tanh_float_s_fu_195_ap_start),
    .ap_done(grp_generic_tanh_float_s_fu_195_ap_done),
    .ap_idle(grp_generic_tanh_float_s_fu_195_ap_idle),
    .ap_ready(grp_generic_tanh_float_s_fu_195_ap_ready),
    .t_in(reg_235),
    .ap_return(grp_generic_tanh_float_s_fu_195_ap_return)
);

Bert_layer_fadd_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3eOg_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_206_p0),
    .din1(grp_fu_206_p1),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

Bert_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fmul_3cud_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

Bert_layer_fptrunncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
Bert_layer_fptrunncg_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_216_p0),
    .ce(1'b1),
    .dout(grp_fu_216_p1)
);

Bert_layer_fpext_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Bert_layer_fpext_g8j_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .ce(1'b1),
    .dout(grp_fu_219_p1)
);

Bert_layer_dmul_60iy #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Bert_layer_dmul_60iy_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_229),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_tanh_float_s_fu_195_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state105)) begin
            grp_generic_tanh_float_s_fu_195_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_float_s_fu_195_ap_ready == 1'b1)) begin
            grp_generic_tanh_float_s_fu_195_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_166_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state6) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_pow_generic_double_s_fu_166_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_166_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_166_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln354_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i17_0_reg_144 <= i17_reg_602;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i17_0_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        j16_0_reg_155 <= j16_reg_615;
    end else if (((icmp_ln353_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j16_0_reg_155 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i17_reg_602 <= i17_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        icmp_ln571_reg_652 <= icmp_ln571_fu_387_p2;
        icmp_ln581_reg_658 <= icmp_ln581_fu_399_p2;
        icmp_ln582_reg_671 <= icmp_ln582_fu_425_p2;
        man_V_6_reg_647 <= man_V_6_fu_379_p3;
        sh_amt_reg_664 <= sh_amt_fu_417_p3;
        trunc_ln583_reg_677 <= trunc_ln583_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j16_reg_615 <= j16_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_229 <= grp_fu_219_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state79))) begin
        reg_235 <= grp_fu_216_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state87))) begin
        reg_242 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state94))) begin
        reg_247 <= grp_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state111))) begin
        reg_253 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln354_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sext_ln355_reg_620 <= sext_ln355_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln353_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln355_reg_607[16 : 10] <= sub_ln355_fu_295_p2[16 : 10];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        tmp_i_i_reg_637 <= grp_pow_generic_double_s_fu_166_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v209_reg_630 <= v205_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generic_tanh_float_s_fu_195_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
        v215_reg_642 <= grp_generic_tanh_float_s_fu_195_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        v218_V_reg_683 <= v218_V_fu_591_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln353_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln353_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_206_p0 = v215_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_206_p0 = v209_reg_630;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_206_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_206_p1 = reg_235;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_211_p0 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_211_p0 = v209_reg_630;
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        grp_fu_211_p1 = reg_247;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        grp_fu_211_p1 = 32'd1056964608;
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state88))) begin
        grp_fu_216_p0 = reg_242;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_216_p0 = tmp_i_i_reg_637;
    end else begin
        grp_fu_216_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_219_p0 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_219_p0 = reg_247;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_219_p0 = reg_235;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_219_p0 = v205_q0;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        grp_fu_223_p1 = 64'd4605361928722645432;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_223_p1 = 64'd4586604931670606327;
    end else begin
        grp_fu_223_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v205_ce0 = 1'b1;
    end else begin
        v205_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        v206_V_ce0 = 1'b1;
    end else begin
        v206_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        v206_V_we0 = 1'b1;
    end else begin
        v206_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln353_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln354_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if (((grp_generic_tanh_float_s_fu_195_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_393_p2 = (12'd1075 - zext_ln461_fu_353_p1);

assign add_ln355_fu_317_p2 = (sub_ln355_reg_607 + zext_ln355_2_fu_313_p1);

assign add_ln581_fu_405_p2 = ($signed(12'd4080) + $signed(F2_fu_393_p2));

assign and_ln581_fu_510_p2 = (xor_ln582_fu_504_p2 & icmp_ln581_reg_658);

assign and_ln582_fu_495_p2 = (xor_ln571_fu_490_p2 & icmp_ln582_reg_671);

assign and_ln585_3_fu_527_p2 = (icmp_ln585_fu_438_p2 & and_ln581_fu_510_p2);

assign and_ln585_fu_521_p2 = (xor_ln585_fu_515_p2 & and_ln581_fu_510_p2);

assign and_ln603_fu_544_p2 = (xor_ln581_fu_538_p2 & icmp_ln603_fu_443_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_NS_fsm_state6 = ap_NS_fsm[32'd5];

assign ashr_ln586_fu_452_p2 = $signed(man_V_6_reg_647) >>> zext_ln586_fu_448_p1;

assign bitcast_ln696_fu_461_p1 = reg_253;

assign exp_tmp_V_fu_343_p4 = {{ireg_V_fu_327_p1[62:52]}};

assign grp_generic_tanh_float_s_fu_195_ap_start = grp_generic_tanh_float_s_fu_195_ap_start_reg;

assign grp_pow_generic_double_s_fu_166_ap_start = grp_pow_generic_double_s_fu_166_ap_start_reg;

assign i17_fu_265_p2 = (i17_0_reg_144 + 4'd1);

assign icmp_ln353_fu_259_p2 = ((i17_0_reg_144 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln354_fu_301_p2 = ((j16_0_reg_155 == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_387_p2 = ((trunc_ln556_fu_331_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_399_p2 = (($signed(F2_fu_393_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_425_p2 = ((F2_fu_393_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_438_p2 = ((sh_amt_reg_664 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_443_p2 = ((sh_amt_reg_664 < 12'd24) ? 1'b1 : 1'b0);

assign ireg_V_fu_327_p1 = grp_fu_219_p1;

assign j16_fu_307_p2 = (j16_0_reg_155 + 12'd1);

assign man_V_5_fu_373_p2 = (54'd0 - p_Result_87_fu_369_p1);

assign man_V_6_fu_379_p3 = ((p_Result_s_fu_335_p3[0:0] === 1'b1) ? man_V_5_fu_373_p2 : p_Result_87_fu_369_p1);

assign or_ln581_fu_533_p2 = (or_ln582_fu_500_p2 | icmp_ln581_reg_658);

assign or_ln582_fu_500_p2 = (icmp_ln582_reg_671 | icmp_ln571_reg_652);

assign or_ln603_5_fu_571_p2 = (and_ln585_fu_521_p2 | and_ln582_fu_495_p2);

assign or_ln603_6_fu_585_p2 = (or_ln603_fu_558_p2 | or_ln603_5_fu_571_p2);

assign or_ln603_fu_558_p2 = (and_ln603_fu_544_p2 | and_ln585_3_fu_527_p2);

assign p_Result_87_fu_369_p1 = tmp_2_fu_361_p3;

assign p_Result_s_fu_335_p3 = ireg_V_fu_327_p1[32'd63];

assign select_ln588_fu_473_p3 = ((tmp_40_fu_465_p3[0:0] === 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln603_7_fu_564_p3 = ((and_ln585_fu_521_p2[0:0] === 1'b1) ? select_ln588_fu_473_p3 : trunc_ln583_reg_677);

assign select_ln603_8_fu_577_p3 = ((or_ln603_fu_558_p2[0:0] === 1'b1) ? select_ln603_fu_550_p3 : select_ln603_7_fu_564_p3);

assign select_ln603_fu_550_p3 = ((and_ln603_fu_544_p2[0:0] === 1'b1) ? shl_ln604_fu_485_p2 : trunc_ln586_fu_457_p1);

assign sext_ln355_fu_322_p1 = $signed(add_ln355_fu_317_p2);

assign sext_ln581_fu_435_p1 = sh_amt_reg_664;

assign sext_ln581cast_fu_481_p1 = sext_ln581_fu_435_p1[23:0];

assign sh_amt_fu_417_p3 = ((icmp_ln581_fu_399_p2[0:0] === 1'b1) ? add_ln581_fu_405_p2 : sub_ln581_fu_411_p2);

assign shl_ln604_fu_485_p2 = trunc_ln583_reg_677 << sext_ln581cast_fu_481_p1;

assign sub_ln355_fu_295_p2 = (zext_ln355_fu_279_p1 - zext_ln355_1_fu_291_p1);

assign sub_ln581_fu_411_p2 = (12'd16 - F2_fu_393_p2);

assign tmp_2_fu_361_p3 = {{1'd1}, {trunc_ln565_fu_357_p1}};

assign tmp_40_fu_465_p3 = bitcast_ln696_fu_461_p1[32'd31];

assign tmp_66_fu_283_p3 = {{i17_0_reg_144}, {10'd0}};

assign tmp_fu_271_p3 = {{i17_0_reg_144}, {12'd0}};

assign trunc_ln556_fu_331_p1 = ireg_V_fu_327_p1[62:0];

assign trunc_ln565_fu_357_p1 = ireg_V_fu_327_p1[51:0];

assign trunc_ln583_fu_431_p1 = man_V_6_fu_379_p3[23:0];

assign trunc_ln586_fu_457_p1 = ashr_ln586_fu_452_p2[23:0];

assign v205_address0 = sext_ln355_fu_322_p1;

assign v206_V_address0 = sext_ln355_reg_620;

assign v206_V_d0 = v218_V_reg_683;

assign v218_V_fu_591_p3 = ((or_ln603_6_fu_585_p2[0:0] === 1'b1) ? select_ln603_8_fu_577_p3 : 24'd0);

assign xor_ln571_fu_490_p2 = (icmp_ln571_reg_652 ^ 1'd1);

assign xor_ln581_fu_538_p2 = (or_ln581_fu_533_p2 ^ 1'd1);

assign xor_ln582_fu_504_p2 = (or_ln582_fu_500_p2 ^ 1'd1);

assign xor_ln585_fu_515_p2 = (icmp_ln585_fu_438_p2 ^ 1'd1);

assign zext_ln355_1_fu_291_p1 = tmp_66_fu_283_p3;

assign zext_ln355_2_fu_313_p1 = j16_0_reg_155;

assign zext_ln355_fu_279_p1 = tmp_fu_271_p3;

assign zext_ln461_fu_353_p1 = exp_tmp_V_fu_343_p4;

assign zext_ln586_fu_448_p1 = $unsigned(sext_ln581_fu_435_p1);

always @ (posedge ap_clk) begin
    sub_ln355_reg_607[9:0] <= 10'b0000000000;
end

endmodule //Gelu_layer
