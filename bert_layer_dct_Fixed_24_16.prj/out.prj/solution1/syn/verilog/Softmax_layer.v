// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Softmax_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v48_address0,
        v48_ce0,
        v48_we0,
        v48_d0,
        v48_q0,
        v49_V_address0,
        v49_V_ce0,
        v49_V_we0,
        v49_V_d0
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] v48_address0;
output   v48_ce0;
output   v48_we0;
output  [31:0] v48_d0;
input  [31:0] v48_q0;
output  [7:0] v49_V_address0;
output   v49_V_ce0;
output   v49_V_we0;
output  [23:0] v49_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] v48_address0;
reg v48_ce0;
reg v48_we0;
reg v49_V_ce0;
reg v49_V_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_214;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state24;
wire   [31:0] inp_sumRow_q0;
reg   [31:0] reg_220;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire   [3:0] v51_fu_232_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i4_fu_249_p2;
reg   [3:0] i4_reg_671;
wire    ap_CS_fsm_state3;
wire   [8:0] sub_ln105_fu_284_p2;
reg   [8:0] sub_ln105_reg_676;
wire   [0:0] icmp_ln103_fu_243_p2;
reg   [3:0] inp_sumRow_addr_1_reg_681;
wire   [3:0] j4_fu_296_p2;
reg   [3:0] j4_reg_689;
wire    ap_CS_fsm_state4;
reg   [7:0] v48_addr_reg_694;
wire   [0:0] icmp_ln104_fu_290_p2;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] v55_reg_699;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] v58_reg_705;
wire    ap_CS_fsm_state19;
wire   [3:0] i5_fu_322_p2;
reg   [3:0] i5_reg_713;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln114_fu_316_p2;
wire   [8:0] sub_ln116_fu_357_p2;
reg   [8:0] sub_ln116_reg_723;
wire   [3:0] j5_fu_369_p2;
reg   [3:0] j5_reg_731;
wire    ap_CS_fsm_state23;
wire  signed [63:0] sext_ln116_fu_384_p1;
reg  signed [63:0] sext_ln116_reg_736;
wire   [0:0] icmp_ln115_fu_363_p2;
wire   [31:0] grp_fu_202_p2;
reg   [31:0] v63_reg_746;
wire    ap_CS_fsm_state40;
wire   [53:0] man_V_2_fu_441_p3;
reg   [53:0] man_V_2_reg_752;
wire    ap_CS_fsm_state42;
wire   [0:0] icmp_ln571_fu_449_p2;
reg   [0:0] icmp_ln571_reg_757;
wire   [0:0] icmp_ln581_fu_461_p2;
reg   [0:0] icmp_ln581_reg_763;
wire  signed [11:0] sh_amt_fu_479_p3;
reg  signed [11:0] sh_amt_reg_769;
wire   [0:0] icmp_ln582_fu_487_p2;
reg   [0:0] icmp_ln582_reg_776;
wire   [23:0] trunc_ln583_fu_493_p1;
reg   [23:0] trunc_ln583_reg_782;
wire   [23:0] v64_V_fu_652_p3;
reg   [23:0] v64_V_reg_788;
wire    ap_CS_fsm_state43;
reg   [3:0] inp_sumRow_address0;
reg    inp_sumRow_ce0;
reg    inp_sumRow_we0;
reg   [31:0] inp_sumRow_d0;
reg   [3:0] v51_0_reg_142;
wire   [0:0] icmp_ln100_fu_226_p2;
reg   [3:0] i4_0_reg_153;
reg   [3:0] j4_0_reg_164;
wire    ap_CS_fsm_state20;
reg   [3:0] i5_0_reg_175;
reg   [3:0] j5_0_reg_187;
wire    ap_CS_fsm_state44;
wire   [63:0] zext_ln101_fu_238_p1;
wire   [63:0] zext_ln105_fu_255_p1;
wire  signed [63:0] sext_ln105_fu_311_p1;
wire   [63:0] zext_ln116_fu_328_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state6;
wire   [7:0] tmp_15_fu_260_p3;
wire   [5:0] tmp_16_fu_272_p3;
wire   [8:0] zext_ln105_1_fu_268_p1;
wire   [8:0] zext_ln105_2_fu_280_p1;
wire   [8:0] zext_ln105_3_fu_302_p1;
wire   [8:0] add_ln105_fu_306_p2;
wire   [7:0] tmp_17_fu_333_p3;
wire   [5:0] tmp_18_fu_345_p3;
wire   [8:0] zext_ln116_1_fu_341_p1;
wire   [8:0] zext_ln116_2_fu_353_p1;
wire   [8:0] zext_ln116_3_fu_375_p1;
wire   [8:0] add_ln116_fu_379_p2;
wire   [63:0] grp_fu_206_p1;
wire   [63:0] ireg_V_fu_389_p1;
wire   [10:0] exp_tmp_V_fu_405_p4;
wire   [51:0] trunc_ln565_fu_419_p1;
wire   [52:0] tmp_5_fu_423_p3;
wire   [53:0] p_Result_67_fu_431_p1;
wire   [0:0] p_Result_s_fu_397_p3;
wire   [53:0] man_V_1_fu_435_p2;
wire   [62:0] trunc_ln556_fu_393_p1;
wire   [11:0] zext_ln461_fu_415_p1;
wire   [11:0] F2_fu_455_p2;
wire   [11:0] add_ln581_fu_467_p2;
wire   [11:0] sub_ln581_fu_473_p2;
wire  signed [31:0] sext_ln581_fu_497_p1;
wire   [53:0] zext_ln586_fu_510_p1;
wire   [53:0] ashr_ln586_fu_514_p2;
wire   [31:0] bitcast_ln696_fu_523_p1;
wire   [0:0] tmp_28_fu_526_p3;
wire   [23:0] sext_ln581cast_fu_542_p1;
wire   [0:0] xor_ln571_fu_551_p2;
wire   [0:0] or_ln582_fu_561_p2;
wire   [0:0] xor_ln582_fu_565_p2;
wire   [0:0] icmp_ln585_fu_500_p2;
wire   [0:0] and_ln581_fu_571_p2;
wire   [0:0] xor_ln585_fu_576_p2;
wire   [0:0] or_ln581_fu_594_p2;
wire   [0:0] icmp_ln603_fu_505_p2;
wire   [0:0] xor_ln581_fu_599_p2;
wire   [0:0] and_ln603_fu_605_p2;
wire   [23:0] shl_ln604_fu_546_p2;
wire   [23:0] trunc_ln586_fu_519_p1;
wire   [0:0] and_ln585_1_fu_588_p2;
wire   [0:0] and_ln585_fu_582_p2;
wire   [23:0] select_ln588_fu_534_p3;
wire   [0:0] and_ln582_fu_556_p2;
wire   [0:0] or_ln603_fu_619_p2;
wire   [23:0] select_ln603_fu_611_p3;
wire   [23:0] select_ln603_1_fu_625_p3;
wire   [0:0] or_ln603_1_fu_632_p2;
wire   [0:0] or_ln603_2_fu_646_p2;
wire   [23:0] select_ln603_2_fu_638_p3;
reg   [43:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
end

Softmax_layer_inpdEe #(
    .DataWidth( 32 ),
    .AddressRange( 12 ),
    .AddressWidth( 4 ))
inp_sumRow_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inp_sumRow_address0),
    .ce0(inp_sumRow_ce0),
    .we0(inp_sumRow_we0),
    .d0(inp_sumRow_d0),
    .q0(inp_sumRow_q0)
);

Bert_layer_fadd_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fadd_3eOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_220),
    .din1(v55_reg_699),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

Bert_layer_fdiv_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fdiv_3fYi_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_214),
    .din1(reg_220),
    .ce(1'b1),
    .dout(grp_fu_202_p2)
);

Bert_layer_fpext_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Bert_layer_fpext_g8j_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v63_reg_746),
    .ce(1'b1),
    .dout(grp_fu_206_p1)
);

Bert_layer_fexp_3hbi #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Bert_layer_fexp_3hbi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_214),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i4_0_reg_153 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln104_fu_290_p2 == 1'd1))) begin
        i4_0_reg_153 <= i4_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln103_fu_243_p2 == 1'd1))) begin
        i5_0_reg_175 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln115_fu_363_p2 == 1'd1))) begin
        i5_0_reg_175 <= i5_reg_713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j4_0_reg_164 <= j4_reg_689;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln103_fu_243_p2 == 1'd0))) begin
        j4_0_reg_164 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j5_0_reg_187 <= j5_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        j5_0_reg_187 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln100_fu_226_p2 == 1'd0))) begin
        v51_0_reg_142 <= v51_fu_232_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        v51_0_reg_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i4_reg_671 <= i4_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i5_reg_713 <= i5_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        icmp_ln571_reg_757 <= icmp_ln571_fu_449_p2;
        icmp_ln581_reg_763 <= icmp_ln581_fu_461_p2;
        icmp_ln582_reg_776 <= icmp_ln582_fu_487_p2;
        man_V_2_reg_752 <= man_V_2_fu_441_p3;
        sh_amt_reg_769 <= sh_amt_fu_479_p3;
        trunc_ln583_reg_782 <= trunc_ln583_fu_493_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln103_fu_243_p2 == 1'd0))) begin
        inp_sumRow_addr_1_reg_681 <= zext_ln105_fu_255_p1;
        sub_ln105_reg_676[8 : 2] <= sub_ln105_fu_284_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j4_reg_689 <= j4_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j5_reg_731 <= j5_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_214 <= v48_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state22))) begin
        reg_220 <= inp_sumRow_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln115_fu_363_p2 == 1'd0))) begin
        sext_ln116_reg_736 <= sext_ln116_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        sub_ln116_reg_723[8 : 2] <= sub_ln116_fu_357_p2[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln104_fu_290_p2 == 1'd0))) begin
        v48_addr_reg_694 <= sext_ln105_fu_311_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        v55_reg_699 <= grp_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        v58_reg_705 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        v63_reg_746 <= grp_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        v64_V_reg_788 <= v64_V_fu_652_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state21) & (icmp_ln114_fu_316_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln114_fu_316_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inp_sumRow_address0 = zext_ln116_fu_328_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20))) begin
        inp_sumRow_address0 = inp_sumRow_addr_1_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_address0 = zext_ln101_fu_238_p1;
    end else begin
        inp_sumRow_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        inp_sumRow_ce0 = 1'b1;
    end else begin
        inp_sumRow_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        inp_sumRow_d0 = v58_reg_705;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        inp_sumRow_d0 = 32'd0;
    end else begin
        inp_sumRow_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln100_fu_226_p2 == 1'd0)))) begin
        inp_sumRow_we0 = 1'b1;
    end else begin
        inp_sumRow_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        v48_address0 = sext_ln116_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        v48_address0 = v48_addr_reg_694;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        v48_address0 = sext_ln105_fu_311_p1;
    end else begin
        v48_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state4))) begin
        v48_ce0 = 1'b1;
    end else begin
        v48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        v48_we0 = 1'b1;
    end else begin
        v48_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v49_V_ce0 = 1'b1;
    end else begin
        v49_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v49_V_we0 = 1'b1;
    end else begin
        v49_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln100_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln103_fu_243_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln104_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln114_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln115_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_455_p2 = (12'd1075 - zext_ln461_fu_415_p1);

assign add_ln105_fu_306_p2 = (sub_ln105_reg_676 + zext_ln105_3_fu_302_p1);

assign add_ln116_fu_379_p2 = (sub_ln116_reg_723 + zext_ln116_3_fu_375_p1);

assign add_ln581_fu_467_p2 = ($signed(12'd4080) + $signed(F2_fu_455_p2));

assign and_ln581_fu_571_p2 = (xor_ln582_fu_565_p2 & icmp_ln581_reg_763);

assign and_ln582_fu_556_p2 = (xor_ln571_fu_551_p2 & icmp_ln582_reg_776);

assign and_ln585_1_fu_588_p2 = (icmp_ln585_fu_500_p2 & and_ln581_fu_571_p2);

assign and_ln585_fu_582_p2 = (xor_ln585_fu_576_p2 & and_ln581_fu_571_p2);

assign and_ln603_fu_605_p2 = (xor_ln581_fu_599_p2 & icmp_ln603_fu_505_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ashr_ln586_fu_514_p2 = $signed(man_V_2_reg_752) >>> zext_ln586_fu_510_p1;

assign bitcast_ln696_fu_523_p1 = v63_reg_746;

assign exp_tmp_V_fu_405_p4 = {{ireg_V_fu_389_p1[62:52]}};

assign i4_fu_249_p2 = (i4_0_reg_153 + 4'd1);

assign i5_fu_322_p2 = (i5_0_reg_175 + 4'd1);

assign icmp_ln100_fu_226_p2 = ((v51_0_reg_142 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_243_p2 = ((i4_0_reg_153 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_290_p2 = ((j4_0_reg_164 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_316_p2 = ((i5_0_reg_175 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_363_p2 = ((j5_0_reg_187 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_449_p2 = ((trunc_ln556_fu_393_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_461_p2 = (($signed(F2_fu_455_p2) > $signed(12'd16)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_487_p2 = ((F2_fu_455_p2 == 12'd16) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_500_p2 = ((sh_amt_reg_769 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_505_p2 = ((sh_amt_reg_769 < 12'd24) ? 1'b1 : 1'b0);

assign ireg_V_fu_389_p1 = grp_fu_206_p1;

assign j4_fu_296_p2 = (j4_0_reg_164 + 4'd1);

assign j5_fu_369_p2 = (j5_0_reg_187 + 4'd1);

assign man_V_1_fu_435_p2 = (54'd0 - p_Result_67_fu_431_p1);

assign man_V_2_fu_441_p3 = ((p_Result_s_fu_397_p3[0:0] === 1'b1) ? man_V_1_fu_435_p2 : p_Result_67_fu_431_p1);

assign or_ln581_fu_594_p2 = (or_ln582_fu_561_p2 | icmp_ln581_reg_763);

assign or_ln582_fu_561_p2 = (icmp_ln582_reg_776 | icmp_ln571_reg_757);

assign or_ln603_1_fu_632_p2 = (and_ln585_fu_582_p2 | and_ln582_fu_556_p2);

assign or_ln603_2_fu_646_p2 = (or_ln603_fu_619_p2 | or_ln603_1_fu_632_p2);

assign or_ln603_fu_619_p2 = (and_ln603_fu_605_p2 | and_ln585_1_fu_588_p2);

assign p_Result_67_fu_431_p1 = tmp_5_fu_423_p3;

assign p_Result_s_fu_397_p3 = ireg_V_fu_389_p1[32'd63];

assign select_ln588_fu_534_p3 = ((tmp_28_fu_526_p3[0:0] === 1'b1) ? 24'd16777215 : 24'd0);

assign select_ln603_1_fu_625_p3 = ((and_ln585_fu_582_p2[0:0] === 1'b1) ? select_ln588_fu_534_p3 : trunc_ln583_reg_782);

assign select_ln603_2_fu_638_p3 = ((or_ln603_fu_619_p2[0:0] === 1'b1) ? select_ln603_fu_611_p3 : select_ln603_1_fu_625_p3);

assign select_ln603_fu_611_p3 = ((and_ln603_fu_605_p2[0:0] === 1'b1) ? shl_ln604_fu_546_p2 : trunc_ln586_fu_519_p1);

assign sext_ln105_fu_311_p1 = $signed(add_ln105_fu_306_p2);

assign sext_ln116_fu_384_p1 = $signed(add_ln116_fu_379_p2);

assign sext_ln581_fu_497_p1 = sh_amt_reg_769;

assign sext_ln581cast_fu_542_p1 = sext_ln581_fu_497_p1[23:0];

assign sh_amt_fu_479_p3 = ((icmp_ln581_fu_461_p2[0:0] === 1'b1) ? add_ln581_fu_467_p2 : sub_ln581_fu_473_p2);

assign shl_ln604_fu_546_p2 = trunc_ln583_reg_782 << sext_ln581cast_fu_542_p1;

assign sub_ln105_fu_284_p2 = (zext_ln105_1_fu_268_p1 - zext_ln105_2_fu_280_p1);

assign sub_ln116_fu_357_p2 = (zext_ln116_1_fu_341_p1 - zext_ln116_2_fu_353_p1);

assign sub_ln581_fu_473_p2 = (12'd16 - F2_fu_455_p2);

assign tmp_15_fu_260_p3 = {{i4_0_reg_153}, {4'd0}};

assign tmp_16_fu_272_p3 = {{i4_0_reg_153}, {2'd0}};

assign tmp_17_fu_333_p3 = {{i5_0_reg_175}, {4'd0}};

assign tmp_18_fu_345_p3 = {{i5_0_reg_175}, {2'd0}};

assign tmp_28_fu_526_p3 = bitcast_ln696_fu_523_p1[32'd31];

assign tmp_5_fu_423_p3 = {{1'd1}, {trunc_ln565_fu_419_p1}};

assign trunc_ln556_fu_393_p1 = ireg_V_fu_389_p1[62:0];

assign trunc_ln565_fu_419_p1 = ireg_V_fu_389_p1[51:0];

assign trunc_ln583_fu_493_p1 = man_V_2_fu_441_p3[23:0];

assign trunc_ln586_fu_519_p1 = ashr_ln586_fu_514_p2[23:0];

assign v48_d0 = v55_reg_699;

assign v49_V_address0 = sext_ln116_reg_736;

assign v49_V_d0 = v64_V_reg_788;

assign v51_fu_232_p2 = (v51_0_reg_142 + 4'd1);

assign v64_V_fu_652_p3 = ((or_ln603_2_fu_646_p2[0:0] === 1'b1) ? select_ln603_2_fu_638_p3 : 24'd0);

assign xor_ln571_fu_551_p2 = (icmp_ln571_reg_757 ^ 1'd1);

assign xor_ln581_fu_599_p2 = (or_ln581_fu_594_p2 ^ 1'd1);

assign xor_ln582_fu_565_p2 = (or_ln582_fu_561_p2 ^ 1'd1);

assign xor_ln585_fu_576_p2 = (icmp_ln585_fu_500_p2 ^ 1'd1);

assign zext_ln101_fu_238_p1 = v51_0_reg_142;

assign zext_ln105_1_fu_268_p1 = tmp_15_fu_260_p3;

assign zext_ln105_2_fu_280_p1 = tmp_16_fu_272_p3;

assign zext_ln105_3_fu_302_p1 = j4_0_reg_164;

assign zext_ln105_fu_255_p1 = i4_0_reg_153;

assign zext_ln116_1_fu_341_p1 = tmp_17_fu_333_p3;

assign zext_ln116_2_fu_353_p1 = tmp_18_fu_345_p3;

assign zext_ln116_3_fu_375_p1 = j5_0_reg_187;

assign zext_ln116_fu_328_p1 = i5_0_reg_175;

assign zext_ln461_fu_415_p1 = exp_tmp_V_fu_405_p4;

assign zext_ln586_fu_510_p1 = $unsigned(sext_ln581_fu_497_p1);

always @ (posedge ap_clk) begin
    sub_ln105_reg_676[1:0] <= 2'b00;
    sub_ln116_reg_723[1:0] <= 2'b00;
end

endmodule //Softmax_layer
