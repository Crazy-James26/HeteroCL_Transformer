-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Context_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v65_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v65_V_ce0 : OUT STD_LOGIC;
    v65_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v66_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v66_V_ce0 : OUT STD_LOGIC;
    v66_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v67_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v67_V_ce0 : OUT STD_LOGIC;
    v67_V_we0 : OUT STD_LOGIC;
    v67_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v67_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Context_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v69_fu_168_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v69_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln132_fu_182_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln132_reg_391 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln131_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v70_fu_192_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i6_fu_218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i6_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln139_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln139_reg_412 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln136_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln137_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln137_reg_417 : STD_LOGIC_VECTOR (10 downto 0);
    signal j6_fu_272_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j6_reg_425 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln144_fu_278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln144_reg_430 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln137_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v67_V_addr_1_reg_435 : STD_LOGIC_VECTOR (9 downto 0);
    signal k2_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k2_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln138_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v74_V_reg_458 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal v75_V_reg_463 : STD_LOGIC_VECTOR (23 downto 0);
    signal v79_V_reg_468 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v80_V_reg_473 : STD_LOGIC_VECTOR (23 downto 0);
    signal v69_0_reg_107 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln132_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v70_0_reg_118 : STD_LOGIC_VECTOR (6 downto 0);
    signal i6_0_reg_129 : STD_LOGIC_VECTOR (3 downto 0);
    signal j6_0_reg_140 : STD_LOGIC_VECTOR (6 downto 0);
    signal k2_0_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln203_17_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_1_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln139_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_1_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v81_V_fu_378_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_67_fu_174_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_198_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_fu_202_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_236_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln139_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln139_1_fu_244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_70_fu_254_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln144_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln139_2_fu_304_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln139_fu_308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_71_fu_318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln140_fu_326_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln140_fu_330_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal v76_V_fu_340_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal v77_V_fu_347_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_362_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_362_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_362_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i6_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i6_0_reg_129 <= ap_const_lv4_0;
            elsif (((icmp_ln137_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i6_0_reg_129 <= i6_reg_407;
            end if; 
        end if;
    end process;

    j6_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln138_fu_292_p2 = ap_const_lv1_1))) then 
                j6_0_reg_140 <= j6_reg_425;
            elsif (((icmp_ln136_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j6_0_reg_140 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k2_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k2_0_reg_151 <= k2_reg_443;
            elsif (((icmp_ln137_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k2_0_reg_151 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v69_0_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln132_fu_186_p2 = ap_const_lv1_1))) then 
                v69_0_reg_107 <= v69_reg_386;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                v69_0_reg_107 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v70_0_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v70_0_reg_118 <= ap_const_lv7_0;
            elsif (((icmp_ln132_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v70_0_reg_118 <= v70_fu_192_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i6_reg_407 <= i6_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j6_reg_425 <= j6_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k2_reg_443 <= k2_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln139_reg_412(8 downto 2) <= sub_ln139_fu_248_p2(8 downto 2);
                    zext_ln137_reg_417(9 downto 6) <= zext_ln137_fu_262_p1(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                v67_V_addr_1_reg_435 <= zext_ln144_1_fu_287_p1(10 - 1 downto 0);
                    zext_ln144_reg_430(6 downto 0) <= zext_ln144_fu_278_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v69_reg_386 <= v69_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                v74_V_reg_458 <= v65_V_q0;
                v75_V_reg_463 <= v66_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                v79_V_reg_468 <= v67_V_q0;
                v80_V_reg_473 <= r_V_fu_362_p2(71 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln132_reg_391(9 downto 6) <= zext_ln132_fu_182_p1(9 downto 6);
            end if;
        end if;
    end process;
    zext_ln132_reg_391(5 downto 0) <= "000000";
    zext_ln132_reg_391(10) <= '0';
    sub_ln139_reg_412(1 downto 0) <= "00";
    zext_ln137_reg_417(5 downto 0) <= "000000";
    zext_ln137_reg_417(10) <= '0';
    zext_ln144_reg_430(10 downto 7) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln131_fu_162_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln136_fu_212_p2, ap_CS_fsm_state5, icmp_ln137_fu_266_p2, ap_CS_fsm_state6, icmp_ln138_fu_292_p2, icmp_ln132_fu_186_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln131_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln132_fu_186_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln136_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln137_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln138_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln139_fu_308_p2 <= std_logic_vector(unsigned(zext_ln139_2_fu_304_p1) + unsigned(sub_ln139_reg_412));
    add_ln140_fu_330_p2 <= std_logic_vector(unsigned(zext_ln144_reg_430) + unsigned(zext_ln140_fu_326_p1));
    add_ln144_fu_282_p2 <= std_logic_vector(unsigned(zext_ln137_reg_417) + unsigned(zext_ln144_fu_278_p1));
    add_ln203_fu_202_p2 <= std_logic_vector(unsigned(zext_ln132_reg_391) + unsigned(zext_ln203_fu_198_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln136_fu_212_p2)
    begin
        if ((((icmp_ln136_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln136_fu_212_p2)
    begin
        if (((icmp_ln136_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i6_fu_218_p2 <= std_logic_vector(unsigned(i6_0_reg_129) + unsigned(ap_const_lv4_1));
    icmp_ln131_fu_162_p2 <= "1" when (v69_0_reg_107 = ap_const_lv4_C) else "0";
    icmp_ln132_fu_186_p2 <= "1" when (v70_0_reg_118 = ap_const_lv7_40) else "0";
    icmp_ln136_fu_212_p2 <= "1" when (i6_0_reg_129 = ap_const_lv4_C) else "0";
    icmp_ln137_fu_266_p2 <= "1" when (j6_0_reg_140 = ap_const_lv7_40) else "0";
    icmp_ln138_fu_292_p2 <= "1" when (k2_0_reg_151 = ap_const_lv4_C) else "0";
    j6_fu_272_p2 <= std_logic_vector(unsigned(j6_0_reg_140) + unsigned(ap_const_lv7_1));
    k2_fu_298_p2 <= std_logic_vector(unsigned(k2_0_reg_151) + unsigned(ap_const_lv4_1));
    r_V_fu_362_p0 <= v76_V_fu_340_p3;
    r_V_fu_362_p1 <= v77_V_fu_347_p3;
    r_V_fu_362_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_362_p0) * signed(r_V_fu_362_p1))), 72));
        sext_ln139_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln139_fu_308_p2),64));

    sub_ln139_fu_248_p2 <= std_logic_vector(unsigned(zext_ln139_fu_232_p1) - unsigned(zext_ln139_1_fu_244_p1));
    tmp_67_fu_174_p3 <= (v69_0_reg_107 & ap_const_lv6_0);
    tmp_68_fu_224_p3 <= (i6_0_reg_129 & ap_const_lv4_0);
    tmp_69_fu_236_p3 <= (i6_0_reg_129 & ap_const_lv2_0);
    tmp_70_fu_254_p3 <= (i6_0_reg_129 & ap_const_lv6_0);
    tmp_71_fu_318_p3 <= (k2_0_reg_151 & ap_const_lv6_0);
    v65_V_address0 <= sext_ln139_fu_313_p1(8 - 1 downto 0);

    v65_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v65_V_ce0 <= ap_const_logic_1;
        else 
            v65_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v66_V_address0 <= zext_ln140_1_fu_335_p1(10 - 1 downto 0);

    v66_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v66_V_ce0 <= ap_const_logic_1;
        else 
            v66_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v67_V_address0_assign_proc : process(ap_CS_fsm_state3, v67_V_addr_1_reg_435, ap_CS_fsm_state7, ap_CS_fsm_state9, zext_ln203_17_fu_207_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            v67_V_address0 <= v67_V_addr_1_reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v67_V_address0 <= zext_ln203_17_fu_207_p1(10 - 1 downto 0);
        else 
            v67_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v67_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            v67_V_ce0 <= ap_const_logic_1;
        else 
            v67_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v67_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, v81_V_fu_378_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v67_V_d0 <= v81_V_fu_378_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v67_V_d0 <= ap_const_lv24_0;
        else 
            v67_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v67_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln132_fu_186_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln132_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            v67_V_we0 <= ap_const_logic_1;
        else 
            v67_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v69_fu_168_p2 <= std_logic_vector(unsigned(v69_0_reg_107) + unsigned(ap_const_lv4_1));
    v70_fu_192_p2 <= std_logic_vector(unsigned(v70_0_reg_118) + unsigned(ap_const_lv7_1));
    v76_V_fu_340_p3 <= (v74_V_reg_458 & ap_const_lv16_0);
    v77_V_fu_347_p3 <= (v75_V_reg_463 & ap_const_lv16_0);
    v81_V_fu_378_p2 <= std_logic_vector(unsigned(v79_V_reg_468) + unsigned(v80_V_reg_473));
    zext_ln132_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_174_p3),11));
    zext_ln137_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_254_p3),11));
    zext_ln139_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_236_p3),9));
    zext_ln139_2_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k2_0_reg_151),9));
    zext_ln139_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_224_p3),9));
    zext_ln140_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln140_fu_330_p2),64));
    zext_ln140_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_318_p3),11));
    zext_ln144_1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_282_p2),64));
    zext_ln144_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_140),11));
    zext_ln203_17_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_fu_202_p2),64));
    zext_ln203_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v70_0_reg_118),11));
end behav;
