-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Bert_layer_Layer_norm_Pipeline_l_j13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln287 : IN STD_LOGIC_VECTOR (13 downto 0);
    v135_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v135_ce0 : OUT STD_LOGIC;
    v135_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v138_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v138_ce0 : OUT STD_LOGIC;
    v138_we0 : OUT STD_LOGIC;
    v138_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v255_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v255_ce0 : OUT STD_LOGIC;
    v255_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v166 : IN STD_LOGIC_VECTOR (31 downto 0);
    v171 : IN STD_LOGIC_VECTOR (31 downto 0);
    v256_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v256_ce0 : OUT STD_LOGIC;
    v256_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_399_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_399_p_ce : OUT STD_LOGIC;
    grp_fu_415_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_415_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_415_p_ce : OUT STD_LOGIC;
    grp_fu_403_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_403_p_ce : OUT STD_LOGIC;
    grp_fu_407_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_407_p_ce : OUT STD_LOGIC;
    grp_fu_174_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_174_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_174_p_ce : OUT STD_LOGIC );
end;


architecture behav of Bert_layer_Layer_norm_Pipeline_l_j13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_FF0 : STD_LOGIC_VECTOR (11 downto 0) := "111111110000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln285_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j13_1_reg_468 : STD_LOGIC_VECTOR (9 downto 0);
    signal j13_1_reg_468_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j13_1_reg_468_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j13_1_reg_468_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal j13_1_reg_468_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln287_1_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_reg_477_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v165_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal j13_cast_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal j13_cast_reg_492_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal v255_load_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal v167_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal v164_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v168_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal v172_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal v256_load_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal v173_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_reg_542_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_reg_542_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_reg_542_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal v174_reg_542_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln600_fu_257_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln600_reg_558 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln606_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_563_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln606_reg_563_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_2_fu_287_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_570 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_570_pp0_iter35_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal sh_amt_fu_318_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_575 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln617_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln617_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln618_fu_332_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln618_reg_587 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln616_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln616_reg_593_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln616_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln620_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln620_reg_603 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln617_fu_393_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln617_reg_608 : STD_LOGIC_VECTOR (23 downto 0);
    signal v175_V_fu_444_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal v175_V_reg_613 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j13_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln285_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j13_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln287_fu_199_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln287_fu_203_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ireg_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln590_fu_235_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_42_fu_270_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln604_fu_277_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_281_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln501_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_294_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln616_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln616_fu_306_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln616_fu_312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln617_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln617_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln616cast_fu_366_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln638_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln639_fu_370_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln606_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln617_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln638_fu_375_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln621_fu_400_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln621_fu_403_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln768_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln621_fu_408_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln623_fu_423_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln620_fu_431_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln616_fu_438_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Bert_layer_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Bert_layer_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Bert_layer_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Bert_layer_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter36_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j13_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln285_fu_187_p2 = ap_const_lv1_0))) then 
                    j13_fu_86 <= add_ln285_fu_193_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j13_fu_86 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_563 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln616_reg_593 <= and_ln616_fu_347_p2;
                icmp_ln617_reg_582 <= icmp_ln617_fu_326_p2;
                man_V_2_reg_570 <= man_V_2_fu_287_p3;
                sh_amt_reg_575 <= sh_amt_fu_318_p3;
                trunc_ln618_reg_587 <= trunc_ln618_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln616_reg_593_pp0_iter35_reg <= and_ln616_reg_593;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                exp_tmp_reg_553 <= ireg_fu_231_p1(62 downto 52);
                icmp_ln606_reg_563 <= icmp_ln606_fu_261_p2;
                icmp_ln606_reg_563_pp0_iter34_reg <= icmp_ln606_reg_563;
                icmp_ln606_reg_563_pp0_iter35_reg <= icmp_ln606_reg_563_pp0_iter34_reg;
                j13_1_reg_468_pp0_iter2_reg <= j13_1_reg_468_pp0_iter1_reg;
                j13_1_reg_468_pp0_iter3_reg <= j13_1_reg_468_pp0_iter2_reg;
                j13_1_reg_468_pp0_iter4_reg <= j13_1_reg_468_pp0_iter3_reg;
                    j13_cast_reg_492(9 downto 0) <= j13_cast_fu_219_p1(9 downto 0);
                    j13_cast_reg_492_pp0_iter10_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter9_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter11_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter10_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter12_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter11_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter13_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter12_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter14_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter13_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter15_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter14_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter16_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter15_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter17_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter16_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter18_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter17_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter19_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter18_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter20_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter19_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter21_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter20_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter22_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter21_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter23_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter22_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter24_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter23_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter6_reg(9 downto 0) <= j13_cast_reg_492(9 downto 0);
                    j13_cast_reg_492_pp0_iter7_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter6_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter8_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter7_reg(9 downto 0);
                    j13_cast_reg_492_pp0_iter9_reg(9 downto 0) <= j13_cast_reg_492_pp0_iter8_reg(9 downto 0);
                man_V_2_reg_570_pp0_iter35_reg <= man_V_2_reg_570;
                p_Result_s_reg_548 <= ireg_fu_231_p1(63 downto 63);
                trunc_ln600_reg_558 <= trunc_ln600_fu_257_p1;
                v167_reg_507 <= grp_fu_399_p_dout0;
                v168_reg_517 <= grp_fu_403_p_dout0;
                v172_reg_527 <= grp_fu_407_p_dout0;
                v174_reg_542 <= grp_fu_415_p_dout0;
                v174_reg_542_pp0_iter32_reg <= v174_reg_542;
                v174_reg_542_pp0_iter33_reg <= v174_reg_542_pp0_iter32_reg;
                v174_reg_542_pp0_iter34_reg <= v174_reg_542_pp0_iter33_reg;
                v174_reg_542_pp0_iter35_reg <= v174_reg_542_pp0_iter34_reg;
                v175_V_reg_613 <= v175_V_fu_444_p3;
                v255_load_reg_502 <= v255_q0;
                v256_load_reg_532 <= v256_q0;
                    zext_ln287_1_reg_477_pp0_iter10_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter9_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter11_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter10_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter12_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter11_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter13_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter12_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter14_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter13_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter15_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter14_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter16_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter15_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter17_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter16_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter18_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter17_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter19_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter18_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter20_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter19_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter21_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter20_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter22_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter21_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter23_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter22_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter24_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter23_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter25_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter24_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter26_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter25_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter27_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter26_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter28_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter27_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter29_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter28_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter2_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter1_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter30_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter29_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter31_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter30_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter32_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter31_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter33_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter32_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter34_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter33_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter35_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter34_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter36_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter35_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter3_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter2_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter4_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter3_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter5_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter4_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter6_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter5_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter7_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter6_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter8_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter7_reg(13 downto 0);
                    zext_ln287_1_reg_477_pp0_iter9_reg(13 downto 0) <= zext_ln287_1_reg_477_pp0_iter8_reg(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                j13_1_reg_468 <= ap_sig_allocacmp_j13_1;
                j13_1_reg_468_pp0_iter1_reg <= j13_1_reg_468;
                v165_reg_487 <= v135_q0;
                    zext_ln287_1_reg_477_pp0_iter1_reg(13 downto 0) <= zext_ln287_1_reg_477(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_563_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln616_reg_593) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln620_reg_603 <= icmp_ln620_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_563_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln616_reg_593) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln617_reg_608 <= select_ln617_fu_393_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln606_reg_563_pp0_iter34_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln616_reg_598 <= sext_ln616_fu_353_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln285_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln287_1_reg_477(13 downto 0) <= zext_ln287_1_fu_209_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln287_1_reg_477(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter2_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter3_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter4_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter5_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter6_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter7_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter8_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter9_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter10_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter11_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter12_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter13_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter14_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter15_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter16_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter17_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter18_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter19_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter20_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter21_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter22_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter23_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter24_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter25_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter26_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter27_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter28_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter29_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter30_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter31_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter32_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter33_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter34_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter35_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln287_1_reg_477_pp0_iter36_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    j13_cast_reg_492(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter20_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter21_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter22_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter23_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    j13_cast_reg_492_pp0_iter24_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_294_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln501_fu_267_p1));
    add_ln285_fu_193_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j13_1) + unsigned(ap_const_lv10_1));
    add_ln287_fu_203_p2 <= std_logic_vector(unsigned(sub_ln287) + unsigned(zext_ln287_fu_199_p1));
    add_ln616_fu_306_p2 <= std_logic_vector(unsigned(F2_fu_294_p2) + unsigned(ap_const_lv12_FF0));
    and_ln616_fu_347_p2 <= (xor_ln617_fu_341_p2 and icmp_ln616_fu_300_p2);
    and_ln617_fu_388_p2 <= (xor_ln606_fu_383_p2 and icmp_ln617_reg_582);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln285_fu_187_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln285_fu_187_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter36_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter36_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j13_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j13_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j13_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j13_1 <= j13_fu_86;
        end if; 
    end process;

    ashr_ln621_fu_403_p2 <= std_logic_vector(shift_right(signed(man_V_2_reg_570_pp0_iter35_reg),to_integer(unsigned('0' & zext_ln621_fu_400_p1(31-1 downto 0)))));
    bitcast_ln768_fu_412_p1 <= v174_reg_542_pp0_iter35_reg;
    grp_fu_174_p_ce <= ap_const_logic_1;
    grp_fu_174_p_din0 <= v174_reg_542;
    grp_fu_399_p_ce <= ap_const_logic_1;
    grp_fu_399_p_din0 <= v165_reg_487;
    grp_fu_399_p_din1 <= v166;
    grp_fu_399_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_403_p_ce <= ap_const_logic_1;
    grp_fu_403_p_din0 <= v164_fu_223_p1;
    grp_fu_403_p_din1 <= v167_reg_507;
    grp_fu_407_p_ce <= ap_const_logic_1;
    grp_fu_407_p_din0 <= v168_reg_517;
    grp_fu_407_p_din1 <= v171;
    grp_fu_415_p_ce <= ap_const_logic_1;
    grp_fu_415_p_din0 <= v172_reg_527;
    grp_fu_415_p_din1 <= v173_fu_227_p1;
    grp_fu_415_p_opcode <= ap_const_lv2_0;
    icmp_ln285_fu_187_p2 <= "1" when (ap_sig_allocacmp_j13_1 = ap_const_lv10_300) else "0";
    icmp_ln606_fu_261_p2 <= "1" when (trunc_ln590_fu_235_p1 = ap_const_lv63_0) else "0";
    icmp_ln616_fu_300_p2 <= "1" when (signed(F2_fu_294_p2) > signed(ap_const_lv12_10)) else "0";
    icmp_ln617_fu_326_p2 <= "1" when (F2_fu_294_p2 = ap_const_lv12_10) else "0";
    icmp_ln620_fu_356_p2 <= "1" when (unsigned(sh_amt_reg_575) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln638_fu_361_p2 <= "1" when (unsigned(sh_amt_reg_575) < unsigned(ap_const_lv12_18)) else "0";
    ireg_fu_231_p1 <= grp_fu_174_p_dout0;
    j13_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j13_1_reg_468_pp0_iter4_reg),64));
    man_V_1_fu_281_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln604_fu_277_p1));
    man_V_2_fu_287_p3 <= 
        man_V_1_fu_281_p2 when (p_Result_s_reg_548(0) = '1') else 
        zext_ln604_fu_277_p1;
    or_ln617_fu_336_p2 <= (icmp_ln617_fu_326_p2 or icmp_ln606_reg_563);
    p_Result_42_fu_270_p3 <= (ap_const_lv1_1 & trunc_ln600_reg_558);
    select_ln616_fu_438_p3 <= 
        select_ln620_fu_431_p3 when (and_ln616_reg_593_pp0_iter35_reg(0) = '1') else 
        select_ln617_reg_608;
    select_ln617_fu_393_p3 <= 
        trunc_ln618_reg_587 when (and_ln617_fu_388_p2(0) = '1') else 
        select_ln638_fu_375_p3;
    select_ln620_fu_431_p3 <= 
        trunc_ln621_fu_408_p1 when (icmp_ln620_reg_603(0) = '1') else 
        select_ln623_fu_423_p3;
    select_ln623_fu_423_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_fu_415_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln638_fu_375_p3 <= 
        shl_ln639_fu_370_p2 when (icmp_ln638_fu_361_p2(0) = '1') else 
        ap_const_lv24_0;
        sext_ln616_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_575),32));

    sext_ln616cast_fu_366_p1 <= sext_ln616_fu_353_p1(24 - 1 downto 0);
    sh_amt_fu_318_p3 <= 
        add_ln616_fu_306_p2 when (icmp_ln616_fu_300_p2(0) = '1') else 
        sub_ln616_fu_312_p2;
    shl_ln639_fu_370_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln618_reg_587),to_integer(unsigned('0' & sext_ln616cast_fu_366_p1(24-1 downto 0)))));
    sub_ln616_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv12_10) - unsigned(F2_fu_294_p2));
    tmp_fu_415_p3 <= bitcast_ln768_fu_412_p1(31 downto 31);
    trunc_ln590_fu_235_p1 <= ireg_fu_231_p1(63 - 1 downto 0);
    trunc_ln600_fu_257_p1 <= ireg_fu_231_p1(52 - 1 downto 0);
    trunc_ln618_fu_332_p1 <= man_V_2_fu_287_p3(24 - 1 downto 0);
    trunc_ln621_fu_408_p1 <= ashr_ln621_fu_403_p2(24 - 1 downto 0);
    v135_address0 <= zext_ln287_1_fu_209_p1(14 - 1 downto 0);

    v135_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v135_ce0 <= ap_const_logic_1;
        else 
            v135_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v138_address0 <= zext_ln287_1_reg_477_pp0_iter36_reg(14 - 1 downto 0);

    v138_ce0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v138_ce0 <= ap_const_logic_1;
        else 
            v138_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v138_d0 <= v175_V_reg_613;

    v138_we0_assign_proc : process(ap_enable_reg_pp0_iter37, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then 
            v138_we0 <= ap_const_logic_1;
        else 
            v138_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v164_fu_223_p1 <= v255_load_reg_502;
    v173_fu_227_p1 <= v256_load_reg_532;
    v175_V_fu_444_p3 <= 
        ap_const_lv24_0 when (icmp_ln606_reg_563_pp0_iter35_reg(0) = '1') else 
        select_ln616_fu_438_p3;
    v255_address0 <= j13_cast_fu_219_p1(10 - 1 downto 0);

    v255_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v255_ce0 <= ap_const_logic_1;
        else 
            v255_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v256_address0 <= j13_cast_reg_492_pp0_iter24_reg(10 - 1 downto 0);

    v256_ce0_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            v256_ce0 <= ap_const_logic_1;
        else 
            v256_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln606_fu_383_p2 <= (icmp_ln606_reg_563_pp0_iter34_reg xor ap_const_lv1_1);
    xor_ln617_fu_341_p2 <= (or_ln617_fu_336_p2 xor ap_const_lv1_1);
    zext_ln287_1_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln287_fu_203_p2),64));
    zext_ln287_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j13_1),14));
    zext_ln501_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_553),12));
    zext_ln604_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_42_fu_270_p3),54));
    zext_ln621_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln616_reg_598),54));
end behav;
