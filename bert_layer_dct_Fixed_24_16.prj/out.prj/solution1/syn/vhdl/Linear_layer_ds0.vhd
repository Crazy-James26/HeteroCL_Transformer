-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Linear_layer_ds0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v101_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v101_V_ce0 : OUT STD_LOGIC;
    v101_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v102_V_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    v102_V_ce0 : OUT STD_LOGIC;
    v102_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v103_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v103_V_ce0 : OUT STD_LOGIC;
    v103_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v104_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v104_V_ce0 : OUT STD_LOGIC;
    v104_V_we0 : OUT STD_LOGIC;
    v104_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v104_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Linear_layer_ds0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v106_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v106_reg_541 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln203_fu_247_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln203_reg_546 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln195_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v107_fu_259_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i9_fu_285_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i9_reg_562 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln203_1_fu_315_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln203_1_reg_567 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln200_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j9_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j9_reg_576 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln204_fu_361_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln204_reg_581 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln201_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v104_V_addr_1_reg_586 : STD_LOGIC_VECTOR (13 downto 0);
    signal k3_fu_383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k3_reg_594 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln203_2_fu_397_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_2_reg_599 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln202_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v111_V_reg_614 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v112_V_reg_619 : STD_LOGIC_VECTOR (23 downto 0);
    signal v116_V_reg_624 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal v117_V_reg_629 : STD_LOGIC_VECTOR (23 downto 0);
    signal i10_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i10_reg_637 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sub_ln218_fu_495_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln218_reg_642 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln215_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j10_fu_507_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j10_reg_650 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal v104_V_addr_2_reg_655 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln216_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v123_V_fu_532_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal v123_V_reg_665 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal v106_0_reg_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln196_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v107_0_reg_145 : STD_LOGIC_VECTOR (9 downto 0);
    signal i9_0_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal j9_0_reg_167 : STD_LOGIC_VECTOR (9 downto 0);
    signal k3_0_reg_178 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i10_0_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal j10_0_reg_200 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln203_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln208_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln204_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_1_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln218_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v118_V_fu_454_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_54_fu_223_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_55_fu_235_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_fu_231_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_11_fu_243_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_14_fu_265_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_fu_269_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_56_fu_291_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_57_fu_303_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_12_fu_299_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_13_fu_311_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_60_fu_337_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_61_fu_349_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln204_1_fu_345_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln204_2_fu_357_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln204_fu_333_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln208_fu_367_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_16_fu_393_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_15_fu_389_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln204_fu_402_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal v113_V_fu_416_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal v114_V_fu_423_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_438_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_438_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_438_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal tmp_58_fu_471_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_59_fu_483_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln218_fu_479_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln218_1_fu_491_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln218_2_fu_518_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln218_fu_522_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i10_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln200_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i10_0_reg_189 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln216_fu_501_p2 = ap_const_lv1_1))) then 
                i10_0_reg_189 <= i10_reg_637;
            end if; 
        end if;
    end process;

    i9_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i9_0_reg_156 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln201_fu_321_p2 = ap_const_lv1_1))) then 
                i9_0_reg_156 <= i9_reg_562;
            end if; 
        end if;
    end process;

    j10_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j10_0_reg_200 <= j10_reg_650;
            elsif (((icmp_ln215_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j10_0_reg_200 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j9_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln202_fu_377_p2 = ap_const_lv1_1))) then 
                j9_0_reg_167 <= j9_reg_576;
            elsif (((icmp_ln200_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j9_0_reg_167 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k3_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k3_0_reg_178 <= k3_reg_594;
            elsif (((icmp_ln201_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k3_0_reg_178 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    v106_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln196_fu_253_p2 = ap_const_lv1_1))) then 
                v106_0_reg_134 <= v106_reg_541;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v106_0_reg_134 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v107_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v107_0_reg_145 <= ap_const_lv10_0;
            elsif (((icmp_ln196_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v107_0_reg_145 <= v107_fu_259_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln202_fu_377_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln203_2_reg_599 <= add_ln203_2_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i10_reg_637 <= i10_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i9_reg_562 <= i9_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j10_reg_650 <= j10_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j9_reg_576 <= j9_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k3_reg_594 <= k3_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln200_fu_279_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln203_1_reg_567(14 downto 8) <= sub_ln203_1_fu_315_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln203_reg_546(14 downto 8) <= sub_ln203_fu_247_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln201_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sub_ln204_reg_581(20 downto 8) <= sub_ln204_fu_361_p2(20 downto 8);
                v104_V_addr_1_reg_586 <= sext_ln208_fu_372_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln215_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    sub_ln218_reg_642(14 downto 8) <= sub_ln218_fu_495_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                v104_V_addr_2_reg_655 <= sext_ln218_fu_527_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v106_reg_541 <= v106_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v111_V_reg_614 <= v101_V_q0;
                v112_V_reg_619 <= v102_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                v116_V_reg_624 <= v104_V_q0;
                v117_V_reg_629 <= r_V_fu_438_p2(71 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                v123_V_reg_665 <= v123_V_fu_532_p2;
            end if;
        end if;
    end process;
    sub_ln203_reg_546(7 downto 0) <= "00000000";
    sub_ln203_1_reg_567(7 downto 0) <= "00000000";
    sub_ln204_reg_581(7 downto 0) <= "00000000";
    sub_ln218_reg_642(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln195_fu_211_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln200_fu_279_p2, ap_CS_fsm_state5, icmp_ln201_fu_321_p2, ap_CS_fsm_state6, icmp_ln202_fu_377_p2, ap_CS_fsm_state12, icmp_ln215_fu_459_p2, ap_CS_fsm_state13, icmp_ln216_fu_501_p2, icmp_ln196_fu_253_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln195_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln196_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln200_fu_279_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln201_fu_321_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln202_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln215_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln216_fu_501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln203_2_fu_397_p2 <= std_logic_vector(unsigned(zext_ln203_16_fu_393_p1) + unsigned(sub_ln203_1_reg_567));
    add_ln203_fu_269_p2 <= std_logic_vector(unsigned(sub_ln203_reg_546) + unsigned(zext_ln203_14_fu_265_p1));
    add_ln204_fu_402_p2 <= std_logic_vector(unsigned(zext_ln203_15_fu_389_p1) + unsigned(sub_ln204_reg_581));
    add_ln208_fu_367_p2 <= std_logic_vector(unsigned(sub_ln203_1_reg_567) + unsigned(zext_ln204_fu_333_p1));
    add_ln218_fu_522_p2 <= std_logic_vector(unsigned(sub_ln218_reg_642) + unsigned(zext_ln218_2_fu_518_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, icmp_ln215_fu_459_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln215_fu_459_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln215_fu_459_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln215_fu_459_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i10_fu_465_p2 <= std_logic_vector(unsigned(i10_0_reg_189) + unsigned(ap_const_lv4_1));
    i9_fu_285_p2 <= std_logic_vector(unsigned(i9_0_reg_156) + unsigned(ap_const_lv4_1));
    icmp_ln195_fu_211_p2 <= "1" when (v106_0_reg_134 = ap_const_lv4_C) else "0";
    icmp_ln196_fu_253_p2 <= "1" when (v107_0_reg_145 = ap_const_lv10_300) else "0";
    icmp_ln200_fu_279_p2 <= "1" when (i9_0_reg_156 = ap_const_lv4_C) else "0";
    icmp_ln201_fu_321_p2 <= "1" when (j9_0_reg_167 = ap_const_lv10_300) else "0";
    icmp_ln202_fu_377_p2 <= "1" when (k3_0_reg_178 = ap_const_lv10_300) else "0";
    icmp_ln215_fu_459_p2 <= "1" when (i10_0_reg_189 = ap_const_lv4_C) else "0";
    icmp_ln216_fu_501_p2 <= "1" when (j10_0_reg_200 = ap_const_lv10_300) else "0";
    j10_fu_507_p2 <= std_logic_vector(unsigned(j10_0_reg_200) + unsigned(ap_const_lv10_1));
    j9_fu_327_p2 <= std_logic_vector(unsigned(j9_0_reg_167) + unsigned(ap_const_lv10_1));
    k3_fu_383_p2 <= std_logic_vector(unsigned(k3_0_reg_178) + unsigned(ap_const_lv10_1));
    r_V_fu_438_p0 <= v113_V_fu_416_p3;
    r_V_fu_438_p1 <= v114_V_fu_423_p3;
    r_V_fu_438_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_438_p0) * signed(r_V_fu_438_p1))), 72));
        sext_ln203_1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_2_reg_599),64));

        sext_ln203_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_269_p2),64));

        sext_ln204_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln204_fu_402_p2),64));

        sext_ln208_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln208_fu_367_p2),64));

        sext_ln218_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln218_fu_522_p2),64));

    sub_ln203_1_fu_315_p2 <= std_logic_vector(unsigned(zext_ln203_12_fu_299_p1) - unsigned(zext_ln203_13_fu_311_p1));
    sub_ln203_fu_247_p2 <= std_logic_vector(unsigned(zext_ln203_fu_231_p1) - unsigned(zext_ln203_11_fu_243_p1));
    sub_ln204_fu_361_p2 <= std_logic_vector(unsigned(zext_ln204_1_fu_345_p1) - unsigned(zext_ln204_2_fu_357_p1));
    sub_ln218_fu_495_p2 <= std_logic_vector(unsigned(zext_ln218_fu_479_p1) - unsigned(zext_ln218_1_fu_491_p1));
    tmp_54_fu_223_p3 <= (v106_0_reg_134 & ap_const_lv10_0);
    tmp_55_fu_235_p3 <= (v106_0_reg_134 & ap_const_lv8_0);
    tmp_56_fu_291_p3 <= (i9_0_reg_156 & ap_const_lv10_0);
    tmp_57_fu_303_p3 <= (i9_0_reg_156 & ap_const_lv8_0);
    tmp_58_fu_471_p3 <= (i10_0_reg_189 & ap_const_lv10_0);
    tmp_59_fu_483_p3 <= (i10_0_reg_189 & ap_const_lv8_0);
    tmp_60_fu_337_p3 <= (j9_0_reg_167 & ap_const_lv10_0);
    tmp_61_fu_349_p3 <= (j9_0_reg_167 & ap_const_lv8_0);
    v101_V_address0 <= sext_ln203_1_fu_412_p1(14 - 1 downto 0);

    v101_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v101_V_ce0 <= ap_const_logic_1;
        else 
            v101_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v102_V_address0 <= sext_ln204_fu_407_p1(20 - 1 downto 0);

    v102_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            v102_V_ce0 <= ap_const_logic_1;
        else 
            v102_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v103_V_address0 <= zext_ln217_fu_513_p1(10 - 1 downto 0);

    v103_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v103_V_ce0 <= ap_const_logic_1;
        else 
            v103_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v104_V_address0_assign_proc : process(ap_CS_fsm_state3, v104_V_addr_1_reg_586, ap_CS_fsm_state9, ap_CS_fsm_state13, v104_V_addr_2_reg_655, ap_CS_fsm_state11, ap_CS_fsm_state15, sext_ln203_fu_274_p1, sext_ln218_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v104_V_address0 <= v104_V_addr_2_reg_655;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v104_V_address0 <= sext_ln218_fu_527_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v104_V_address0 <= v104_V_addr_1_reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v104_V_address0 <= sext_ln203_fu_274_p1(14 - 1 downto 0);
        else 
            v104_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    v104_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v104_V_ce0 <= ap_const_logic_1;
        else 
            v104_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v104_V_d0_assign_proc : process(ap_CS_fsm_state3, v123_V_reg_665, ap_CS_fsm_state11, ap_CS_fsm_state15, v118_V_fu_454_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v104_V_d0 <= v123_V_reg_665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v104_V_d0 <= v118_V_fu_454_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v104_V_d0 <= ap_const_lv24_0;
        else 
            v104_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v104_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln196_fu_253_p2, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln196_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            v104_V_we0 <= ap_const_logic_1;
        else 
            v104_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v106_fu_217_p2 <= std_logic_vector(unsigned(v106_0_reg_134) + unsigned(ap_const_lv4_1));
    v107_fu_259_p2 <= std_logic_vector(unsigned(v107_0_reg_145) + unsigned(ap_const_lv10_1));
    v113_V_fu_416_p3 <= (v111_V_reg_614 & ap_const_lv16_0);
    v114_V_fu_423_p3 <= (v112_V_reg_619 & ap_const_lv16_0);
    v118_V_fu_454_p2 <= std_logic_vector(unsigned(v116_V_reg_624) + unsigned(v117_V_reg_629));
    v123_V_fu_532_p2 <= std_logic_vector(unsigned(v104_V_q0) + unsigned(v103_V_q0));
    zext_ln203_11_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_235_p3),15));
    zext_ln203_12_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_291_p3),15));
    zext_ln203_13_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_303_p3),15));
    zext_ln203_14_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v107_0_reg_145),15));
    zext_ln203_15_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_reg_178),21));
    zext_ln203_16_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_reg_178),15));
    zext_ln203_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_223_p3),15));
    zext_ln204_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_337_p3),21));
    zext_ln204_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_349_p3),21));
    zext_ln204_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j9_0_reg_167),15));
    zext_ln217_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j10_0_reg_200),64));
    zext_ln218_1_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_483_p3),15));
    zext_ln218_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j10_0_reg_200),15));
    zext_ln218_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_471_p3),15));
end behav;
