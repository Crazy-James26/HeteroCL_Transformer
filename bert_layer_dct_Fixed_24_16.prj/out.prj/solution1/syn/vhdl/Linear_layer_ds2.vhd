-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Linear_layer_ds2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v219_V_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    v219_V_ce0 : OUT STD_LOGIC;
    v219_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v220_V_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    v220_V_ce0 : OUT STD_LOGIC;
    v220_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v221_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v221_V_ce0 : OUT STD_LOGIC;
    v221_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    v222_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    v222_V_ce0 : OUT STD_LOGIC;
    v222_V_we0 : OUT STD_LOGIC;
    v222_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    v222_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of Linear_layer_ds2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal v224_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v224_reg_573 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln203_fu_257_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln203_reg_578 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln377_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v225_fu_269_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i18_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i18_reg_594 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln385_fu_329_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln385_reg_599 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln382_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln390_fu_347_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln390_reg_604 : STD_LOGIC_VECTOR (14 downto 0);
    signal j17_fu_359_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j17_reg_612 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln386_fu_393_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln386_reg_617 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln383_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v222_V_addr_1_reg_622 : STD_LOGIC_VECTOR (13 downto 0);
    signal k5_fu_415_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal k5_reg_630 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln385_fu_429_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln385_reg_635 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln384_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal v229_V_reg_650 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal v230_V_reg_655 : STD_LOGIC_VECTOR (23 downto 0);
    signal v234_V_reg_660 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal v235_V_reg_665 : STD_LOGIC_VECTOR (23 downto 0);
    signal i19_fu_497_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i19_reg_673 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sub_ln400_fu_527_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln400_reg_678 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln397_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j18_fu_539_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j18_reg_686 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal v222_V_addr_2_reg_691 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln398_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v241_V_fu_564_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal v241_V_reg_701 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal v224_0_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln378_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v225_0_reg_155 : STD_LOGIC_VECTOR (9 downto 0);
    signal i18_0_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal j17_0_reg_177 : STD_LOGIC_VECTOR (9 downto 0);
    signal k5_0_reg_188 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i19_0_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal j18_0_reg_210 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln203_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln390_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln386_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln385_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln400_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln399_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v236_V_fu_486_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_34_fu_233_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_245_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln203_fu_241_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_7_fu_253_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_8_fu_275_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_fu_279_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_fu_301_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_313_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln385_fu_309_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln385_2_fu_325_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_fu_335_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln385_1_fu_321_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln390_fu_343_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_41_fu_369_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_42_fu_381_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln386_1_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln386_2_fu_389_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln386_fu_365_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln390_fu_399_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln385_4_fu_425_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln385_3_fu_421_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln386_fu_434_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal v231_V_fu_448_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal v232_V_fu_455_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_470_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_470_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_fu_470_p2 : STD_LOGIC_VECTOR (71 downto 0);
    signal tmp_39_fu_503_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_fu_515_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln400_fu_511_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln400_1_fu_523_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln400_2_fu_550_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln400_fu_554_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i18_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln377_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i18_0_reg_166 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln383_fu_353_p2 = ap_const_lv1_1))) then 
                i18_0_reg_166 <= i18_reg_594;
            end if; 
        end if;
    end process;

    i19_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln382_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i19_0_reg_199 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln398_fu_533_p2 = ap_const_lv1_1))) then 
                i19_0_reg_199 <= i19_reg_673;
            end if; 
        end if;
    end process;

    j17_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln384_fu_409_p2 = ap_const_lv1_1))) then 
                j17_0_reg_177 <= j17_reg_612;
            elsif (((icmp_ln382_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j17_0_reg_177 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j18_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j18_0_reg_210 <= j18_reg_686;
            elsif (((icmp_ln397_fu_491_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j18_0_reg_210 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    k5_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                k5_0_reg_188 <= k5_reg_630;
            elsif (((icmp_ln383_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k5_0_reg_188 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    v224_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln378_fu_263_p2 = ap_const_lv1_1))) then 
                v224_0_reg_144 <= v224_reg_573;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v224_0_reg_144 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v225_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln377_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                v225_0_reg_155 <= ap_const_lv10_0;
            elsif (((icmp_ln378_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v225_0_reg_155 <= v225_fu_269_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln384_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln385_reg_635 <= add_ln385_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i18_reg_594 <= i18_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i19_reg_673 <= i19_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j17_reg_612 <= j17_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j18_reg_686 <= j18_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k5_reg_630 <= k5_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln377_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln203_reg_578(14 downto 8) <= sub_ln203_fu_257_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln382_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln385_reg_599(16 downto 10) <= sub_ln385_fu_329_p2(16 downto 10);
                    sub_ln390_reg_604(14 downto 8) <= sub_ln390_fu_347_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln383_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sub_ln386_reg_617(22 downto 10) <= sub_ln386_fu_393_p2(22 downto 10);
                v222_V_addr_1_reg_622 <= sext_ln390_fu_404_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_fu_491_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    sub_ln400_reg_678(14 downto 8) <= sub_ln400_fu_527_p2(14 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln398_fu_533_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                v222_V_addr_2_reg_691 <= sext_ln400_fu_559_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                v224_reg_573 <= v224_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                v229_V_reg_650 <= v219_V_q0;
                v230_V_reg_655 <= v220_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                v234_V_reg_660 <= v222_V_q0;
                v235_V_reg_665 <= r_V_fu_470_p2(71 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                v241_V_reg_701 <= v241_V_fu_564_p2;
            end if;
        end if;
    end process;
    sub_ln203_reg_578(7 downto 0) <= "00000000";
    sub_ln385_reg_599(9 downto 0) <= "0000000000";
    sub_ln390_reg_604(7 downto 0) <= "00000000";
    sub_ln386_reg_617(9 downto 0) <= "0000000000";
    sub_ln400_reg_678(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln377_fu_221_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln382_fu_289_p2, ap_CS_fsm_state5, icmp_ln383_fu_353_p2, ap_CS_fsm_state6, icmp_ln384_fu_409_p2, ap_CS_fsm_state12, icmp_ln397_fu_491_p2, ap_CS_fsm_state13, icmp_ln398_fu_533_p2, icmp_ln378_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln377_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln378_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln382_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln383_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln384_fu_409_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln397_fu_491_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln398_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln203_fu_279_p2 <= std_logic_vector(unsigned(sub_ln203_reg_578) + unsigned(zext_ln203_8_fu_275_p1));
    add_ln385_fu_429_p2 <= std_logic_vector(unsigned(zext_ln385_4_fu_425_p1) + unsigned(sub_ln385_reg_599));
    add_ln386_fu_434_p2 <= std_logic_vector(unsigned(zext_ln385_3_fu_421_p1) + unsigned(sub_ln386_reg_617));
    add_ln390_fu_399_p2 <= std_logic_vector(unsigned(sub_ln390_reg_604) + unsigned(zext_ln386_fu_365_p1));
    add_ln400_fu_554_p2 <= std_logic_vector(unsigned(sub_ln400_reg_678) + unsigned(zext_ln400_2_fu_550_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, icmp_ln397_fu_491_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln397_fu_491_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln397_fu_491_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln397_fu_491_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i18_fu_295_p2 <= std_logic_vector(unsigned(i18_0_reg_166) + unsigned(ap_const_lv4_1));
    i19_fu_497_p2 <= std_logic_vector(unsigned(i19_0_reg_199) + unsigned(ap_const_lv4_1));
    icmp_ln377_fu_221_p2 <= "1" when (v224_0_reg_144 = ap_const_lv4_C) else "0";
    icmp_ln378_fu_263_p2 <= "1" when (v225_0_reg_155 = ap_const_lv10_300) else "0";
    icmp_ln382_fu_289_p2 <= "1" when (i18_0_reg_166 = ap_const_lv4_C) else "0";
    icmp_ln383_fu_353_p2 <= "1" when (j17_0_reg_177 = ap_const_lv10_300) else "0";
    icmp_ln384_fu_409_p2 <= "1" when (k5_0_reg_188 = ap_const_lv12_C00) else "0";
    icmp_ln397_fu_491_p2 <= "1" when (i19_0_reg_199 = ap_const_lv4_C) else "0";
    icmp_ln398_fu_533_p2 <= "1" when (j18_0_reg_210 = ap_const_lv10_300) else "0";
    j17_fu_359_p2 <= std_logic_vector(unsigned(j17_0_reg_177) + unsigned(ap_const_lv10_1));
    j18_fu_539_p2 <= std_logic_vector(unsigned(j18_0_reg_210) + unsigned(ap_const_lv10_1));
    k5_fu_415_p2 <= std_logic_vector(unsigned(k5_0_reg_188) + unsigned(ap_const_lv12_1));
    r_V_fu_470_p0 <= v231_V_fu_448_p3;
    r_V_fu_470_p1 <= v232_V_fu_455_p3;
    r_V_fu_470_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_470_p0) * signed(r_V_fu_470_p1))), 72));
        sext_ln203_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_fu_279_p2),64));

        sext_ln385_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln385_reg_635),64));

        sext_ln386_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln386_fu_434_p2),64));

        sext_ln390_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln390_fu_399_p2),64));

        sext_ln400_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln400_fu_554_p2),64));

    sub_ln203_fu_257_p2 <= std_logic_vector(unsigned(zext_ln203_fu_241_p1) - unsigned(zext_ln203_7_fu_253_p1));
    sub_ln385_fu_329_p2 <= std_logic_vector(unsigned(zext_ln385_fu_309_p1) - unsigned(zext_ln385_2_fu_325_p1));
    sub_ln386_fu_393_p2 <= std_logic_vector(unsigned(zext_ln386_1_fu_377_p1) - unsigned(zext_ln386_2_fu_389_p1));
    sub_ln390_fu_347_p2 <= std_logic_vector(unsigned(zext_ln385_1_fu_321_p1) - unsigned(zext_ln390_fu_343_p1));
    sub_ln400_fu_527_p2 <= std_logic_vector(unsigned(zext_ln400_fu_511_p1) - unsigned(zext_ln400_1_fu_523_p1));
    tmp_34_fu_233_p3 <= (v224_0_reg_144 & ap_const_lv10_0);
    tmp_35_fu_245_p3 <= (v224_0_reg_144 & ap_const_lv8_0);
    tmp_36_fu_301_p3 <= (i18_0_reg_166 & ap_const_lv12_0);
    tmp_37_fu_313_p3 <= (i18_0_reg_166 & ap_const_lv10_0);
    tmp_38_fu_335_p3 <= (i18_0_reg_166 & ap_const_lv8_0);
    tmp_39_fu_503_p3 <= (i19_0_reg_199 & ap_const_lv10_0);
    tmp_40_fu_515_p3 <= (i19_0_reg_199 & ap_const_lv8_0);
    tmp_41_fu_369_p3 <= (j17_0_reg_177 & ap_const_lv12_0);
    tmp_42_fu_381_p3 <= (j17_0_reg_177 & ap_const_lv10_0);
    v219_V_address0 <= sext_ln385_fu_444_p1(16 - 1 downto 0);

    v219_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            v219_V_ce0 <= ap_const_logic_1;
        else 
            v219_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v220_V_address0 <= sext_ln386_fu_439_p1(22 - 1 downto 0);

    v220_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            v220_V_ce0 <= ap_const_logic_1;
        else 
            v220_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v221_V_address0 <= zext_ln399_fu_545_p1(10 - 1 downto 0);

    v221_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v221_V_ce0 <= ap_const_logic_1;
        else 
            v221_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v222_V_address0_assign_proc : process(ap_CS_fsm_state3, v222_V_addr_1_reg_622, ap_CS_fsm_state9, ap_CS_fsm_state13, v222_V_addr_2_reg_691, ap_CS_fsm_state11, ap_CS_fsm_state15, sext_ln203_fu_284_p1, sext_ln400_fu_559_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v222_V_address0 <= v222_V_addr_2_reg_691;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v222_V_address0 <= sext_ln400_fu_559_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v222_V_address0 <= v222_V_addr_1_reg_622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v222_V_address0 <= sext_ln203_fu_284_p1(14 - 1 downto 0);
        else 
            v222_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    v222_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v222_V_ce0 <= ap_const_logic_1;
        else 
            v222_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v222_V_d0_assign_proc : process(ap_CS_fsm_state3, v241_V_reg_701, ap_CS_fsm_state11, ap_CS_fsm_state15, v236_V_fu_486_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            v222_V_d0 <= v241_V_reg_701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            v222_V_d0 <= v236_V_fu_486_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v222_V_d0 <= ap_const_lv24_0;
        else 
            v222_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v222_V_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln378_fu_263_p2, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln378_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            v222_V_we0 <= ap_const_logic_1;
        else 
            v222_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v224_fu_227_p2 <= std_logic_vector(unsigned(v224_0_reg_144) + unsigned(ap_const_lv4_1));
    v225_fu_269_p2 <= std_logic_vector(unsigned(v225_0_reg_155) + unsigned(ap_const_lv10_1));
    v231_V_fu_448_p3 <= (v229_V_reg_650 & ap_const_lv16_0);
    v232_V_fu_455_p3 <= (v230_V_reg_655 & ap_const_lv16_0);
    v236_V_fu_486_p2 <= std_logic_vector(unsigned(v234_V_reg_660) + unsigned(v235_V_reg_665));
    v241_V_fu_564_p2 <= std_logic_vector(unsigned(v222_V_q0) + unsigned(v221_V_q0));
    zext_ln203_7_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_245_p3),15));
    zext_ln203_8_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v225_0_reg_155),15));
    zext_ln203_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_233_p3),15));
    zext_ln385_1_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_313_p3),15));
    zext_ln385_2_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_313_p3),17));
    zext_ln385_3_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k5_0_reg_188),23));
    zext_ln385_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k5_0_reg_188),17));
    zext_ln385_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_301_p3),17));
    zext_ln386_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_369_p3),23));
    zext_ln386_2_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_381_p3),23));
    zext_ln386_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j17_0_reg_177),15));
    zext_ln390_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_335_p3),15));
    zext_ln399_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j18_0_reg_210),64));
    zext_ln400_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_515_p3),15));
    zext_ln400_2_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j18_0_reg_210),15));
    zext_ln400_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_503_p3),15));
end behav;
