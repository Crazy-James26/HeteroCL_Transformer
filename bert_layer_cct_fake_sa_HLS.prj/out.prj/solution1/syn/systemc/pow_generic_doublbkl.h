// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __pow_generic_doublbkl_H__
#define __pow_generic_doublbkl_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct pow_generic_doublbkl_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 87;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(pow_generic_doublbkl_ram) {
        ram[0] = "0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        ram[1] = "0b000001000000000000000000000000000001111111111111110000000000000101010101010100010101010";
        ram[2] = "0b000010000000000000000000000000000111111111111111100000000000101010101010100110101010101";
        ram[3] = "0b000011000000000000000000000000010001111111111111010000000010001111111111110111000000010";
        ram[4] = "0b000100000000000000000000000000011111111111111111000000000101010101010101000101010110010";
        ram[5] = "0b000101000000000000000000000000110001111111111110110000001010011010101010010001101101000";
        ram[6] = "0b000110000000000000000000000001000111111111111110100000010001111111111111011100000101000";
        ram[7] = "0b000111000000000000000000000001100001111111111110010000011100100101010100100100011110101";
        ram[8] = "0b001000000000000000000000000001111111111111111110000000101010101010101001101010111010101";
        ram[9] = "0b001001000000000000000000000010100001111111111101110000111100101111111110101111011001101";
        ram[10] = "0b001010000000000000000000000011000111111111111101100001010011010101010011110001111100011";
        ram[11] = "0b001011000000000000000000000011110001111111111101010001101110111010101000110010100011110";
        ram[12] = "0b001100000000000000000000000100011111111111111101000010001111111111111101110001010001000";
        ram[13] = "0b001101000000000000000000000101010001111111111100110010110111000101010010101110000100111";
        ram[14] = "0b001110000000000000000000000110000111111111111100100011100100101010100111101001000000101";
        ram[15] = "0b001111000000000000000000000111000001111111111100010100011001001111111100100010000101110";
        ram[16] = "0b010000000000000000000000000111111111111111111100000101010101010101010001011001010101010";
        ram[17] = "0b010001000000000000000000001001000001111111111011110110011001011010100110001110110000111";
        ram[18] = "0b010010000000000000000000001010000111111111111011100111100101111111111011000010011010000";
        ram[19] = "0b010011000000000000000000001011010001111111111011011000111011100101001111110100010010011";
        ram[20] = "0b010100000000000000000000001100011111111111111011001010011010101010100100100100011011101";
        ram[21] = "0b010101000000000000000000001101110001111111111010111100000011101111111001010010110111101";
        ram[22] = "0b010110000000000000000000001111000111111111111010101101110111010101001101111111101000011";
        ram[23] = "0b010111000000000000000000010000100001111111111010011111110101111010100010101010101111110";
        ram[24] = "0b011000000000000000000000010001111111111111111010010001111111111111110111010100010000000";
        ram[25] = "0b011001000000000000000000010011100001111111111010000100010110000101001011111100001011001";
        ram[26] = "0b011010000000000000000000010101000111111111111001110110111000101010100000100010100011110";
        ram[27] = "0b011011000000000000000000010110110001111111111001101001101000001111110101000111011011111";
        ram[28] = "0b011100000000000000000000011000011111111111111001011100100101010101001001101010110110010";
        ram[29] = "0b011101000000000000000000011010010001111111111001001111110000011010011110001100110101100";
        ram[30] = "0b011110000000000000000000011100000111111111111001000011001001111111110010101101011100000";
        ram[31] = "0b011111000000000000000000011110000001111111111000110110110010100101000111001100101100110";
        ram[32] = "0b100000000000000000000000011111111111111111111000101010101010101010011011101010101010101";
        ram[33] = "0b100001000000000000000000100010000001111111111000011110110010101111110000000111011000100";
        ram[34] = "0b100010000000000000000000100100000111111111111000010011001011010101000100100010111001011";
        ram[35] = "0b100011000000000000000000100110010001111111111000000111110100111010011000111101010000100";
        ram[36] = "0b100100000000000000000000101000011111111111110111111100101111111111101101010110100001000";
        ram[37] = "0b100101000000000000000000101010110001111111110111110001111101000101000001101110101110010";
        ram[38] = "0b100110000000000000000000101101000111111111110111100111011100101010010110000101111011110";
        ram[39] = "0b100111000000000000000000101111100001111111110111011101001111001111101010011100001100111";
        ram[40] = "0b101000000000000000000000110001111111111111110111010011010101010100111110110001100101010";
        ram[41] = "0b101001000000000000000000110100100001111111110111001001101111011010010011000110001000110";
        ram[42] = "0b101010000000000000000000110111000111111111110111000000011101111111100111011001111011000";
        ram[43] = "0b101011000000000000000000111001110001111111110110110111100001100100111011101101000000000";
        ram[44] = "0b101100000000000000000000111100011111111111110110101110111010101010001111111111011011101";
        ram[45] = "0b101101000000000000000000111111010001111111110110100110101001101111100100010001010010000";
        ram[46] = "0b101110000000000000000001000010000111111111110110011110101111010100111000100010100111011";
        ram[47] = "0b101111000000000000000001000101000001111111110110010111001011111010001100110011011111111";
        ram[48] = "0b110000000000000000000001000111111111111111110110001111111111111111100001000100000000000";
        ram[49] = "0b110001000000000000000001001011000001111111110110001001001100000100110101010100001100000";
        ram[50] = "0b110010000000000000000001001110000111111111110110000010110000101010001001100100001000110";
        ram[51] = "0b110011000000000000000001010001010001111111110101111100101110001111011101110011111010100";
        ram[52] = "0b110100000000000000000001010100011111111111110101110111000101010100110010000011100110010";
        ram[53] = "0b110101000000000000000001010111110001111111110101110001110110011010000110010011010000111";
        ram[54] = "0b110110000000000000000001011011000111111111110101101101000001111111011010100010111111000";
        ram[55] = "0b110111000000000000000001011110100001111111110101101000101000100100101110110010110101111";
        ram[56] = "0b111000000000000000000001100001111111111111110101100100101010101010000011000010111010101";
        ram[57] = "0b111001000000000000000001100101100001111111110101100001001000101111010111010011010010011";
        ram[58] = "0b111010000000000000000001101001000111111111110101011110000011010100101011100100000010011";
        ram[59] = "0b111011000000000000000001101100110001111111110101011011011010111001111111110101010000001";
        ram[60] = "0b111100000000000000000001110000011111111111110101011001001111111111010100000111000001000";
        ram[61] = "0b111101000000000000000001110100010001111111110101010111100011000100101000011001011010101";
        ram[62] = "0b111110000000000000000001111000000111111111110101010110010100101001111100101100100010101";
        ram[63] = "0b111111000000000000000001111100000001111111110101010101100101001111010001000000011111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(pow_generic_doublbkl) {


static const unsigned DataWidth = 87;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


pow_generic_doublbkl_ram* meminst;


SC_CTOR(pow_generic_doublbkl) {
meminst = new pow_generic_doublbkl_ram("pow_generic_doublbkl_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~pow_generic_doublbkl() {
    delete meminst;
}


};//endmodule
#endif
