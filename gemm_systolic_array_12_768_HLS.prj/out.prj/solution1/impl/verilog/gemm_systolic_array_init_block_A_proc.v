// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gemm_systolic_array_init_block_A_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        block_A_loader_0_din,
        block_A_loader_0_num_data_valid,
        block_A_loader_0_fifo_cap,
        block_A_loader_0_full_n,
        block_A_loader_0_write,
        block_A_loader_1_din,
        block_A_loader_1_num_data_valid,
        block_A_loader_1_fifo_cap,
        block_A_loader_1_full_n,
        block_A_loader_1_write,
        block_A_loader_2_din,
        block_A_loader_2_num_data_valid,
        block_A_loader_2_fifo_cap,
        block_A_loader_2_full_n,
        block_A_loader_2_write,
        block_A_loader_3_din,
        block_A_loader_3_num_data_valid,
        block_A_loader_3_fifo_cap,
        block_A_loader_3_full_n,
        block_A_loader_3_write,
        block_A_loader_4_din,
        block_A_loader_4_num_data_valid,
        block_A_loader_4_fifo_cap,
        block_A_loader_4_full_n,
        block_A_loader_4_write,
        block_A_loader_5_din,
        block_A_loader_5_num_data_valid,
        block_A_loader_5_fifo_cap,
        block_A_loader_5_full_n,
        block_A_loader_5_write,
        block_A_loader_6_din,
        block_A_loader_6_num_data_valid,
        block_A_loader_6_fifo_cap,
        block_A_loader_6_full_n,
        block_A_loader_6_write,
        block_A_loader_7_din,
        block_A_loader_7_num_data_valid,
        block_A_loader_7_fifo_cap,
        block_A_loader_7_full_n,
        block_A_loader_7_write,
        block_A_loader_8_din,
        block_A_loader_8_num_data_valid,
        block_A_loader_8_fifo_cap,
        block_A_loader_8_full_n,
        block_A_loader_8_write,
        block_A_loader_9_din,
        block_A_loader_9_num_data_valid,
        block_A_loader_9_fifo_cap,
        block_A_loader_9_full_n,
        block_A_loader_9_write,
        block_A_loader_10_din,
        block_A_loader_10_num_data_valid,
        block_A_loader_10_fifo_cap,
        block_A_loader_10_full_n,
        block_A_loader_10_write,
        block_A_loader_11_din,
        block_A_loader_11_num_data_valid,
        block_A_loader_11_fifo_cap,
        block_A_loader_11_full_n,
        block_A_loader_11_write,
        start_out,
        start_write,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        A_4_address0,
        A_4_ce0,
        A_4_q0,
        A_5_address0,
        A_5_ce0,
        A_5_q0,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        A_7_address0,
        A_7_ce0,
        A_7_q0,
        A_8_address0,
        A_8_ce0,
        A_8_q0,
        A_9_address0,
        A_9_ce0,
        A_9_q0,
        A_10_address0,
        A_10_ce0,
        A_10_q0,
        A_11_address0,
        A_11_ce0,
        A_11_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] block_A_loader_0_din;
input  [1:0] block_A_loader_0_num_data_valid;
input  [1:0] block_A_loader_0_fifo_cap;
input   block_A_loader_0_full_n;
output   block_A_loader_0_write;
output  [31:0] block_A_loader_1_din;
input  [1:0] block_A_loader_1_num_data_valid;
input  [1:0] block_A_loader_1_fifo_cap;
input   block_A_loader_1_full_n;
output   block_A_loader_1_write;
output  [31:0] block_A_loader_2_din;
input  [1:0] block_A_loader_2_num_data_valid;
input  [1:0] block_A_loader_2_fifo_cap;
input   block_A_loader_2_full_n;
output   block_A_loader_2_write;
output  [31:0] block_A_loader_3_din;
input  [1:0] block_A_loader_3_num_data_valid;
input  [1:0] block_A_loader_3_fifo_cap;
input   block_A_loader_3_full_n;
output   block_A_loader_3_write;
output  [31:0] block_A_loader_4_din;
input  [1:0] block_A_loader_4_num_data_valid;
input  [1:0] block_A_loader_4_fifo_cap;
input   block_A_loader_4_full_n;
output   block_A_loader_4_write;
output  [31:0] block_A_loader_5_din;
input  [1:0] block_A_loader_5_num_data_valid;
input  [1:0] block_A_loader_5_fifo_cap;
input   block_A_loader_5_full_n;
output   block_A_loader_5_write;
output  [31:0] block_A_loader_6_din;
input  [1:0] block_A_loader_6_num_data_valid;
input  [1:0] block_A_loader_6_fifo_cap;
input   block_A_loader_6_full_n;
output   block_A_loader_6_write;
output  [31:0] block_A_loader_7_din;
input  [1:0] block_A_loader_7_num_data_valid;
input  [1:0] block_A_loader_7_fifo_cap;
input   block_A_loader_7_full_n;
output   block_A_loader_7_write;
output  [31:0] block_A_loader_8_din;
input  [1:0] block_A_loader_8_num_data_valid;
input  [1:0] block_A_loader_8_fifo_cap;
input   block_A_loader_8_full_n;
output   block_A_loader_8_write;
output  [31:0] block_A_loader_9_din;
input  [1:0] block_A_loader_9_num_data_valid;
input  [1:0] block_A_loader_9_fifo_cap;
input   block_A_loader_9_full_n;
output   block_A_loader_9_write;
output  [31:0] block_A_loader_10_din;
input  [1:0] block_A_loader_10_num_data_valid;
input  [1:0] block_A_loader_10_fifo_cap;
input   block_A_loader_10_full_n;
output   block_A_loader_10_write;
output  [31:0] block_A_loader_11_din;
input  [1:0] block_A_loader_11_num_data_valid;
input  [1:0] block_A_loader_11_fifo_cap;
input   block_A_loader_11_full_n;
output   block_A_loader_11_write;
output   start_out;
output   start_write;
output  [9:0] A_0_address0;
output   A_0_ce0;
input  [31:0] A_0_q0;
output  [9:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [9:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [9:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;
output  [9:0] A_4_address0;
output   A_4_ce0;
input  [31:0] A_4_q0;
output  [9:0] A_5_address0;
output   A_5_ce0;
input  [31:0] A_5_q0;
output  [9:0] A_6_address0;
output   A_6_ce0;
input  [31:0] A_6_q0;
output  [9:0] A_7_address0;
output   A_7_ce0;
input  [31:0] A_7_q0;
output  [9:0] A_8_address0;
output   A_8_ce0;
input  [31:0] A_8_q0;
output  [9:0] A_9_address0;
output   A_9_ce0;
input  [31:0] A_9_q0;
output  [9:0] A_10_address0;
output   A_10_ce0;
input  [31:0] A_10_q0;
output  [9:0] A_11_address0;
output   A_11_ce0;
input  [31:0] A_11_q0;

reg ap_idle;
reg block_A_loader_0_write;
reg block_A_loader_1_write;
reg block_A_loader_2_write;
reg block_A_loader_3_write;
reg block_A_loader_4_write;
reg block_A_loader_5_write;
reg block_A_loader_6_write;
reg block_A_loader_7_write;
reg block_A_loader_8_write;
reg block_A_loader_9_write;
reg block_A_loader_10_write;
reg block_A_loader_11_write;
reg start_write;
reg A_0_ce0;
reg A_1_ce0;
reg A_2_ce0;
reg A_3_ce0;
reg A_4_ce0;
reg A_5_ce0;
reg A_6_ce0;
reg A_7_ce0;
reg A_8_ce0;
reg A_9_ce0;
reg A_10_ce0;
reg A_11_ce0;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln33_fu_346_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    block_A_loader_0_blk_n;
wire    ap_block_pp0_stage0;
reg    block_A_loader_1_blk_n;
reg    block_A_loader_2_blk_n;
reg    block_A_loader_3_blk_n;
reg    block_A_loader_4_blk_n;
reg    block_A_loader_5_blk_n;
reg    block_A_loader_6_blk_n;
reg    block_A_loader_7_blk_n;
reg    block_A_loader_8_blk_n;
reg    block_A_loader_9_blk_n;
reg    block_A_loader_10_blk_n;
reg    block_A_loader_11_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln33_fu_358_p1;
reg   [9:0] k_fu_82;
wire   [9:0] add_ln33_fu_352_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_k_6;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_294;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gemm_systolic_array_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_294)) begin
        if ((icmp_ln33_fu_346_p2 == 1'd0)) begin
            k_fu_82 <= add_ln33_fu_352_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_82 <= 10'd0;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_10_ce0 = 1'b1;
    end else begin
        A_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_11_ce0 = 1'b1;
    end else begin
        A_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_4_ce0 = 1'b1;
    end else begin
        A_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_5_ce0 = 1'b1;
    end else begin
        A_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_7_ce0 = 1'b1;
    end else begin
        A_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_8_ce0 = 1'b1;
    end else begin
        A_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_9_ce0 = 1'b1;
    end else begin
        A_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_346_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_6 = 10'd0;
    end else begin
        ap_sig_allocacmp_k_6 = k_fu_82;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_0_blk_n = block_A_loader_0_full_n;
    end else begin
        block_A_loader_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_0_write = 1'b1;
    end else begin
        block_A_loader_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_10_blk_n = block_A_loader_10_full_n;
    end else begin
        block_A_loader_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_10_write = 1'b1;
    end else begin
        block_A_loader_10_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_11_blk_n = block_A_loader_11_full_n;
    end else begin
        block_A_loader_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_11_write = 1'b1;
    end else begin
        block_A_loader_11_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_1_blk_n = block_A_loader_1_full_n;
    end else begin
        block_A_loader_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_1_write = 1'b1;
    end else begin
        block_A_loader_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_2_blk_n = block_A_loader_2_full_n;
    end else begin
        block_A_loader_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_2_write = 1'b1;
    end else begin
        block_A_loader_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_3_blk_n = block_A_loader_3_full_n;
    end else begin
        block_A_loader_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_3_write = 1'b1;
    end else begin
        block_A_loader_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_4_blk_n = block_A_loader_4_full_n;
    end else begin
        block_A_loader_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_4_write = 1'b1;
    end else begin
        block_A_loader_4_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_5_blk_n = block_A_loader_5_full_n;
    end else begin
        block_A_loader_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_5_write = 1'b1;
    end else begin
        block_A_loader_5_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_6_blk_n = block_A_loader_6_full_n;
    end else begin
        block_A_loader_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_6_write = 1'b1;
    end else begin
        block_A_loader_6_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_7_blk_n = block_A_loader_7_full_n;
    end else begin
        block_A_loader_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_7_write = 1'b1;
    end else begin
        block_A_loader_7_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_8_blk_n = block_A_loader_8_full_n;
    end else begin
        block_A_loader_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_8_write = 1'b1;
    end else begin
        block_A_loader_8_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_A_loader_9_blk_n = block_A_loader_9_full_n;
    end else begin
        block_A_loader_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_A_loader_9_write = 1'b1;
    end else begin
        block_A_loader_9_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln33_fu_358_p1;

assign A_10_address0 = zext_ln33_fu_358_p1;

assign A_11_address0 = zext_ln33_fu_358_p1;

assign A_1_address0 = zext_ln33_fu_358_p1;

assign A_2_address0 = zext_ln33_fu_358_p1;

assign A_3_address0 = zext_ln33_fu_358_p1;

assign A_4_address0 = zext_ln33_fu_358_p1;

assign A_5_address0 = zext_ln33_fu_358_p1;

assign A_6_address0 = zext_ln33_fu_358_p1;

assign A_7_address0 = zext_ln33_fu_358_p1;

assign A_8_address0 = zext_ln33_fu_358_p1;

assign A_9_address0 = zext_ln33_fu_358_p1;

assign add_ln33_fu_352_p2 = (ap_sig_allocacmp_k_6 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_A_loader_6_full_n == 1'b0) | (block_A_loader_5_full_n == 1'b0) | (block_A_loader_4_full_n == 1'b0) | (block_A_loader_3_full_n == 1'b0) | (block_A_loader_2_full_n == 1'b0) | (block_A_loader_1_full_n == 1'b0) | (block_A_loader_0_full_n == 1'b0) | (block_A_loader_11_full_n == 1'b0) | (block_A_loader_10_full_n == 1'b0) | (block_A_loader_9_full_n == 1'b0) | (block_A_loader_8_full_n == 1'b0) | (block_A_loader_7_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_A_loader_6_full_n == 1'b0) | (block_A_loader_5_full_n == 1'b0) | (block_A_loader_4_full_n == 1'b0) | (block_A_loader_3_full_n == 1'b0) | (block_A_loader_2_full_n == 1'b0) | (block_A_loader_1_full_n == 1'b0) | (block_A_loader_0_full_n == 1'b0) | (block_A_loader_11_full_n == 1'b0) | (block_A_loader_10_full_n == 1'b0) | (block_A_loader_9_full_n == 1'b0) | (block_A_loader_8_full_n == 1'b0) | (block_A_loader_7_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_A_loader_6_full_n == 1'b0) | (block_A_loader_5_full_n == 1'b0) | (block_A_loader_4_full_n == 1'b0) | (block_A_loader_3_full_n == 1'b0) | (block_A_loader_2_full_n == 1'b0) | (block_A_loader_1_full_n == 1'b0) | (block_A_loader_0_full_n == 1'b0) | (block_A_loader_11_full_n == 1'b0) | (block_A_loader_10_full_n == 1'b0) | (block_A_loader_9_full_n == 1'b0) | (block_A_loader_8_full_n == 1'b0) | (block_A_loader_7_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((block_A_loader_6_full_n == 1'b0) | (block_A_loader_5_full_n == 1'b0) | (block_A_loader_4_full_n == 1'b0) | (block_A_loader_3_full_n == 1'b0) | (block_A_loader_2_full_n == 1'b0) | (block_A_loader_1_full_n == 1'b0) | (block_A_loader_0_full_n == 1'b0) | (block_A_loader_11_full_n == 1'b0) | (block_A_loader_10_full_n == 1'b0) | (block_A_loader_9_full_n == 1'b0) | (block_A_loader_8_full_n == 1'b0) | (block_A_loader_7_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_294 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign block_A_loader_0_din = A_0_q0;

assign block_A_loader_10_din = A_10_q0;

assign block_A_loader_11_din = A_11_q0;

assign block_A_loader_1_din = A_1_q0;

assign block_A_loader_2_din = A_2_q0;

assign block_A_loader_3_din = A_3_q0;

assign block_A_loader_4_din = A_4_q0;

assign block_A_loader_5_din = A_5_q0;

assign block_A_loader_6_din = A_6_q0;

assign block_A_loader_7_din = A_7_q0;

assign block_A_loader_8_din = A_8_q0;

assign block_A_loader_9_din = A_9_q0;

assign icmp_ln33_fu_346_p2 = ((ap_sig_allocacmp_k_6 == 10'd768) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign zext_ln33_fu_358_p1 = ap_sig_allocacmp_k_6;

endmodule //gemm_systolic_array_init_block_A_proc
