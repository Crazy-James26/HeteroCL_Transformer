// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gemm_systolic_array_init_block_B_proc_Pipeline_init_block_B (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_B_loader_0199_din,
        block_B_loader_0199_num_data_valid,
        block_B_loader_0199_fifo_cap,
        block_B_loader_0199_full_n,
        block_B_loader_0199_write,
        block_B_loader_1200_din,
        block_B_loader_1200_num_data_valid,
        block_B_loader_1200_fifo_cap,
        block_B_loader_1200_full_n,
        block_B_loader_1200_write,
        block_B_loader_2201_din,
        block_B_loader_2201_num_data_valid,
        block_B_loader_2201_fifo_cap,
        block_B_loader_2201_full_n,
        block_B_loader_2201_write,
        block_B_loader_3202_din,
        block_B_loader_3202_num_data_valid,
        block_B_loader_3202_fifo_cap,
        block_B_loader_3202_full_n,
        block_B_loader_3202_write,
        block_B_loader_4203_din,
        block_B_loader_4203_num_data_valid,
        block_B_loader_4203_fifo_cap,
        block_B_loader_4203_full_n,
        block_B_loader_4203_write,
        block_B_loader_5204_din,
        block_B_loader_5204_num_data_valid,
        block_B_loader_5204_fifo_cap,
        block_B_loader_5204_full_n,
        block_B_loader_5204_write,
        block_B_loader_6205_din,
        block_B_loader_6205_num_data_valid,
        block_B_loader_6205_fifo_cap,
        block_B_loader_6205_full_n,
        block_B_loader_6205_write,
        block_B_loader_7206_din,
        block_B_loader_7206_num_data_valid,
        block_B_loader_7206_fifo_cap,
        block_B_loader_7206_full_n,
        block_B_loader_7206_write,
        block_B_loader_8207_din,
        block_B_loader_8207_num_data_valid,
        block_B_loader_8207_fifo_cap,
        block_B_loader_8207_full_n,
        block_B_loader_8207_write,
        block_B_loader_9208_din,
        block_B_loader_9208_num_data_valid,
        block_B_loader_9208_fifo_cap,
        block_B_loader_9208_full_n,
        block_B_loader_9208_write,
        block_B_loader_10209_din,
        block_B_loader_10209_num_data_valid,
        block_B_loader_10209_fifo_cap,
        block_B_loader_10209_full_n,
        block_B_loader_10209_write,
        block_B_loader_11210_din,
        block_B_loader_11210_num_data_valid,
        block_B_loader_11210_fifo_cap,
        block_B_loader_11210_full_n,
        block_B_loader_11210_write,
        jj_cast,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        B_4_address0,
        B_4_ce0,
        B_4_q0,
        B_5_address0,
        B_5_ce0,
        B_5_q0,
        B_6_address0,
        B_6_ce0,
        B_6_q0,
        B_7_address0,
        B_7_ce0,
        B_7_q0,
        B_8_address0,
        B_8_ce0,
        B_8_q0,
        B_9_address0,
        B_9_ce0,
        B_9_q0,
        B_10_address0,
        B_10_ce0,
        B_10_q0,
        B_11_address0,
        B_11_ce0,
        B_11_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] block_B_loader_0199_din;
input  [1:0] block_B_loader_0199_num_data_valid;
input  [1:0] block_B_loader_0199_fifo_cap;
input   block_B_loader_0199_full_n;
output   block_B_loader_0199_write;
output  [31:0] block_B_loader_1200_din;
input  [1:0] block_B_loader_1200_num_data_valid;
input  [1:0] block_B_loader_1200_fifo_cap;
input   block_B_loader_1200_full_n;
output   block_B_loader_1200_write;
output  [31:0] block_B_loader_2201_din;
input  [1:0] block_B_loader_2201_num_data_valid;
input  [1:0] block_B_loader_2201_fifo_cap;
input   block_B_loader_2201_full_n;
output   block_B_loader_2201_write;
output  [31:0] block_B_loader_3202_din;
input  [1:0] block_B_loader_3202_num_data_valid;
input  [1:0] block_B_loader_3202_fifo_cap;
input   block_B_loader_3202_full_n;
output   block_B_loader_3202_write;
output  [31:0] block_B_loader_4203_din;
input  [1:0] block_B_loader_4203_num_data_valid;
input  [1:0] block_B_loader_4203_fifo_cap;
input   block_B_loader_4203_full_n;
output   block_B_loader_4203_write;
output  [31:0] block_B_loader_5204_din;
input  [1:0] block_B_loader_5204_num_data_valid;
input  [1:0] block_B_loader_5204_fifo_cap;
input   block_B_loader_5204_full_n;
output   block_B_loader_5204_write;
output  [31:0] block_B_loader_6205_din;
input  [1:0] block_B_loader_6205_num_data_valid;
input  [1:0] block_B_loader_6205_fifo_cap;
input   block_B_loader_6205_full_n;
output   block_B_loader_6205_write;
output  [31:0] block_B_loader_7206_din;
input  [1:0] block_B_loader_7206_num_data_valid;
input  [1:0] block_B_loader_7206_fifo_cap;
input   block_B_loader_7206_full_n;
output   block_B_loader_7206_write;
output  [31:0] block_B_loader_8207_din;
input  [1:0] block_B_loader_8207_num_data_valid;
input  [1:0] block_B_loader_8207_fifo_cap;
input   block_B_loader_8207_full_n;
output   block_B_loader_8207_write;
output  [31:0] block_B_loader_9208_din;
input  [1:0] block_B_loader_9208_num_data_valid;
input  [1:0] block_B_loader_9208_fifo_cap;
input   block_B_loader_9208_full_n;
output   block_B_loader_9208_write;
output  [31:0] block_B_loader_10209_din;
input  [1:0] block_B_loader_10209_num_data_valid;
input  [1:0] block_B_loader_10209_fifo_cap;
input   block_B_loader_10209_full_n;
output   block_B_loader_10209_write;
output  [31:0] block_B_loader_11210_din;
input  [1:0] block_B_loader_11210_num_data_valid;
input  [1:0] block_B_loader_11210_fifo_cap;
input   block_B_loader_11210_full_n;
output   block_B_loader_11210_write;
input  [5:0] jj_cast;
output  [15:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [15:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [15:0] B_2_address0;
output   B_2_ce0;
input  [31:0] B_2_q0;
output  [15:0] B_3_address0;
output   B_3_ce0;
input  [31:0] B_3_q0;
output  [15:0] B_4_address0;
output   B_4_ce0;
input  [31:0] B_4_q0;
output  [15:0] B_5_address0;
output   B_5_ce0;
input  [31:0] B_5_q0;
output  [15:0] B_6_address0;
output   B_6_ce0;
input  [31:0] B_6_q0;
output  [15:0] B_7_address0;
output   B_7_ce0;
input  [31:0] B_7_q0;
output  [15:0] B_8_address0;
output   B_8_ce0;
input  [31:0] B_8_q0;
output  [15:0] B_9_address0;
output   B_9_ce0;
input  [31:0] B_9_q0;
output  [15:0] B_10_address0;
output   B_10_ce0;
input  [31:0] B_10_q0;
output  [15:0] B_11_address0;
output   B_11_ce0;
input  [31:0] B_11_q0;

reg ap_idle;
reg block_B_loader_0199_write;
reg block_B_loader_1200_write;
reg block_B_loader_2201_write;
reg block_B_loader_3202_write;
reg block_B_loader_4203_write;
reg block_B_loader_5204_write;
reg block_B_loader_6205_write;
reg block_B_loader_7206_write;
reg block_B_loader_8207_write;
reg block_B_loader_9208_write;
reg block_B_loader_10209_write;
reg block_B_loader_11210_write;
reg B_0_ce0;
reg B_1_ce0;
reg B_2_ce0;
reg B_3_ce0;
reg B_4_ce0;
reg B_5_ce0;
reg B_6_ce0;
reg B_7_ce0;
reg B_8_ce0;
reg B_9_ce0;
reg B_10_ce0;
reg B_11_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_358_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    block_B_loader_0199_blk_n;
wire    ap_block_pp0_stage0;
reg    block_B_loader_1200_blk_n;
reg    block_B_loader_2201_blk_n;
reg    block_B_loader_3202_blk_n;
reg    block_B_loader_4203_blk_n;
reg    block_B_loader_5204_blk_n;
reg    block_B_loader_6205_blk_n;
reg    block_B_loader_7206_blk_n;
reg    block_B_loader_8207_blk_n;
reg    block_B_loader_9208_blk_n;
reg    block_B_loader_10209_blk_n;
reg    block_B_loader_11210_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln174_fu_378_p1;
reg   [9:0] k_fu_88;
wire   [9:0] add_ln41_fu_364_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_k_5;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_i_fu_370_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gemm_systolic_array_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln41_fu_358_p2 == 1'd0))) begin
            k_fu_88 <= add_ln41_fu_364_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_88 <= 10'd0;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_10_ce0 = 1'b1;
    end else begin
        B_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_11_ce0 = 1'b1;
    end else begin
        B_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_2_ce0 = 1'b1;
    end else begin
        B_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_3_ce0 = 1'b1;
    end else begin
        B_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_4_ce0 = 1'b1;
    end else begin
        B_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_5_ce0 = 1'b1;
    end else begin
        B_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_6_ce0 = 1'b1;
    end else begin
        B_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_7_ce0 = 1'b1;
    end else begin
        B_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_8_ce0 = 1'b1;
    end else begin
        B_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_9_ce0 = 1'b1;
    end else begin
        B_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln41_fu_358_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_5 = 10'd0;
    end else begin
        ap_sig_allocacmp_k_5 = k_fu_88;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_0199_blk_n = block_B_loader_0199_full_n;
    end else begin
        block_B_loader_0199_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_0199_write = 1'b1;
    end else begin
        block_B_loader_0199_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_10209_blk_n = block_B_loader_10209_full_n;
    end else begin
        block_B_loader_10209_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_10209_write = 1'b1;
    end else begin
        block_B_loader_10209_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_11210_blk_n = block_B_loader_11210_full_n;
    end else begin
        block_B_loader_11210_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_11210_write = 1'b1;
    end else begin
        block_B_loader_11210_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_1200_blk_n = block_B_loader_1200_full_n;
    end else begin
        block_B_loader_1200_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_1200_write = 1'b1;
    end else begin
        block_B_loader_1200_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_2201_blk_n = block_B_loader_2201_full_n;
    end else begin
        block_B_loader_2201_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_2201_write = 1'b1;
    end else begin
        block_B_loader_2201_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_3202_blk_n = block_B_loader_3202_full_n;
    end else begin
        block_B_loader_3202_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_3202_write = 1'b1;
    end else begin
        block_B_loader_3202_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_4203_blk_n = block_B_loader_4203_full_n;
    end else begin
        block_B_loader_4203_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_4203_write = 1'b1;
    end else begin
        block_B_loader_4203_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_5204_blk_n = block_B_loader_5204_full_n;
    end else begin
        block_B_loader_5204_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_5204_write = 1'b1;
    end else begin
        block_B_loader_5204_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_6205_blk_n = block_B_loader_6205_full_n;
    end else begin
        block_B_loader_6205_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_6205_write = 1'b1;
    end else begin
        block_B_loader_6205_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_7206_blk_n = block_B_loader_7206_full_n;
    end else begin
        block_B_loader_7206_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_7206_write = 1'b1;
    end else begin
        block_B_loader_7206_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_8207_blk_n = block_B_loader_8207_full_n;
    end else begin
        block_B_loader_8207_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_8207_write = 1'b1;
    end else begin
        block_B_loader_8207_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        block_B_loader_9208_blk_n = block_B_loader_9208_full_n;
    end else begin
        block_B_loader_9208_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_B_loader_9208_write = 1'b1;
    end else begin
        block_B_loader_9208_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_0_address0 = zext_ln174_fu_378_p1;

assign B_10_address0 = zext_ln174_fu_378_p1;

assign B_11_address0 = zext_ln174_fu_378_p1;

assign B_1_address0 = zext_ln174_fu_378_p1;

assign B_2_address0 = zext_ln174_fu_378_p1;

assign B_3_address0 = zext_ln174_fu_378_p1;

assign B_4_address0 = zext_ln174_fu_378_p1;

assign B_5_address0 = zext_ln174_fu_378_p1;

assign B_6_address0 = zext_ln174_fu_378_p1;

assign B_7_address0 = zext_ln174_fu_378_p1;

assign B_8_address0 = zext_ln174_fu_378_p1;

assign B_9_address0 = zext_ln174_fu_378_p1;

assign add_ln41_fu_364_p2 = (ap_sig_allocacmp_k_5 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_B_loader_8207_full_n == 1'b0) | (block_B_loader_7206_full_n == 1'b0) | (block_B_loader_6205_full_n == 1'b0) | (block_B_loader_5204_full_n == 1'b0) | (block_B_loader_4203_full_n == 1'b0) | (block_B_loader_3202_full_n == 1'b0) | (block_B_loader_2201_full_n == 1'b0) | (block_B_loader_1200_full_n == 1'b0) | (block_B_loader_0199_full_n == 1'b0) | (block_B_loader_11210_full_n == 1'b0) | (block_B_loader_10209_full_n == 1'b0) | (block_B_loader_9208_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_B_loader_8207_full_n == 1'b0) | (block_B_loader_7206_full_n == 1'b0) | (block_B_loader_6205_full_n == 1'b0) | (block_B_loader_5204_full_n == 1'b0) | (block_B_loader_4203_full_n == 1'b0) | (block_B_loader_3202_full_n == 1'b0) | (block_B_loader_2201_full_n == 1'b0) | (block_B_loader_1200_full_n == 1'b0) | (block_B_loader_0199_full_n == 1'b0) | (block_B_loader_11210_full_n == 1'b0) | (block_B_loader_10209_full_n == 1'b0) | (block_B_loader_9208_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((block_B_loader_8207_full_n == 1'b0) | (block_B_loader_7206_full_n == 1'b0) | (block_B_loader_6205_full_n == 1'b0) | (block_B_loader_5204_full_n == 1'b0) | (block_B_loader_4203_full_n == 1'b0) | (block_B_loader_3202_full_n == 1'b0) | (block_B_loader_2201_full_n == 1'b0) | (block_B_loader_1200_full_n == 1'b0) | (block_B_loader_0199_full_n == 1'b0) | (block_B_loader_11210_full_n == 1'b0) | (block_B_loader_10209_full_n == 1'b0) | (block_B_loader_9208_full_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((block_B_loader_8207_full_n == 1'b0) | (block_B_loader_7206_full_n == 1'b0) | (block_B_loader_6205_full_n == 1'b0) | (block_B_loader_5204_full_n == 1'b0) | (block_B_loader_4203_full_n == 1'b0) | (block_B_loader_3202_full_n == 1'b0) | (block_B_loader_2201_full_n == 1'b0) | (block_B_loader_1200_full_n == 1'b0) | (block_B_loader_0199_full_n == 1'b0) | (block_B_loader_11210_full_n == 1'b0) | (block_B_loader_10209_full_n == 1'b0) | (block_B_loader_9208_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign block_B_loader_0199_din = B_0_q0;

assign block_B_loader_10209_din = B_10_q0;

assign block_B_loader_11210_din = B_11_q0;

assign block_B_loader_1200_din = B_1_q0;

assign block_B_loader_2201_din = B_2_q0;

assign block_B_loader_3202_din = B_3_q0;

assign block_B_loader_4203_din = B_4_q0;

assign block_B_loader_5204_din = B_5_q0;

assign block_B_loader_6205_din = B_6_q0;

assign block_B_loader_7206_din = B_7_q0;

assign block_B_loader_8207_din = B_8_q0;

assign block_B_loader_9208_din = B_9_q0;

assign icmp_ln41_fu_358_p2 = ((ap_sig_allocacmp_k_5 == 10'd768) ? 1'b1 : 1'b0);

assign tmp_i_fu_370_p3 = {{ap_sig_allocacmp_k_5}, {jj_cast}};

assign zext_ln174_fu_378_p1 = tmp_i_fu_370_p3;

endmodule //gemm_systolic_array_init_block_B_proc_Pipeline_init_block_B
