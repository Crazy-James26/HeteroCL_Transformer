-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_systolic_array_init_block_A_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_A_loader_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_0_full_n : IN STD_LOGIC;
    block_A_loader_0_write : OUT STD_LOGIC;
    block_A_loader_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_1_full_n : IN STD_LOGIC;
    block_A_loader_1_write : OUT STD_LOGIC;
    block_A_loader_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_2_full_n : IN STD_LOGIC;
    block_A_loader_2_write : OUT STD_LOGIC;
    block_A_loader_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_3_full_n : IN STD_LOGIC;
    block_A_loader_3_write : OUT STD_LOGIC;
    block_A_loader_4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_4_full_n : IN STD_LOGIC;
    block_A_loader_4_write : OUT STD_LOGIC;
    block_A_loader_5_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_5_full_n : IN STD_LOGIC;
    block_A_loader_5_write : OUT STD_LOGIC;
    block_A_loader_6_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_6_full_n : IN STD_LOGIC;
    block_A_loader_6_write : OUT STD_LOGIC;
    block_A_loader_7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_7_full_n : IN STD_LOGIC;
    block_A_loader_7_write : OUT STD_LOGIC;
    block_A_loader_8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_8_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_8_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_8_full_n : IN STD_LOGIC;
    block_A_loader_8_write : OUT STD_LOGIC;
    block_A_loader_9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_9_full_n : IN STD_LOGIC;
    block_A_loader_9_write : OUT STD_LOGIC;
    block_A_loader_10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_10_full_n : IN STD_LOGIC;
    block_A_loader_10_write : OUT STD_LOGIC;
    block_A_loader_11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_A_loader_11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_A_loader_11_full_n : IN STD_LOGIC;
    block_A_loader_11_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_4_ce0 : OUT STD_LOGIC;
    A_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_5_ce0 : OUT STD_LOGIC;
    A_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_7_ce0 : OUT STD_LOGIC;
    A_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_8_ce0 : OUT STD_LOGIC;
    A_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_9_ce0 : OUT STD_LOGIC;
    A_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_10_ce0 : OUT STD_LOGIC;
    A_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_11_ce0 : OUT STD_LOGIC;
    A_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_systolic_array_init_block_A_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal block_A_loader_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal block_A_loader_1_blk_n : STD_LOGIC;
    signal block_A_loader_2_blk_n : STD_LOGIC;
    signal block_A_loader_3_blk_n : STD_LOGIC;
    signal block_A_loader_4_blk_n : STD_LOGIC;
    signal block_A_loader_5_blk_n : STD_LOGIC;
    signal block_A_loader_6_blk_n : STD_LOGIC;
    signal block_A_loader_7_blk_n : STD_LOGIC;
    signal block_A_loader_8_blk_n : STD_LOGIC;
    signal block_A_loader_9_blk_n : STD_LOGIC;
    signal block_A_loader_10_blk_n : STD_LOGIC;
    signal block_A_loader_11_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln33_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33_fu_352_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_294 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_systolic_array_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component gemm_systolic_array_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_294)) then
                if ((icmp_ln33_fu_346_p2 = ap_const_lv1_0)) then 
                    k_fu_82 <= add_ln33_fu_352_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_82 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_0_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_10_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_10_ce0 <= ap_const_logic_1;
        else 
            A_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_11_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_11_ce0 <= ap_const_logic_1;
        else 
            A_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_4_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_4_ce0 <= ap_const_logic_1;
        else 
            A_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_5_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_5_ce0 <= ap_const_logic_1;
        else 
            A_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_6_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_6_ce0 <= ap_const_logic_1;
        else 
            A_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_7_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_7_ce0 <= ap_const_logic_1;
        else 
            A_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_8_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_8_ce0 <= ap_const_logic_1;
        else 
            A_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_9_address0 <= zext_ln33_fu_358_p1(10 - 1 downto 0);

    A_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_9_ce0 <= ap_const_logic_1;
        else 
            A_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln33_fu_352_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_6) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_A_loader_0_full_n, block_A_loader_1_full_n, block_A_loader_2_full_n, block_A_loader_3_full_n, block_A_loader_4_full_n, block_A_loader_5_full_n, block_A_loader_6_full_n, block_A_loader_7_full_n, block_A_loader_8_full_n, block_A_loader_9_full_n, block_A_loader_10_full_n, block_A_loader_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_A_loader_6_full_n = ap_const_logic_0) or (block_A_loader_5_full_n = ap_const_logic_0) or (block_A_loader_4_full_n = ap_const_logic_0) or (block_A_loader_3_full_n = ap_const_logic_0) or (block_A_loader_2_full_n = ap_const_logic_0) or (block_A_loader_1_full_n = ap_const_logic_0) or (block_A_loader_0_full_n = ap_const_logic_0) or (block_A_loader_11_full_n = ap_const_logic_0) or (block_A_loader_10_full_n = ap_const_logic_0) or (block_A_loader_9_full_n = ap_const_logic_0) or (block_A_loader_8_full_n = ap_const_logic_0) or (block_A_loader_7_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_A_loader_0_full_n, block_A_loader_1_full_n, block_A_loader_2_full_n, block_A_loader_3_full_n, block_A_loader_4_full_n, block_A_loader_5_full_n, block_A_loader_6_full_n, block_A_loader_7_full_n, block_A_loader_8_full_n, block_A_loader_9_full_n, block_A_loader_10_full_n, block_A_loader_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_A_loader_6_full_n = ap_const_logic_0) or (block_A_loader_5_full_n = ap_const_logic_0) or (block_A_loader_4_full_n = ap_const_logic_0) or (block_A_loader_3_full_n = ap_const_logic_0) or (block_A_loader_2_full_n = ap_const_logic_0) or (block_A_loader_1_full_n = ap_const_logic_0) or (block_A_loader_0_full_n = ap_const_logic_0) or (block_A_loader_11_full_n = ap_const_logic_0) or (block_A_loader_10_full_n = ap_const_logic_0) or (block_A_loader_9_full_n = ap_const_logic_0) or (block_A_loader_8_full_n = ap_const_logic_0) or (block_A_loader_7_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, block_A_loader_0_full_n, block_A_loader_1_full_n, block_A_loader_2_full_n, block_A_loader_3_full_n, block_A_loader_4_full_n, block_A_loader_5_full_n, block_A_loader_6_full_n, block_A_loader_7_full_n, block_A_loader_8_full_n, block_A_loader_9_full_n, block_A_loader_10_full_n, block_A_loader_11_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_A_loader_6_full_n = ap_const_logic_0) or (block_A_loader_5_full_n = ap_const_logic_0) or (block_A_loader_4_full_n = ap_const_logic_0) or (block_A_loader_3_full_n = ap_const_logic_0) or (block_A_loader_2_full_n = ap_const_logic_0) or (block_A_loader_1_full_n = ap_const_logic_0) or (block_A_loader_0_full_n = ap_const_logic_0) or (block_A_loader_11_full_n = ap_const_logic_0) or (block_A_loader_10_full_n = ap_const_logic_0) or (block_A_loader_9_full_n = ap_const_logic_0) or (block_A_loader_8_full_n = ap_const_logic_0) or (block_A_loader_7_full_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(block_A_loader_0_full_n, block_A_loader_1_full_n, block_A_loader_2_full_n, block_A_loader_3_full_n, block_A_loader_4_full_n, block_A_loader_5_full_n, block_A_loader_6_full_n, block_A_loader_7_full_n, block_A_loader_8_full_n, block_A_loader_9_full_n, block_A_loader_10_full_n, block_A_loader_11_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((block_A_loader_6_full_n = ap_const_logic_0) or (block_A_loader_5_full_n = ap_const_logic_0) or (block_A_loader_4_full_n = ap_const_logic_0) or (block_A_loader_3_full_n = ap_const_logic_0) or (block_A_loader_2_full_n = ap_const_logic_0) or (block_A_loader_1_full_n = ap_const_logic_0) or (block_A_loader_0_full_n = ap_const_logic_0) or (block_A_loader_11_full_n = ap_const_logic_0) or (block_A_loader_10_full_n = ap_const_logic_0) or (block_A_loader_9_full_n = ap_const_logic_0) or (block_A_loader_8_full_n = ap_const_logic_0) or (block_A_loader_7_full_n = ap_const_logic_0));
    end process;


    ap_condition_294_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_294 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln33_fu_346_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln33_fu_346_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_82, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k_6 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_k_6 <= k_fu_82;
        end if; 
    end process;


    block_A_loader_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_0_blk_n <= block_A_loader_0_full_n;
        else 
            block_A_loader_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_0_din <= A_0_q0;

    block_A_loader_0_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_0_write <= ap_const_logic_1;
        else 
            block_A_loader_0_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_10_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_10_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_10_blk_n <= block_A_loader_10_full_n;
        else 
            block_A_loader_10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_10_din <= A_10_q0;

    block_A_loader_10_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_10_write <= ap_const_logic_1;
        else 
            block_A_loader_10_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_11_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_11_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_11_blk_n <= block_A_loader_11_full_n;
        else 
            block_A_loader_11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_11_din <= A_11_q0;

    block_A_loader_11_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_11_write <= ap_const_logic_1;
        else 
            block_A_loader_11_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_1_blk_n <= block_A_loader_1_full_n;
        else 
            block_A_loader_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_1_din <= A_1_q0;

    block_A_loader_1_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_1_write <= ap_const_logic_1;
        else 
            block_A_loader_1_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_2_blk_n <= block_A_loader_2_full_n;
        else 
            block_A_loader_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_2_din <= A_2_q0;

    block_A_loader_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_2_write <= ap_const_logic_1;
        else 
            block_A_loader_2_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_3_blk_n <= block_A_loader_3_full_n;
        else 
            block_A_loader_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_3_din <= A_3_q0;

    block_A_loader_3_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_3_write <= ap_const_logic_1;
        else 
            block_A_loader_3_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_4_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_4_blk_n <= block_A_loader_4_full_n;
        else 
            block_A_loader_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_4_din <= A_4_q0;

    block_A_loader_4_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_4_write <= ap_const_logic_1;
        else 
            block_A_loader_4_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_5_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_5_blk_n <= block_A_loader_5_full_n;
        else 
            block_A_loader_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_5_din <= A_5_q0;

    block_A_loader_5_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_5_write <= ap_const_logic_1;
        else 
            block_A_loader_5_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_6_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_6_blk_n <= block_A_loader_6_full_n;
        else 
            block_A_loader_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_6_din <= A_6_q0;

    block_A_loader_6_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_6_write <= ap_const_logic_1;
        else 
            block_A_loader_6_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_7_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_7_blk_n <= block_A_loader_7_full_n;
        else 
            block_A_loader_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_7_din <= A_7_q0;

    block_A_loader_7_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_7_write <= ap_const_logic_1;
        else 
            block_A_loader_7_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_8_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_8_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_8_blk_n <= block_A_loader_8_full_n;
        else 
            block_A_loader_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_8_din <= A_8_q0;

    block_A_loader_8_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_8_write <= ap_const_logic_1;
        else 
            block_A_loader_8_write <= ap_const_logic_0;
        end if; 
    end process;


    block_A_loader_9_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_A_loader_9_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_A_loader_9_blk_n <= block_A_loader_9_full_n;
        else 
            block_A_loader_9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_A_loader_9_din <= A_9_q0;

    block_A_loader_9_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_A_loader_9_write <= ap_const_logic_1;
        else 
            block_A_loader_9_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln33_fu_346_p2 <= "1" when (ap_sig_allocacmp_k_6 = ap_const_lv10_300) else "0";

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln33_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_6),64));
end behav;
