-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gemm_systolic_array_init_block_B_proc_Pipeline_init_block_B is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_B_loader_0199_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_0199_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_0199_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_0199_full_n : IN STD_LOGIC;
    block_B_loader_0199_write : OUT STD_LOGIC;
    block_B_loader_1200_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_1200_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_1200_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_1200_full_n : IN STD_LOGIC;
    block_B_loader_1200_write : OUT STD_LOGIC;
    block_B_loader_2201_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_2201_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_2201_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_2201_full_n : IN STD_LOGIC;
    block_B_loader_2201_write : OUT STD_LOGIC;
    block_B_loader_3202_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_3202_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_3202_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_3202_full_n : IN STD_LOGIC;
    block_B_loader_3202_write : OUT STD_LOGIC;
    block_B_loader_4203_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_4203_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_4203_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_4203_full_n : IN STD_LOGIC;
    block_B_loader_4203_write : OUT STD_LOGIC;
    block_B_loader_5204_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_5204_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_5204_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_5204_full_n : IN STD_LOGIC;
    block_B_loader_5204_write : OUT STD_LOGIC;
    block_B_loader_6205_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_6205_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_6205_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_6205_full_n : IN STD_LOGIC;
    block_B_loader_6205_write : OUT STD_LOGIC;
    block_B_loader_7206_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_7206_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_7206_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_7206_full_n : IN STD_LOGIC;
    block_B_loader_7206_write : OUT STD_LOGIC;
    block_B_loader_8207_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_8207_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_8207_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_8207_full_n : IN STD_LOGIC;
    block_B_loader_8207_write : OUT STD_LOGIC;
    block_B_loader_9208_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_9208_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_9208_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_9208_full_n : IN STD_LOGIC;
    block_B_loader_9208_write : OUT STD_LOGIC;
    block_B_loader_10209_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_10209_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_10209_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_10209_full_n : IN STD_LOGIC;
    block_B_loader_10209_write : OUT STD_LOGIC;
    block_B_loader_11210_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_B_loader_11210_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_11210_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    block_B_loader_11210_full_n : IN STD_LOGIC;
    block_B_loader_11210_write : OUT STD_LOGIC;
    jj_cast : IN STD_LOGIC_VECTOR (5 downto 0);
    B_0_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_0_ce0 : OUT STD_LOGIC;
    B_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_4_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_4_ce0 : OUT STD_LOGIC;
    B_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_5_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_5_ce0 : OUT STD_LOGIC;
    B_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_6_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_6_ce0 : OUT STD_LOGIC;
    B_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_7_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_7_ce0 : OUT STD_LOGIC;
    B_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_8_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_8_ce0 : OUT STD_LOGIC;
    B_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_9_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_9_ce0 : OUT STD_LOGIC;
    B_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_10_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_10_ce0 : OUT STD_LOGIC;
    B_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_11_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    B_11_ce0 : OUT STD_LOGIC;
    B_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gemm_systolic_array_init_block_B_proc_Pipeline_init_block_B is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_300 : STD_LOGIC_VECTOR (9 downto 0) := "1100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal block_B_loader_0199_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal block_B_loader_1200_blk_n : STD_LOGIC;
    signal block_B_loader_2201_blk_n : STD_LOGIC;
    signal block_B_loader_3202_blk_n : STD_LOGIC;
    signal block_B_loader_4203_blk_n : STD_LOGIC;
    signal block_B_loader_5204_blk_n : STD_LOGIC;
    signal block_B_loader_6205_blk_n : STD_LOGIC;
    signal block_B_loader_7206_blk_n : STD_LOGIC;
    signal block_B_loader_8207_blk_n : STD_LOGIC;
    signal block_B_loader_9208_blk_n : STD_LOGIC;
    signal block_B_loader_10209_blk_n : STD_LOGIC;
    signal block_B_loader_11210_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln174_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_88 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_fu_364_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_5 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_i_fu_370_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gemm_systolic_array_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gemm_systolic_array_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    k_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln41_fu_358_p2 = ap_const_lv1_0))) then 
                    k_fu_88 <= add_ln41_fu_364_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_88 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_0_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_10_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_10_ce0 <= ap_const_logic_1;
        else 
            B_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_11_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_11_ce0 <= ap_const_logic_1;
        else 
            B_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_4_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_5_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_6_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_7_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_8_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_8_ce0 <= ap_const_logic_1;
        else 
            B_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_9_address0 <= zext_ln174_fu_378_p1(16 - 1 downto 0);

    B_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_9_ce0 <= ap_const_logic_1;
        else 
            B_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln41_fu_364_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_5) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, block_B_loader_0199_full_n, block_B_loader_1200_full_n, block_B_loader_2201_full_n, block_B_loader_3202_full_n, block_B_loader_4203_full_n, block_B_loader_5204_full_n, block_B_loader_6205_full_n, block_B_loader_7206_full_n, block_B_loader_8207_full_n, block_B_loader_9208_full_n, block_B_loader_10209_full_n, block_B_loader_11210_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_8207_full_n = ap_const_logic_0) or (block_B_loader_7206_full_n = ap_const_logic_0) or (block_B_loader_6205_full_n = ap_const_logic_0) or (block_B_loader_5204_full_n = ap_const_logic_0) or (block_B_loader_4203_full_n = ap_const_logic_0) or (block_B_loader_3202_full_n = ap_const_logic_0) or (block_B_loader_2201_full_n = ap_const_logic_0) or (block_B_loader_1200_full_n = ap_const_logic_0) or (block_B_loader_0199_full_n = ap_const_logic_0) or (block_B_loader_11210_full_n = ap_const_logic_0) or (block_B_loader_10209_full_n = ap_const_logic_0) or (block_B_loader_9208_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, block_B_loader_0199_full_n, block_B_loader_1200_full_n, block_B_loader_2201_full_n, block_B_loader_3202_full_n, block_B_loader_4203_full_n, block_B_loader_5204_full_n, block_B_loader_6205_full_n, block_B_loader_7206_full_n, block_B_loader_8207_full_n, block_B_loader_9208_full_n, block_B_loader_10209_full_n, block_B_loader_11210_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_8207_full_n = ap_const_logic_0) or (block_B_loader_7206_full_n = ap_const_logic_0) or (block_B_loader_6205_full_n = ap_const_logic_0) or (block_B_loader_5204_full_n = ap_const_logic_0) or (block_B_loader_4203_full_n = ap_const_logic_0) or (block_B_loader_3202_full_n = ap_const_logic_0) or (block_B_loader_2201_full_n = ap_const_logic_0) or (block_B_loader_1200_full_n = ap_const_logic_0) or (block_B_loader_0199_full_n = ap_const_logic_0) or (block_B_loader_11210_full_n = ap_const_logic_0) or (block_B_loader_10209_full_n = ap_const_logic_0) or (block_B_loader_9208_full_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, block_B_loader_0199_full_n, block_B_loader_1200_full_n, block_B_loader_2201_full_n, block_B_loader_3202_full_n, block_B_loader_4203_full_n, block_B_loader_5204_full_n, block_B_loader_6205_full_n, block_B_loader_7206_full_n, block_B_loader_8207_full_n, block_B_loader_9208_full_n, block_B_loader_10209_full_n, block_B_loader_11210_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((block_B_loader_8207_full_n = ap_const_logic_0) or (block_B_loader_7206_full_n = ap_const_logic_0) or (block_B_loader_6205_full_n = ap_const_logic_0) or (block_B_loader_5204_full_n = ap_const_logic_0) or (block_B_loader_4203_full_n = ap_const_logic_0) or (block_B_loader_3202_full_n = ap_const_logic_0) or (block_B_loader_2201_full_n = ap_const_logic_0) or (block_B_loader_1200_full_n = ap_const_logic_0) or (block_B_loader_0199_full_n = ap_const_logic_0) or (block_B_loader_11210_full_n = ap_const_logic_0) or (block_B_loader_10209_full_n = ap_const_logic_0) or (block_B_loader_9208_full_n = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(block_B_loader_0199_full_n, block_B_loader_1200_full_n, block_B_loader_2201_full_n, block_B_loader_3202_full_n, block_B_loader_4203_full_n, block_B_loader_5204_full_n, block_B_loader_6205_full_n, block_B_loader_7206_full_n, block_B_loader_8207_full_n, block_B_loader_9208_full_n, block_B_loader_10209_full_n, block_B_loader_11210_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((block_B_loader_8207_full_n = ap_const_logic_0) or (block_B_loader_7206_full_n = ap_const_logic_0) or (block_B_loader_6205_full_n = ap_const_logic_0) or (block_B_loader_5204_full_n = ap_const_logic_0) or (block_B_loader_4203_full_n = ap_const_logic_0) or (block_B_loader_3202_full_n = ap_const_logic_0) or (block_B_loader_2201_full_n = ap_const_logic_0) or (block_B_loader_1200_full_n = ap_const_logic_0) or (block_B_loader_0199_full_n = ap_const_logic_0) or (block_B_loader_11210_full_n = ap_const_logic_0) or (block_B_loader_10209_full_n = ap_const_logic_0) or (block_B_loader_9208_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_358_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln41_fu_358_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_88, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k_5 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_k_5 <= k_fu_88;
        end if; 
    end process;


    block_B_loader_0199_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_0199_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_0199_blk_n <= block_B_loader_0199_full_n;
        else 
            block_B_loader_0199_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_0199_din <= B_0_q0;

    block_B_loader_0199_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_0199_write <= ap_const_logic_1;
        else 
            block_B_loader_0199_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_10209_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_10209_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_10209_blk_n <= block_B_loader_10209_full_n;
        else 
            block_B_loader_10209_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_10209_din <= B_10_q0;

    block_B_loader_10209_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_10209_write <= ap_const_logic_1;
        else 
            block_B_loader_10209_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_11210_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_11210_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_11210_blk_n <= block_B_loader_11210_full_n;
        else 
            block_B_loader_11210_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_11210_din <= B_11_q0;

    block_B_loader_11210_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_11210_write <= ap_const_logic_1;
        else 
            block_B_loader_11210_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_1200_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_1200_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_1200_blk_n <= block_B_loader_1200_full_n;
        else 
            block_B_loader_1200_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_1200_din <= B_1_q0;

    block_B_loader_1200_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_1200_write <= ap_const_logic_1;
        else 
            block_B_loader_1200_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_2201_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_2201_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_2201_blk_n <= block_B_loader_2201_full_n;
        else 
            block_B_loader_2201_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_2201_din <= B_2_q0;

    block_B_loader_2201_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_2201_write <= ap_const_logic_1;
        else 
            block_B_loader_2201_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_3202_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_3202_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_3202_blk_n <= block_B_loader_3202_full_n;
        else 
            block_B_loader_3202_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_3202_din <= B_3_q0;

    block_B_loader_3202_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_3202_write <= ap_const_logic_1;
        else 
            block_B_loader_3202_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_4203_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_4203_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_4203_blk_n <= block_B_loader_4203_full_n;
        else 
            block_B_loader_4203_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_4203_din <= B_4_q0;

    block_B_loader_4203_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_4203_write <= ap_const_logic_1;
        else 
            block_B_loader_4203_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_5204_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_5204_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_5204_blk_n <= block_B_loader_5204_full_n;
        else 
            block_B_loader_5204_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_5204_din <= B_5_q0;

    block_B_loader_5204_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_5204_write <= ap_const_logic_1;
        else 
            block_B_loader_5204_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_6205_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_6205_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_6205_blk_n <= block_B_loader_6205_full_n;
        else 
            block_B_loader_6205_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_6205_din <= B_6_q0;

    block_B_loader_6205_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_6205_write <= ap_const_logic_1;
        else 
            block_B_loader_6205_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_7206_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_7206_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_7206_blk_n <= block_B_loader_7206_full_n;
        else 
            block_B_loader_7206_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_7206_din <= B_7_q0;

    block_B_loader_7206_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_7206_write <= ap_const_logic_1;
        else 
            block_B_loader_7206_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_8207_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_8207_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_8207_blk_n <= block_B_loader_8207_full_n;
        else 
            block_B_loader_8207_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_8207_din <= B_8_q0;

    block_B_loader_8207_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_8207_write <= ap_const_logic_1;
        else 
            block_B_loader_8207_write <= ap_const_logic_0;
        end if; 
    end process;


    block_B_loader_9208_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, block_B_loader_9208_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            block_B_loader_9208_blk_n <= block_B_loader_9208_full_n;
        else 
            block_B_loader_9208_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_B_loader_9208_din <= B_9_q0;

    block_B_loader_9208_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            block_B_loader_9208_write <= ap_const_logic_1;
        else 
            block_B_loader_9208_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln41_fu_358_p2 <= "1" when (ap_sig_allocacmp_k_5 = ap_const_lv10_300) else "0";
    tmp_i_fu_370_p3 <= (ap_sig_allocacmp_k_5 & jj_cast);
    zext_ln174_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_370_p3),64));
end behav;
